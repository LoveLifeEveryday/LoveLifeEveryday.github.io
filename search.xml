<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>带你封装自己的MVP+Retrofit+RxJava2框架（二）</title>
      <link href="/2020/02/08/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-er/"/>
      <url>/2020/02/08/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-er/</url>
      
        <content type="html"><![CDATA[<h1 id="带你封装自己的MVP-Retrofit-RxJava2框架（二）"><a href="#带你封装自己的MVP-Retrofit-RxJava2框架（二）" class="headerlink" title="带你封装自己的MVP+Retrofit+RxJava2框架（二）"></a>带你封装自己的MVP+Retrofit+RxJava2框架（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本篇文章是针对上一篇文章：<a href="http://xcynice.xyz/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-yi/" target="_blank" rel="noopener">带你封装自己的MVP+Retrofit+RxJava2框架（一）</a>的进一步封装改进，建议在看完上一篇文章后，再食用本文效果更佳！</p><p>文本已经收录到我的Github个人博客，欢迎大佬们光临寒舍：<a href="http://xcynice.xyz/" target="_blank" rel="noopener">我的GIthub博客</a></p></blockquote><h2 id="本篇文章需要已经具备的知识："><a href="#本篇文章需要已经具备的知识：" class="headerlink" title="本篇文章需要已经具备的知识："></a>本篇文章需要已经具备的知识：</h2><ul><li><strong>MVP</strong>的概念和基本使用</li><li><strong>Retrofit</strong>框架的基本使用</li><li><strong>RxJava2</strong>框架的基本使用</li><li><strong>ButterKnife</strong>框架的基本使用</li><li><strong>Base</strong>基类的概念</li><li><a href="https://github.com/yechaoa/YUtils" target="_blank" rel="noopener">YUtils</a>的简单使用</li><li><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="noopener">BaseRecyclerViewAdapterHelper</a>的简单使用</li></ul><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li>Base实体类的封装</li><li>Base异常类的封装</li><li>Base观察者的封装</li><li>RxJava线程自动调度的小技巧</li><li>进行网络请求自动显示加载中</li><li>完成网络请求自动关闭加载中</li><li>自动处理异常信息</li><li>Cookie自动持久化与Retrofit的协同使用</li><li>接口管理Retrofit请求接口的优美方式</li></ul><h2 id="一-为什么要封装这套框架"><a href="#一-为什么要封装这套框架" class="headerlink" title="一.为什么要封装这套框架"></a>一.为什么要封装这套框架</h2><p>​        如<a href="http://xcynice.xyz/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-yi/" target="_blank" rel="noopener">上一篇文章</a>所说，在MVP模式日渐流行的时候，封装一套MVP框架，不仅对日常的开发大大便利，还能提前积累一下未来在实际工作中的技巧，并且，良好的封装和规范使用还能减少开发中的各种令人头疼的BUG。</p><p>​        有人可能会问：“你上一篇不是也写了MVP框架吗？你这篇难道还是一样的吗？难道你是换汤不换药吗？”</p><p>​        其实，一开始笔者也以为我上一篇文章封装的MVP框架已经够不错了，但是，在笔者某天看了<a href="https://github.com/yechaoa" target="_blank" rel="noopener">yechaoa</a>大神<strong>玩安卓java</strong>的源码后，被其封装的MVP框架的所折服，因此第一时间写这篇文章，想向大家分享下，笔者从中吸取的经验，希望能够帮助到各位！</p><p>​        本文相对<a href="http://xcynice.xyz/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-yi/" target="_blank" rel="noopener">上一篇文章</a>的改进地方有下面几点：</p><ul><li><strong>精简了Activity基类</strong>，将原来的两个BaseActivity和BaseMvpActivity精简为一个BaseActivity</li><li><strong>修复了</strong>当继承了Activity基类，不添加presenter会导致<strong>空指针</strong>的bug</li><li>添加了<strong>网络请求</strong>可选择<strong>自动</strong>显示加载中和自动关闭加载中的功能</li><li>添加了<strong>自动处理异常</strong>信息的功能</li><li>封装了一个<strong>Bean</strong>对象的<strong>基类</strong></li><li><strong>精简了RxJava</strong>的用法，因此可以省去Model类的编写</li><li><strong>封装</strong>了一个<strong>Observer</strong>的基类</li><li>增添了<strong>cookie自动持久化</strong>的功能</li><li><strong>改进</strong>了<strong>RetrofitService</strong>的封装，将Retrofit接口的实例化引入基类</li></ul><h2 id="二-核心用法与样例分析"><a href="#二-核心用法与样例分析" class="headerlink" title="二.核心用法与样例分析"></a>二.核心用法与样例分析</h2><blockquote><p>本项目基于Android X 进行构建，完整代码可在我的github上下载:<a href="https://github.com/LoveLifeEveryday/RxJava2_Retrofit_MVP" target="_blank" rel="noopener">带你封装自己的MVP+Retrofit+RxJava2框架(二)</a></p></blockquote><p>首先，可以看一下笔者项目的<strong>基本结构</strong></p><p><img src="https://i.loli.net/2020/02/08/GxFTq4ntgHAapOS.png" alt="项目基本结构"></p><p>为了给大家模拟带<strong>自动获取Cookie</strong>的功能,所以笔者设计了一个具有<strong>登陆，注册，收藏</strong>功能的Demo</p><blockquote><p>在这里特别感谢<a href="https://www.wanandroid.com/" target="_blank" rel="noopener">玩安卓</a>提供的<a href="https://www.wanandroid.com/blog/show/2" target="_blank" rel="noopener">API</a></p></blockquote><p><img src="https://i.loli.net/2020/02/08/5OjmlFoMG3kcX2V.png" alt="Demo截图"></p><p>笔者在Demo中用到的框架如下</p><pre class=" language-groovy"><code class="language-groovy">    implementation <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    implementation <span class="token string">'androidx.appcompat:appcompat:1.1.0'</span>    implementation <span class="token string">'androidx.legacy:legacy-support-v4:1.0.0'</span>    implementation <span class="token string">'androidx.constraintlayout:constraintlayout:1.1.3'</span>    testImplementation <span class="token string">'junit:junit:4.12'</span>    androidTestImplementation <span class="token string">'androidx.test.ext:junit:1.1.1'</span>    androidTestImplementation <span class="token string">'androidx.test.espresso:espresso-core:3.2.0'</span>    implementation <span class="token string">'com.google.android.material:material:1.1.0'</span>    <span class="token comment" spellcheck="true">//cardView</span>    implementation <span class="token string">'androidx.cardview:cardview:1.0.0'</span>    <span class="token comment" spellcheck="true">/*retrofit、rxjava*/</span>    implementation <span class="token string">'com.squareup.retrofit2:retrofit:2.6.2'</span>    implementation <span class="token string">'com.squareup.retrofit2:adapter-rxjava2:2.4.0'</span>    implementation <span class="token string">'com.squareup.retrofit2:converter-gson:2.4.0'</span>    implementation <span class="token string">'io.reactivex.rxjava2:rxandroid:2.0.2'</span>    implementation <span class="token string">'com.squareup.okhttp3:logging-interceptor:3.4.1'</span>    <span class="token comment" spellcheck="true">/*glide*/</span>    implementation <span class="token string">'com.github.bumptech.glide:glide:4.10.0'</span>    annotationProcessor <span class="token string">'com.github.bumptech.glide:compiler:4.10.0'</span>    <span class="token comment" spellcheck="true">/*butterknife*/</span>    implementation <span class="token string">'com.jakewharton:butterknife:10.2.0'</span>    annotationProcessor <span class="token string">'com.jakewharton:butterknife-compiler:10.2.0'</span>    <span class="token comment" spellcheck="true">/*YUtils*/</span>    implementation <span class="token string">'com.github.yechaoa:YUtils:2.1.0'</span>    <span class="token comment" spellcheck="true">/*BRVAH*/</span>    implementation <span class="token string">'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50'</span>    <span class="token comment" spellcheck="true">/*banner*/</span>    implementation <span class="token string">'com.youth.banner:banner:1.4.10'</span></code></pre><p>下面笔者将为大家详细介绍每个类的相关信息</p><h3 id="2-1-base基类"><a href="#2-1-base基类" class="headerlink" title="2.1 base基类"></a>2.1 base基类</h3><h4 id="2-1-1-BaseActivity"><a href="#2-1-1-BaseActivity" class="headerlink" title="2.1.1 BaseActivity"></a>2.1.1 BaseActivity</h4><blockquote><p>BaseActivity相对于笔者上一个版本的MVP框架,改进的地方是：将两个基类Activity合并为一个BaseActivity，并且在其中封装了进度条的显示和隐藏的方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseActivity * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span><span class="token operator">&lt;</span>P <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> P presenter<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> P <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置竖屏</span>        <span class="token function">setRequestedOrientation</span><span class="token punctuation">(</span>ActivityInfo<span class="token punctuation">.</span>SCREEN_ORIENTATION_PORTRAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        presenter <span class="token operator">=</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//销毁时，解除绑定</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        YUtils<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"加载中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        YUtils<span class="token punctuation">.</span><span class="token function">dismissLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 可以处理异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorCode</span><span class="token punctuation">(</span>BaseBean bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 启动activity     *     * @param activity 当前活动     * @param isFinish 是否结束当前活动     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startActivity</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> activity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFinish<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFinish<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-2-BaseFragment"><a href="#2-1-2-BaseFragment" class="headerlink" title="2.1.2 BaseFragment"></a>2.1.2 BaseFragment</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseFragment * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseFragment</span><span class="token operator">&lt;</span>P <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token keyword">implements</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Unbinder unbinder<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Context mContext<span class="token punctuation">;</span>    <span class="token keyword">protected</span> P presenter<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> P <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unbinder <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到context,在后面的子类Fragment中都可以直接调用</span>        mContext <span class="token operator">=</span> ActivityUtil<span class="token punctuation">.</span><span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        presenter <span class="token operator">=</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//do something</span>        unbinder<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//销毁时，解除绑定</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorCode</span><span class="token punctuation">(</span>BaseBean bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 显示加载中     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        YUtils<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span>ActivityUtil<span class="token punctuation">.</span><span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"加载中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 隐藏加载中     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        YUtils<span class="token punctuation">.</span><span class="token function">dismissLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-3-BasePresenter"><a href="#2-1-3-BasePresenter" class="headerlink" title="2.1.3 BasePresenter"></a>2.1.3 BasePresenter</h4><blockquote><p>BasePresenter相对于笔者上一个版本的MVP框架,改进的地方是：将线程的调度写入了addDisposable中，并改写了addDisposable方法，使得调用方式更加简单优美</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BasePresenter * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasePresenter</span><span class="token operator">&lt;</span>V <span class="token keyword">extends</span> <span class="token class-name">BaseView</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> CompositeDisposable compositeDisposable<span class="token punctuation">;</span>    <span class="token keyword">public</span> V baseView<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这个后面可以直接用   Example：apiServer.login(username, password)；     */</span>    <span class="token keyword">protected</span> API<span class="token punctuation">.</span>WAZApi apiServer <span class="token operator">=</span> RetrofitService<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApiService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BasePresenter</span><span class="token punctuation">(</span>V baseView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseView <span class="token operator">=</span> baseView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解除绑定     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        baseView <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token function">removeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回 view     */</span>    <span class="token keyword">public</span> V <span class="token function">getBaseView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> baseView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDisposable</span><span class="token punctuation">(</span>Observable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> observable<span class="token punctuation">,</span> BaseObserver observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>compositeDisposable <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            compositeDisposable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        compositeDisposable                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">subscribeWith</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>compositeDisposable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            compositeDisposable<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-4-BaseObserver"><a href="#2-1-4-BaseObserver" class="headerlink" title="2.1.4 BaseObserver"></a>2.1.4 BaseObserver</h4><blockquote><p>Observer的基类，提供了自动显示和自动隐藏进度条的方法，对内处理了onStart，onError，onComplete方法，对外只提供了onSuccess和onError方法，符合使用习惯</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseObserver * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseObserver</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">DisposableObserver</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> BaseView view<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isShowDialog<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BaseObserver</span><span class="token punctuation">(</span>BaseView view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 带进度条的初始化方法     *     * @param view         view     * @param isShowDialog 是否显示进度条     */</span>    <span class="token keyword">public</span> <span class="token function">BaseObserver</span><span class="token punctuation">(</span>BaseView view<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isShowDialog <span class="token operator">=</span> isShowDialog<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>T o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onSuccess</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BaseException be<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//自定义异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">BaseException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                be <span class="token operator">=</span> <span class="token punctuation">(</span>BaseException<span class="token punctuation">)</span> e<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//回调到view层 处理 或者根据项目情况处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 处理登录失效 更新</span>                    view<span class="token punctuation">.</span><span class="token function">onErrorCode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseBean</span><span class="token punctuation">(</span>be<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> be<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">onError</span><span class="token punctuation">(</span>be<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//系统异常</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">HttpException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//HTTP错误</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>BAD_NETWORK_MSG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ConnectException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">UnknownHostException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//连接错误</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>CONNECT_ERROR_MSG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">InterruptedIOException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//连接超时</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>CONNECT_TIMEOUT_MSG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">JsonParseException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">JSONException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">ParseException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//解析错误</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>PARSE_ERROR_MSG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>OTHER_MSG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>OTHER_MSG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">onError</span><span class="token punctuation">(</span>be<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>T o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-5-BaseException"><a href="#2-1-5-BaseException" class="headerlink" title="2.1.5 BaseException"></a>2.1.5 BaseException</h4><blockquote><p>异常的基类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseException * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseException</span> <span class="token keyword">extends</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 解析数据失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PARSE_ERROR_MSG <span class="token operator">=</span> <span class="token string">"解析数据失败"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 网络问题     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BAD_NETWORK_MSG <span class="token operator">=</span> <span class="token string">"网络问题"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 连接错误     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONNECT_ERROR_MSG <span class="token operator">=</span> <span class="token string">"连接错误"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 连接超时     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONNECT_TIMEOUT_MSG <span class="token operator">=</span> <span class="token string">"连接超时"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 未知错误     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String OTHER_MSG <span class="token operator">=</span> <span class="token string">"未知错误"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String errorMsg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BaseException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BaseException</span><span class="token punctuation">(</span>String errorMsg<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BaseException</span><span class="token punctuation">(</span><span class="token keyword">int</span> errorCode<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> message<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-6-BaseBean"><a href="#2-1-6-BaseBean" class="headerlink" title="2.1.6 BaseBean"></a>2.1.6 BaseBean</h4><blockquote><p>实体类的基类，方便处理返回的json数据，具体的写法根据每个API而定</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseBean 实体类的基类 * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseBean</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * data :     * errorCode : 0     * errorMsg :     */</span>    <span class="token keyword">public</span> T data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">;</span>    <span class="token keyword">public</span> String errorMsg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BaseBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-7-BaseView"><a href="#2-1-7-BaseView" class="headerlink" title="2.1.7 BaseView"></a>2.1.7 BaseView</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseView * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onErrorCode</span><span class="token punctuation">(</span>BaseBean bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-http"><a href="#2-2-http" class="headerlink" title="2.2 http"></a>2.2 http</h3><h4 id="2-2-1-cookie"><a href="#2-2-1-cookie" class="headerlink" title="2.2.1 cookie"></a>2.2.1 cookie</h4><blockquote><p>持久化cookie,因为代码太多，这里只展示一个类的代码，详细代码请前往我的Github<a href="https://github.com/LoveLifeEveryday/RxJava2_Retrofit_MVP2/tree/master/app/src/main/java/com/users/xucanyou666/rxjava2_retrofit_mvp2/http/cookie" target="_blank" rel="noopener">查看</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>rxjava2_retrofit_mvp2<span class="token punctuation">.</span>http<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>CookieJar<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>HttpUrl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by yechao on 2019/11/19/019. * Describe : */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookiesManager</span> <span class="token keyword">implements</span> <span class="token class-name">CookieJar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> PersistentCookieStore cookieStore<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CookiesManager</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cookieStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersistentCookieStore</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveFromResponse</span><span class="token punctuation">(</span>HttpUrl url<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Cookie<span class="token operator">></span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie item <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cookieStore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Cookie<span class="token operator">></span> <span class="token function">loadForRequest</span><span class="token punctuation">(</span>HttpUrl url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cookieStore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-2-gson"><a href="#2-2-2-gson" class="headerlink" title="2.2.2 gson"></a>2.2.2 gson</h4><blockquote><p>重写ResponseBodyConverter对json预处理，这里只展示一个类的代码，详细代码请前往我的Github<a href="https://github.com/LoveLifeEveryday/RxJava2_Retrofit_MVP2/tree/master/app/src/main/java/com/users/xucanyou666/rxjava2_retrofit_mvp2/http/gson" target="_blank" rel="noopener">查看</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by yechao on 2019/11/18/018. * Describe : 重写ResponseBodyConverter对json预处理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseResponseBodyConverter</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>ResponseBody<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Gson gson<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> TypeAdapter<span class="token operator">&lt;</span>T<span class="token operator">></span> adapter<span class="token punctuation">;</span>    <span class="token function">BaseResponseBodyConverter</span><span class="token punctuation">(</span>Gson gson<span class="token punctuation">,</span> TypeAdapter<span class="token operator">&lt;</span>T<span class="token operator">></span> adapter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gson <span class="token operator">=</span> gson<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adapter <span class="token operator">=</span> adapter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">convert</span><span class="token punctuation">(</span>ResponseBody value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String jsonString <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            JSONObject object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> code <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"errorCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String data<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//错误信息</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//失效</span>                    data <span class="token operator">=</span> <span class="token string">"登录失效，请重新登录"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    data <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//异常处理</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//正确返回整个json</span>            <span class="token keyword">return</span> adapter<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据解析异常即json格式有变动</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>PARSE_ERROR_MSG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            value<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-3-API"><a href="#2-2-3-API" class="headerlink" title="2.2.3 API"></a>2.2.3 API</h4><blockquote><p>随着项目日渐庞大，请求也越来越多，不可能每个请求都使用一个接口，这样不仅造成浪费，更是不方便管理，因此，新建一个API作为Retrofit的管理类，用一个接口管理所有网络请求，可以有效改善代码质量</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : API * 接口的管理类 * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">API</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String BASE_URL <span class="token operator">=</span> <span class="token string">"https://www.wanandroid.com/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WAZApi</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//-----------------------【首页相关】----------------------</span>        <span class="token comment" spellcheck="true">//首页文章列表 这里的{}是填入页数</span>        <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"article/list/{page}/json"</span><span class="token punctuation">)</span>        Observable<span class="token operator">&lt;</span>BaseBean<span class="token operator">&lt;</span>Article<span class="token operator">>></span> <span class="token function">getArticleList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> Integer page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//-----------------------【登录注册】----------------------</span>        <span class="token comment" spellcheck="true">//登录</span>        <span class="token annotation punctuation">@FormUrlEncoded</span>        <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"user/login"</span><span class="token punctuation">)</span>        Observable<span class="token operator">&lt;</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">>></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册</span>        <span class="token annotation punctuation">@FormUrlEncoded</span>        <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"user/register"</span><span class="token punctuation">)</span>        Observable<span class="token operator">&lt;</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">>></span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"repassword"</span><span class="token punctuation">)</span> String repassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//-----------------------【  收藏  】----------------------</span>        <span class="token comment" spellcheck="true">//收藏站内文章</span>        <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"lg/collect/{id}/json"</span><span class="token punctuation">)</span>        Observable<span class="token operator">&lt;</span>BaseBean<span class="token operator">></span> <span class="token function">collectIn</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取消收藏---文章列表</span>        <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"lg/uncollect_originId/{id}/json"</span><span class="token punctuation">)</span>        Observable<span class="token operator">&lt;</span>BaseBean<span class="token operator">></span> <span class="token function">uncollect</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-4-RetrofitService"><a href="#2-2-4-RetrofitService" class="headerlink" title="2.2.4 RetrofitService"></a>2.2.4 RetrofitService</h4><blockquote><p>Retrofit的配置类，在里面初始化了apiServer对象，并配置了日志信息，超时时间，Cookie持久化，用了静态内部类的单例模式</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token operator">*</span> Description <span class="token operator">:</span> RetrofitService <span class="token operator">*</span> <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> XuCanyou666 <span class="token operator">*</span> <span class="token annotation punctuation">@date</span> <span class="token number">2020</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">8</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetrofitService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> RetrofitService apiRetrofit<span class="token punctuation">;</span>    <span class="token keyword">private</span> API<span class="token punctuation">.</span>WAZApi apiServer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//单例调用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RetrofitService <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>apiRetrofit <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>apiRetrofit <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    apiRetrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetrofitService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> apiRetrofit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取api对象</span>    <span class="token keyword">public</span> API<span class="token punctuation">.</span>WAZApi <span class="token function">getApiService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> apiServer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化retrofit</span>    <span class="token keyword">private</span> <span class="token function">RetrofitService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置okhttp并设置时间、日志信息和cookies</span>        HttpLoggingInterceptor httpLoggingInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpLoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpLoggingInterceptor<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span>HttpLoggingInterceptor<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>BODY<span class="token punctuation">)</span><span class="token punctuation">;</span>        OkHttpClient okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>httpLoggingInterceptor<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//设置超时时间</span>                <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//设置Cookie持久化</span>                <span class="token punctuation">.</span><span class="token function">cookieJar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CookiesManager</span><span class="token punctuation">(</span>YUtils<span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关联okhttp并加上rxjava和gson的配置和baseurl</span>        Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>BaseConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span>RxJava2CallAdapterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>API<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        apiServer <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>API<span class="token punctuation">.</span>WAZApi<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-bean"><a href="#2-3-bean" class="headerlink" title="2.3 bean"></a>2.3 bean</h3><blockquote><p>这里的带有嵌套的实体类看似很复杂，其实可以通过一个<a href="http://www.bejson.com/json2javapojo/new/" target="_blank" rel="noopener">在线JSON字符串转Java实体类</a>的工具进行生成，需要注意的是，不要将BaseBean的那一层导入到实体类中</p></blockquote><h4 id="2-3-1-Article"><a href="#2-3-1-Article" class="headerlink" title="2.3.1 Article"></a>2.3.1 Article</h4><blockquote><p>文章内容的实体类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : Article * * @author XuCanyou666 * @date 2020/2/8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * curPage : 2     * datas : [{"apkLink":"","author":"叶应是叶","chapterId":67,"chapterName":"网络基......."}]     * offset : 20     * over : false     * pageCount : 62     * size : 20     * total : 1224     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> curPage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> offset<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> over<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> pageCount<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> total<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>DataDetailBean<span class="token operator">></span> datas<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DataDetailBean</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * apkLink :         * author : 叶应是叶         * chapterId : 67         * chapterName : 网络基础         * collect : false         * courseId : 13         * desc :         * envelopePic :         * fresh : false         * id : 2809         * link : https://www.jianshu.com/p/6d2f324c8f42         * niceDate : 2018-04-12         * origin :         * projectLink :         * publishTime : 1523532264000         * superChapterId : 98         * superChapterName : 网络访问         * tags : []         * title : 在 Android 设备上搭建 Web 服务器         * type : 0         * visible : 1         * zan : 0         */</span>        <span class="token keyword">public</span> String apkLink<span class="token punctuation">;</span>        <span class="token keyword">public</span> String author<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> chapterId<span class="token punctuation">;</span>        <span class="token keyword">public</span> String chapterName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> collect<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> courseId<span class="token punctuation">;</span>        <span class="token keyword">public</span> String desc<span class="token punctuation">;</span>        <span class="token keyword">public</span> String envelopePic<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> fresh<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> originId<span class="token punctuation">;</span>        <span class="token keyword">public</span> String link<span class="token punctuation">;</span>        <span class="token keyword">public</span> String niceDate<span class="token punctuation">;</span>        <span class="token keyword">public</span> String origin<span class="token punctuation">;</span>        <span class="token keyword">public</span> String projectLink<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> publishTime<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> superChapterId<span class="token punctuation">;</span>        <span class="token keyword">public</span> String superChapterName<span class="token punctuation">;</span>        <span class="token keyword">public</span> String title<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> visible<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> zan<span class="token punctuation">;</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> tags<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-2-User"><a href="#2-3-2-User" class="headerlink" title="2.3.2 User"></a>2.3.2 User</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * GitHub : https://github.com/yechaoa * CSDN : http://blog.csdn.net/yechaoa * &lt;p> * Created by yechao on 2018/5/2. * Describe : */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * collectIds : []     * email :     * icon :     * id : 3     * password : 111111     * type : 0     * username : 111111     */</span>    <span class="token keyword">public</span> String email<span class="token punctuation">;</span>    <span class="token keyword">public</span> String icon<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span>    <span class="token keyword">public</span> String username<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> collectIds<span class="token punctuation">;</span>    <span class="token keyword">public</span> String repassword<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-module"><a href="#2-4-module" class="headerlink" title="2.4 module"></a>2.4 module</h3><blockquote><p>这里分为每个模块进行管理，本Demo有Login,Register,Home总共3个模块,在这里仅说明一个模块，其他的模块的写法也是类似的，具体其他模块的写法，可以上<a href="https://github.com/LoveLifeEveryday/RxJava2_Retrofit_MVP2/tree/master/app/src/main/java/com/users/xucanyou666/rxjava2_retrofit_mvp2/module" target="_blank" rel="noopener">Github</a>查看</p></blockquote><h4 id="2-4-1-login"><a href="#2-4-1-login" class="headerlink" title="2.4.1 login"></a>2.4.1 login</h4><h5 id="2-4-1-1-ILoginView"><a href="#2-4-1-1-ILoginView" class="headerlink" title="2.4.1.1 ILoginView"></a>2.4.1.1 ILoginView</h5><blockquote><p>LoginView层的接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : ILoginView * * @author XuCanyou666 * @date 2020/2/8 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoginView</span> <span class="token keyword">extends</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 显示登陆成功     *     * @param successMessage 成功信息     */</span>    <span class="token keyword">void</span> <span class="token function">showLoginSuccess</span><span class="token punctuation">(</span>String successMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 显示登陆失败     *     * @param errorMessage 失败信息     */</span>    <span class="token keyword">void</span> <span class="token function">showLoginFailed</span><span class="token punctuation">(</span>String errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">doSuccess</span><span class="token punctuation">(</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">></span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2-4-1-2-LoginPresenter"><a href="#2-4-1-2-LoginPresenter" class="headerlink" title="2.4.1.2 LoginPresenter"></a>2.4.1.2 LoginPresenter</h5><blockquote><p>这里因为RxJava经过封装后，model层的代码太少，所以将Model直接写入Presenter中</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : LoginPresenter * * @author XuCanyou666 * @date 2020/2/8 */</span><span class="token keyword">class</span> <span class="token class-name">LoginPresenter</span> <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">&lt;</span>ILoginView<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">LoginPresenter</span><span class="token punctuation">(</span>ILoginView baseView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>baseView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addDisposable</span><span class="token punctuation">(</span>apiServer<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BaseObserver</span><span class="token operator">&lt;</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">>></span><span class="token punctuation">(</span>baseView<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">></span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>                baseView<span class="token punctuation">.</span><span class="token function">showLoginSuccess</span><span class="token punctuation">(</span><span class="token string">"登录成功（￣▽￣）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                baseView<span class="token punctuation">.</span><span class="token function">doSuccess</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                baseView<span class="token punctuation">.</span><span class="token function">showLoginFailed</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"(°∀°)ﾉ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-4-1-3-LoginTextWatcher"><a href="#2-4-1-3-LoginTextWatcher" class="headerlink" title="2.4.1.3 LoginTextWatcher"></a>2.4.1.3 LoginTextWatcher</h5><blockquote><p>登陆界面输入框的监听器</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * TextInputLayout监听器 * created by xucanyou666 * on 2020/2/7 18:09 * email：913710642@qq.com */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginTextWatcher</span> <span class="token keyword">implements</span> <span class="token class-name">android<span class="token punctuation">.</span>text<span class="token punctuation">.</span>TextWatcher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TextInputLayout mTilUsername<span class="token punctuation">;</span>    <span class="token keyword">private</span> TextInputLayout mTilPassword<span class="token punctuation">;</span>     <span class="token function">LoginTextWatcher</span><span class="token punctuation">(</span>TextInputLayout username<span class="token punctuation">,</span> TextInputLayout password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTilUsername <span class="token operator">=</span> username<span class="token punctuation">;</span>        mTilPassword <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeTextChanged</span><span class="token punctuation">(</span>CharSequence charSequence<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTextChanged</span><span class="token punctuation">(</span>CharSequence charSequence<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterTextChanged</span><span class="token punctuation">(</span>Editable s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkInput</span><span class="token punctuation">(</span>mTilUsername<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkInput</span><span class="token punctuation">(</span>mTilPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断输入内容是否合法     *     * @param textInputLayout textInputLayout     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkInput</span><span class="token punctuation">(</span>TextInputLayout textInputLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> textInputLayout<span class="token punctuation">.</span><span class="token function">getCounterMaxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"输入内容超过上限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> textInputLayout<span class="token punctuation">.</span><span class="token function">getCounterMaxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"最少6位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-4-1-4-LoginActivity"><a href="#2-4-1-4-LoginActivity" class="headerlink" title="2.4.1.4 LoginActivity"></a>2.4.1.4 LoginActivity</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : LoginActivity * * @author XuCanyou666 * @date 2020/2/8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span><span class="token operator">&lt;</span>LoginPresenter<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">ILoginView</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>et_username<span class="token punctuation">)</span>    EditText mEtUsername<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>til_username<span class="token punctuation">)</span>    TextInputLayout mTilUsername<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>et_password<span class="token punctuation">)</span>    EditText mEtPassword<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>til_password<span class="token punctuation">)</span>    TextInputLayout mTilPassword<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_login<span class="token punctuation">)</span>    Button mBtnLogin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_register<span class="token punctuation">)</span>    Button mBtnRegister<span class="token punctuation">;</span>    <span class="token keyword">private</span> String mUsername<span class="token punctuation">;</span>    <span class="token keyword">private</span> String mPassword<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> LoginPresenter <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginPresenter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_login<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LoginTextWatcher textWatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginTextWatcher</span><span class="token punctuation">(</span>mTilUsername<span class="token punctuation">,</span> mTilPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        mEtUsername<span class="token punctuation">.</span><span class="token function">addTextChangedListener</span><span class="token punctuation">(</span>textWatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        mEtPassword<span class="token punctuation">.</span><span class="token function">addTextChangedListener</span><span class="token punctuation">(</span>textWatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoginSuccess</span><span class="token punctuation">(</span>String successMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ToastUtil<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>successMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoginFailed</span><span class="token punctuation">(</span>String errorMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ToastUtil<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSuccess</span><span class="token punctuation">(</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">></span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存进sp里面</span>        SpUtil<span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span>GlobalConstant<span class="token punctuation">.</span>IS_LOGIN<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SpUtil<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>GlobalConstant<span class="token punctuation">.</span>USERNAME<span class="token punctuation">,</span> user<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        SpUtil<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>GlobalConstant<span class="token punctuation">.</span>PASSWORD<span class="token punctuation">,</span> user<span class="token punctuation">.</span>data<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断账号和密码输入是否正确     *     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mUsername <span class="token operator">=</span> mEtUsername<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mPassword <span class="token operator">=</span> mEtPassword<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>mUsername<span class="token punctuation">,</span> mTilUsername<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>mPassword<span class="token punctuation">,</span> mTilPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断输入是否正确     *     * @param string          输入的内容     * @param textInputLayout textInputLayout控件     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>String string<span class="token punctuation">,</span> TextInputLayout textInputLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> textInputLayout<span class="token punctuation">.</span><span class="token function">getCounterMaxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> textInputLayout<span class="token punctuation">.</span><span class="token function">getCounterMaxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span><span class="token punctuation">{</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_login<span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_register<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewClicked</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_login<span class="token operator">:</span>                YUtils<span class="token punctuation">.</span><span class="token function">closeSoftKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    presenter<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>mUsername<span class="token punctuation">,</span> mPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    ToastUtil<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string">"填写错误 (°∀°)ﾉ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_register<span class="token operator">:</span>                YUtils<span class="token punctuation">.</span><span class="token function">closeSoftKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>RegisterActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三-我在使用中遇到的问题"><a href="#三-我在使用中遇到的问题" class="headerlink" title="三.我在使用中遇到的问题"></a>三.我在使用中遇到的问题</h2><h3 id="3-1-颜色的资源文件出错"><a href="#3-1-颜色的资源文件出错" class="headerlink" title="3.1 颜色的资源文件出错"></a>3.1 颜色的资源文件出错</h3><p>有一天， 当我点开我的colors.xml资源文件的时候，发现是下图这个样子</p><p><img src="https://s2.ax1x.com/2020/02/08/1RhyPe.png" alt="colors.xml"></p><p>然后当鼠标的光标移动到红色标记处，发现</p><blockquote><p>The color “colorPrimary” in values has no declaration in the base values folder; this can lead to crashes when the resource is queried in a configuration that does not match this qualifier less…</p></blockquote><p>接着我翻译了一下:</p><blockquote><p>值中的颜色“colorPrimary”在基本值folde中没有声明</p></blockquote><p>懵逼了，我不是声明了吗….最后还是百度到了结果</p><p>解决方式是：先把colors文件剪切下来，再粘回去。</p><p>感觉是AS的BUG….我用的AS版本是3.5.1</p><h3 id="3-2-导入依赖的时候提示Failed-to-resolve"><a href="#3-2-导入依赖的时候提示Failed-to-resolve" class="headerlink" title="3.2 导入依赖的时候提示Failed to resolve"></a>3.2 导入依赖的时候提示Failed to resolve</h3><p><img src="https://s2.ax1x.com/2020/02/08/1R4Byn.png" alt="Failed to resolve"></p><p>当然百度了一下，解决方式是：在根目录的build.gradle中添加maven</p><p>就是下面这样</p><p><img src="https://i.loli.net/2020/02/08/278XKBGTmtvRJNo.png" alt="image.png"></p><h3 id="3-3-在进入文章列表界面的时候，进度条不会自动隐藏"><a href="#3-3-在进入文章列表界面的时候，进度条不会自动隐藏" class="headerlink" title="3.3 在进入文章列表界面的时候，进度条不会自动隐藏"></a>3.3 在进入文章列表界面的时候，进度条不会自动隐藏</h3><blockquote><p>发生问题的场景，就是我在presenter中设置了请求文章列表的数据的时候，会自动显示和隐藏进度条，但是请求完文章列表后，不能自动隐藏</p></blockquote><p>经过浏览代码，发现，我的请求文章列表的方法写多了一次，解决方法：只保存onResume里面的一次</p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li><a href="https://github.com/yechaoa/wanandroid_java" target="_blank" rel="noopener">wanandroid_java</a></li><li><a href="https://blog.csdn.net/weixin_41924068/article/details/89241544" target="_blank" rel="noopener">android studio 中colors文件的bug</a></li><li><a href="https://www.jianshu.com/p/ddf2bf815d57" target="_blank" rel="noopener">Android 基类BaseActivity的封装</a></li><li><a href="https://www.wanandroid.com/blog/show/2" target="_blank" rel="noopener">玩Android 开放API</a></li><li><a href="https://blog.csdn.net/haijie_liu/article/details/90896111" target="_blank" rel="noopener">依赖包后出现Failed to resolve:com.github.xxx错误</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你封装自己的MVP+Retrofit+RxJava2框架（一）</title>
      <link href="/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-yi/"/>
      <url>/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="带你封装自己的MVP-Retrofit-RxJava2框架（一）"><a href="#带你封装自己的MVP-Retrofit-RxJava2框架（一）" class="headerlink" title="带你封装自己的MVP+Retrofit+RxJava2框架（一）"></a>带你封装自己的MVP+Retrofit+RxJava2框架（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>文本已经收录到我的Github个人博客，欢迎大佬们光临寒舍：<a href="https://lovelifeeveryday.github.io/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia/">我的GIthub博客</a></p><p>看完本篇文章的，可以看下<a href="https://www.jianshu.com/p/66201ae31114" target="_blank" rel="noopener">带你封装自己的MVP+Retrofit+RxJava2框架（二）</a>，里面封装得到了改进</p></blockquote><h2 id="本篇文章需要已经具备的知识："><a href="#本篇文章需要已经具备的知识：" class="headerlink" title="本篇文章需要已经具备的知识："></a>本篇文章需要已经具备的知识：</h2><ul><li><strong>MVP</strong>的概念和基本使用</li><li><strong>Retrofit</strong>框架的基本使用</li><li><strong>RxJava2</strong>框架的基本使用</li><li><strong>ButterKnife</strong>框架的基本使用</li><li><strong>Base</strong>基类的概念</li></ul><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li>Activity和Fragment基类的封装</li><li>MVP的封装使用</li></ul><h2 id="一-为什么要封装这套框架呢？"><a href="#一-为什么要封装这套框架呢？" class="headerlink" title="一.为什么要封装这套框架呢？"></a>一.为什么要封装这套框架呢？</h2><p>在搞清楚这个问题之前，我们回顾一下基本概念</p><p>RxJava: ReactiveX 在JVM上的一个实现，ReactiveX使用Observable序列组合异步和基于事件的程序；掌握了它，你可以优美地处理异步任务和事件的回调</p><p>Retrofit:一个 RESTful 的 HTTP 网络请求框架的封装，网络请求的工作本质上是 OkHttp 完成，而 Retrofit 仅负责 网络请求接口的封装:掌握了它，你能优美地进行网络请求。</p><p>MVP：一种解耦模型和视图的模式，是现在很多公司的主流模式。</p><p>由此可见，在平时的开发中熟练运用这种模式，不仅可以满足生活中大部分应用程序的场景，还可以为将来的工作积攒宝贵的实战经验。</p><h2 id="二-核心用法"><a href="#二-核心用法" class="headerlink" title="二.核心用法"></a>二.核心用法</h2><blockquote><p>本项目基于Android X 进行构建，完整代码可在我的github上下载:<a href="https://github.com/LoveLifeEveryday/RxJava2_Retrofit_MVP" target="_blank" rel="noopener">带你封装自己的MVP+Retrofit+RxJava2框架</a></p></blockquote><p>首先，看一下我们项目的<strong>基本结构</strong>，下面笔者将为大家详细介绍每个类的相关信息</p><p><img src="https://s2.ax1x.com/2020/02/03/1a9wzn.png" alt="项目基本结构"></p><h3 id="2-1-基类base"><a href="#2-1-基类base" class="headerlink" title="2.1 基类base"></a>2.1 基类base</h3><blockquote><p>Base基类是封装了一些基类，方便后面新建新的activity或者fragment，减少耦合</p></blockquote><h4 id="2-1-1-BaseActivity"><a href="#2-1-1-BaseActivity" class="headerlink" title="2.1.1 BaseActivity"></a>2.1.1 BaseActivity</h4><blockquote><p>这个类是Activity的基类，注意与下面的BaseMvpActivity区分开</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseActivity 基类活动 * * @author XuCanyou666 * @date 2020/2/2 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法：实例化Presenter     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法：初始化控件，一般在BaseActivity中通过ButterKnife来绑定，所以该方法内部一般我们初始化界面相关的操作     *     * @return 控件     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法：得到布局id     *     * @return 布局id     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 启动Fragment     *     * @param id       id     * @param fragment 碎片     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startFragment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> Fragment fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FragmentTransaction fragmentTransaction <span class="token operator">=</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fragmentTransaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        fragmentTransaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-2-BaseView"><a href="#2-1-2-BaseView" class="headerlink" title="2.1.2 BaseView"></a>2.1.2 BaseView</h4><blockquote><p>一个接口，说明了每一个View基本需要的一些操作</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>rxjava2_retrofit_mvp<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2020/1/31 18:26 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 显示进度框     */</span>    <span class="token keyword">void</span> <span class="token function">showProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 关闭进度框     */</span>    <span class="token keyword">void</span> <span class="token function">hideProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 出错信息的回调     *     * @param result 错误信息     */</span>    <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>String result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-3-BaseMvpActivity–MVP活动的基类"><a href="#2-1-3-BaseMvpActivity–MVP活动的基类" class="headerlink" title="2.1.3 BaseMvpActivity–MVP活动的基类"></a>2.1.3 BaseMvpActivity–MVP活动的基类</h4><blockquote><p>继承自BaseActivity,它是MVP活动的基类，封装好了presenter的相关操作</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>rxjava2_retrofit_mvp<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * created by xucanyou666  MVP活动的基类，封装好了presenter的相关操作 * on 2019/12/24 20:53 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseMvpActivity</span><span class="token operator">&lt;</span>V <span class="token keyword">extends</span> <span class="token class-name">BaseView</span><span class="token punctuation">,</span> P <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> P presenter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化presenter     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        presenter <span class="token operator">=</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">attachView</span><span class="token punctuation">(</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建presenter     *     * @return Presenter     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> P <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 得到presenter     *     * @return presenter     */</span>    <span class="token keyword">protected</span> P <span class="token function">getPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> presenter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 销毁     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-4-BaseFragment–Fragment的基类"><a href="#2-1-4-BaseFragment–Fragment的基类" class="headerlink" title="2.1.4 BaseFragment–Fragment的基类"></a>2.1.4 BaseFragment–Fragment的基类</h4><blockquote><p>需要注意的是，这里用了ButterKnife框架，对碎片进行了绑定和解绑操作</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Fragment的基类，封装了一些Fragment的相关操作 * created by xucanyou666 * on 2020/1/31 16:21 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseFragment</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token keyword">implements</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> T mPresenter<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Context mContext<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Bundle mBundle<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Unbinder unbinder<span class="token punctuation">;</span>    <span class="token keyword">protected</span> View view<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 恢复数据     *     * @param outState bundle     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Bundle outState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBundle <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            outState<span class="token punctuation">.</span><span class="token function">putBundle</span><span class="token punctuation">(</span><span class="token string">"bundle"</span><span class="token punctuation">,</span> mBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 绑定activity     *     * @param context context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAttach</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 运行在onAttach之后，可以接收别人传递过来的参数，实例化对象     * 可以解决返回的时候页面空白的bug     *     * @param savedInstanceState     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>savedInstanceState <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mBundle <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"bundle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mBundle <span class="token operator">=</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//初始化presenter</span>        mPresenter <span class="token operator">=</span> <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> T <span class="token function">getPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mPresenter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 运行在onCreate之后，生成View视图     *     * @param inflater     * @param container     * @param savedInstanceState     * @return     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        view <span class="token operator">=</span> <span class="token function">initView</span><span class="token punctuation">(</span>inflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        unbinder <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 运行在onCreateView之后     * 加载数据     *     * @param savedInstanceState     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivityCreated</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityCreated</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPresenter<span class="token punctuation">.</span><span class="token function">attachView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 跳转Fragment     *     * @param toFragment 跳转去的fragment     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startFragment</span><span class="token punctuation">(</span>Fragment toFragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startFragment</span><span class="token punctuation">(</span>toFragment<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 跳转Fragment     *     * @param toFragment 跳转到的fragment     * @param tag        fragment的标签     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startFragment</span><span class="token punctuation">(</span>Fragment toFragment<span class="token punctuation">,</span> String tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FragmentTransaction fragmentTransaction <span class="token operator">=</span> <span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fragmentTransaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>content<span class="token punctuation">,</span> toFragment<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        fragmentTransaction<span class="token punctuation">.</span><span class="token function">addToBackStack</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        fragmentTransaction<span class="token punctuation">.</span><span class="token function">commitAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unbinder<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * fragment进行回退     * 类似于activity的OnBackPress     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">popBackStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPresenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化Fragment应有的视图     *     * @return view     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> View <span class="token function">initView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建presenter     *     * @return &lt;T extends BasePresenter> 必须是BasePresenter的子类     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> T <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 得到context     *     * @return context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Context <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到bundle     *     * @return bundle     */</span>    <span class="token keyword">public</span> Bundle <span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mBundle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到fragment     *     * @return fragment     */</span>    <span class="token keyword">public</span> Fragment <span class="token function">getFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-5-BasePresenter"><a href="#2-1-5-BasePresenter" class="headerlink" title="2.1.5 BasePresenter"></a>2.1.5 BasePresenter</h4><blockquote><p>Presenter的基类，这里的CompositeDisposable主要用途是及时取消订阅，以防止内存泄漏，具体CompositeDisposable的用法可参照<a href="https://www.jianshu.com/p/2a882604bbe8" target="_blank" rel="noopener">Rxjava关于Disposable你应该知道的事</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2020/1/16 17:12 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BasePresenter</span><span class="token operator">&lt;</span>V <span class="token keyword">extends</span> <span class="token class-name">BaseView</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将所有正在处理的Subscription都添加到CompositeSubscription中。统一退出的时候注销观察</span>    <span class="token keyword">private</span> CompositeDisposable mCompositeDisposable<span class="token punctuation">;</span>    <span class="token keyword">private</span> V baseView<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 和View绑定     *     * @param baseView     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attachView</span><span class="token punctuation">(</span>V baseView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseView <span class="token operator">=</span> baseView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解绑View,该方法在BaseMvpActivity类中被调用     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        baseView <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在界面退出等需要解绑观察者的情况下调用此方法统一解绑，防止Rx造成的内存泄漏</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCompositeDisposable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mCompositeDisposable<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取View     *     * @return view     */</span>    <span class="token keyword">public</span> V <span class="token function">getMvpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> baseView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将Disposable添加,在每次网络访问之前初始化时进行添加操作     *     * @param subscription subscription     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDisposable</span><span class="token punctuation">(</span>Disposable subscription<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//csb 如果解绑了的话添加 sb 需要新的实例否则绑定时无效的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCompositeDisposable <span class="token operator">==</span> null <span class="token operator">||</span> mCompositeDisposable<span class="token punctuation">.</span><span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mCompositeDisposable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mCompositeDisposable<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-6-MyApplication"><a href="#2-1-6-MyApplication" class="headerlink" title="2.1.6  MyApplication"></a>2.1.6  MyApplication</h4><blockquote><p>封装了一个可以全局获取context的方法，参考写法自：《第一行代码–第二版》，需要注意的是，记得在AndroidManifest中注册application</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>rxjava2_retrofit_mvp<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Application<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基类 * created by xucanyou666 * on 2019/11/2 14:46 * email：913710642@qq.com * @author xucanyou666 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Context context<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Context <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-工具类-util"><a href="#2-2-工具类-util" class="headerlink" title="2.2 工具类 util"></a>2.2 工具类 util</h3><h4 id="2-2-1-RetrofitManager"><a href="#2-2-1-RetrofitManager" class="headerlink" title="2.2.1 RetrofitManager"></a>2.2.1 RetrofitManager</h4><blockquote><p>Retrofit单例工具类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Retrofit单例工具类 * created by xucanyou666 * on 2020/1/16 16:38 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetrofitManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Retrofit mRetrofit<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器私有，这个工具类只有一个实例</span>    <span class="token keyword">private</span> <span class="token function">RetrofitManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        OkHttpClient<span class="token punctuation">.</span>Builder httpClientBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpClientBuilder<span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRetrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>httpClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span>RxJava2CallAdapterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>BASE_URL<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 静态内部类单例模式     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RetrofitManager <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>retrofitManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> RetrofitManager retrofitManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetrofitManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 利用泛型传入接口class返回接口实例     *     * @param ser 类     * @param &lt;T> 类的类型     * @return Observable     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">createRs</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> ser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mRetrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-2-RxJavaUtil"><a href="#2-2-2-RxJavaUtil" class="headerlink" title="2.2.2 RxJavaUtil"></a>2.2.2 RxJavaUtil</h4><blockquote><p>RxJava的工具类，执行线程调度工作</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2019/11/17 19:20 * email：913710642@qq.com * * @author xucanyou666 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RxJavaUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 线程调度工作     *     * @param observable 被观察者     * @param &lt;T>        类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Observable  <span class="token function">toSubscribe</span><span class="token punctuation">(</span>Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> observable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">unsubscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-常量类-contant"><a href="#2-3-常量类-contant" class="headerlink" title="2.3 常量类 contant"></a>2.3 常量类 contant</h3><blockquote><p>常量池，特别感谢api open网提供的免费api</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2019/11/17 19:01 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticQuality</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BASE_URL<span class="token operator">=</span><span class="token string">"https://api.gushi.ci/"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-接口管理器-contract"><a href="#2-4-接口管理器-contract" class="headerlink" title="2.4 接口管理器 contract"></a>2.4 接口管理器 contract</h3><blockquote><p>这里集中了一些Model层,Presenter层,View层的与诗歌相关的接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 诗歌的接口管理器 * created by xucanyou666 * on 2020/2/2 15:33 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPoetryContract</span> <span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">IPoetryModel</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 得到诗歌         *         * @return 诗歌         */</span>        Observable<span class="token operator">&lt;</span>PoetryEntity<span class="token operator">></span> <span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">IPoetryPresenter</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">IPoetryView</span> <span class="token keyword">extends</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * @param author 作者         */</span>        <span class="token keyword">void</span> <span class="token function">searchSuccess</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-实体类-entity"><a href="#2-5-实体类-entity" class="headerlink" title="2.5 实体类 entity"></a>2.5 实体类 entity</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 诗歌的实体类 * created by xucanyou666 * on 2020/1/23 21:23 * email：913710642@qq.com * API返回示例： * { * "content": "胡瓶落膊紫薄汗，碎叶城西秋月团。", * "origin": "从军行七首", * "author": "王昌龄", * "category": "古诗文-天气-月亮" * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoetryEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//诗歌内容</span>    <span class="token keyword">private</span> String origin<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//来源</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//作者</span>    <span class="token keyword">private</span> String category<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分类</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> origin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrigin</span><span class="token punctuation">(</span>String origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>origin <span class="token operator">=</span> origin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> category<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCategory</span><span class="token punctuation">(</span>String category<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> category<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-retrofit接口-iApiService"><a href="#2-6-retrofit接口-iApiService" class="headerlink" title="2.6 retrofit接口 iApiService"></a>2.6 retrofit接口 iApiService</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * retrofit接口 * created by xucanyou666 * on 2020/1/23 21:25 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GetPoetryEntity</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取古诗词     *     * @return 古诗词     */</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"all.json"</span><span class="token punctuation">)</span>    Observable<span class="token operator">&lt;</span>PoetryEntity<span class="token operator">></span> <span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-视图层-view"><a href="#2-7-视图层-view" class="headerlink" title="2.7 视图层 view"></a>2.7 视图层 view</h3><blockquote><p>这里为了减少代码量，方便读者们掌握核心操作，故View层都是用的同一个presenter和model，仅作学习参考</p></blockquote><h4 id="2-7-1-MainActivity"><a href="#2-7-1-MainActivity" class="headerlink" title="2.7.1 MainActivity"></a>2.7.1 MainActivity</h4><blockquote><p>需要注意的是，这里BaseMvpActivity&lt;activity, presenter&gt;,activity填入的是当前的activity，presenter填入的是对应的presenter</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : MainActivity * * @author XuCanyou666 * @date 2020/2/3 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMvpActivity</span><span class="token operator">&lt;</span>MainActivity<span class="token punctuation">,</span> PoetryPresenter<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">IPoetryContract<span class="token punctuation">.</span>IPoetryView</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_get_poetry<span class="token punctuation">)</span>    Button btnGetPoetry<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_poetry_author<span class="token punctuation">)</span>    TextView tvPoetryAuthor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_goto_fragment<span class="token punctuation">)</span>    Button btnGotoFragment<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>ll<span class="token punctuation">)</span>    LinearLayout ll<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> PoetryPresenter <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> PoetryPresenter<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchSuccess</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tvPoetryAuthor<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hideProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>String result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span><span class="token punctuation">{</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_get_poetry<span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_goto_fragment<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewClicked</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_get_poetry<span class="token operator">:</span>                <span class="token function">getPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_goto_fragment<span class="token operator">:</span>                <span class="token function">startFragment</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>ll<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MainFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-7-2-MainFragment"><a href="#2-7-2-MainFragment" class="headerlink" title="2.7.2 MainFragment"></a>2.7.2 MainFragment</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : MainFragment * * @author XuCanyou666 * @date 2020/2/2 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainFragment</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFragment</span><span class="token operator">&lt;</span>PoetryPresenter<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">IPoetryContract<span class="token punctuation">.</span>IPoetryView</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_get_poetry<span class="token punctuation">)</span>    Button btnGetPoetry<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_poetry_author<span class="token punctuation">)</span>    TextView tvPoetryAuthor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">initView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_main<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PoetryPresenter <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> PoetryPresenter<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hideProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>String result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_get_poetry<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewClicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchSuccess</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tvPoetryAuthor<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-8-presenter层"><a href="#2-8-presenter层" class="headerlink" title="2.8  presenter层"></a>2.8  presenter层</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2020/1/16 17:09 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoetryPresenter</span> <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">&lt;</span>IPoetryContract<span class="token punctuation">.</span>IPoetryView<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">IPoetryContract<span class="token punctuation">.</span>IPoetryPresenter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"PoetryPresenter"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> PoetryEntity mPoetryEntity<span class="token punctuation">;</span>    <span class="token keyword">private</span> PoetryModel mPoetryModel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">PoetryPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPoetryModel <span class="token operator">=</span> PoetryModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PoetryPresenter <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> PoetryPresenter instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoetryPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到诗歌     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Observable observable <span class="token operator">=</span> mPoetryModel<span class="token punctuation">.</span><span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOnSubscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Disposable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Disposable disposable<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token function">addDisposable</span><span class="token punctuation">(</span>disposable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        observable <span class="token operator">=</span> RxJavaUtil<span class="token punctuation">.</span><span class="token function">toSubscribe</span><span class="token punctuation">(</span>observable<span class="token punctuation">)</span><span class="token punctuation">;</span>        observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>PoetryEntity<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>PoetryEntity poetryEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mPoetryEntity <span class="token operator">=</span> poetryEntity<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getMvpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPoetryEntity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">getMvpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchSuccess</span><span class="token punctuation">(</span>mPoetryEntity<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-9-model层"><a href="#2-9-model层" class="headerlink" title="2.9 model层"></a>2.9 model层</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2020/1/16 17:06 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoetryModel</span> <span class="token keyword">implements</span> <span class="token class-name">IPoetryContract<span class="token punctuation">.</span>IPoetryModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">PoetryModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PoetryModel <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> PoetryModel instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoetryModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取古诗词     *     * @return 古诗词     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>PoetryEntity<span class="token operator">></span> <span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> RetrofitManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRs</span><span class="token punctuation">(</span>GetPoetryEntity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-10-app-build-gradle"><a href="#2-10-app-build-gradle" class="headerlink" title="2.10 app-build.gradle"></a>2.10 app-build.gradle</h3><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'com.android.application'</span>android <span class="token punctuation">{</span>    compileSdkVersion <span class="token number">28</span>    compileOptions <span class="token punctuation">{</span>        sourceCompatibility JavaVersion<span class="token operator">.</span>VERSION_1_8        targetCompatibility JavaVersion<span class="token operator">.</span>VERSION_1_8    <span class="token punctuation">}</span>    defaultConfig <span class="token punctuation">{</span>        applicationId <span class="token string">"com.users.xucanyou666.rxjava2_retrofit_mvp"</span>        minSdkVersion <span class="token number">19</span>        targetSdkVersion <span class="token number">28</span>        versionCode <span class="token number">1</span>        versionName <span class="token string">"1.0"</span>        testInstrumentationRunner <span class="token string">"androidx.test.runner.AndroidJUnitRunner"</span>    <span class="token punctuation">}</span>    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            minifyEnabled <span class="token boolean">false</span>            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android-optimize.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// RxJava</span>    implementation <span class="token string">'io.reactivex.rxjava2:rxjava:2.1.12'</span>    implementation <span class="token string">'com.squareup.retrofit2:retrofit:2.6.0'</span>    <span class="token comment" spellcheck="true">// Retrofit和jxjava关联</span>    implementation <span class="token string">'com.squareup.retrofit2:adapter-rxjava2:2.4.0'</span>    <span class="token comment" spellcheck="true">// Retrofit使用Gson转换</span>    implementation <span class="token string">'com.squareup.retrofit2:converter-gson:2.4.0'</span>    <span class="token comment" spellcheck="true">// RxAndroid</span>    implementation <span class="token string">'io.reactivex.rxjava2:rxandroid:2.0.2'</span>    <span class="token comment" spellcheck="true">//引入ButterKnife</span>    implementation <span class="token string">"com.jakewharton:butterknife:10.2.0"</span>    implementation <span class="token string">'androidx.legacy:legacy-support-v4:1.0.0'</span>    annotationProcessor <span class="token string">"com.jakewharton:butterknife-compiler:10.2.0"</span>    implementation <span class="token string">"com.google.android.material:material:1.0.0"</span>    implementation <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    implementation <span class="token string">'androidx.appcompat:appcompat:1.1.0'</span>    implementation <span class="token string">'androidx.constraintlayout:constraintlayout:1.1.3'</span>    testImplementation <span class="token string">'junit:junit:4.12'</span>    androidTestImplementation <span class="token string">'androidx.test.ext:junit:1.1.1'</span>    androidTestImplementation <span class="token string">'androidx.test.espresso:espresso-core:3.2.0'</span><span class="token punctuation">}</span></code></pre><h2 id="三-我在使用中遇到的问题"><a href="#三-我在使用中遇到的问题" class="headerlink" title="三.我在使用中遇到的问题"></a>三.我在使用中遇到的问题</h2><h3 id="3-1-网络权限忘记授予"><a href="#3-1-网络权限忘记授予" class="headerlink" title="3.1 网络权限忘记授予"></a>3.1 网络权限忘记授予</h3><p>解决措施：加上权限即可</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h3 id="3-2-ButterKnife框架版本问题"><a href="#3-2-ButterKnife框架版本问题" class="headerlink" title="3.2 ButterKnife框架版本问题"></a>3.2 ButterKnife框架版本问题</h3><p>使用ButterKnife框架的时候</p><p>当是androidX的时候，需要implementation 10.2.0版本的ButterKnife</p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//引入ButterKnife</span>    implementation <span class="token string">"com.jakewharton:butterknife:10.2.0"</span>    implementation <span class="token string">'androidx.legacy:legacy-support-v4:1.0.0'</span>    annotationProcessor <span class="token string">"com.jakewharton:butterknife-compiler:10.2.0"</span></code></pre><p>当是android 28等其他版本的时候，可以导入8.4.0版本的ButterKnife（导入10.2.0版本会出错）</p><pre class=" language-groovy"><code class="language-groovy"> implementation <span class="token string">'com.jakewharton:butterknife:8.4.0'</span>    annotationProcessor <span class="token string">'com.jakewharton:butterknife-compiler:8.4.0'</span> </code></pre><h3 id="3-3-ButterKnife需要Java-1-8以上的支持"><a href="#3-3-ButterKnife需要Java-1-8以上的支持" class="headerlink" title="3.3 ButterKnife需要Java 1.8以上的支持"></a>3.3 ButterKnife需要Java 1.8以上的支持</h3><pre class=" language-groovy"><code class="language-groovy"> compileOptions <span class="token punctuation">{</span>        sourceCompatibility JavaVersion<span class="token operator">.</span>VERSION_1_8        targetCompatibility JavaVersion<span class="token operator">.</span>VERSION_1_8    <span class="token punctuation">}</span> </code></pre><h3 id="3-4-Fragment中点击事件失效的问题"><a href="#3-4-Fragment中点击事件失效的问题" class="headerlink" title="3.4  Fragment中点击事件失效的问题"></a>3.4  Fragment中点击事件失效的问题</h3><blockquote><p>点击事件发生的场景：Fragment中初始化控件没有用butterKnife框架</p></blockquote><p>解决措施如下：</p><ul><li>将控件的初始化防止onCreateView中</li><li>将控件的点击事件的代码放在onActivityCreated中</li></ul><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li><a href="https://www.jianshu.com/p/2a882604bbe8" target="_blank" rel="noopener">Rxjava关于Disposable你应该知道的事</a></li><li><a href="https://www.jianshu.com/p/651146bd0688" target="_blank" rel="noopener">Mvp实战心得(二)—Base基类的封装</a></li><li><a href="https://blog.csdn.net/gpf1320253667/article/details/84363059" target="_blank" rel="noopener">最实用的Retrofit2+RxJava2+MVP框架搭建，避免各种内存泄漏</a></li><li><a href="https://blog.csdn.net/u010940300/article/details/43170477?utm_source=blogkpcl3" target="_blank" rel="noopener">Android中Fragment点击事件的添加</a></li><li><a href="https://blog.csdn.net/xzytl60937234/article/details/52871584" target="_blank" rel="noopener">在Fragment中的子View（如Button等）点击事件失效解决方法</a></li><li><a href="https://www.jianshu.com/p/5ba83d9639fb" target="_blank" rel="noopener">谈谈RxJava</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻轻松松过六级</title>
      <link href="/2020/01/12/qing-qing-song-song-guo-liu-ji/"/>
      <url>/2020/01/12/qing-qing-song-song-guo-liu-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="轻轻松松过六级"><a href="#轻轻松松过六级" class="headerlink" title="轻轻松松过六级"></a>轻轻松松过六级</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>文本已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="本篇文章主要想分享下，总结的一些通过六级的技巧和方法，学习清单："><a href="#本篇文章主要想分享下，总结的一些通过六级的技巧和方法，学习清单：" class="headerlink" title="本篇文章主要想分享下，总结的一些通过六级的技巧和方法，学习清单："></a>本篇文章主要想分享下，总结的一些通过六级的技巧和方法，学习清单：</h2><ul><li>过六级的重要性</li><li>过六级的一些小技巧</li><li>单词书的背诵方法及推荐</li><li>该刷的试卷的类型，开始刷题的时间</li><li>六级的考试时间及题型</li><li>听力提高方法</li><li>六级视频大放送</li></ul><h2 id="一-为什么要过六级"><a href="#一-为什么要过六级" class="headerlink" title="一.为什么要过六级"></a>一.为什么要过六级</h2><ol><li><p><strong>保研</strong>的资格</p><p>想要保研的同学，一定要关注学校的保研要求，绝大多数高校对英语四六级的成绩有要求，比如四级500分以上或6级425分以上。</p></li><li><p>英语课程<strong>免修</strong></p><p>当你开始读研，如果四六级高于某一分数，是可以免修英语课程的。北京大学国家发展研究院发布的《关于办理外语免修的通知》中，研修生可免修外语的其中一个条件就是“全国CET六级考试550分以上。”这是不是相当诱人!那必须高分过级呀!单词现在就背起来。</p></li><li><p><strong>外企</strong></p><p>首先，当你投简历的时候你就会发现，他们的招聘信息是全英文的。其次，笔试、面试也都是全英文的。再者，实际工作的语言环境也避免不了英语实践。所以英语好在外企就是妥妥的加分项。</p></li><li><p><strong>银行</strong>岗位</p><p>各分行的校园招聘公告中均硬性要求本科生通过<a href="http://cet4.koolearn.com/" target="_blank" rel="noopener">英语四级</a>考试，研究生通过英语六级考试。四大行总行对于外语的要求则更高，本科生和研究生均须通过英语六级考试。</p></li><li><p>提高英语能力，可以<strong>看到</strong>更加<strong>广阔的世界</strong></p><p>对于我这种IT码农来说，通过六级，是对你英语能力的又一次实质上的提高，众所周知，IT行业很多技术最开始都是只有英文版本的文档，而且很多语言的源码中的注释都是用英文写的，这样，当你想学习一门新技术，你就不必苦等别人大牛的翻译，而是成为第一个吃螃蟹的人，第一时间掌握新的技术，何乐而不为呢？</p></li></ol><h2 id="二-考试时间"><a href="#二-考试时间" class="headerlink" title="二.考试时间"></a>二.考试时间</h2><p>目前官方还没公布考试时间，但是可以参考2019年6月六级考试时间</p><p><strong>6月15日</strong>，15：10-17：25</p><p>考试流程：</p><p>15：10——17：25</p><p>14：40——15：00试音时间</p><p>15：00——15：10 阅读考场注意事项，发放考卷，贴条形码</p><p>15：10——15：40 作文考试阶段</p><p>15：40——16：10 听力测试</p><p>16：10——16：15 考试暂停5分钟，收答题卡一(即作文和听力)</p><p>听力结束后完成剩余考项</p><p>17：25全部考试结束。</p><p>总共是2个小时10分钟的时间，时间可以说是非常紧的。</p><h2 id="三-该刷的题目的类型以及开始刷题的时间"><a href="#三-该刷的题目的类型以及开始刷题的时间" class="headerlink" title="三.该刷的题目的类型以及开始刷题的时间"></a>三.该刷的题目的类型以及开始刷题的时间</h2><p>首先，到某宝或者某东买一套<strong>真题</strong>，认真刷完里面的10套历年真题。<strong>做真题，不要去做模拟题</strong>，真题上的生词和知识点都是通的，就像你雅思拿了7分，去考托福也很难下100分一样。。因为模拟题的质量良莠不齐，我们英语老师也曾经说过，模拟题有的出题老师水平真的不怎么样，写出来的模拟题质量很差。下面是某宝搜的链接：</p><p><a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.9.7b991d4cmw5ezd&id=535700366318&ad_id=&am_id=&cm_id=140105335569ed55e27b&pm_id=&abbucket=9" target="_blank" rel="noopener">星火英语六级2020六月</a></p><p>开始刷真题的时间是考前一个月左右（大部分人），如果是基础比较差的，可以再提前半个月至一个月准备。</p><blockquote><p>如何正确使用真题呢？</p></blockquote><p>你需要找一个不被打扰的地方，最好是图书馆，按照六级考试的时间2小时25分钟，认认真真完完整整答完一套题。最重要的其实是对答案的步骤，不是一次性对完答案就完事了，这样远远发挥不出真题的功效，相当于白做，白做，白做。因为真题最重要的是吃透，重点是质量，而不是数量。刚开始做一套试卷你可能要花很久（短则3~4天，长则1周）才能完全吃透。不要焦躁，这种现象很正常。坚持下去，你会发现第二套、第三套状态会越来越好。</p><blockquote><p>怎么吃透真题呢？</p></blockquote><p>吃透真题的标准就是，当你每一套题都要保证<strong>卷子中随便指出一个单词你都认识</strong>。而吃透真题的方法，一共分为阅读，听力和写作三个部分，详细的讲解请继续往下看。</p><h2 id="四-如何提高听力水平"><a href="#四-如何提高听力水平" class="headerlink" title="四.如何提高听力水平"></a>四.如何提高听力水平</h2><blockquote><p>六级考试35%的分值是听力，所以得听力者得天下！听力不好的小伙伴可要认真听了。</p></blockquote><ul><li><strong>反复听</strong>真题音频，一开始听一遍，听不懂，翻开答案的听力原文，找到生词，标记上，通读两遍原文，再次听，反复听。</li><li><strong>研究</strong>听力题目，仔细分析为什么这里听不懂。是走神还是生词呢？它是怎么设陷阱的？原文和选项进行了怎样的同义替换？</li><li><strong>坚持</strong>，坚持，坚持。英语听力水平的提高，不在一朝一夕，重要的是坚持，不要三天打🐟两天晒网。</li></ul><h2 id="五-如何提高阅读水平"><a href="#五-如何提高阅读水平" class="headerlink" title="五.如何提高阅读水平"></a>五.如何提高阅读水平</h2><blockquote><p>阅读的分值是35%，所以说，只要阅读听力好，六级不怕过不了。</p></blockquote><p>六级的阅读题大多摘自国外期刊，比如经济学人，华尔街日报，纽约时报，金融时报……我们可以做的就是，<strong>每三天读一篇经济学人双语精读笔记</strong>，注意是精读，不是泛读。读外刊的目的不是为了让你遇到原题（想得美），而是让你去渐渐习惯外刊的叙述思路，<strong>提高阅读分数的同时，积累写作词组和句型，提升单词量</strong>。感兴趣的可以关注一下《英语逃脱计划》公众号，里面定期推送外刊精读笔记。</p><p>这个过程，一开始或许会很艰难。但是后面，你会发现越来越顺。有了量的积累，才有质的飞跃，到时候，你难道还会怕六级考试?</p><p>下面是公众号的截图：</p><p><img src="https://i.loli.net/2020/01/12/LpXrDkSYPd4GOZe.png" alt="公众号截图"><br><img src="https://i.loli.net/2020/01/12/6eKZQV1iba9gFxo.jpg" alt="公众号截图"><br><img src="https://i.loli.net/2020/01/12/JlKvpa4c6V5dR31.jpg" alt="公众号截图"></p><h2 id="六-如何提高作文水平"><a href="#六-如何提高作文水平" class="headerlink" title="六.如何提高作文水平"></a>六.如何提高作文水平</h2><blockquote><p>这部分往往是人们最容易忽视的地方了。我身边大部分大学生，现在的写作水平都已经退化到初中的水平了（害羞.jpg），句子有用的高级词汇很少不说，甚至还有语病和写错的单词。</p></blockquote><ul><li>仔细研究真题答案范文，划出好的表达，整理到本子上，最好<strong>分不同的话题</strong>，比如说有关环保的，有关找工作的，有关传统文化的，有关风景的，有关山水的…</li><li>研究真题范文是怎样用各种<strong>从句</strong>的，能用长句就不用短句，能用短句就不写错句。</li><li>写作模板的话，千万不要盲目地在网上找一些已经被用烂的模板，然后盲目背诵，你可以对模板进行解构，比如说：大多数是引出话题+论证过程+结论。你可以把模板放在一边，在你精读外刊或者是阅读题的时候，思考他是怎样引出话题的，然后把你认为精美的句子抄下来，替换掉你的模板对应的那句话，反复操作，你就可以<strong>创造</strong>出一篇质量很高的<strong>模板</strong>了。下面是网上搜的作文模板，仅供参考：<a href="https://wenku.baidu.com/view/0f9c5b39dc36a32d7375a417866fb84ae45cc36d.html" target="_blank" rel="noopener">6级作文模板</a></li></ul><h2 id="七-怎么提高词汇量"><a href="#七-怎么提高词汇量" class="headerlink" title="七.怎么提高词汇量"></a>七.怎么提高词汇量</h2><p>制胜法宝就是真题上的词汇和六级大纲词汇。</p><p>首先真题词汇的重要性不用多说了。</p><p>你可以上网买一本，六级词汇书绿宝书，之前我有用过四级的，书中会有很多单词记忆的小技巧放送，封面大概是这样：<br><img src="https://s2.ax1x.com/2020/01/12/loBOV1.png" alt="六级词汇绿宝书"></p><p>然后每天定量刷，注意的是，背单词的技巧是重复，<strong>少时多频</strong>，这本书的话，仅仅是背完一遍是远远不够的，很快你就会遗忘，推荐的次数是3-7次。也许一开始你会觉得很难受，但是到后面几遍的话，速度就会越来越快，所以，当你背了这么多遍后，试卷上基本上已经没有你不认识的词了，这个时候阅读水平自然大大提升。</p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li><a href="https://www.zhihu.com/question/34882704" target="_blank" rel="noopener">六级英语该如何准备</a></li><li><a href="https://www.thea.cn/cet6_zx_1856569-1.htm" target="_blank" rel="noopener">全国2020年上半年英语六级考试时间</a></li><li><a href="https://cet4.koolearn.com/20190508/830044.html" target="_blank" rel="noopener">英语四六级的重要性：不过会影响你做这些事！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博客没头绪？我手把手教你！</title>
      <link href="/2020/01/11/xie-bo-ke-mei-tou-xu-wo-shou-ba-shou-jiao-ni/"/>
      <url>/2020/01/11/xie-bo-ke-mei-tou-xu-wo-shou-ba-shou-jiao-ni/</url>
      
        <content type="html"><![CDATA[<h1 id="写博客没头绪？我手把手教你！"><a href="#写博客没头绪？我手把手教你！" class="headerlink" title="写博客没头绪？我手把手教你！"></a>写博客没头绪？我手把手教你！</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>文本已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h3 id="本篇文章并不涉及到博客的搭建，主要是想分享下我对写博客整体思路的一些见解，学习清单："><a href="#本篇文章并不涉及到博客的搭建，主要是想分享下我对写博客整体思路的一些见解，学习清单：" class="headerlink" title="本篇文章并不涉及到博客的搭建，主要是想分享下我对写博客整体思路的一些见解，学习清单："></a>本篇文章并不涉及到博客的搭建，主要是想分享下我对写博客整体思路的一些见解，学习清单：</h3><ul><li>写博客的好处</li><li>博客的思路框架</li><li>博客的格式推荐</li><li>写博客的工具</li><li>写博客的语言</li><li>写博客的平台推荐</li></ul><h2 id="一-为什么要写博客？"><a href="#一-为什么要写博客？" class="headerlink" title="一.为什么要写博客？"></a>一.为什么要写博客？</h2><ul><li>写技术博客，可以让你对已经学习的<strong>知识</strong>进行<strong>巩固</strong>，并且很有可能对自己提出一些新的问题，让你摆脱“我好像搞懂了”的怪圈，从而可以更好地沉淀自己的知识与经验。</li><li>写技术博客，对于你后面的<strong>复习</strong>也是很有帮助的。之后你有些知识点忘记了的时候，你回去翻翻博客，重新掌握这一部分的知识点就很快了。</li><li>写技术博客，可能有利于你的<strong>求职</strong>。试想，当你面试的时候，简历上写了你的博客地址，面试官点进去，wow，你的粉丝这么多，你的文章阅读量这么大，你对知识的整理能力这么强，一瞬间就让你在茫茫人海中脱颖而出。</li><li>写技术博客，可以提高你的<strong>学习效率</strong>。不信的话，我们看一下下面一张图。</li></ul><p><img src="https://s2.ax1x.com/2020/01/10/l4RTf0.png" alt="学习内容平均留存率"></p><p>​        我们可以看到，主动学习中的教授给他人，有90%的的留存率，而仅仅是阅读的话，留存率只有10%，学习效率提高        了8倍，但是你可能只是多花了一倍的时间。而写博客，把自己当作一个分享者，而读者是一个小白，恰恰就是主动        教授给他人，这样的话，学习效率难道不高吗？</p><h2 id="二-写博客的思路框架"><a href="#二-写博客的思路框架" class="headerlink" title="二.写博客的思路框架"></a>二.写博客的思路框架</h2><p>总体的思路就是把你自己当作一个分享者，而读者是一个小白，现在思考一个问题：我要教会隔壁村的giao哥这个知识点？我要怎么做呢？</p><p>按照我的思路，我会这样做：</p><ol><li>这项技术是什么？</li><li>为什么要学习这项技术？和其他技术相比，有什么优点？</li><li>技术的核心用法？（简单示例）</li><li>使用技术可能会出现的一些问题（或者是你在使用中遇到的问题）</li></ol><p>下面，比如说，我来介绍一下快排</p><ol><li><p>快速排序是什么？</p><p>快速排序是一种快速的排序算法，基本思想是将一串数字序列中，一个数放在合适的位置，在这个位置下，左边的数字都比它小，右边的都比他大，这个数的位置称为枢纽</p></li><li><p>为什么要学习快速排序呢？</p><p>快速排序是目前最高效率的排序算法之一。面试必问的算法之一。他是冒泡排序的改进版本</p></li><li><p>技术的核心用法</p><pre><code>...代码</code></pre></li><li><p>使用技术遇到的问题（可选）</p></li></ol><h2 id="三-写博客用的语言"><a href="#三-写博客用的语言" class="headerlink" title="三.写博客用的语言"></a>三.写博客用的语言</h2><p>这里炒鸡推荐使用markdown这个轻量级标记语言，这个语言可以不用像word一样，对各种字号字体伤脑筋，还可以很方便地插入各种链接或者是图片，简直是程序员必备技能！！！不会的感觉学起来</p><p><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">markdown入门教程</a></p><h2 id="四-写博客用的工具"><a href="#四-写博客用的工具" class="headerlink" title="四.写博客用的工具"></a>四.写博客用的工具</h2><p>这里推荐一个人见人爱的markdown语言编译器。</p><p>为什么说是人见人爱呢？</p><p>因为它支持各种快捷键，方便你调字号，插入各种公式，完全免费，支持实时预览…反正好处数不过来，简直和markdown是绝配</p><p><img src="https://i.loli.net/2020/01/10/cqgTGMSp7Xd4V5x.png" alt="image.png"></p><p>下面是官网：</p><p><a href="https://www.typora.io/" target="_blank" rel="noopener">typora官网</a></p><h2 id="五-博客的格式推荐"><a href="#五-博客的格式推荐" class="headerlink" title="五.博客的格式推荐"></a>五.博客的格式推荐</h2><p>这里个人感觉是比较重要的，一个博客，如果写得非常晦涩难懂的话，就算技术非常高深，但是受众太小，也不能算上真正的好博客；所以这里介绍一下，写博客的格式及其小技巧，同学们，可要竖起耳朵听了。</p><h3 id="5-1-前言的书写"><a href="#5-1-前言的书写" class="headerlink" title="5.1 前言的书写"></a>5.1 前言的书写</h3><p>如果你有个人博客或者是想要各位大佬的一个小星星的话，可以在前言里面贴上自己的博客或者github链接，这样的话，有可能可以增加关注度</p><h3 id="5-2-学习清单的展示"><a href="#5-2-学习清单的展示" class="headerlink" title="5.2 学习清单的展示"></a>5.2 学习清单的展示</h3><p>这个不仅可以帮助读者快速获取到他们想要的知识，更可以在你脑海中展示一个清晰的知识脉络，双重好处，双倍快乐</p><h3 id="5-3-标题的书写"><a href="#5-3-标题的书写" class="headerlink" title="5.3 标题的书写"></a>5.3 标题的书写</h3><p>名人说：“一个好标题，胜过一篇文。”，由此可见，取个好标题的重要性多大。但是呢，不能矫枉过正，形成UC震惊体就不好了。</p><p>现在这里推荐一下，本人看到的比较好的标题命名：</p><ul><li>学习笔记|Retrofit篇</li><li>学习笔记|markdown篇</li><li>要点提炼|大话数据结构</li><li>手把手带你体验IO流</li><li>从零开始学XXX</li><li>一文带你认识封装</li></ul><h3 id="5-4-文章结尾的书写"><a href="#5-4-文章结尾的书写" class="headerlink" title="5.4 文章结尾的书写"></a>5.4 文章结尾的书写</h3><p>可以在文章结尾的时候，贴上你参考的文章的链接，而且加上一句，希望这篇文章对你有帮助，不仅可以拉近与读者之间的距离，更可以体现你的严谨。</p><h2 id="六-写博客的平台推荐"><a href="#六-写博客的平台推荐" class="headerlink" title="六.写博客的平台推荐"></a>六.写博客的平台推荐</h2><p>之前Java3y大佬专门写了一篇不错的文章，介绍各个平台，有兴趣的可以去看下</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484656&amp;idx=1&amp;sn=9e1dd44bc50ddb370bfa607257ed43a2&amp;chksm=ebd745f1dca0cce7ae67eedd77632ccbaf36d1c0970d66aa28f4db18f1878deb83323f9183a1###rd" target="_blank" rel="noopener">程序员可以选择哪些平台写技术博客？</a></p><hr><p>希望这篇文章对你有一点小小的帮助</p><p>本文参考链接：</p><ul><li><a href="https://www.jianshu.com/p/4025e67d10f1" target="_blank" rel="noopener">如何写一篇技术博客，谈谈我的看法</a></li><li><a href="https://www.jianshu.com/p/602b1ec4ca7a" target="_blank" rel="noopener">要点提炼|开发艺术之Activity</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484656&amp;idx=1&amp;sn=9e1dd44bc50ddb370bfa607257ed43a2&amp;chksm=ebd745f1dca0cce7ae67eedd77632ccbaf36d1c0970d66aa28f4db18f1878deb83323f9183a1###rd" target="_blank" rel="noopener">程序员可以选择哪些平台写技术博客？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.8 B树</title>
      <link href="/2019/11/28/8.8-b-shu/"/>
      <url>/2019/11/28/8.8-b-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="8-8-B树"><a href="#8-8-B树" class="headerlink" title="8.8 B树"></a>8.8 B树</h1><blockquote><p>什么是B树？有什么用呢？B树是由什么演变过来的呢？</p></blockquote><p><strong>多路查找树(muitl-way search tree)</strong>，其每一个节点的<strong>孩子</strong>数可以多于两个，且每一个节点处可以<strong>存储多个元素</strong>。主要有4中特殊形式。</p><h2 id="1-2-3-树"><a href="#1-2-3-树" class="headerlink" title="1. 2-3 树"></a>1. 2-3 树</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p> 其中的每一个节点都具有<strong>两个</strong>孩子（称为2节点）或者<strong>三个</strong>孩子（称为3节点）。<br>并且2-3树中所有的<strong>叶子</strong>都在<strong>同一层</strong>上</p><p><img src="https://s2.ax1x.com/2019/11/28/Qi85LT.png" alt="Qi85LT.png"></p><h3 id="1-2-2结点"><a href="#1-2-2结点" class="headerlink" title="1.2  2结点"></a>1.2  2结点</h3><p> 一个2节点包含<strong>一</strong>个<strong>元素</strong>和<strong>两</strong>个<strong>孩子</strong>（或者<strong>没有孩子</strong>）。 左小右大</p><h3 id="1-3-3结点"><a href="#1-3-3结点" class="headerlink" title="1.3  3结点"></a>1.3  3结点</h3><p> 包含一小一大<strong>两</strong>个<strong>元素</strong>和<strong>三</strong>个<strong>孩子</strong>（或者没有孩子）。 左中右</p><h3 id="1-4-2-3树的插入操作"><a href="#1-4-2-3树的插入操作" class="headerlink" title="1.4 2-3树的插入操作"></a>1.4 2-3树的插入操作</h3><h4 id="1-4-1-空树"><a href="#1-4-1-空树" class="headerlink" title="1.4.1 空树"></a>1.4.1 空树</h4><p>直接插</p><h4 id="1-4-2-插入到2结点的叶子上"><a href="#1-4-2-插入到2结点的叶子上" class="headerlink" title="1.4.2 插入到2结点的叶子上"></a>1.4.2 插入到2结点的叶子上</h4><p>将2结点变成<strong>3结点</strong></p><p><img src="https://s2.ax1x.com/2019/11/28/QiGPFH.png" alt="QiGPFH.png"></p><h4 id="1-4-3-往3结点中插入元素"><a href="#1-4-3-往3结点中插入元素" class="headerlink" title="1.4.3 往3结点中插入元素"></a>1.4.3 往3结点中插入元素</h4><h5 id="1-4-3-1-双亲结点是2结点"><a href="#1-4-3-1-双亲结点是2结点" class="headerlink" title="1.4.3.1 双亲结点是2结点"></a>1.4.3.1 双亲结点是2结点</h5><p><a href="https://imgchr.com/i/QiGDpR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/28/QiGDpR.md.png" alt="QiGDpR.md.png"></a></p><h5 id="1-4-3-2-双亲结点是3结点，双亲的双亲是2结点"><a href="#1-4-3-2-双亲结点是3结点，双亲的双亲是2结点" class="headerlink" title="1.4.3.2 双亲结点是3结点，双亲的双亲是2结点"></a>1.4.3.2 双亲结点是3结点，双亲的双亲是2结点</h5><p><img src="https://s2.ax1x.com/2019/11/28/QiGWAe.png" alt="QiGWAe.png"></p><h5 id="1-4-3-3-双亲结点是3结点，双亲的双亲是3结点"><a href="#1-4-3-3-双亲结点是3结点，双亲的双亲是3结点" class="headerlink" title="1.4.3.3 双亲结点是3结点，双亲的双亲是3结点"></a>1.4.3.3 双亲结点是3结点，双亲的双亲是3结点</h5><p><a href="https://imgchr.com/i/QiJPBT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/28/QiJPBT.md.png" alt="QiJPBT.md.png"></a></p><h3 id="1-5-2-3树的删除操作"><a href="#1-5-2-3树的删除操作" class="headerlink" title="1.5 2-3树的删除操作"></a>1.5 2-3树的删除操作</h3><h4 id="1-5-1-删除的元素是在3结点的叶子结点"><a href="#1-5-1-删除的元素是在3结点的叶子结点" class="headerlink" title="1.5.1  删除的元素是在3结点的叶子结点"></a>1.5.1  删除的元素是在3结点的叶子结点</h4><p><img src="https://s2.ax1x.com/2019/11/28/QiJWrV.png" alt="QiJWrV.png"></p><h4 id="1-5-2-删除的元素是2结点"><a href="#1-5-2-删除的元素是2结点" class="headerlink" title="1.5.2 删除的元素是2结点"></a>1.5.2 删除的元素是2结点</h4><h5 id="1-5-2-1-双亲是2结点，右孩子是3结点"><a href="#1-5-2-1-双亲是2结点，右孩子是3结点" class="headerlink" title="1.5.2.1 双亲是2结点，右孩子是3结点"></a>1.5.2.1 双亲是2结点，右孩子是3结点</h5><p><img src="https://s2.ax1x.com/2019/11/28/QiYaW9.png" alt="QiYaW9.png"></p><p>删除后<strong>左旋</strong></p><h5 id="1-5-2-2-双亲是2结点，右孩子是2结点"><a href="#1-5-2-2-双亲是2结点，右孩子是2结点" class="headerlink" title="1.5.2.2 双亲是2结点，右孩子是2结点"></a>1.5.2.2 双亲是2结点，右孩子是2结点</h5><p><a href="https://imgchr.com/i/QiYoef" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/28/QiYoef.md.png" alt="QiYoef.md.png"></a></p><p>方法是将右结点<strong>变成3结点</strong></p><h5 id="1-5-2-3-双亲是3结点"><a href="#1-5-2-3-双亲是3结点" class="headerlink" title="1.5.2.3 双亲是3结点"></a>1.5.2.3 双亲是3结点</h5><p><img src="https://s2.ax1x.com/2019/11/28/QitJXt.png" alt="QitJXt.png"></p><p>方法是将<strong>双亲拆分</strong></p><h5 id="1-5-2-4-满二叉树"><a href="#1-5-2-4-满二叉树" class="headerlink" title="1.5.2.4 满二叉树"></a>1.5.2.4 满二叉树</h5><p><img src="https://s2.ax1x.com/2019/11/28/QitHnx.png" alt="QitHnx.png"></p><h4 id="1-5-3-删除的是非叶子结点"><a href="#1-5-3-删除的是非叶子结点" class="headerlink" title="1.5.3 删除的是非叶子结点"></a>1.5.3 删除的是非叶子结点</h4><p>重点是找到前驱或者后继</p><p><img src="https://s2.ax1x.com/2019/11/28/QiNt29.png" alt="QiNt29.png"></p><h2 id="2-2-3-4树"><a href="#2-2-3-4树" class="headerlink" title="2. 2-3-4树"></a>2. 2-3-4树</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p> 2-3-4树是2-3树的扩展，包括了<strong>4节点</strong>的使用，一个4节点包含<strong>小中大三个元素</strong>和<strong>四个孩子</strong>（或没有孩子）。 </p><p><img src="https://s2.ax1x.com/2019/11/28/QiNLMn.png" alt="QiNLMn.png"></p><h2 id="3-B树"><a href="#3-B树" class="headerlink" title="3.B树"></a>3.B树</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p> B树（B-树）是一种平衡的多路查找树。2-3树和2-3-4树都是B树的特例。<strong>节点最大的孩子</strong>数组称为B树的<strong>阶</strong>（order），因此，2-3树是3阶B树，2-3-4树是4阶B树。 </p><p><a href="https://imgchr.com/i/Qiwkss" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/28/Qiwkss.md.png" alt="Qiwkss.md.png"></a></p><h3 id="3-2-B树的数据结构为内外存的数据交互准备的"><a href="#3-2-B树的数据结构为内外存的数据交互准备的" class="headerlink" title="3.2  B树的数据结构为内外存的数据交互准备的"></a>3.2  <strong>B树的数据结构为内外存的数据交互准备的</strong></h3><p>当要处理的数据很大时，无法一次全部装入内存。这时对B树调整，使得B树的阶数与硬盘存储的页面大小相匹配。比如说一棵B树的阶为1001（即1个节点包含1000个关键字），高度为2（从0开始），它可以存储超过10亿个关键字（1001x1001x1000+1001x1000+1000）,只要让根节点持久的保留在内存中，那么在这颗树上，寻找某一个关键字至多需要两次硬盘的读取即可。</p><h2 id="4-B-树"><a href="#4-B-树" class="headerlink" title="4.B+树"></a>4.B+树</h2><p><img src="https://s2.ax1x.com/2019/11/28/QiB7GT.png" alt="QiB7GT.png"></p><p> B+树中，出现在分支节点中的元素会被当做他们在该分支节点位置的<strong>中序后继</strong>者（叶子节点）中再次<strong>列出</strong>。另外，每一个叶子节点都会保存一个指向后一叶子节点的<strong>指针</strong>。 </p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.3 依赖注入框架</title>
      <link href="/2019/11/21/9.3-yi-lai-zhu-ru-kuang-jia/"/>
      <url>/2019/11/21/9.3-yi-lai-zhu-ru-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="9-3-依赖注入框架"><a href="#9-3-依赖注入框架" class="headerlink" title="9.3 依赖注入框架"></a>9.3 依赖注入框架</h1><h2 id="1-ButterKnife"><a href="#1-ButterKnife" class="headerlink" title="1.ButterKnife"></a>1.ButterKnife</h2><p>具体看之前的笔记</p><h2 id="2-Dagger2"><a href="#2-Dagger2" class="headerlink" title="2.Dagger2"></a>2.Dagger2</h2><h3 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h3><pre class=" language-groovy"><code class="language-groovy"> implementation <span class="token string">'com.google.dagger:dagger:2.16'</span>annotationProcessor <span class="token string">'com.google.dagger:dagger-compiler:2.16'</span></code></pre><h3 id="2-2-怎么将本地的类注入呢？"><a href="#2-2-怎么将本地的类注入呢？" class="headerlink" title="2.2 怎么将本地的类注入呢？"></a>2.2 怎么将本地的类注入呢？</h3><h4 id="2-2-1-在本地类的构造方法中加个注入注解"><a href="#2-2-1-在本地类的构造方法中加个注入注解" class="headerlink" title="2.2.1 在本地类的构造方法中加个注入注解"></a>2.2.1 在本地类的构造方法中加个注入注解</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">ICar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Inject</span>  <span class="token comment" spellcheck="true">//这里</span>    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span>Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-2-新建个注入器辅助类生成接口"><a href="#2-2-2-新建个注入器辅助类生成接口" class="headerlink" title="2.2.2 新建个注入器辅助类生成接口"></a>2.2.2 新建个注入器辅助类生成接口</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MainActivityComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>MainActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-3-在activity中调用方法"><a href="#2-2-3-在activity中调用方法" class="headerlink" title="2.2.3 在activity中调用方法"></a>2.2.3 在activity中调用方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Inject</span>    Car car<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注入</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        DaggerActivityComponent<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sr<span class="token operator">=</span>car<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//直接调用方法</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"wangshu"</span><span class="token punctuation">,</span>sr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-怎么将第三方库的类注入呢？"><a href="#2-3-怎么将第三方库的类注入呢？" class="headerlink" title="2.3.怎么将第三方库的类注入呢？"></a>2.3.怎么将第三方库的类注入呢？</h3><h4 id="2-3-1-新建一个工厂"><a href="#2-3-1-新建一个工厂" class="headerlink" title="2.3.1 新建一个工厂"></a>2.3.1 新建一个工厂</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span>  <span class="token comment" spellcheck="true">//标记是工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GsonModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApplicationScope</span>     <span class="token annotation punctuation">@Provides</span>  <span class="token comment" spellcheck="true">//生成实例</span>    <span class="token keyword">public</span> Gson <span class="token function">provideGson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-2-新建一个Component类"><a href="#2-3-2-新建一个Component类" class="headerlink" title="2.3.2 新建一个Component类"></a>2.3.2 新建一个Component类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApplicationScope</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>GsonModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>EngineModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dependencies <span class="token operator">=</span> SwordsmanComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActivityComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>MainActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>SecondActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-3-在activity中使用"><a href="#2-3-3-在activity中使用" class="headerlink" title="2.3.3 在activity中使用"></a>2.3.3 在activity中使用</h4><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Inject</span>    Gson gson<span class="token punctuation">;</span>     Man man <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">,</span> Man<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-怎么将抽象类注入呢？"><a href="#2-4-怎么将抽象类注入呢？" class="headerlink" title="2.4.怎么将抽象类注入呢？"></a>2.4.怎么将抽象类注入呢？</h3><p>类似于上面，原理一样</p><p>抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Engine</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GasolineEngine</span> <span class="token keyword">extends</span> <span class="token class-name">Engine</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"汽油发动机发动"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Module类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EngineModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token annotation punctuation">@Gasoline</span>    <span class="token keyword">public</span> Engine <span class="token function">provideGasoline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GasolineEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token annotation punctuation">@Diesel</span>    <span class="token keyword">public</span> Engine <span class="token function">provideDiesel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DieselEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Componet类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>GsonModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>EngineModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dependencies <span class="token operator">=</span> SwordsmanComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActivityComponent</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>MainActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>SecondActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>注入到model</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//model中注入</span>    <span class="token annotation punctuation">@Inject</span>    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span> Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> engine<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-当一个Module类中有2个以上对象怎么办？"><a href="#2-5-当一个Module类中有2个以上对象怎么办？" class="headerlink" title="2.5.当一个Module类中有2个以上对象怎么办？"></a>2.5.当一个Module类中有2个以上对象怎么办？</h3><h4 id="2-5-1-在Module中加上标记Named"><a href="#2-5-1-在Module中加上标记Named" class="headerlink" title="2.5.1 在Module中加上标记Named"></a>2.5.1 在Module中加上标记Named</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EngineModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token annotation punctuation">@Name</span><span class="token punctuation">(</span><span class="token string">"Gasoline"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Engine <span class="token function">provideGasoline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GasolineEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Provides</span>     <span class="token annotation punctuation">@Name</span><span class="token punctuation">(</span><span class="token string">"Diesel"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Engine <span class="token function">provideDiesel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DieselEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-5-2-在model中指定对应的name"><a href="#2-5-2-在model中指定对应的name" class="headerlink" title="2.5.2 在model中指定对应的name"></a>2.5.2 在model中指定对应的name</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Inject</span>  <span class="token comment" spellcheck="true">//指定对应的name</span>    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Name</span><span class="token punctuation">(</span><span class="token string">"Gasoline"</span><span class="token punctuation">)</span> Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> engine<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-怎么实现全局单例？"><a href="#2-6-怎么实现全局单例？" class="headerlink" title="2.6 怎么实现全局单例？"></a>2.6 怎么实现全局单例？</h3><p>要用Scope配合Application</p><h4 id="2-6-1-新建全局注解类"><a href="#2-6-1-新建全局注解类" class="headerlink" title="2.6.1 新建全局注解类"></a>2.6.1 新建全局注解类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Scope</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ApplicationScope</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="2-6-2-在module中使用全局注解"><a href="#2-6-2-在module中使用全局注解" class="headerlink" title="2.6.2 在module中使用全局注解"></a>2.6.2 在module中使用全局注解</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GsonModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApplicationScope</span>  <span class="token comment" spellcheck="true">//全局注解</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token keyword">public</span> Gson <span class="token function">provideGson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-6-3-创建ActivityComponent"><a href="#2-6-3-创建ActivityComponent" class="headerlink" title="2.6.3 创建ActivityComponent"></a>2.6.3 创建ActivityComponent</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@ApplicationScope</span>    <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>GsonModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>EngineModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dependencies <span class="token operator">=</span> SwordsmanComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActivityComponent</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注入到多个activity</span>        <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>MainActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>SecondActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-6-4-创建App类继承自Application"><a href="#2-6-4-创建App类继承自Application" class="headerlink" title="2.6.4 创建App类继承自Application"></a>2.6.4 创建App类继承自Application</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span><span class="token punctuation">{</span>    ActivityComponent activityComponent<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        activityComponent<span class="token operator">=</span>DaggerActivityComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swordsmanComponent</span><span class="token punctuation">(</span>DaggerSwordsmanComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> App <span class="token function">get</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>App<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ActivityComponent <span class="token function">getActivityComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> activityComponent<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-6-5-在activity中使用App创建注入"><a href="#2-6-5-在activity中使用App创建注入" class="headerlink" title="2.6.5 在activity中使用App创建注入"></a>2.6.5 在activity中使用App创建注入</h4><pre class=" language-java"><code class="language-java"> App<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActivityComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-7-怎么实现懒加载"><a href="#2-7-怎么实现懒加载" class="headerlink" title="2.7 怎么实现懒加载"></a>2.7 怎么实现懒加载</h3><p>就是在activity中将注入对象改为注入Lazy</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG<span class="token operator">=</span><span class="token string">"Dagger2"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Inject</span>    Gson gson<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Inject</span>    Gson gson1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//懒加载</span>    <span class="token annotation punctuation">@Inject</span>    Lazy<span class="token operator">&lt;</span>Swordsman<span class="token operator">></span> swordsmanLazy<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        DaggerActivityComponent.builder().build().inject(this);</span>        App<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>SecondActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActivityComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>gson<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-----"</span><span class="token operator">+</span>gson1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//懒加载</span>        Swordsman  swordsman<span class="token operator">=</span>swordsmanLazy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        swordsman<span class="token punctuation">.</span><span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sd1<span class="token operator">=</span>swordsman<span class="token punctuation">.</span><span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"lazy---"</span> <span class="token operator">+</span> sd1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 注解与依赖注入框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.1 注解</title>
      <link href="/2019/11/21/9.1-zhu-jie/"/>
      <url>/2019/11/21/9.1-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="9-1-注解"><a href="#9-1-注解" class="headerlink" title="9.1 注解"></a>9.1 注解</h1><h2 id="1-注解分类"><a href="#1-注解分类" class="headerlink" title="1.注解分类"></a>1.注解分类</h2><h3 id="1-1-标准注解"><a href="#1-1-标准注解" class="headerlink" title="1.1 标准注解"></a>1.1 标准注解</h3><ul><li>@SuppressWarnings：选择性地<strong>取消</strong>特定代码段中的<strong>警告</strong>。</li><li>@SafeVarargs：JDK 7新增，用来<strong>声明</strong>使用了<strong>可变长度</strong>参数的方法，其在与泛型类一起使用时不会出现 类型安全问题。 </li></ul><h3 id="1-2-元注解"><a href="#1-2-元注解" class="headerlink" title="1.2 元注解"></a>1.2 元注解</h3><p>元注解是用来<strong>注解其他注解</strong>，从而创建新的注解</p><ul><li><p>@Targe：注解所修饰的对象<strong>范围</strong></p><p><img src="https://i.loli.net/2019/11/18/fhmbkVJGERNdKH3.jpg" alt></p></li><li><p>@Inherited：表示注解可以被<strong>继承</strong>。 </p></li><li><p>@<strong>Retention</strong>：用来声明注解的<strong>保留策略</strong>。</p><p>RetentionPolicy.<strong>SOURCE</strong>：<strong>源码</strong>级注解。注解信息只会保留在.java源码中</p><p>RetentionPolicy.<strong>CLASS</strong>：<strong>编译</strong>时注解。注解信息会保留在.java 源码以及.<strong>class</strong> 中</p><p>RetentionPolicy.<strong>RUNTIME</strong>：<strong>运行</strong>时注解。当运行Java程序时，<strong>JVM</strong>也会保留该注解信息，可以通过反<br>射获取该注解信息。</p></li></ul><h2 id="2-定义注解"><a href="#2-定义注解" class="headerlink" title="2.定义注解"></a>2.定义注解</h2><h3 id="2-1-基本定义"><a href="#2-1-基本定义" class="headerlink" title="2.1 基本定义"></a>2.1 基本定义</h3><p>定义注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Swordsman2</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>使用注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Swordsman2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-定义成员变量"><a href="#2-2-定义成员变量" class="headerlink" title="2.2 定义成员变量"></a>2.2 定义成员变量</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Swordsman2</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span>  <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置默认值</span>    <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Swordsman2</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"xsx"</span><span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//在方法前面</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       Goods goods<span class="token operator">=</span>GoodsFactory<span class="token punctuation">.</span><span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token string">"iphone7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       goods<span class="token punctuation">.</span><span class="token function">showGoodsPrice</span><span class="token punctuation">(</span><span class="token string">"32G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Goods goods1<span class="token operator">=</span>GoodsFactory<span class="token punctuation">.</span><span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token string">"iphone7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       goods<span class="token punctuation">.</span><span class="token function">showGoodsPrice</span><span class="token punctuation">(</span><span class="token string">"32G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-3-注解保留策略"><a href="#2-3-注解保留策略" class="headerlink" title="2.3 注解保留策略"></a>2.3 注解保留策略</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Swordsman2</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span>  <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>生命周期长度为 SOURCE ＜CLASS＜ RUNTIME</p><p><strong>RUNTIME</strong>用于<strong>运行</strong>时去<strong>动态获取</strong>注解信息</p><p><strong>CLASS</strong>用于编译时进行一些<strong>预处理</strong>，比如生成一些辅助代码</p><p><strong>SOURCE</strong>用于做一些<strong>检查</strong>性的操作</p><h2 id="3-注解处理器"><a href="#3-注解处理器" class="headerlink" title="3.注解处理器"></a>3.注解处理器</h2><h3 id="3-1-什么是注解处理器？"><a href="#3-1-什么是注解处理器？" class="headerlink" title="3.1 什么是注解处理器？"></a>3.1 什么是注解处理器？</h3><p>其实就是用来处理注解的东西，如果注解没有经过处理的话，没什么用</p><h3 id="3-2-运行时注解"><a href="#3-2-运行时注解" class="headerlink" title="3.2 运行时注解"></a>3.2 运行时注解</h3><p>用到<strong>反射</strong>机制</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>METHOD<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//应用于方法</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">GET</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"http://ip.taobao.com/59.108.54.37"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getIpMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"http://ip.taobao.com/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//得到方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> AnnotationTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method m<span class="token operator">:</span>methods<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//得到注解对象</span>            GET get<span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>GET<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>get<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-3-编译时注解"><a href="#3-3-编译时注解" class="headerlink" title="3.3 编译时注解"></a>3.3 编译时注解</h3><h4 id="3-3-1-定义注解"><a href="#3-3-1-定义注解" class="headerlink" title="3.3.1 定义注解"></a>3.3.1 定义注解</h4><p>新建一个Java Library名为<strong>annotations</strong>来专门存放注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>CLASS<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>FIELD<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">BindView</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-2-编写注解处理器"><a href="#3-3-2-编写注解处理器" class="headerlink" title="3.3.2 编写注解处理器"></a>3.3.2 编写注解处理器</h4><p>新建一个Java Library名为processor来存放注解处理器，我们来配置 <strong>processor</strong>库的build.gradle</p><pre class=" language-Groovy"><code class="language-Groovy">apply plugin: 'java-library'dependencies {    implementation fileTree(dir: 'libs', include: ['*.jar'])    implementation project(':annotations')    implementation 'com.google.auto.service:auto-service:1.0-rc2'}sourceCompatibility = "7"targetCompatibility = "7"</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoService</span><span class="token punctuation">(</span>Processor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//自动注册注解处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProcessor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//被注解处理工具调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ProcessingEnvironment processingEnv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>processingEnv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 相当于主函数     *     * @param annotations     * @param roundEnv     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeElement</span><span class="token operator">></span> annotations<span class="token punctuation">,</span> RoundEnvironment roundEnv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Messager messager <span class="token operator">=</span> processingEnv<span class="token punctuation">.</span><span class="token function">getMessager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Element element <span class="token operator">:</span> roundEnv<span class="token punctuation">.</span><span class="token function">getElementsAnnotatedWith</span><span class="token punctuation">(</span>BindView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ElementKind<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span> <span class="token punctuation">{</span>                messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span>Diagnostic<span class="token punctuation">.</span>Kind<span class="token punctuation">.</span>NOTE<span class="token punctuation">,</span> <span class="token string">"printMessage:"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定注解     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getSupportedAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> annotataions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotataions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>BindView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> annotataions<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定java版本     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> SourceVersion <span class="token function">getSupportedSourceVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SourceVersion<span class="token punctuation">.</span><span class="token function">latestSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-3-注册注解处理器"><a href="#3-3-3-注册注解处理器" class="headerlink" title="3.3.3 注册注解处理器"></a>3.3.3 注册注解处理器</h4><p>引入依赖</p><pre class=" language-groovy"><code class="language-groovy"> implementation <span class="token string">'com.google.auto.service:auto-service:1.0-rc2'</span></code></pre><p>在处理器前面添加<strong>自动注册注解</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoService</span><span class="token punctuation">(</span>Processor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//自动注册注解处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProcessor</span> <span class="token punctuation">{</span></code></pre><h4 id="3-3-4-应用注解"><a href="#3-3-4-应用注解" class="headerlink" title="3.3.4 应用注解"></a>3.3.4 应用注解</h4><p>在app中引用注解</p><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    implementation <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':annotations'</span><span class="token punctuation">)</span>    annotationProcessor <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':processor'</span><span class="token punctuation">)</span></code></pre><p>在activity中应用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>value <span class="token operator">=</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//引入注解</span>    TextView tv_text<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 注解与依赖注入框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.2 依赖注入的原理</title>
      <link href="/2019/11/21/9.2-yi-lai-zhu-ru-de-yuan-li/"/>
      <url>/2019/11/21/9.2-yi-lai-zhu-ru-de-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="9-2-依赖注入的原理"><a href="#9-2-依赖注入的原理" class="headerlink" title="9.2 依赖注入的原理"></a>9.2 依赖注入的原理</h1><h2 id="1-控制反转和依赖注入"><a href="#1-控制反转和依赖注入" class="headerlink" title="1.控制反转和依赖注入"></a>1.控制反转和依赖注入</h2><h3 id="1-1-什么是控制反转（Inversion-of-Control）"><a href="#1-1-什么是控制反转（Inversion-of-Control）" class="headerlink" title="1.1 什么是控制反转（Inversion of Control）"></a>1.1 什么是控制反转（Inversion of Control）</h3><p>其实就是一种<strong>解耦</strong>的方式，当A需要B的时候，通过控制反转容器（IOC），B<strong>主动注入</strong>到A中</p><p><img src="https://i.loli.net/2019/11/19/4nO6kGFhJjUg3fB.jpg" alt></p><h3 id="1-2-什么是依赖注入"><a href="#1-2-什么是依赖注入" class="headerlink" title="1.2  什么是依赖注入"></a>1.2  什么是依赖注入</h3><p>其实就是控制反转的一个更加贴近实际的名字而已</p><h2 id="2-依赖注入的实现方式"><a href="#2-依赖注入的实现方式" class="headerlink" title="2.依赖注入的实现方式"></a>2.依赖注入的实现方式</h2><blockquote><p>其实就是为了<strong>避免</strong>，<strong>实现类变</strong>的时候，<strong>代码要修改</strong>的麻烦</p></blockquote><h3 id="2-1-构造方法注入"><a href="#2-1-构造方法注入" class="headerlink" title="2.1 构造方法注入"></a>2.1 构造方法注入</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Car</span><span class="token punctuation">(</span>Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-Setter方法注入"><a href="#2-2-Setter方法注入" class="headerlink" title="2.2 Setter方法注入"></a>2.2 Setter方法注入</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEngine</span><span class="token punctuation">(</span>Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-接口注入"><a href="#2-3-接口注入" class="headerlink" title="2.3 接口注入"></a>2.3 接口注入</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">ICar</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEngine</span><span class="token punctuation">(</span>Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实核心和Set方法是一样的</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 注解与依赖注入框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.5 RxJava使用场景</title>
      <link href="/2019/11/21/8.5-rxjava-shi-yong-chang-jing/"/>
      <url>/2019/11/21/8.5-rxjava-shi-yong-chang-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="8-5-RxJava使用场景"><a href="#8-5-RxJava使用场景" class="headerlink" title="8.5 RxJava使用场景"></a>8.5 RxJava使用场景</h1><h2 id="1-RxJava结合Retrofit访问网络"><a href="#1-RxJava结合Retrofit访问网络" class="headerlink" title="1.RxJava结合Retrofit访问网络"></a>1.RxJava结合Retrofit访问网络</h2><h3 id="1-1-导入依赖"><a href="#1-1-导入依赖" class="headerlink" title="1.1 导入依赖"></a>1.1 导入依赖</h3><pre><code>implementation &#39;com.squareup.okhttp3:okhttp:4.2.2&#39;    implementation &#39;com.squareup.retrofit2:retrofit:2.6.0&#39;    implementation &#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;  //返回值为gson数据    implementation &#39;com.google.code.gson:gson:2.8.6&#39;   //gson    implementation &#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39;  //rxjava    implementation &#39;io.reactivex:rxjava:1.2.3&#39;    implementation &#39;io.reactivex:rxandroid:1.2.1&#39;</code></pre><h3 id="1-2-新建错误返回的entity-实体类"><a href="#1-2-新建错误返回的entity-实体类" class="headerlink" title="1.2 新建错误返回的entity(实体类)"></a>1.2 新建错误返回的entity(实体类)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testrxjavaretrofitmvp<span class="token punctuation">.</span>eneity<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**{    "code": 200,    "message": "成功!",    "result": [ * created by xucanyou666 * on 2019/11/17 19:23 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpResult</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String reason<span class="token punctuation">;</span>    <span class="token keyword">private</span> T result<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reason<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReason</span><span class="token punctuation">(</span>String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResult</span><span class="token punctuation">(</span>T result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-新建RxJava工具类"><a href="#1-3-新建RxJava工具类" class="headerlink" title="1.3 新建RxJava工具类"></a>1.3 新建RxJava工具类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2019/11/17 19:20 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RxJavaUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 线程调度工作     *     * @param observable 被观察者     * @param subscriber 观察者     * @param &lt;T>        类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">toSubscribe</span><span class="token punctuation">(</span>Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> observable<span class="token punctuation">,</span> Subscriber<span class="token operator">&lt;</span>T<span class="token operator">></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">unsubscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-新建RxJava异常处理类"><a href="#1-4-新建RxJava异常处理类" class="headerlink" title="1.4 新建RxJava异常处理类"></a>1.4 新建RxJava异常处理类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 异常处理类 * created by xucanyou666 * on 2019/11/17 19:22 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpResultFunc</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>HttpResult<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">call</span><span class="token punctuation">(</span>HttpResult<span class="token operator">&lt;</span>T<span class="token operator">></span> httpResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResult<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果错误吗不是0的话，就返回错误</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>httpResult<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> httpResult<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-5-新建异常类"><a href="#1-5-新建异常类" class="headerlink" title="1.5 新建异常类"></a>1.5 新建异常类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * API异常处理，这里可以更具错误码，识别出错误类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span>  <span class="token keyword">int</span>  TIME_MUST_10<span class="token operator">=</span><span class="token number">209501</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span>  <span class="token keyword">int</span>  TIME_OTHER<span class="token operator">=</span><span class="token number">209502</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ApiException</span><span class="token punctuation">(</span><span class="token keyword">int</span> resultCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token function">getApiExceptionMessage</span><span class="token punctuation">(</span>resultCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ApiException</span><span class="token punctuation">(</span>String detailMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>detailMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 由于服务器传递过来的错误信息直接给用户看的话，用户未必能够理解     * 需要根据错误码对错误信息进行一个转换，在显示给用户     * @param code     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getApiExceptionMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> TIME_MUST_10<span class="token operator">:</span>                message <span class="token operator">=</span> <span class="token string">"必须为10位时间戳"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TIME_OTHER<span class="token operator">:</span>                message <span class="token operator">=</span> <span class="token string">"page、pagesize必须为int类型,time为10位时间戳"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                message <span class="token operator">=</span> <span class="token string">"未知错误"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-6-新建网络请求接口"><a href="#1-6-新建网络请求接口" class="headerlink" title="1.6  新建网络请求接口"></a>1.6  新建网络请求接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SearchMusicApiService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"searchMusic"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@FormUrlEncoded</span>    <span class="token comment" spellcheck="true">//注意这里返回的是HttpResult&lt;List&lt;Data>></span>    Observable<span class="token operator">&lt;</span>HttpResult<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>MusicEntity<span class="token operator">>>></span> <span class="token function">getMusic</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-7-编写网络请求model层"><a href="#1-7-编写网络请求model层" class="headerlink" title="1.7 编写网络请求model层"></a>1.7 编写网络请求model层</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchMusic</span><span class="token punctuation">(</span>Subscriber subscriber<span class="token punctuation">,</span> String songName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Observable<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>MusicEntity<span class="token operator">>></span> observable <span class="token operator">=</span> RetrofitManager                <span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">createRs</span><span class="token punctuation">(</span>SearchMusicApiService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getMusic</span><span class="token punctuation">(</span>songName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpResultFunc</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RxJavaUtil<span class="token punctuation">.</span><span class="token function">toSubscribe</span><span class="token punctuation">(</span>observable<span class="token punctuation">,</span> subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="1-8-在presenter层编写观察者"><a href="#1-8-在presenter层编写观察者" class="headerlink" title="1.8 在presenter层编写观察者"></a>1.8 在presenter层编写观察者</h3><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchMusic</span><span class="token punctuation">(</span>String musicName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//新建观察者</span>        subscriber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>MusicEntity<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAttachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">getMvpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MusicEntity<span class="token operator">></span> musicEntities<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAttachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String author <span class="token operator">=</span> musicEntities<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">getMvpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchSuccess</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用model层</span>        mModel<span class="token punctuation">.</span><span class="token function">searchMusic</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> musicName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="2-用RxJava实现RxBus"><a href="#2-用RxJava实现RxBus" class="headerlink" title="2.用RxJava实现RxBus"></a>2.用RxJava实现RxBus</h2><h3 id="2-1-创建RxBus"><a href="#2-1-创建RxBus" class="headerlink" title="2.1 创建RxBus"></a>2.1 创建RxBus</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RxBus</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> RxBus rxBus<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Subject<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerializedSubject</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>PublishSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">RxBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RxBus <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rxBus <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>RxBus<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rxBus <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    rxBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RxBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rxBus<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//发送</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span>Object ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>        subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//接收，里面包含了filter和cast的操作</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">toObservable</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> subject<span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-发送事件"><a href="#2-2-发送事件" class="headerlink" title="2.2 发送事件"></a>2.2 发送事件</h3><pre class=" language-java"><code class="language-java">  RxBus<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageEvent</span><span class="token punctuation">(</span><span class="token string">"用RxJava实现RxBus"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-3-接收事件"><a href="#2-3-接收事件" class="headerlink" title="2.3 接收事件"></a>2.3 接收事件</h3><pre class=" language-java"><code class="language-java">Subscription subscription<span class="token operator">=</span> RxBus<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span>MessageEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>MessageEvent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>MessageEvent messageEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>messageEvent<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tv_text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>messageEvent<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-记得取消订阅"><a href="#2-4-记得取消订阅" class="headerlink" title="2.4 记得取消订阅"></a>2.4 记得取消订阅</h3><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>subscription<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>subscription<span class="token punctuation">.</span><span class="token function">isUnsubscribed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 函数响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.2 RxJava的Subject</title>
      <link href="/2019/11/21/8.2-rxjava-de-subject/"/>
      <url>/2019/11/21/8.2-rxjava-de-subject/</url>
      
        <content type="html"><![CDATA[<h1 id="8-2-RxJava的Subject"><a href="#8-2-RxJava的Subject" class="headerlink" title="8.2 RxJava的Subject"></a>8.2 RxJava的Subject</h1><h2 id="1-什么是-Subject"><a href="#1-什么是-Subject" class="headerlink" title="1.什么是 Subject"></a>1.什么是 Subject</h2><p>Subject 既可以是一个 <strong>Observer</strong> 也可以是一个 <strong>Observerable</strong>，它是连接 Observer 和Observerable的<strong>桥梁</strong>。 因此，Subject可以被理解为Subject=Observable+Observer</p><h2 id="2-有多少种Subject"><a href="#2-有多少种Subject" class="headerlink" title="2.有多少种Subject"></a>2.有多少种Subject</h2><h3 id="2-1-PublishSubject"><a href="#2-1-PublishSubject" class="headerlink" title="2.1 PublishSubject"></a>2.1 PublishSubject</h3><p>PublishSubject把<strong>订阅</strong>发生的时间点<strong>之后</strong>来自原始Observable的数据发射给观察者。</p><pre class=" language-java"><code class="language-java">        PublishSubject<span class="token operator">&lt;</span>String<span class="token operator">></span> pSubject <span class="token operator">=</span> PublishSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Observer-1："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Observer-2："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>I/System.out: Observer-1：A   //结果I/System.out: Observer-1：BI/System.out: Observer-1：CI/System.out: Observer-2：CI/System.out: Observer-1：DI/System.out: Observer-2：D</code></pre><h3 id="2-2-BehaviorSubject"><a href="#2-2-BehaviorSubject" class="headerlink" title="2.2 BehaviorSubject"></a>2.2 BehaviorSubject</h3><p><strong>发射</strong>原始Observable<strong>最近发射</strong>的数据，如果没有，就发送默认数据</p><h3 id="2-3-ReplaySubject"><a href="#2-3-ReplaySubject" class="headerlink" title="2.3 ReplaySubject"></a>2.3 ReplaySubject</h3><p>发送<strong>所有</strong>数据，包括之前的数据</p><h3 id="2-4-AsyncSubject"><a href="#2-4-AsyncSubject" class="headerlink" title="2.4 AsyncSubject"></a>2.4 AsyncSubject</h3><p>只会发送<strong>最后</strong>一个数据</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 函数响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.3 RxJava操作符入门</title>
      <link href="/2019/11/21/8.3-rxjava-cao-zuo-fu-ru-men/"/>
      <url>/2019/11/21/8.3-rxjava-cao-zuo-fu-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="8-3-RxJava操作符入门"><a href="#8-3-RxJava操作符入门" class="headerlink" title="8.3 RxJava操作符入门"></a>8.3 RxJava操作符入门</h1><h2 id="1-创建操作符"><a href="#1-创建操作符" class="headerlink" title="1. 创建操作符"></a>1. 创建操作符</h2><h3 id="1-1-create"><a href="#1-1-create" class="headerlink" title="1.1 create"></a>1.1 create</h3><h3 id="1-2-just"><a href="#1-2-just" class="headerlink" title="1.2 just"></a>1.2 just</h3><h3 id="1-3-from"><a href="#1-3-from" class="headerlink" title="1.3 from"></a>1.3 from</h3><h3 id="1-4-interval"><a href="#1-4-interval" class="headerlink" title="1.4 interval"></a>1.4 interval</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//相当于定时器的作用</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Long aLong<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-5-range"><a href="#1-5-range" class="headerlink" title="1.5 range"></a>1.5 range</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从0到5，可以用来代替for循环</span>Observable<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-6-repeat"><a href="#1-6-repeat" class="headerlink" title="1.6 repeat"></a>1.6 repeat</h3><p><strong>重复</strong>发射</p><pre class=" language-java"><code class="language-java">  Observable<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-变换操作符"><a href="#2-变换操作符" class="headerlink" title="2. 变换操作符"></a>2. 变换操作符</h2><blockquote><p>什么是变化，其实就把需要发送的数据经过<strong>加工</strong>，再发送出去</p></blockquote><h3 id="2-1-map"><a href="#2-1-map" class="headerlink" title="2.1 map"></a>2.1 map</h3><p>将Observable转化为新的Observable并发送</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//map的第一个参数是传入的参数类型，第二个参数是返回类型</span>            Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-2-flatMap、cast"><a href="#2-2-flatMap、cast" class="headerlink" title="2.2 flatMap、cast"></a>2.2 flatMap、cast</h3><p>flatMap<strong>返回</strong>的必须是<strong>Observable</strong>，<strong>map</strong>返回的可以是<strong>各种类型</strong>，而且flatMap返回的<strong>顺序不确定</strong></p><p>cast是<strong>强转</strong>Observable的数据为指定类型</p><h3 id="2-3-concatMap"><a href="#2-3-concatMap" class="headerlink" title="2.3 concatMap"></a>2.3 concatMap</h3><p>对比于flatMap，<strong>顺序确定</strong></p><h3 id="2-4-flatMaplterable"><a href="#2-4-flatMaplterable" class="headerlink" title="2.4 flatMaplterable"></a>2.4 flatMaplterable</h3><p>将数据包装成Iterable，然后进行处理</p><pre class=" language-java"><code class="language-java"> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMapIterable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                List list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integer<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span>  list<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-5-buffer"><a href="#2-5-buffer" class="headerlink" title="2.5 buffer"></a>2.5 buffer</h3><p>buffer操作符将源Observable变换为一个新的Observable，这个新的Observable每次发射一组<strong>列表值</strong>。和 buffer操作符类似的还有 window 操作符，只不过 window操作符发射的是Observable而不是数据列表.</p><p>就是一组一组地发</p><h2 id="3-过滤操作符"><a href="#3-过滤操作符" class="headerlink" title="3.过滤操作符"></a>3.过滤操作符</h2><h3 id="3-1-filter"><a href="#3-1-filter" class="headerlink" title="3.1 filter"></a>3.1 filter</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设定过滤</span>Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//只有当数据大于2的时候才会发送</span>                <span class="token keyword">return</span> integer<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-elementAt"><a href="#3-2-elementAt" class="headerlink" title="3.2 elementAt"></a>3.2 elementAt</h3><p>返回指定位置的数据</p><h3 id="3-3-distinct"><a href="#3-3-distinct" class="headerlink" title="3.3 distinct"></a>3.3 distinct</h3><p>去重</p><h3 id="3-4-skip、take"><a href="#3-4-skip、take" class="headerlink" title="3.4 skip、take"></a>3.4 skip、take</h3><p>skip（n）是跳过前n项</p><p>take（n）是只取前n项</p><h2 id="4-组合操作符"><a href="#4-组合操作符" class="headerlink" title="4. 组合操作符"></a>4. 组合操作符</h2><h3 id="4-1-startWith"><a href="#4-1-startWith" class="headerlink" title="4.1  startWith"></a>4.1  startWith</h3><p>startWith操作符会在源Observable发射的数据<strong>前面插上一些数据</strong></p><h3 id="4-2-merge"><a href="#4-2-merge" class="headerlink" title="4.2 merge"></a>4.2 merge</h3><p>合并，可能会顺序错乱</p><h3 id="4-3-concat"><a href="#4-3-concat" class="headerlink" title="4.3 concat"></a>4.3 concat</h3><p>合并，顺序不乱</p><h3 id="4-4-zip"><a href="#4-4-zip" class="headerlink" title="4.4 zip"></a>4.4 zip</h3><p>就是合并加变换</p><p>综合了concat和map</p><h2 id="5-辅助操作符"><a href="#5-辅助操作符" class="headerlink" title="5.辅助操作符"></a>5.辅助操作符</h2><h3 id="5-1-delay"><a href="#5-1-delay" class="headerlink" title="5.1 delay"></a>5.1 delay</h3><p>发送数据前<strong>暂停</strong>一段指定的时间段。</p><h3 id="5-2-subscribeOn、observeOn"><a href="#5-2-subscribeOn、observeOn" class="headerlink" title="5.2 subscribeOn、observeOn"></a>5.2 subscribeOn、observeOn</h3><p>subscribeOn指定被观察者线程</p><p>observeOn 指定观察者线程</p><pre class=" language-java"><code class="language-java">observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//io操作线程，例如网络交互，数据库</span>                <span class="token punctuation">.</span><span class="token function">unsubscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ui线程</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 函数响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.1 RxJava基本用法</title>
      <link href="/2019/11/21/8.1-rxjava-ji-ben-yong-fa/"/>
      <url>/2019/11/21/8.1-rxjava-ji-ben-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="8-1-RxJava基本用法"><a href="#8-1-RxJava基本用法" class="headerlink" title="8.1 RxJava基本用法"></a>8.1 RxJava基本用法</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1-什么是RxJava"><a href="#1-1-什么是RxJava" class="headerlink" title="1.1 什么是RxJava"></a>1.1 什么是RxJava</h3><p>其实就是一种<strong>函数响应式</strong>编程，对于处理嵌套<strong>回调</strong>的<strong>异步</strong>事件，较大地简化项目</p><h3 id="1-2-什么是Rx"><a href="#1-2-什么是Rx" class="headerlink" title="1.2 什么是Rx"></a>1.2 什么是Rx</h3><p>ReactiveX是Reactive Extensions的缩写，一般简写为Rx</p><p>Rx=Observables+LINQ（语言集成查询）+Schedulers</p><h3 id="1-3-Rx与观察者模式"><a href="#1-3-Rx与观察者模式" class="headerlink" title="1.3 Rx与观察者模式"></a>1.3 Rx与观察者模式</h3><p>RxJava的异步操作是通过扩展的<strong>观察者模式</strong>来实现的</p><h2 id="2-基本实现"><a href="#2-基本实现" class="headerlink" title="2.基本实现"></a>2.基本实现</h2><h3 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h3><pre class=" language-groovy"><code class="language-groovy">implementation <span class="token string">'io.reactivex.rxjava2:rxandroid:2.1.1'</span></code></pre><h3 id="2-2-创建观察者（接收回调的数据）"><a href="#2-2-创建观察者（接收回调的数据）" class="headerlink" title="2.2 创建观察者（接收回调的数据）"></a>2.2 创建观察者（接收回调的数据）</h3><pre class=" language-java"><code class="language-java">Subscriber subscriber<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//完成时候的回调</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//一般在这里关闭对话框</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//错误的时候的回调</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//普通事件的回调</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//一般在这里接收信息，并展现给View层</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//可选方法 ，事件未发送之前调用，准备工作，例如数据的重置和清零，</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>或者用Observer</p><pre class=" language-java"><code class="language-java"> Observer observer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="1-3-创建被观察者"><a href="#1-3-创建被观察者" class="headerlink" title="1.3  创建被观察者"></a>1.3  创建被观察者</h3><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//被观察者，一般用来发送事件</span>        Observable<span class="token operator">&lt;</span>String<span class="token operator">></span> observable <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> String<span class="token operator">></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>                subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//发送事件</span>                   subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//发送事件</span>                subscriber<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将事件添加到任务队列 等价于上面</span>Observable observable1<span class="token operator">=</span>Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"1"</span>，<span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//等价于上面</span>        Observable observable2 <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-4-订阅"><a href="#1-4-订阅" class="headerlink" title="1.4 订阅"></a>1.4 订阅</h3><pre class=" language-java"><code class="language-java"> observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-RxJava的不完整定义回调"><a href="#3-RxJava的不完整定义回调" class="headerlink" title="3.RxJava的不完整定义回调"></a>3.RxJava的不完整定义回调</h2><h3 id="3-1-什么是不完整定义回调"><a href="#3-1-什么是不完整定义回调" class="headerlink" title="3.1 什么是不完整定义回调"></a>3.1 什么是不完整定义回调</h3><p>其实就是观察者可以指定回调onNext或者onError，<strong>只指定一种行为</strong></p><p>这里的Action1中的“1”指定<strong>回调数据的个数</strong></p><pre class=" language-java"><code class="language-java"> Action1<span class="token operator">&lt;</span>String<span class="token operator">></span> onNextAction<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>  Action1<span class="token operator">&lt;</span>Throwable<span class="token operator">></span> onErrorAction<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onNextAction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//observable.subscribe(onNextAction，onErrorAction);</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 函数响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.5  行为型设计模式</title>
      <link href="/2019/11/21/6.5-xing-wei-xing-she-ji-mo-shi/"/>
      <url>/2019/11/21/6.5-xing-wei-xing-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-5-行为型设计模式"><a href="#6-5-行为型设计模式" class="headerlink" title="6.5  行为型设计模式"></a>6.5  行为型设计模式</h1><h2 id="1-策略模式"><a href="#1-策略模式" class="headerlink" title="1.策略模式"></a>1.策略模式</h2><p>定义一系列的算法，把每一个算法封装起来，并且使它们可相互替换。策略模式使得算法可独立于使用它的客户而<strong>独立变化</strong>。 可以解决<strong>if..else重复嵌套</strong>的问题.核心其实就是把if..else中的每个<strong>方法封装</strong>起来，为一个个<strong>单独类</strong></p><p>场景分析：</p><p>张无忌作为一个大侠会遇到很多对手，如果每遇 到一个对手他都用自己最厉害的武功去应战，这显然是不明智的。于是张无忌想出了<strong>3种应战的策略</strong>，分别对付3个实力层次的对手。 </p><h3 id="1-1-策略接口"><a href="#1-1-策略接口" class="headerlink" title="1.1  策略接口"></a>1.1  策略接口</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 策略接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FightingStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-具体策略实现"><a href="#1-2-具体策略实现" class="headerlink" title="1.2 具体策略实现"></a>1.2 具体策略实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体策略实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonRivalStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">FightingStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遇到普通对手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体策略实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeakRivalStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">FightingStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遇到弱对手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-上下文角色"><a href="#1-3-上下文角色" class="headerlink" title="1.3 上下文角色"></a>1.3 上下文角色</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 上下文角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> FightingStrategy fightingStrategy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Context</span><span class="token punctuation">(</span>FightingStrategy fightingStrategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fightingStrategy <span class="token operator">=</span> fightingStrategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fightingStrategy<span class="token punctuation">.</span><span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-客户端调用"><a href="#1-4-客户端调用" class="headerlink" title="1.4 客户端调用"></a>1.4 客户端调用</h3><pre class=" language-java"><code class="language-java">         <span class="token comment" spellcheck="true">//遇到弱敌</span>        Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WeakRivalStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遇到普通敌人</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CommonRivalStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-5-使用场景"><a href="#1-5-使用场景" class="headerlink" title="1.5 使用场景"></a>1.5 使用场景</h3><ul><li>对客户<strong>隐藏具体策略</strong>（算法）的实现细节，彼此完全独立。 </li><li>针对同一类型问题的多种处理方式，仅仅是<strong>具体行为有差别</strong>时。 </li></ul><h3 id="1-6-优点和缺点"><a href="#1-6-优点和缺点" class="headerlink" title="1.6 优点和缺点"></a>1.6 优点和缺点</h3><h4 id="1-6-1-优点"><a href="#1-6-1-优点" class="headerlink" title="1.6.1 优点"></a>1.6.1 优点</h4><ul><li>可以避免使用<strong>多重</strong>条件语句</li><li>易于<strong>拓展</strong>，当需要添加策略，只需要实现接口就行了</li></ul><h4 id="1-6-2-缺点"><a href="#1-6-2-缺点" class="headerlink" title="1.6.2 缺点"></a>1.6.2 缺点</h4><ul><li>策略的<strong>复用性小</strong></li><li>与<strong>迪米特原则违背</strong>，上层模块需要知道有什么策略，才能使用策略</li></ul><h2 id="2-模板方法模式"><a href="#2-模板方法模式" class="headerlink" title="2.模板方法模式"></a>2.模板方法模式</h2><h3 id="2-1-什么是模板方法模式"><a href="#2-1-什么是模板方法模式" class="headerlink" title="2.1 什么是模板方法模式"></a>2.1 什么是模板方法模式</h3><p>定义一个操作中的算法框架，而将<strong>一些步骤延迟到子类</strong>中，使得子类不改变一个算法的结构即可重定义算法的某些<strong>特定步骤</strong>。 实际开发中，有些步骤可以变，有些不能变，所以就需要用到模板方法模式。</p><h3 id="2-2-简单实现"><a href="#2-2-简单实现" class="headerlink" title="2.2 简单实现"></a>2.2 简单实现</h3><blockquote><p>接着举武侠的例子。一个武侠要战斗的时候，也有一套<strong>固定的通用模式</strong>，那就是运行内功、开启经脉、准备武器和使用招式，我们把这些用代码表示，如下所示</p></blockquote><h4 id="2-2-1-创建抽象类，定义算法框架"><a href="#2-2-1-创建抽象类，定义算法框架" class="headerlink" title="2.2.1 创建抽象类，定义算法框架"></a>2.2.1 创建抽象类，定义算法框架</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> javaSmallHomeWork1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 抽象类，算法模板框架 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSwordsman</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">finghting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//内功，抽象方法</span>        <span class="token function">neigong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调节经脉，具体方法</span>        <span class="token function">meridian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasWeapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用武器</span>            <span class="token function">weapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//钩子方法</span>        <span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">weapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span>  <span class="token keyword">boolean</span> <span class="token function">hasWeapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">meridian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启经脉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">neigong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>具体</strong>方法是一些<strong>统一</strong>要执行的步骤</p><p><strong>抽象</strong>方法是必须<strong>延迟到子类</strong>实现的方法</p><p><strong>钩子</strong>方法是有2类，1类是可以视情况<strong>决定是否要覆盖</strong>的方法，第2类是用于<strong>对条件进行判断</strong></p><h4 id="2-2-2-具体实现类"><a href="#2-2-2-具体实现类" class="headerlink" title="2.2.2 具体实现类"></a>2.2.2 具体实现类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangSanFeng</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSwordsman</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">weapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行纯阳无极棍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">neigong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行张山峰神功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//钩子方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"去厕所"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> javaSmallHomeWork1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangWuJi</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSwordsman</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">weapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">neigong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行九阳神功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//钩子方法，决定条件的执行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">hasWeapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-3-客户端调用"><a href="#2-2-3-客户端调用" class="headerlink" title="2.2.3 客户端调用"></a>2.2.3 客户端调用</h4><pre class=" language-java"><code class="language-java">        ZhangWuJi zhangWuJi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ZhangWuJi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhangWuJi<span class="token punctuation">.</span><span class="token function">finghting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZhangSanFeng zhangSanFeng<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ZhangSanFeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhangSanFeng<span class="token punctuation">.</span><span class="token function">finghting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-3-使用场景"><a href="#2-3-使用场景" class="headerlink" title="2.3 使用场景"></a>2.3 使用场景</h3><ul><li><strong>逻辑</strong>基本<strong>相同</strong></li><li>可以把<strong>核心</strong>算法设计为<strong>模板方法</strong></li><li>实现子类对父类的<strong>反向控制</strong></li></ul><h3 id="2-4-优点和缺点"><a href="#2-4-优点和缺点" class="headerlink" title="2.4  优点和缺点"></a>2.4  优点和缺点</h3><h4 id="2-4-1-优点"><a href="#2-4-1-优点" class="headerlink" title="2.4.1 优点"></a>2.4.1 优点</h4><ul><li><strong>不变的行为</strong>搬移到超类，去除了子类中的重复代码。 </li><li><strong>提高了拓展性</strong></li></ul><h4 id="2-4-2-缺点"><a href="#2-4-2-缺点" class="headerlink" title="2.4.2 缺点"></a>2.4.2 缺点</h4><ul><li>类的个数的增加，设计更加<strong>抽象</strong></li></ul><h2 id="3-观察者模式"><a href="#3-观察者模式" class="headerlink" title="3.观察者模式"></a>3.观察者模式</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p>对象间一种<strong>一对多</strong>的依赖关系，每当一个对象改变状态时，则所有依赖于它的对象都会得到<strong>通知并被自动更新</strong></p><h3 id="3-2-简单使用"><a href="#3-2-简单使用" class="headerlink" title="3.2 简单使用"></a>3.2 简单使用</h3><h4 id="3-2-1-抽象观察者"><a href="#3-2-1-抽象观察者" class="headerlink" title="3.2.1 抽象观察者"></a>3.2.1 抽象观察者</h4><blockquote><p>我们可以拿微信公众号来举例。假设微信用户就是观察者，微信公众号是被观察者，有多个微信用户关注了“程序猿”这个公众号，当这个公众号更新时就会通知这些订阅的微信用户。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象观察者 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-2-具体观察者"><a href="#3-2-2-具体观察者" class="headerlink" title="3.2.2 具体观察者"></a>3.2.2 具体观察者</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体观察者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeixinUser</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeixinUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-3-抽象被观察者"><a href="#3-2-3-抽象被观察者" class="headerlink" title="3.2.3 抽象被观察者"></a>3.2.3 抽象被观察者</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象被观察者 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 增加订阅者     *     * @param observer 订阅者     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 分离订阅者     *     * @param observer     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通知订阅者更新消息     *     * @param msg     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-4-具体被观察者"><a href="#3-2-4-具体被观察者" class="headerlink" title="3.2.4 具体被观察者"></a>3.2.4 具体被观察者</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体被观察者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubscriptionSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存储订阅公众号的微信用户，存储观察者</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> weixinUserList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        weixinUserList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        weixinUserList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer observer <span class="token operator">:</span> weixinUserList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-5-客户端调用"><a href="#3-2-5-客户端调用" class="headerlink" title="3.2.5  客户端调用"></a>3.2.5  客户端调用</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SubscriptionSubject subscriptionSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubscriptionSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建观察者</span>        WeixinUser weixinUser1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WeixinUser weixinUser2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订阅，观察者绑定被观察者</span>        subscriptionSubject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>weixinUser1<span class="token punctuation">)</span><span class="token punctuation">;</span>        subscriptionSubject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>weixinUser2<span class="token punctuation">)</span><span class="token punctuation">;</span>        subscriptionSubject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">"更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.3 创建型设计模式</title>
      <link href="/2019/11/21/6.3-chuang-jian-xing-she-ji-mo-shi/"/>
      <url>/2019/11/21/6.3-chuang-jian-xing-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-3-创建型设计模式"><a href="#6-3-创建型设计模式" class="headerlink" title="6.3 创建型设计模式"></a>6.3 创建型设计模式</h1><blockquote><p>什么是创建型设计模式？其实就是与<strong>对象创建</strong>有关的设计模式</p></blockquote><h2 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h2><h3 id="1-1-怎么杜绝被反序列化时重新生成对象？"><a href="#1-1-怎么杜绝被反序列化时重新生成对象？" class="headerlink" title="1.1 怎么杜绝被反序列化时重新生成对象？"></a>1.1 怎么杜绝被反序列化时重新生成对象？</h3><p>为啥反序列化的时候会生成对象？</p><p>将单例实例对象写入磁盘的时候，再<strong>读回来</strong>，<strong>获得一个实例</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Object <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ObjectStreamException<span class="token punctuation">{</span>    <span class="token keyword">return</span> ourInstance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-单例模式和静态类的优缺点"><a href="#1-2-单例模式和静态类的优缺点" class="headerlink" title="1.2 单例模式和静态类的优缺点"></a>1.2 单例模式和静态类的优缺点</h3><p><strong>单例模式的优点：</strong></p><ul><li>能<strong>延迟加载</strong></li><li>单例模式的<strong>灵活性</strong>更高，方法可以被override</li></ul><p>静态类的优点：</p><ul><li><strong>速度</strong>更快</li><li>没有实例对象，<strong>直接使用</strong>方法</li></ul><h2 id="2-简单工厂模式"><a href="#2-简单工厂模式" class="headerlink" title="2.简单工厂模式"></a>2.简单工厂模式</h2><p>其实就是<strong>静态</strong>的工厂模式，只能<strong>根据</strong>某个<strong>标识</strong>，<strong>事先</strong>在工厂里面写上<strong>对象的生成</strong>的代码</p><h3 id="2-1-抽象产品类（操作类）"><a href="#2-1-抽象产品类（操作类）" class="headerlink" title="2.1 抽象产品类（操作类）"></a>2.1 抽象产品类（操作类）</h3><p>规定了产品的<strong>操作</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span><span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-具体产品类"><a href="#2-2-具体产品类" class="headerlink" title="2.2 具体产品类"></a>2.2 具体产品类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 加法计算</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA <span class="token operator">+</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 减法计算</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA<span class="token operator">-</span>numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mul</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 乘法计算</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA <span class="token operator">*</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Div</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 除法计算</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numberB <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"除数不能为0！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> numberA <span class="token operator">/</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-工厂类"><a href="#2-3-工厂类" class="headerlink" title="2.3 工厂类"></a>2.3 工厂类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EasyFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 简单工厂，根据字符串创建相应的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Operation <span class="token function">createOperation</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Operation operationObj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                operationObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                operationObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                operationObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                operationObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Div</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> operationObj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-客户端调用工厂类"><a href="#2-4-客户端调用工厂类" class="headerlink" title="2.4 客户端调用工厂类"></a>2.4 客户端调用工厂类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Operation add <span class="token operator">=</span> EasyFactory<span class="token punctuation">.</span><span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Operation sub <span class="token operator">=</span> EasyFactory<span class="token punctuation">.</span><span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Operation mul <span class="token operator">=</span> EasyFactory<span class="token punctuation">.</span><span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Operation div <span class="token operator">=</span> EasyFactory<span class="token punctuation">.</span><span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mul<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-工厂方法模式"><a href="#3-工厂方法模式" class="headerlink" title="3.工厂方法模式"></a>3.工厂方法模式</h2><p>其实就是不用事先设置某个字符串标记，而是直接通过Class生成产品，利用了反射的原理</p><p>反射是：<strong>运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong>动态</p><h3 id="3-1-抽象工厂"><a href="#3-1-抽象工厂" class="headerlink" title="3.1 抽象工厂"></a>3.1 抽象工厂</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象工厂 * created by xucanyou666 * on 2019/11/14 16:16 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ComputerFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span>  <span class="token class-name">Computer</span><span class="token operator">></span> T <span class="token function">createComputer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> ciz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-抽象产品"><a href="#3-2-抽象产品" class="headerlink" title="3.2  抽象产品"></a>3.2  抽象产品</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 抽象产品 * created by xucanyou666 * on 2019/11/14 16:19 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-具体工厂"><a href="#3-3-具体工厂" class="headerlink" title="3.3  具体工厂"></a>3.3  具体工厂</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 具体工厂 * created by xucanyou666 * on 2019/11/14 16:21 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GDComputerFactor</span> <span class="token keyword">extends</span> <span class="token class-name">ComputerFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 利用反射     *     * @param ciz 类     * @param &lt;T> 类的类型     * @return 类的对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Computer</span><span class="token operator">></span> T <span class="token function">createComputer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> ciz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Computer computer <span class="token operator">=</span> null<span class="token punctuation">;</span>        String className <span class="token operator">=</span> ciz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//根据类型获取对象</span>            computer <span class="token operator">=</span> <span class="token punctuation">(</span>Computer<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> ClassNotFoundException <span class="token operator">|</span> InstantiationException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> computer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-客户端调用"><a href="#3-4-客户端调用" class="headerlink" title="3.4 客户端调用"></a>3.4 客户端调用</h3><pre class=" language-java"><code class="language-java"> ComputerFactory computerFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GDComputerFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Lenovo lenovo<span class="token operator">=</span>computerFactory<span class="token punctuation">.</span><span class="token function">createComputer</span><span class="token punctuation">(</span>Lenovo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-建造者模式"><a href="#4-建造者模式" class="headerlink" title="4.建造者模式"></a>4.建造者模式</h2><p>生成器模式，将一个<strong>复杂</strong>对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。 </p><p>其实就是将一个大型的复杂对象<strong>分解</strong>为小部分，然后分别对小部分进行初始化，重组</p><h3 id="4-1-创建产品类"><a href="#4-1-创建产品类" class="headerlink" title="4.1 创建产品类"></a>4.1 创建产品类</h3><p>大型复杂对象的组成类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 产品类，Product角色 * @author Jackson * @version 1.0.0 * since 2018 12 24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MacBook</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String mBoard<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//主板</span>    <span class="token keyword">private</span> String mDisplay<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示器</span>    <span class="token keyword">private</span> String mOs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Cpu</span>    <span class="token keyword">public</span> String <span class="token function">getBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mBoard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBoard</span><span class="token punctuation">(</span>String board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mBoard <span class="token operator">=</span> board<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDisplay<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDisplay</span><span class="token punctuation">(</span>String display<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDisplay <span class="token operator">=</span> display<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mOs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOs</span><span class="token punctuation">(</span>String os<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mOs <span class="token operator">=</span> os<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MacBook:"</span> <span class="token operator">+</span> <span class="token string">"mBoard="</span> <span class="token operator">+</span> mBoard <span class="token operator">+</span> <span class="token string">",mDisplay="</span> <span class="token operator">+</span> mDisplay <span class="token operator">+</span> <span class="token string">",mOs="</span> <span class="token operator">+</span> mOs<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-创建Builder类规范产品的组建"><a href="#4-2-创建Builder类规范产品的组建" class="headerlink" title="4.2 创建Builder类规范产品的组建"></a>4.2 创建Builder类规范产品的组建</h3><p><strong>规范</strong>产品每个<strong>部分的生成</strong>，<strong>不含顺序</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 抽象Builder类 * @author Jackson * @version 1.0.0 * since 2018 12 24 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置主板</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">builderBoard</span><span class="token punctuation">(</span>String board<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置显示器</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">builderDisplay</span><span class="token punctuation">(</span>String display<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置操作系统</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">builderOs</span><span class="token punctuation">(</span>String os<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 得到Computer</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> MacBook <span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-具体建造者（具体Builder）"><a href="#4-3-具体建造者（具体Builder）" class="headerlink" title="4.3 具体建造者（具体Builder）"></a>4.3 具体建造者（具体Builder）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 具体的Builder类 * @author Jackson * @version 1.0.0 * since 2018 12 24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MacbookBulder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> MacBook mMacBook<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MacBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">builderBoard</span><span class="token punctuation">(</span>String board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里用set代替复杂的操作</span>        mMacBook<span class="token punctuation">.</span><span class="token function">setBoard</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">builderDisplay</span><span class="token punctuation">(</span>String display<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mMacBook<span class="token punctuation">.</span><span class="token function">setDisplay</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">builderOs</span><span class="token punctuation">(</span>String os<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mMacBook<span class="token punctuation">.</span><span class="token function">setOs</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MacBook <span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mMacBook<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-用导演类来统一组装过程"><a href="#4-4-用导演类来统一组装过程" class="headerlink" title="4.4 用导演类来统一组装过程"></a>4.4 用导演类来统一组装过程</h3><p><strong>包含</strong>组装<strong>顺序</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>    Builder mBuilder<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//引入builder</span>    <span class="token keyword">public</span> <span class="token function">Director</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mBuilder<span class="token operator">=</span>builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//建造</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constract</span><span class="token punctuation">(</span>String board<span class="token punctuation">,</span>String display<span class="token punctuation">,</span>String os<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//规定了顺序</span>        mBuilder<span class="token punctuation">.</span><span class="token function">builderBoard</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>        mBuilder<span class="token punctuation">.</span><span class="token function">builderDisplay</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>        mBuilder<span class="token punctuation">.</span><span class="token function">builderOs</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-5-使用"><a href="#4-5-使用" class="headerlink" title="4.5 使用"></a>4.5 使用</h3><pre class=" language-java"><code class="language-java">  Builder builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MacbookBulder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Director director<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>  director<span class="token punctuation">.</span><span class="token function">constract</span><span class="token punctuation">(</span><span class="token string">"英特尔主板"</span><span class="token punctuation">,</span><span class="token string">"Retina显示器"</span><span class="token punctuation">,</span><span class="token string">"Mac OS X系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-6-使用场景"><a href="#4-6-使用场景" class="headerlink" title="4.6 使用场景"></a>4.6 使用场景</h3><ul><li>当创建复杂对象的算法应该<strong>独立</strong>于该对象的组成部分以及它们的装配方式时。 </li><li>相同的方法，不同的执行<strong>顺序</strong>，产生<strong>不同</strong>的事件结果时。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.4 结构型设计模式</title>
      <link href="/2019/11/21/6.4-jie-gou-xing-she-ji-mo-shi/"/>
      <url>/2019/11/21/6.4-jie-gou-xing-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-4-结构型设计模式"><a href="#6-4-结构型设计模式" class="headerlink" title="6.4 结构型设计模式"></a>6.4 结构型设计模式</h1><blockquote><p>什么是结构型设计模式？其实<strong>结构型</strong>设计模式是为了解决模块间的<strong>耦合</strong>问题</p></blockquote><h2 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1.代理模式"></a>1.代理模式</h2><p>定义：为其他对象提供一种<strong>代理</strong>以控制对这个对象的访问。</p><h3 id="1-1-静态代理的写法"><a href="#1-1-静态代理的写法" class="headerlink" title="1.1 静态代理的写法"></a>1.1 静态代理的写法</h3><h4 id="1-1-1-抽象主题类"><a href="#1-1-1-抽象主题类" class="headerlink" title="1.1.1 抽象主题类"></a>1.1.1 抽象主题类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 接口方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-1-2-真实主题"><a href="#1-1-2-真实主题" class="headerlink" title="1.1.2 真实主题"></a>1.1.2 真实主题</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 具体的业务逻辑实现     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//业务处理逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-1-3-代理类"><a href="#1-1-3-代理类" class="headerlink" title="1.1.3 代理类"></a>1.1.3 代理类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 要代理的实现类     */</span>    <span class="token keyword">private</span> Subject subject <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 默认代理自己     */</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>Subject subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构造函数，传递委托者     *     * @param objects 委托者     */</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> objects<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实现接口方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 预处理     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do something</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后处理     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do something</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-1-4-客户端类"><a href="#1-1-4-客户端类" class="headerlink" title="1.1.4 客户端类"></a>1.1.4 客户端类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Subject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Proxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-动态代理的写法"><a href="#1-2-动态代理的写法" class="headerlink" title="1.2 动态代理的写法"></a>1.2 动态代理的写法</h3><h4 id="1-2-1-动态代理类"><a href="#1-2-1-动态代理类" class="headerlink" title="1.2.1 动态代理类"></a>1.2.1 动态代理类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 动态代理 * created by xucanyou666 * on 2019/11/14 20:08 * email：913710642@qq.com * @author xucanyou666 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicPurchasing</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object object<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DynamicPurchasing</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        object <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 动态代理     *     * @param proxy     * @param method     * @param args     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法名等于buy</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"buy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"DynamicPurchasing"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-2-2-客户端类"><a href="#1-2-2-客户端类" class="headerlink" title="1.2.2 客户端类"></a>1.2.2 客户端类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2019/11/14 20:12 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//被代理类，真实对象</span>        Lenovo lenovo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lenovo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态代理类</span>        DynamicPurchasing dynamicPurchasing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicPurchasing</span><span class="token punctuation">(</span>lenovo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//类加载器</span>        ClassLoader loader <span class="token operator">=</span> lenovo<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由动态代理生成代理类对象</span>        Lenovo mLenovo <span class="token operator">=</span> <span class="token punctuation">(</span>Lenovo<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Lenovo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> dynamicPurchasing<span class="token punctuation">)</span><span class="token punctuation">;</span>        mLenovo<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-代理模式的种类"><a href="#1-3-代理模式的种类" class="headerlink" title="1.3 代理模式的种类"></a>1.3 代理模式的种类</h3><ul><li>远程代理：为一个对象在不同的地址空间提供局部代表，这样系统可以将 Server 部分的实现隐藏</li><li>虚拟代理：使用一个<strong>代理对象</strong>表示一个十分<strong>耗费资源</strong>的对象并在<strong>真正需要时才创建</strong>。 </li><li>安全代理：用来<strong>控制</strong>真实对象访问时的<strong>权限</strong>。一般用于真实对象有不同的访问权限时。</li><li>智能指引：代理<strong>处理另外一些事</strong>，比如计算真实对象的引用<strong>计数</strong></li></ul><h3 id="1-4-代理模式的优点和缺点"><a href="#1-4-代理模式的优点和缺点" class="headerlink" title="1.4 代理模式的优点和缺点"></a>1.4 代理模式的优点和缺点</h3><h4 id="1-4-1-优点"><a href="#1-4-1-优点" class="headerlink" title="1.4.1 优点"></a>1.4.1 优点</h4><ul><li>实现实际的业务逻辑，<strong>不用关心</strong>其他<strong>非本职</strong>的工作。 职责单一</li><li>真实主题类随时都会发生变化；但是因为它实现了公共的接口，所以<strong>代理类</strong>可以<strong>不做</strong>任何<strong>修改</strong>就能够<br>使用。</li></ul><h4 id="1-4-2-缺点"><a href="#1-4-2-缺点" class="headerlink" title="1.4.2 缺点"></a>1.4.2 缺点</h4><p><strong>它始终无法摆脱仅支持 interface代理的桎梏</strong></p><h2 id="2-装饰模式"><a href="#2-装饰模式" class="headerlink" title="2.装饰模式"></a>2.装饰模式</h2><h3 id="2-1-是什么？"><a href="#2-1-是什么？" class="headerlink" title="2.1 是什么？"></a>2.1 是什么？</h3><p><strong>继承</strong>的<strong>替代</strong>方案之一。它通过创建一个包装对象，也就是装饰来包裹真实的对象。</p><h3 id="2-2-写法"><a href="#2-2-写法" class="headerlink" title="2.2 写法"></a>2.2 写法</h3><h4 id="2-2-1-抽象组件"><a href="#2-2-1-抽象组件" class="headerlink" title="2.2.1 抽象组件"></a>2.2.1 抽象组件</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 抽象主件 * created by xucanyou666 * on 2019/11/14 20:46 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Swordsman</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-2-具体组件"><a href="#2-2-2-具体组件" class="headerlink" title="2.2.2 具体组件"></a>2.2.2 具体组件</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 具体组件 * created by xucanyou666 * on 2019/11/14 20:47 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YangGuo</span> <span class="token keyword">extends</span> <span class="token class-name">Swordsman</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"杨过学的是使用武功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"YangGuo"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-3-抽象装饰类"><a href="#2-2-3-抽象装饰类" class="headerlink" title="2.2.3 抽象装饰类"></a>2.2.3 抽象装饰类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象装饰类 * created by xucanyou666 * on 2019/11/14 20:48 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token keyword">extends</span> <span class="token class-name">Swordsman</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Swordsman mSwordsman<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Master</span><span class="token punctuation">(</span>Swordsman swordsman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSwordsman <span class="token operator">=</span> swordsman<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSwordsman<span class="token punctuation">.</span><span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-4-具体装饰类"><a href="#2-2-4-具体装饰类" class="headerlink" title="2.2.4 具体装饰类"></a>2.2.4 具体装饰类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 具体装饰类 * created by xucanyou666 * on 2019/11/14 20:50 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HongQiGong</span> <span class="token keyword">extends</span> <span class="token class-name">Master</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">HongQiGong</span><span class="token punctuation">(</span>Swordsman swordsman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>swordsman<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"HongQiGong"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teachAttackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"教打狗棍法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">teachAttackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-5-客户端调用"><a href="#2-2-5-客户端调用" class="headerlink" title="2.2.5 客户端调用"></a>2.2.5 客户端调用</h4><pre class=" language-java"><code class="language-java"> YangGuo yangGuo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">YangGuo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       HongQiGong hongQiGong<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HongQiGong</span><span class="token punctuation">(</span>yangGuo<span class="token punctuation">)</span><span class="token punctuation">;</span>       hongQiGong<span class="token punctuation">.</span><span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-外观模式"><a href="#3-外观模式" class="headerlink" title="3.外观模式"></a>3.外观模式</h2><p>只有一个<strong>统一的高层接口</strong>，这样能降低用户的使用成本。 </p><h3 id="3-1-简单实现"><a href="#3-1-简单实现" class="headerlink" title="3.1 简单实现"></a>3.1 简单实现</h3><h4 id="3-1-1-子系统类"><a href="#3-1-1-子系统类" class="headerlink" title="3.1.1 子系统类"></a>3.1.1 子系统类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 子系统招式 * created by xucanyou666 * on 2019/11/14 21:29 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhaoShi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TaiJiQuan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"使用招式太极拳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">QiShangQuan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"七伤拳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"ZhaoShi"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 子系统内功 * created by xucanyou666 * on 2019/11/14 21:30 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NeiGong</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">JiuYang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"九阳神功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">QianKun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"乾坤大挪移"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"NeiGong"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-1-2-外观类"><a href="#3-1-2-外观类" class="headerlink" title="3.1.2 外观类"></a>3.1.2 外观类</h4><p>综合调用组合子系统</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 外观类张无忌 * created by xucanyou666 * on 2019/11/14 21:32 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangWuJi</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ZhaoShi zhaoShi<span class="token punctuation">;</span>    <span class="token keyword">private</span> NeiGong neiGong<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ZhangWuJi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zhaoShi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhaoShi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        neiGong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NeiGong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用乾坤大挪移     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Qiankun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zhaoShi<span class="token punctuation">.</span><span class="token function">QiShangQuan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        neiGong<span class="token punctuation">.</span><span class="token function">QianKun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-1-3-客户端"><a href="#3-1-3-客户端" class="headerlink" title="3.1.3 客户端"></a>3.1.3 客户端</h4><pre class=" language-java"><code class="language-java"> ZhangWuJi zhangWuJi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhangWuJi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhangWuJi<span class="token punctuation">.</span><span class="token function">Qiankun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-享元模式"><a href="#4-享元模式" class="headerlink" title="4.享元模式"></a>4.享元模式</h2><p><strong>池技术</strong>的重要实现方式，</p><p>定义：使用共享对象有效地支持大量<strong>细粒度</strong>的对象</p><p>要求细粒度对象，那么不可避免地使得对象<strong>数量多</strong>且<strong>性质相近</strong>。这些对象分为两个部分：<strong>内部</strong>状态和<strong>外部</strong>状态。</p><p>内部状态：对象不会变的信息</p><p>外部状态：对象会变的信息</p><h3 id="4-1-实现"><a href="#4-1-实现" class="headerlink" title="4.1 实现"></a>4.1 实现</h3><h4 id="4-1-1-抽象享元角色"><a href="#4-1-1-抽象享元角色" class="headerlink" title="4.1.1 抽象享元角色"></a>4.1.1 抽象享元角色</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 抽象享元角色 这里用的是外部状态的变量 * created by xucanyou666 * on 2019/11/14 21:41 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IGoods</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGoodsPrice</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-1-2-具体享元角色"><a href="#4-1-2-具体享元角色" class="headerlink" title="4.1.2 具体享元角色"></a>4.1.2 具体享元角色</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 具体享元角色 * created by xucanyou666 * on 2019/11/14 21:42 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span> <span class="token class-name">IGoods</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//名称 内部状态</span>    <span class="token keyword">private</span> String version<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//版本 外部状态</span>    <span class="token function">Goods</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"Goods"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGoodsPrice</span><span class="token punctuation">(</span>String version<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>version<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"32G"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"价格为5199"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>version<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"128G"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"价格为5999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-1-3-享元工厂"><a href="#4-1-3-享元工厂" class="headerlink" title="4.1.3 享元工厂"></a>4.1.3 享元工厂</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 享元工厂 * created by xucanyou666 * on 2019/11/14 21:45 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//池</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Goods<span class="token operator">></span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Goods <span class="token function">getGoods</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里的匹配是内部状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用缓存</span>            <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Goods goods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            pool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> goods<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-1-4-客户端调用"><a href="#4-1-4-客户端调用" class="headerlink" title="4.1.4 客户端调用"></a>4.1.4 客户端调用</h4><pre class=" language-java"><code class="language-java"> Goods goods<span class="token operator">=</span>GoodsFactory<span class="token punctuation">.</span><span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token string">"iphone7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       goods<span class="token punctuation">.</span><span class="token function">showGoodsPrice</span><span class="token punctuation">(</span><span class="token string">"32G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Goods goods1<span class="token operator">=</span>GoodsFactory<span class="token punctuation">.</span><span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token string">"iphone7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       goods<span class="token punctuation">.</span><span class="token function">showGoodsPrice</span><span class="token punctuation">(</span><span class="token string">"32G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-2-使用场景"><a href="#4-2-使用场景" class="headerlink" title="4.2 使用场景"></a>4.2 使用场景</h3><ul><li>系统中存在大量的<strong>相似</strong>对象</li><li>需要<strong>缓冲池</strong>的场景</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.1 设计模式六大原则</title>
      <link href="/2019/11/21/6.1-she-ji-mo-shi-liu-da-yuan-ze/"/>
      <url>/2019/11/21/6.1-she-ji-mo-shi-liu-da-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="6-1-设计模式六大原则"><a href="#6-1-设计模式六大原则" class="headerlink" title="6.1 设计模式六大原则"></a>6.1 设计模式六大原则</h1><h2 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1.单一职责原则"></a>1.单一职责原则</h2><p>就一个类而言，应该仅有一个引起它变化的原因</p><p>就是一个类<strong>职责</strong>（功能）<strong>尽可能少</strong></p><h2 id="2-开放封闭原则"><a href="#2-开放封闭原则" class="headerlink" title="2.开放封闭原则"></a>2.开放封闭原则</h2><p>类、模块、函数等应该是<strong>可以拓展</strong>的，但是<strong>不可修改</strong></p><p>对拓展开放，对修改封闭</p><h2 id="3-里氏替换原则"><a href="#3-里氏替换原则" class="headerlink" title="3.里氏替换原则"></a>3.里氏替换原则</h2><p>所有引用基类（<strong>父类</strong>）的地方必须能透明地<strong>使用</strong>其<strong>子类</strong>的对象</p><p>就是父类能够使用子类的所有方法，父能变子</p><p>要求<strong>子类的所有方法必须在父类中声明</strong></p><h2 id="4-依赖倒置原则"><a href="#4-依赖倒置原则" class="headerlink" title="4.依赖倒置原则"></a>4.依赖倒置原则</h2><p><strong>高</strong>层模块<strong>不</strong>应该<strong>依赖低层</strong>模块，两者都应该<strong>依赖于抽象</strong>。抽象<strong>不</strong>应该<strong>依赖于细节</strong>，细节应该依赖于抽象。 </p><h3 id="4-1-什么是高层模块？低层模块？"><a href="#4-1-什么是高层模块？低层模块？" class="headerlink" title="4.1 什么是高层模块？低层模块？"></a>4.1 什么是高层模块？低层模块？</h3><p><strong>高层</strong>模块就是<strong>调用端</strong>-&gt;mainActivity中调用</p><p><strong>低层</strong>模块 就是具体<strong>实现类</strong>-&gt;各种工具类</p><p>当高层模块调用低层模块的时候，不能用继承或者实现接口的形式，而是应该采用new 或者是静态类的形式</p><h2 id="5-迪米特原则"><a href="#5-迪米特原则" class="headerlink" title="5.迪米特原则"></a>5.迪米特原则</h2><p>一个软件<strong>实体</strong>应当尽可能<strong>少</strong>地与<strong>其他实体</strong>发生相互<strong>作用</strong></p><h2 id="6-接口隔离原则"><a href="#6-接口隔离原则" class="headerlink" title="6.接口隔离原则"></a>6.接口隔离原则</h2><p>一个类对另一个类的依赖应该建立在<strong>最小的接口</strong>上。 </p><p>就是接口的功能尽可能单一，不要建立庞大的接口</p><p><strong>接口的方法少用public</strong></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.7 解析Retrofit</title>
      <link href="/2019/11/21/5.7-jie-xi-retrofit/"/>
      <url>/2019/11/21/5.7-jie-xi-retrofit/</url>
      
        <content type="html"><![CDATA[<h1 id="5-7-解析Retrofit"><a href="#5-7-解析Retrofit" class="headerlink" title="5.7 解析Retrofit"></a>5.7 解析Retrofit</h1><blockquote><p>什么是Retrofit？为什么要用Retrofit呢</p></blockquote><h2 id="1-什么是Retrofit？"><a href="#1-什么是Retrofit？" class="headerlink" title="1.什么是Retrofit？"></a>1.什么是Retrofit？</h2><p>Retrofit是<strong>基于OkHttp</strong>实现的，使用<strong>运行时注解</strong>的方式提供功能</p><h2 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h2><h3 id="2-1-导入框架"><a href="#2-1-导入框架" class="headerlink" title="2.1 导入框架"></a>2.1 导入框架</h3><pre class=" language-xml"><code class="language-xml">implementation 'com.squareup.retrofit2:retrofit:2.0.2'    implementation 'com.squareup.okhttp3:okhttp:3.4.1'   implementation 'com.squareup.retrofit2:converter-gson:2.0.2'  //返回值为gson数据 implementation 'com.google.code.gson:gson:2.8.5'   //gsonimplementation 'com.squareup.retrofit2:adapter-rxjava:2.0.2'  //rxjava</code></pre><h3 id="2-2-注解分类"><a href="#2-2-注解分类" class="headerlink" title="2.2  注解分类"></a>2.2  注解分类</h3><h4 id="2-2-1-HTTP请求方法注解"><a href="#2-2-1-HTTP请求方法注解" class="headerlink" title="2.2.1 HTTP请求方法注解"></a>2.2.1 HTTP请求方法注解</h4><p>GET、POST、PUT、DELETE、 HEAD、PATCH、OPTIONS和HTTP（可以替换前面的）</p><h4 id="2-2-2-标记类注解"><a href="#2-2-2-标记类注解" class="headerlink" title="2.2.2 标记类注解"></a>2.2.2 标记类注解</h4><ul><li>FormUrlEncoded：标明这是一个<strong>表单请求</strong>，一般配合<strong>post</strong>请求使用</li><li>Multipart：允许多个<strong>@Part</strong>,一般是在<strong>文件上传</strong>的时候使用</li><li>Streaming：以<strong>流</strong>的形式返回，如果不使用它，则默认会把全部数据加载到内存，所以<strong>下载大文件</strong>时需要加上这个注解</li></ul><h4 id="2-2-3-参数类注解"><a href="#2-2-3-参数类注解" class="headerlink" title="2.2.3 参数类注解"></a>2.2.3 参数类注解</h4><p>有Header、Headers、Body、Path、Field、 FieldMap、Part、PartMap、Query和QueryMap等</p><h3 id="3-GET请求"><a href="#3-GET请求" class="headerlink" title="3.GET请求"></a>3.GET请求</h3><h4 id="3-1-新建接口"><a href="#3-1-新建接口" class="headerlink" title="3.1 新建接口"></a>3.1 新建接口</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Call其实是返回的数据的集合</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMgrService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//get请求，参数用Query，@QueryMap是Query的集合</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//192.168.106:8080/login?username=张三&amp;pwd=123456,对应baseUrL后面的</span>    Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//post请求的话，参数用Field</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@FormUrlEncoded</span>   <span class="token comment" spellcheck="true">//URL编码</span>    Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-创建接口文件"><a href="#3-2-创建接口文件" class="headerlink" title="3.2 创建接口文件"></a>3.2 创建接口文件</h4><pre class=" language-java"><code class="language-java">        Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>Constants<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取UserMgrService对象 这里其实用到的是动态代理的原理</span>  UserMgrService userMgrService <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>UserMgrService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-3-返回Call对象"><a href="#3-3-返回Call对象" class="headerlink" title="3.3 返回Call对象"></a>3.3 返回Call对象</h4><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//调用登陆login方法   注意，这里返回的UserInfoModel类</span>        <span class="token keyword">final</span> Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> call <span class="token operator">=</span> userMgrService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-4-发送异步请求（自动回调）"><a href="#3-4-发送异步请求（自动回调）" class="headerlink" title="3.4 发送异步请求（自动回调）"></a>3.4 发送异步请求（自动回调）</h4><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//异步请求,enqueue</span>     call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> call<span class="token punctuation">,</span> Response<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">int</span> id<span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> call<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-5-怎么动态配置URL地址？"><a href="#3-5-怎么动态配置URL地址？" class="headerlink" title="3.5.怎么动态配置URL地址？"></a>3.5.怎么动态配置URL地址？</h4><p>@Path </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IpServiceForPath</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"{path}/getIpInfo.php?ip=59.108.54.37"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这里的path对应上面url中的path</span>    Call<span class="token operator">&lt;</span>IpModel<span class="token operator">></span> <span class="token function">getIpMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span> String path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-6-怎么动态指定查询条件"><a href="#3-6-怎么动态指定查询条件" class="headerlink" title="3.6.怎么动态指定查询条件"></a>3.6.怎么动态指定查询条件</h4><p>@Query,就是添加参数</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//get请求，参数用Query，@QueryMap是Query的集合</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//192.168.106:8080/login?username=张三&amp;pwd=123456,对应baseUrL后面的</span>    Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>动态指定查询条件组：@QueryMap ，类似于集合</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IpServiceForQueryMap</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"getIpInfo.php"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>IpModel<span class="token operator">></span> <span class="token function">getIpMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@QueryMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-POST请求"><a href="#4-POST请求" class="headerlink" title="4.POST请求"></a>4.POST请求</h3><h4 id="4-1-传键值对"><a href="#4-1-传键值对" class="headerlink" title="4.1 传键值对"></a>4.1 传键值对</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IpServiceForPost</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@FormUrlEncoded</span> <span class="token comment" spellcheck="true">//表单请求</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"getIpInfo.php"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>IpModel<span class="token operator">></span> <span class="token function">getIpMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">)</span> String first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-传JSON字符串：-Body"><a href="#4-2-传JSON字符串：-Body" class="headerlink" title="4.2 传JSON字符串：@Body"></a>4.2 传JSON字符串：@Body</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IpServiceForPostBody</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"getIpInfo.php"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>IpModel<span class="token operator">></span> <span class="token function">getIpMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> Ip ip<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>建立标识对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ip</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String ip<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只需要1个String对象就行了</span>    <span class="token keyword">public</span> <span class="token function">Ip</span><span class="token punctuation">(</span>String ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-文件上传"><a href="#4-3-文件上传" class="headerlink" title="4.3 文件上传"></a>4.3 文件上传</h4><h5 id="4-3-1-单个文件上传"><a href="#4-3-1-单个文件上传" class="headerlink" title="4.3.1 单个文件上传"></a>4.3.1 单个文件上传</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span>  <span class="token class-name">UploadFileForPart</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Multipart</span>        <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"user/photo"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//第一个参数是准备上传的图片文件，第二个参数是RequestBody类，用来传递键值对</span>        Call<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Part</span> MultipartBody<span class="token punctuation">.</span>Part photo<span class="token punctuation">,</span> <span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">"descirption"</span><span class="token punctuation">)</span>RequestBody description<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//文件 </span>File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"wangshu.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//请求体新建</span>        RequestBody requestBody<span class="token operator">=</span>RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        MultipartBody<span class="token punctuation">.</span>Part photo<span class="token operator">=</span>  MultipartBody<span class="token punctuation">.</span>Part<span class="token punctuation">.</span><span class="token function">createFormData</span><span class="token punctuation">(</span><span class="token string">"photos"</span><span class="token punctuation">,</span><span class="token string">"wangshu.png"</span><span class="token punctuation">,</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        UploadFileForPart uploadFileForPart<span class="token operator">=</span> RetrofitManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRs</span><span class="token punctuation">(</span>UploadFileForPart<span class="token punctuation">)</span><span class="token punctuation">;</span>        Call<span class="token operator">&lt;</span>User<span class="token operator">></span> call<span class="token operator">=</span>uploadFileForPart<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>photo<span class="token punctuation">,</span>RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"wangshu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-3-2-多个文件上传"><a href="#4-3-2-多个文件上传" class="headerlink" title="4.3.2 多个文件上传"></a>4.3.2 多个文件上传</h5><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Multipart</span>         <span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"user/photo"</span><span class="token punctuation">)</span>        Call<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PartMap</span> Map <span class="token operator">&lt;</span> String<span class="token punctuation">,</span> RequestBody <span class="token operator">></span> photos<span class="token punctuation">,</span> <span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span> RequestBody desc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-4-消息报头Header"><a href="#4-4-消息报头Header" class="headerlink" title="4.4.消息报头Header"></a>4.4.消息报头Header</h4><h5 id="4-4-1-静态添加"><a href="#4-4-1-静态添加" class="headerlink" title="4.4.1  静态添加"></a>4.4.1  静态添加</h5><pre class=" language-java"><code class="language-java">    <span class="token keyword">interface</span>  <span class="token class-name">SomeService</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"some/endpoint"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Headers</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding:application/json"</span><span class="token punctuation">)</span>        Call<span class="token operator">&lt;</span>RequestBody<span class="token operator">></span> <span class="token function">getCarType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="4-4-2-动态"><a href="#4-4-2-动态" class="headerlink" title="4.4.2 动态"></a>4.4.2 动态</h5><pre class=" language-java"><code class="language-java"> <span class="token keyword">interface</span>  <span class="token class-name">SomeService</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"some/endpoint"</span><span class="token punctuation">)</span>        Call<span class="token operator">&lt;</span>RequestBody<span class="token operator">></span> <span class="token function">getCarType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">)</span> String location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 网络编程与网络框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.5 解析Volley</title>
      <link href="/2019/11/21/5.5-jie-xi-volley/"/>
      <url>/2019/11/21/5.5-jie-xi-volley/</url>
      
        <content type="html"><![CDATA[<h1 id="5-5-解析Volley"><a href="#5-5-解析Volley" class="headerlink" title="5.5 解析Volley"></a>5.5 解析Volley</h1><blockquote><p>网络通信框架Volley,取得数据，也可以加载<strong>图片</strong>，适合进行数据<strong>量不大</strong>但通信<strong>频繁</strong>的网络操作。</p></blockquote><h2 id="5-5-1-基本用法"><a href="#5-5-1-基本用法" class="headerlink" title="5.5.1 基本用法"></a>5.5.1 基本用法</h2><h3 id="1-Volley网络请求队列"><a href="#1-Volley网络请求队列" class="headerlink" title="1.Volley网络请求队列"></a>1.Volley网络请求队列</h3><p>基于队列的,只要把请求放在请求队列中就行</p><p>如果请求不多的话,一个队列就行,反之一个Activity对应一个网络请求队列</p><pre class=" language-java"><code class="language-java">RequestQueue mQueue<span class="token operator">=</span>Volley<span class="token punctuation">.</span><span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-StringRequest的用法"><a href="#2-StringRequest的用法" class="headerlink" title="2.StringRequest的用法"></a>2.StringRequest的用法</h3><p>返回的是String</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个字符串请求 参数（请求方式，URL，响应的回调接口，错误的回调接口）</span>    StringRequest request<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringRequest</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">,</span>            url<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>Listener</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>String response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//正确时的回调方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>ErrorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorResponse</span><span class="token punctuation">(</span>VolleyError error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//错误时的回调方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>返回的是:html文件</p><p><img src="https://img-blog.csdnimg.cn/20190416114018952.png" alt="å¨è¿éæå¥å¾çæè¿°"></p><p>注意,如果<strong>不填请求方式</strong>的话,默认是<strong>get</strong></p><h3 id="3-JsonRequest的用法"><a href="#3-JsonRequest的用法" class="headerlink" title="3.JsonRequest的用法"></a>3.JsonRequest的用法</h3><p>返回json数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendJsonRequestClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>    String url<span class="token operator">=</span><span class="token string">"http://ip.taobao.com/service/getIpInfo.php?ip=63.223.108.42&amp;qq-pf-to=pcqq.group"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//参数（请求方式，URL，请求参数，响应的回调接口，错误的回调接口）</span>    JsonObjectRequest request<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JsonObjectRequest</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">,</span> url<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>Listener</span><span class="token operator">&lt;</span>JSONObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>JSONObject response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>ErrorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorResponse</span><span class="token punctuation">(</span>VolleyError error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-使用lmageRequest加载图片"><a href="#4-使用lmageRequest加载图片" class="headerlink" title="4.使用lmageRequest加载图片"></a>4.使用lmageRequest加载图片</h3><p>已经<strong>过时</strong></p><p>方法类似于JsonRequest</p><p>构造方法,这个构造方法没有过时</p><pre class=" language-java"><code class="language-java">ImageRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageRequest</span><span class="token punctuation">(</span>                             url<span class="token punctuation">,</span> myResponseListener<span class="token punctuation">,</span> maxWidth<span class="token punctuation">,</span>                             maxHeight<span class="token punctuation">,</span> scaleType<span class="token punctuation">,</span> Config<span class="token punctuation">.</span>RGB_565<span class="token punctuation">,</span> myErrorListener<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-使用lmageLoader加载图片"><a href="#5-使用lmageLoader加载图片" class="headerlink" title="5.使用lmageLoader加载图片"></a>5.使用lmageLoader加载图片</h3><p>内部使用 <strong>ImageRequest</strong> ,传入一个 ImageCache缓存形参，实现图片<strong>缓存</strong>的功能</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这个可以在MyApplication中实例好</span>ImageLoader imageLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageLoader</span><span class="token punctuation">(</span><span class="token function">getRequestQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VolleyImageCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数是显示的控件,第二个是默认显示图片,第3个是无网的时候显示的图片</span> ImageLoader<span class="token punctuation">.</span>ImageListener listener <span class="token operator">=</span> ImageLoader<span class="token punctuation">.</span><span class="token function">getImageListener</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>MyApplication<span class="token punctuation">.</span><span class="token function">getImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>UserContents<span class="token punctuation">.</span>imageUrl<span class="token punctuation">,</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>简单的封装:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> RequestQueue requestQueue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ImageLoader imageLoader<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RequestQueue <span class="token function">getRequestQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> requestQueue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ImageLoader <span class="token function">getImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> imageLoader<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestQueue <span class="token operator">=</span> Volley<span class="token punctuation">.</span><span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        imageLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageLoader</span><span class="token punctuation">(</span><span class="token function">getRequestQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VolleyImageCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">VolleyImageCache</span> <span class="token keyword">implements</span> <span class="token class-name">ImageLoader<span class="token punctuation">.</span>ImageCache</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> LruCache<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Bitmap<span class="token operator">></span> mCache<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">VolleyImageCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> maxCacheSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>            mCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LruCache</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Bitmap<span class="token operator">></span><span class="token punctuation">(</span>maxCacheSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">sizeOf</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Bitmap value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getRowBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> value<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Bitmap <span class="token function">getBitmap</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putBitmap</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> Bitmap bitmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolleyImageUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ImageLoader<span class="token punctuation">.</span>ImageListener listener <span class="token operator">=</span> ImageLoader<span class="token punctuation">.</span><span class="token function">getImageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span>view<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        MyApplication<span class="token punctuation">.</span><span class="token function">getImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MineFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> View view<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageView img<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>mine_layout<span class="token punctuation">,</span>container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        img <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>mine_img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用</span>        VolleyImageUtils<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>UserContents<span class="token punctuation">.</span>imageUrl<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ViewGroup<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-使用NetworklmageView加载图片"><a href="#6-使用NetworklmageView加载图片" class="headerlink" title="6.使用NetworklmageView加载图片"></a>6.使用NetworklmageView加载图片</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.android.volley.toolbox.NetworkImageView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/nivTestView<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.android.volley.toolbox.NetworkImageView</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">        networkImageView <span class="token operator">=</span> <span class="token punctuation">(</span>NetworkImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>nivTestView<span class="token punctuation">)</span><span class="token punctuation">;</span>        mQueue <span class="token operator">=</span> Volley<span class="token punctuation">.</span><span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LruImageCache lruImageCache <span class="token operator">=</span> LruImageCache<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ImageLoader imageLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageLoader</span><span class="token punctuation">(</span>mQueue<span class="token punctuation">,</span>lruImageCache<span class="token punctuation">)</span><span class="token punctuation">;</span>        networkImageView<span class="token punctuation">.</span><span class="token function">setDefaultImageResId</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        networkImageView<span class="token punctuation">.</span><span class="token function">setErrorImageResId</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>                networkImageView<span class="token punctuation">.</span><span class="token function">setImageUrl</span><span class="token punctuation">(</span>URLS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> imageLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果不想要压缩的话,都用wrap_content</p><h2 id="5-5-2-源码解析Volley"><a href="#5-5-2-源码解析Volley" class="headerlink" title="5.5.2 源码解析Volley"></a>5.5.2 源码解析Volley</h2><h3 id="1-工作流程"><a href="#1-工作流程" class="headerlink" title="1.工作流程"></a>1.工作流程</h3><p><img src="https://i.bmp.ovh/imgs/2019/11/dae2e0aea9954366.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 网络编程与网络框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.3 HTTP协议原理</title>
      <link href="/2019/11/21/5.3-http-xie-yi-yuan-li/"/>
      <url>/2019/11/21/5.3-http-xie-yi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="5-3-HTTP协议原理"><a href="#5-3-HTTP协议原理" class="headerlink" title="5.3 HTTP协议原理"></a>5.3 HTTP协议原理</h1><h2 id="5-3-1-HTTP简介"><a href="#5-3-1-HTTP简介" class="headerlink" title="5.3.1 HTTP简介"></a>5.3.1 HTTP简介</h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><p>• 支持C/S（客户/服务器）模式</p><p>• 简单快速</p><p>• 灵活</p><p>• 无状态</p><h2 id="5-3-2-HTTP请求报文"><a href="#5-3-2-HTTP请求报文" class="headerlink" title="5.3.2 HTTP请求报文"></a>5.3.2 HTTP请求报文</h2><h3 id="1-组成"><a href="#1-组成" class="headerlink" title="1.组成"></a>1.组成</h3><p>由请求<strong>行</strong>、请求报<strong>头</strong>、空行和请求<strong>数据</strong>4个部分组成</p><p><img src="https://i.bmp.ovh/imgs/2019/11/ab591f8871ccfb2e.png" alt></p><h3 id="2-请求行"><a href="#2-请求行" class="headerlink" title="2.请求行"></a>2.请求行</h3><p>由请求方法、URL字段和HTTP协议的版本组成</p><p>Method(请求方法) Request-URI(URL字段) HTTP-Version(版本) CRLF(回车)</p><p>例子:</p><p>GET <a href="http://blog.csdn.net/itachi85" target="_blank" rel="noopener">http://blog.csdn.net/itachi85</a> HTTP/1.1 </p><h4 id="2-1-请求方法"><a href="#2-1-请求方法" class="headerlink" title="2.1 请求方法"></a>2.1 请求方法</h4><ul><li>GET：请求<strong>获取</strong>Request-URI所标识的<strong>资源</strong>。</li><li>POST：在Request-URI所标识的资源后<strong>附加</strong>新的<strong>数据</strong>。 </li><li>HEAD：请求获取由Request-URI所标识的资源的响应<strong>消息报头</strong>。</li><li>PUT：请求服务器<strong>存储</strong>一个资源，并用Request-URI作为其标识。 </li><li>DELETE：请求服务器<strong>删除</strong>Request-URI所标识的资源。</li><li>TRACE：请求服务器<strong>回送收到的请求信息</strong>，主要用于测试或诊断。 </li><li>CONNECT：HTTP 1.1协议中预留给能够将连接改为管道方式的代理服务器。 </li><li>OPTIONS：请求<strong>查询</strong>服务器的<strong>性能</strong>，或者查询与资源相关的选项和需求。 </li></ul><h4 id="2-2-请求报头"><a href="#2-2-请求报头" class="headerlink" title="2.2 请求报头"></a>2.2 请求报头</h4><p>在请求行之后会有0个或者多个请求报头，每个请求报头都包含一个名字和一个值，它们之间用英文冒号“：”分割</p><h4 id="2-3-请求数据"><a href="#2-3-请求数据" class="headerlink" title="2.3 请求数据"></a>2.3 请求数据</h4><p>post的时候,请求报头是Content-Type和Content-Length。</p><h2 id="5-3-3-HTTP响应报文"><a href="#5-3-3-HTTP响应报文" class="headerlink" title="5.3.3 HTTP响应报文"></a>5.3.3 HTTP响应报文</h2><p>由<strong>状态行</strong>、响应<strong>报头</strong>、空行、响应<strong>正文</strong>组成</p><p><img src="https://i.bmp.ovh/imgs/2019/11/710a02270d767883.png" alt></p><h3 id="1-状态行"><a href="#1-状态行" class="headerlink" title="1.状态行"></a>1.状态行</h3><p>HTTP-Version(版本号) Status-Code(状态码) Reason-Phrase(文本描述) CRLF</p><pre><code>HTTP/1.1 200 OK</code></pre><h4 id="1-1-状态码有几类"><a href="#1-1-状态码有几类" class="headerlink" title="1.1 状态码有几类?"></a>1.1 状态码有几类?</h4><ul><li>200 OK：客户端请求<strong>成功</strong>。 </li><li>400 Bad Request：客户端请求有<strong>语法错误</strong>，服务器无法理解。 </li><li>401 Unauthorized：请求未经授权，这个状态码必须和WWW-Authenticate报头域一起使用。</li><li>403 Forbidden：服务器收到请求，但是<strong>拒绝</strong>提供服务。 </li><li>500 Internal Server Error：服务器<strong>内部错误</strong>，无法完成请求。 </li><li>503 Server Unavailable：服务器<strong>当前不能处理</strong>客户端的请求，一段时间后可能恢复正常。 </li></ul><h2 id="5-3-4-HTTP的消息报头"><a href="#5-3-4-HTTP的消息报头" class="headerlink" title="5.3.4 HTTP的消息报头"></a>5.3.4 HTTP的消息报头</h2><h3 id="1-通用报头"><a href="#1-通用报头" class="headerlink" title="1.通用报头"></a>1.通用报头</h3><ul><li>Date:日期和时间</li><li>Connection:允许发送指定连接的选项</li><li>Cache-Control:缓存指令</li></ul><h3 id="2-请求报头"><a href="#2-请求报头" class="headerlink" title="2.请求报头"></a>2.请求报头</h3><ul><li>Host:<strong>主机名</strong>，允许多个域名同处一个IP地址，即虚拟主机。 </li><li>User-Agent:浏览器类型、操作系统等信息</li><li>Accept:指定客户端接收哪些类型的信息</li><li>Accept-Encoding:可识别的数据编码。</li><li>Accept-Language:语言</li><li>Connection:指定与请求/响应连接有关的选项</li><li>Transfer-Encoding:对报文采用了什么编码方式。 </li></ul><h3 id="3-响应报头"><a href="#3-响应报头" class="headerlink" title="3.响应报头"></a>3.响应报头</h3><ul><li>Location:<strong>重定向</strong>接收者到一个新的位置</li><li>Server:包含系统信息</li></ul><h3 id="4-实体报头"><a href="#4-实体报头" class="headerlink" title="4.实体报头"></a>4.实体报头</h3><ul><li>Content-Type:实体正文的媒体<strong>类型</strong></li><li>Content-Lenght:正文的长度</li><li>Content-Language:自然语言。 </li><li>Content-Encoding:修饰符</li><li>Last-Modified:最后修改日期和时间</li><li>Expires:响应过期的日期和时间。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 网络编程与网络框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.2 TCP的三次握手与四次挥手</title>
      <link href="/2019/11/21/5.2-tcp-de-san-ci-wo-shou-yu-si-ci-hui-shou/"/>
      <url>/2019/11/21/5.2-tcp-de-san-ci-wo-shou-yu-si-ci-hui-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="5-2-TCP的三次握手与四次挥手"><a href="#5-2-TCP的三次握手与四次挥手" class="headerlink" title="5.2 TCP的三次握手与四次挥手"></a>5.2 TCP的三次握手与四次挥手</h1><h2 id="1-什么是三次握手"><a href="#1-什么是三次握手" class="headerlink" title="1.什么是三次握手"></a>1.什么是三次握手</h2><ul><li>第一次握手：建立连接。客户端<strong>发送连接请求</strong>报文段，等待服务端的确认。 </li><li>第二次握手： 服务器<strong>收到</strong>客户端的 SYN 报文段，对 SYN 报文段进行确认，设置Acknowledgment Number（ACK）为 x+1（seq+1）；同时自己还要发送 SYN 请求信息，将SYN设置为1、seq为y。服务端将上述所有信息放到SYN+ACK报文段中，一并<strong>发送给客户端</strong>，此时服务端进入SYN_RCVD状态。 （<strong>通知已经收到</strong>）</li><li>第三次握手：客户端收到服务端的SYN+ACK报文段；然后将ACK设置为y+1，向服务端发送ACK报 文段，这个报文段发送完毕后，客户端和服务端都进入ESTABLISHED （TCP连接成功）状态，完成TCP的 三次握手。 <strong>建立连接</strong></li></ul><h2 id="2-什么是4次挥手（断开连接）"><a href="#2-什么是4次挥手（断开连接）" class="headerlink" title="2.什么是4次挥手（断开连接）"></a>2.什么是4次挥手（断开连接）</h2><ul><li>第一次挥手：表示客户端没有数据要发送给服务端了</li><li>第二次挥手：服务端收到</li><li>第三次挥手：服务端请求关闭连接</li><li>第四次挥手：关闭连接</li></ul><p><img src="https://i.bmp.ovh/imgs/2019/11/5eb195994ca3849c.png" alt></p><h2 id="3-每次连接都要握手挥手吗"><a href="#3-每次连接都要握手挥手吗" class="headerlink" title="3.每次连接都要握手挥手吗"></a>3.每次连接都要握手挥手吗</h2><p><strong>HTTP</strong>有一种叫作keepalive connections的机制，它可以在传输数据后仍然保持连接，当客户端需要再次获取数据时，直接使用<strong>刚刚空闲</strong>下来的连接而<strong>无须</strong>再次<strong>握手</strong></p><p><img src="https://i.bmp.ovh/imgs/2019/11/93d82510d02dd074.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 网络编程与网络框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.1 网络分层</title>
      <link href="/2019/11/21/5.1-wang-luo-fen-ceng/"/>
      <url>/2019/11/21/5.1-wang-luo-fen-ceng/</url>
      
        <content type="html"><![CDATA[<h1 id="5-1-网络分层"><a href="#5-1-网络分层" class="headerlink" title="5.1 网络分层"></a>5.1 网络分层</h1><h2 id="1-什么是网络分层"><a href="#1-什么是网络分层" class="headerlink" title="1. 什么是网络分层"></a>1. 什么是网络分层</h2><p>将网络节点所要完成的数据的<strong>发送或转发</strong>、<strong>打包或拆包</strong>，以及控<strong>制信息的加载或拆出</strong>等工作，分别由不同的<strong>硬件和软件</strong>模块来完成。</p><h2 id="2-网络分层是怎样的？"><a href="#2-网络分层是怎样的？" class="headerlink" title="2.网络分层是怎样的？"></a>2.网络分层是怎样的？</h2><p><img src="https://i.bmp.ovh/imgs/2019/11/f8dd96e3e95a60c7.png" alt></p><h3 id="2-1-物理层"><a href="#2-1-物理层" class="headerlink" title="2.1 物理层"></a>2.1 物理层</h3><p>把计算机连接起来的物理手段</p><h3 id="2-2-数据链路层"><a href="#2-2-数据链路层" class="headerlink" title="2.2 数据链路层"></a>2.2 数据链路层</h3><p>主要功能是如何在不可靠的物理线路上进行数据的可靠传递。将网络层的数据分割为<strong>帧</strong>供物理层传输</p><p>帧是用来<strong>移动数据的结构包</strong>，它不仅包括<strong>原始数据</strong>，还包括发送方和接收方的<strong>物理地址</strong>以及<strong>纠错和控制</strong>信息</p><h3 id="2-3-网络层"><a href="#2-3-网络层" class="headerlink" title="2.3 网络层"></a>2.3 网络层</h3><p>是建立<strong>主机到主机</strong>的通信，决定如何将数据从发送方路由到接收方</p><h3 id="2-4-传输层"><a href="#2-4-传输层" class="headerlink" title="2.4 传输层"></a>2.4 传输层</h3><p>应用程序提供<strong>端到端</strong>的通信</p><p>有两个传输协议：<strong>TCP</strong>（传输控制协议）和<strong>UDP</strong>（用户数据报协议）。</p><h3 id="2-5-应用层"><a href="#2-5-应用层" class="headerlink" title="2.5 应用层"></a>2.5 应用层</h3><p>解读传输层的数据</p><p>它的主要协议有<strong>HTTP</strong>、FTP、Telnet、SMTP、POP3等。</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 网络编程与网络框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.5 AsyncTask的原理</title>
      <link href="/2019/11/21/4.5-asynctask-de-yuan-li/"/>
      <url>/2019/11/21/4.5-asynctask-de-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="4-5-AsyncTask的原理"><a href="#4-5-AsyncTask的原理" class="headerlink" title="4.5 AsyncTask的原理"></a>4.5 AsyncTask的原理</h1><h2 id="1-AsyncTask源码分析"><a href="#1-AsyncTask源码分析" class="headerlink" title="1.AsyncTask源码分析"></a>1.AsyncTask源码分析</h2><p>AsyncTask在3.0版本之前和3.0及以后版本有着较大的改动</p><p>3.0版本前是并行的，有可能会执行饱和策略，当任务数大于138</p><h3 id="1-1-Android-7-0版本的AsyncTask"><a href="#1-1-Android-7-0版本的AsyncTask" class="headerlink" title="1.1 Android 7.0版本的AsyncTask"></a>1.1 Android 7.0版本的AsyncTask</h3><p><img src="https://ftp.bmp.ovh/imgs/2019/11/d869cabc46b4c2d0.jpg" alt></p><p>其实就是AsyncTask里面有个<strong>线程池串行</strong>（之前是并行），线程池里面有<strong>阻塞队列</strong>，用<strong>InternalHandler</strong>传递信息</p><p>不会出现执行饱和策略</p><p>如果想并行就</p><pre class=" language-java"><code class="language-java">asyncTask<span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">,</span>＂＂<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.4 线程池</title>
      <link href="/2019/11/21/4.4-xian-cheng-chi/"/>
      <url>/2019/11/21/4.4-xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="4-4-线程池"><a href="#4-4-线程池" class="headerlink" title="4.4 线程池"></a>4.4 线程池</h1><h2 id="4-4-1-ThreadPoolExecutor"><a href="#4-4-1-ThreadPoolExecutor" class="headerlink" title="4.4.1 ThreadPoolExecutor"></a>4.4.1 ThreadPoolExecutor</h2><h3 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//corePoolSize是核心线程数，maximumPoolSize最大线程数，keepAliveTime超时时间，unit时间单位，workQueue任务队列，threadFactory线程工厂，一般为空，RejectedExecutionHandler饱和策略</span>  <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//核心线程数</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//最大线程数</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//超时时间</span>                              TimeUnit unit<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//时间单位</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//任务队列</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程工厂</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//饱和策略</span>  <span class="token punctuation">{</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-什么是饱和策略RejectedExecutionHandler"><a href="#2-什么是饱和策略RejectedExecutionHandler" class="headerlink" title="2.什么是饱和策略RejectedExecutionHandler"></a>2.什么是饱和策略RejectedExecutionHandler</h3><p>当任务队列和线程池<strong>都满了</strong>时所采取的应对策略，默认是<strong>AbordPolicy</strong>，表示<strong>无法处理</strong>新任务，并抛出RejectedExecutionException异常</p><p>此外还有3种策略，它们分 别如下。</p><p> （1）CallerRunsPolicy：<strong>用调用者</strong>所在的线程来处理任务。此策略提供简单的反馈控制机制，能够减缓 新任务的提交速度。 </p><p>（2）DiscardPolicy：不能执行的任务，并将该<strong>任务删除</strong>。</p><p> （3）DiscardOldestPolicy：<strong>丢弃队列最近</strong>的任务，并执行当前的任务。</p><h2 id="4-4-2-线程池的处理流程和原理"><a href="#4-4-2-线程池的处理流程和原理" class="headerlink" title="4.4.2 线程池的处理流程和原理"></a>4.4.2 线程池的处理流程和原理</h2><p><img src="https://i.bmp.ovh/imgs/2019/11/c61f6297cfff9f18.png" alt></p><p><img src="https://i.bmp.ovh/imgs/2019/11/17b6be95e2d114a2.png" alt></p><h2 id="4-4-3-线程池的种类"><a href="#4-4-3-线程池的种类" class="headerlink" title="4.4.3 线程池的种类"></a>4.4.3 线程池的种类</h2><h3 id="1-FixedThreadPool"><a href="#1-FixedThreadPool" class="headerlink" title="1.FixedThreadPool"></a>1.FixedThreadPool</h3><p><strong>固定</strong>线程数的线程池，<strong>只有核心线程</strong>，采用无界的阻塞队列LinkedBlockingQueue</p><h3 id="2-CachedThreadPool"><a href="#2-CachedThreadPool" class="headerlink" title="2.CachedThreadPool"></a>2.CachedThreadPool</h3><p><strong>根据需要</strong>创建线程，<strong>没有核心线程</strong>，非核心线程是无界的，用了阻塞队列 SynchronousQueue，处理流程是，只要有任务，我就新建一个线程给你处理，所以队列里面根本为空，适于<strong>大量</strong>的需要<strong>立即处理</strong>并且<strong>耗时较少</strong>的任务。 </p><h3 id="3-SingleThreadExecutor"><a href="#3-SingleThreadExecutor" class="headerlink" title="3.SingleThreadExecutor"></a>3.SingleThreadExecutor</h3><p><strong>单</strong>个工作线程的线程池</p><h3 id="4-ScheduledThreadPool"><a href="#4-ScheduledThreadPool" class="headerlink" title="4.ScheduledThreadPool"></a>4.ScheduledThreadPool</h3><p>实现<strong>定时</strong>和<strong>周期</strong>性任务</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.3 阻塞队列</title>
      <link href="/2019/11/21/4.3-zu-sai-dui-lie/"/>
      <url>/2019/11/21/4.3-zu-sai-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="4-3-阻塞队列"><a href="#4-3-阻塞队列" class="headerlink" title="4.3 阻塞队列"></a>4.3 阻塞队列</h1><h2 id="4-3-1-阻塞队列简介"><a href="#4-3-1-阻塞队列简介" class="headerlink" title="4.3.1 阻塞队列简介"></a>4.3.1 阻塞队列简介</h2><h3 id="1-什么是阻塞队列呢"><a href="#1-什么是阻塞队列呢" class="headerlink" title="1.什么是阻塞队列呢"></a>1.什么是阻塞队列呢</h3><p>阻塞队列常用于<strong>生产者和消费者</strong>的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。 </p><h3 id="2-什么时候会阻塞呢？"><a href="#2-什么时候会阻塞呢？" class="headerlink" title="2.什么时候会阻塞呢？"></a>2.什么时候会阻塞呢？</h3><ul><li>当队列中<strong>没有数据</strong>的情况，拿不了东西</li><li>当队列中<strong>填满数据</strong>的情况下，生产不了东西</li></ul><h3 id="3-BlockingQueue的核心方法"><a href="#3-BlockingQueue的核心方法" class="headerlink" title="3.BlockingQueue的核心方法"></a>3.BlockingQueue的核心方法</h3><h4 id="3-1-放入数据"><a href="#3-1-放入数据" class="headerlink" title="3.1 放入数据"></a>3.1 放入数据</h4><ul><li><strong>offer</strong>（anObject）：即如果BlockingQueue可以容纳，则返回true，否则返回false。<strong>不阻塞</strong>当前执行方法的线程。</li><li>offer（E o，long timeout，TimeUnit unit）：：可以设定等待的时间。如果在指定的时间内还不能往队列 中加入BlockingQueue，则返回失败。 </li><li><strong>put</strong>（anObject）：将anObject加到BlockingQueue里。如果BlockQueue没有空间，则调用此方法的线程 被<strong>阻断</strong>，直到BlockingQueue里面有空间再继续。 </li></ul><h4 id="3-2-获取数据"><a href="#3-2-获取数据" class="headerlink" title="3.2 获取数据"></a>3.2 获取数据</h4><ul><li><strong>poll</strong>（time）：取走 BlockingQueue 里排在<strong>首位</strong>的对象。若不能立即取出，则可以等 time参数规定的时间。取不到时返回null。 （非阻断）</li><li><strong>take</strong>（）：取走BlockingQueue里排在首位的对象。若BlockingQueue为空，则<strong>阻断</strong>进入等待状态，直 到 BlockingQueue有新的数据被加入。 </li><li>drainTo（）：一次性从BlockingQueue获取<strong>所有可用</strong>的数据对象，drain是<strong>喝干</strong>的意思</li></ul><h2 id="4-3-2-Java中的阻塞队列"><a href="#4-3-2-Java中的阻塞队列" class="headerlink" title="4.3.2 Java中的阻塞队列"></a>4.3.2 Java中的阻塞队列</h2><ul><li>ArrayBlockingQueue：由数组结构组成的<strong>有界</strong>阻塞队列。 最常用</li><li>LinkedBlockingQueue：由链表结构组成的有界阻塞队列。最常用，注意一定要给个大小</li><li>PriorityBlockingQueue：支持<strong>优先级排序</strong>的无界阻塞队列。默认自然升序<strong>排列</strong></li><li>DelayQueue：使用<strong>优先级队列</strong>实现的无界阻塞队列。到期才取走</li><li>SynchronousQueue：<strong>不存储</strong>元素的阻塞队列。插入操作必须等待另一个线程的移除操作，只能<strong>一放进去就被都拿走</strong></li><li>LinkedTransferQueue：由链表结构组成的无界阻塞队列。</li><li>LinkedBlockingDeque：由链表结构组成的<strong>双向阻塞</strong>队列，Deque是双向阻塞的意思</li></ul><h2 id="4-3-4-阻塞队列的使用场景"><a href="#4-3-4-阻塞队列的使用场景" class="headerlink" title="4.3.4 阻塞队列的使用场景"></a>4.3.4 阻塞队列的使用场景</h2><p>生产者：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue blockingQueue<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置队列缓存的大小。生产过程中超过这个大小就暂时停止生产</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> QUEUE_SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>BlockingQueue blockingQueue<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>blockingQueue <span class="token operator">=</span> blockingQueue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> task <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在生产："</span> <span class="token operator">+</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//将生产出来的产品放在队列缓存中</span>                    blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>task<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//让其停止一会，便于查看效果</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>消费者：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//消费者</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue blockingQueue<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>BlockingQueue blockingQueue<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>blockingQueue <span class="token operator">=</span> blockingQueue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//只要阻塞队列中有任务，就一直去消费</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在消费： "</span> <span class="token operator">+</span> blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//让其停止一会，便于查看效果</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> 其实是里面封装了锁，当满的时候会给生产者加锁，当空的时候会生产者自动解锁</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.2 同步</title>
      <link href="/2019/11/21/4.2-tong-bu/"/>
      <url>/2019/11/21/4.2-tong-bu/</url>
      
        <content type="html"><![CDATA[<h1 id="4-2-同步"><a href="#4-2-同步" class="headerlink" title="4.2 同步"></a>4.2 同步</h1><h2 id="4-2-1-重入锁与条件对象"><a href="#4-2-1-重入锁与条件对象" class="headerlink" title="4.2.1 重入锁与条件对象"></a>4.2.1 重入锁与条件对象</h2><h3 id="1-什么是重入锁"><a href="#1-什么是重入锁" class="headerlink" title="1.什么是重入锁"></a>1.什么是重入锁</h3><p>重入锁ReentrantLock就是支持<strong>重进入</strong>的锁，它表示该锁能够支持一个线程对资源的<strong>重复加锁。</strong></p><p><img src="https://i.bmp.ovh/imgs/2019/11/cf21578ee3f0c4c6.png" alt></p><p>这一结构确保任何时刻只有一个线程进入临界区，临界区就是在<strong>同一时刻只能有一个任务</strong>访问的代码区。</p><h3 id="2-什么是条件对象Condition"><a href="#2-什么是条件对象Condition" class="headerlink" title="2.什么是条件对象Condition"></a>2.什么是条件对象Condition</h3><p>条件对象来管理那些已经<strong>获得了一个锁</strong>但是却<strong>不能做有用工作</strong>的线程，条件对象又被称作条件变量，一般要配合ReentrantLock使用，用Condition.await()可以阻塞当前线程，并放弃锁</p><h3 id="3-例子："><a href="#3-例子：" class="headerlink" title="3.例子："></a>3.例子：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bank</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Condition sufficientFunds<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        sufficientFunds <span class="token operator">=</span> bankLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>    bankLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>accounts<span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">&lt;</span> amount<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//当要转给别人的前大于你所拥有的钱的时候，调用Condition的await可以阻塞当前线程，并放弃锁</span>            sufficientFunds<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">//阻塞状态解除,进入可运行状态</span>        sufficientFunds<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span><span class="token punctuation">{</span>        bankLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-2-2-同步方法"><a href="#4-2-2-同步方法" class="headerlink" title="4.2.2 同步方法"></a>4.2.2 同步方法</h2><h3 id="1-synchronized-关键字"><a href="#1-synchronized-关键字" class="headerlink" title="1.synchronized 关键字"></a>1.synchronized 关键字</h3><p>其方法中的await相当于  sufficientFunds.await();</p><p>notyfyAll相对于signalAll</p><h2 id="4-2-3-同步代码块"><a href="#4-2-3-同步代码块" class="headerlink" title="4.2.3 同步代码块"></a>4.2.3 同步代码块</h2><p>块可以让我们精确地控制到具体的“成员变量”，缩小同步的范围，提高效率</p><p><strong>一般实现同步</strong>最好用java.util.concurrent包下提供的类，比如<strong>阻塞队列</strong>。如果<strong>同步方法</strong>适合你的程序，那么请尽量使用同步方法，这样可以减少编写代码的数量，减少出错的概率。如果特别需要使用<strong>Lock/Condition</strong>结构提供的<strong>独有特性</strong>时，才使用Lock/Condition</p><p>（Condition的强大之处在于它可以为多个线程间<strong>建立不同的Condition</strong>， 使用synchronized/wait()只有一个阻塞队列，notifyAll会唤起所有阻塞队列下的线程，而使用lock/condition，可以实现<strong>多个阻塞队列</strong>，<strong>signalAll</strong>只会<strong>唤起某个</strong>阻塞队列下的<strong>阻塞线程</strong>，这就是后面所说的阻塞队列的知识）</p><h2 id="4-2-4-volatile"><a href="#4-2-4-volatile" class="headerlink" title="4.2.4 volatile"></a>4.2.4 volatile</h2><blockquote><p>在讲到volatile关键字之前，我们需要了解一下<strong>内存模型</strong>的相关概念以及<strong>并发编程中的3个特性</strong>：原子性、可见性和有序性。 </p></blockquote><h3 id="1-Java内存模型"><a href="#1-Java内存模型" class="headerlink" title="1.Java内存模型"></a>1.Java内存模型</h3><p>Java 内存模型定义了<strong>线程和主存</strong>之间的抽象关系：线程之间的<strong>共享变量</strong>存储在<strong>主存</strong>中， 每个线程都有一个<strong>私有的本地内存</strong>（工作内存），本地内存中存储了该线程共享变量的<strong>副本</strong>。</p><p><img src="https://i.bmp.ovh/imgs/2019/11/9c5f1de764bb8c47.png" alt></p><p>通信的话的步骤：</p><p>（1）线程A把线程A本地内存中<strong>更新过的共享变量刷新到主存</strong>中去。 </p><p>（2）线程B到主存中去<strong>读取</strong>线程A之前已<strong>更新过的共享变量</strong>。</p><h3 id="2-原子性、可见性和有序性"><a href="#2-原子性、可见性和有序性" class="headerlink" title="2.原子性、可见性和有序性"></a>2.原子性、可见性和有序性</h3><h4 id="2-1-原子性"><a href="#2-1-原子性" class="headerlink" title="2.1 原子性"></a>2.1 原子性</h4><p>对基本数据类型变量的<strong>读取和赋值</strong>（将数字赋值给某个变量）操作是原子性操作</p><pre class=" language-java"><code class="language-java">x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//原子性操作</span>y<span class="token operator">=</span>x<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先读取x的值，再将x的值写入工作内存</span>x<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//语句3包括3个操作：读取x的值、对x的值进行加1、向工作内存写入新值</span></code></pre><p>例如： AtomicInteger 类提供了方法incrementAndGet和decrementAndGet，它们分别以<strong>原子方式</strong>将一个整数<strong>自增</strong>和自减。</p><h4 id="2-2-可见性"><a href="#2-2-可见性" class="headerlink" title="2.2 可见性"></a>2.2 可见性</h4><p>一个线程修改的结果，另一个线程马上就能看到。</p><h4 id="2-3-有序性"><a href="#2-3-有序性" class="headerlink" title="2.3 有序性"></a>2.3 有序性</h4><p>通过<strong>volatile</strong>来保证有序性，除了volatile，也可以通过synchronized和Lock（只有一个线程执行同步代码）来保证有序性。</p><h3 id="3-volatile关键字"><a href="#3-volatile关键字" class="headerlink" title="3.volatile关键字"></a>3.volatile关键字</h3><p>被volatile修饰之后，其就具备了两个含义</p><ul><li><p>一个是线程修改了变量的值时，变量的新值对其他线程是<strong>立即可见</strong>的</p></li><li><p><strong>禁止使用指令重排序</strong></p></li></ul><h4 id="3-1-volatile不保证原子性"><a href="#3-1-volatile不保证原子性" class="headerlink" title="3.1  volatile不保证原子性"></a>3.1  volatile不保证原子性</h4><h4 id="3-2-volatile保证有序性"><a href="#3-2-volatile保证有序性" class="headerlink" title="3.2 volatile保证有序性"></a>3.2 volatile保证有序性</h4><p><strong>禁止指令重排序</strong>，2层含义</p><ol><li>在其前面的操作已经全部执行完毕，并且结果会对后面的操作可见</li><li>在volatile变量之前的语句不能在volatile变量后面执行</li></ol><h3 id="4-正确使用volatile关键字"><a href="#4-正确使用volatile关键字" class="headerlink" title="4.正确使用volatile关键字"></a>4.正确使用volatile关键字</h3><h4 id="4-1-使用条件"><a href="#4-1-使用条件" class="headerlink" title="4.1 使用条件"></a>4.1 使用条件</h4><h5 id="4-1-1-对变量的写操作不会依赖于当前值（不能是自增、自减）"><a href="#4-1-1-对变量的写操作不会依赖于当前值（不能是自增、自减）" class="headerlink" title="4.1.1 对变量的写操作不会依赖于当前值（不能是自增、自减）"></a>4.1.1 对变量的写操作不会依赖于当前值（不能是自增、自减）</h5><h5 id="4-2-2-该变量没有包含在具有其他变量的不变式中"><a href="#4-2-2-该变量没有包含在具有其他变量的不变式中" class="headerlink" title="4.2.2 该变量没有包含在具有其他变量的不变式中"></a>4.2.2 该变量没有包含在具有其他变量的不变式中</h5><p>它包含了一个不变式：下界总是小于或等于上界</p><p>初始状态是 （0，5），在<strong>同一时间</strong>内，线程A调用<strong>setLower</strong>（4）并且线程B调用<strong>setUpper</strong>（3），</p><p>最后的范围值是（4， 3），错误</p><h3 id="4-2-应用场景"><a href="#4-2-应用场景" class="headerlink" title="4.2 应用场景"></a>4.2 应用场景</h3><h5 id="4-2-1-状态标志"><a href="#4-2-1-状态标志" class="headerlink" title="4.2.1 状态标志"></a>4.2.1 状态标志</h5><p>其实就是线程的终止的时候的状态控制</p><h5 id="4-2-2-双重检查模式"><a href="#4-2-2-双重检查模式" class="headerlink" title="4.2.2 双重检查模式"></a>4.2.2 双重检查模式</h5><p><img src="https://i.bmp.ovh/imgs/2019/11/20cbf759f867dd14.png" alt></p><p>避免重排序</p><p>除了上面2种情况，其他情况用synchronized</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.1 线程基础</title>
      <link href="/2019/11/21/4.1-xian-cheng-ji-chu/"/>
      <url>/2019/11/21/4.1-xian-cheng-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-线程基础"><a href="#4-1-线程基础" class="headerlink" title="4.1 线程基础"></a>4.1 线程基础</h1><h2 id="4-1-1-进程与线程"><a href="#4-1-1-进程与线程" class="headerlink" title="4.1.1  进程与线程"></a>4.1.1  进程与线程</h2><h3 id="1-什么是进程"><a href="#1-什么是进程" class="headerlink" title="1.什么是进程"></a>1.什么是进程</h3><p>进程是<strong>操作系统</strong>结构的<strong>基础</strong>，是程序在一个数据集合上运行的过程，是系统进行<strong>资源分配和调度</strong>的<strong>基本单位</strong>。</p><p><img src="https://i.bmp.ovh/imgs/2019/11/8a4e87093df261ac.png" alt></p><p>比如打开任务管理器，就可以看到很多进程</p><h3 id="2-什么是线程"><a href="#2-什么是线程" class="headerlink" title="2.什么是线程"></a>2.什么是线程</h3><p>谷歌浏览器的<strong>进程</strong>，它里面运行了很多<strong>子任务</strong>，这些子任务有的加载网页，有的处理缓存，有的进行下载，这些子任务就是线程，是<strong>操作系统调度</strong>的最小单元，也叫作轻量级进程。</p><h2 id="4-1-2-线程的状态"><a href="#4-1-2-线程的状态" class="headerlink" title="4.1.2 线程的状态"></a>4.1.2 线程的状态</h2><ul><li>New：新创建状态</li><li>Runnable：可运行状态。</li><li>Blocked:阻塞状态。表示线程被锁阻塞，它暂时不活动(当进入<strong>同步</strong>方法并且<strong>没有获取到锁</strong>的时候，会出现这种情况)</li><li>Waiting:等待状态。线程暂时不活动，并且不运行任何代码，这消耗最少的资源，<strong>直到线程调度器重新激活它</strong>。 当<strong>wait或者join</strong>的时候会出现</li><li>Timed waiting：超时等待状态。可以在指定的时间<strong>自行返回</strong>的。 当<strong>sleep（long）</strong>或者是wait(long)的时候进入这个状态</li><li>Terminated:终止状态。第一种就是run方法<strong>执行完毕</strong>正常退出；第二种就是因为一个<strong>没有捕获的异常</strong>而终止了run方法</li></ul><p><img src="https://i.bmp.ovh/imgs/2019/11/589907b6a9f7ca17.png" alt></p><h2 id="4-1-3-创建线程"><a href="#4-1-3-创建线程" class="headerlink" title="4.1.3 创建线程"></a>4.1.3 创建线程</h2><h3 id="1-继承Thread类，重写run（）方法"><a href="#1-继承Thread类，重写run（）方法" class="headerlink" title="1.继承Thread类，重写run（）方法"></a>1.继承Thread类，重写run（）方法</h3><h3 id="2-实现Runnable接口，并实现该接口的run（）方法"><a href="#2-实现Runnable接口，并实现该接口的run（）方法" class="headerlink" title="2.实现Runnable接口，并实现该接口的run（）方法"></a>2.实现Runnable接口，并实现该接口的run（）方法</h3><h3 id="3-实现Callable接口，重写call（）方法"><a href="#3-实现Callable接口，重写call（）方法" class="headerlink" title="3.实现Callable接口，重写call（）方法"></a>3.实现Callable接口，重写call（）方法</h3><h4 id="3-1-和实现Runnable接口比，有什么优点"><a href="#3-1-和实现Runnable接口比，有什么优点" class="headerlink" title="3.1 和实现Runnable接口比，有什么优点"></a>3.1 和实现Runnable接口比，有什么优点</h4><ul><li>Callable可以在任务接受后提供一个<strong>返回值</strong></li><li>call（）方法可以<strong>抛出异常</strong></li><li>可以拿到一个<strong>Future对象</strong>，Future对象表示异步计算的结果，它提供了检查<strong>计算是否完成</strong>的方法。但调用 Future的<strong>get</strong>（）方法以获取结果时，当前线程就会<strong>阻塞</strong>，直到call（）方法返回结果。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试Callable */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCallable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 新建一个类实现callable接口     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTestCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyTestCallable myTestCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTestCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>Object<span class="token operator">></span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>myTestCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-1-4-理解中断"><a href="#4-1-4-理解中断" class="headerlink" title="4.1.4 理解中断"></a>4.1.4 理解中断</h2><h3 id="1-用interrupted来中断"><a href="#1-用interrupted来中断" class="headerlink" title="1.用interrupted来中断"></a>1.用interrupted来中断</h3><p>当一个线程调用 <strong>interrupt</strong> 方法时，线程的<strong>中断标识位将被置位</strong>（中断标识位为true），线程会不时地检测这个中断标识位，以判断线程是否应该被中断。要想知道线程是否被置位，可以调用 Thread.currentThread（）.isInterrupted（）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在run方法里面加上判断</span><span class="token comment" spellcheck="true">//如果没有被阻塞</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span>currentThread（）<span class="token punctuation">.</span>isInterrupted（）<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//doSomething</span><span class="token punctuation">}</span></code></pre><h2 id="4-1-5-安全地终止线程"><a href="#4-1-5-安全地终止线程" class="headerlink" title="4.1.5 安全地终止线程"></a>4.1.5 安全地终止线程</h2><h3 id="1-利用中断来终结"><a href="#1-利用中断来终结" class="headerlink" title="1.利用中断来终结"></a>1.利用中断来终结</h3><p><img src="https://i.bmp.ovh/imgs/2019/11/350866048e4a686d.png" alt></p><h3 id="2-利用boolean变量"><a href="#2-利用boolean变量" class="headerlink" title="2.利用boolean变量"></a>2.利用boolean变量</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MoonRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoonRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runner<span class="token punctuation">,</span> <span class="token string">"MoonThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            runner<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MoonRunner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意的是这里的变量是用volatile修饰</span>        <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> on <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>on<span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sTop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置一个取消的方法</span>        <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            on <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.7 View的工作流程</title>
      <link href="/2019/11/21/3.7-view-de-gong-zuo-liu-cheng/"/>
      <url>/2019/11/21/3.7-view-de-gong-zuo-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="3-7-View的工作流程"><a href="#3-7-View的工作流程" class="headerlink" title="3.7 View的工作流程"></a>3.7 View的工作流程</h1><h2 id="3-7-1-View的工作流程入口"><a href="#3-7-1-View的工作流程入口" class="headerlink" title="3.7.1 View的工作流程入口"></a>3.7.1 View的工作流程入口</h2><h3 id="1-DecorView被加载到Window中"><a href="#1-DecorView被加载到Window中" class="headerlink" title="1.DecorView被加载到Window中"></a>1.DecorView被加载到Window中</h3><ol><li><p>startAcivity</p></li><li><p>handleLaunchActivity</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Activity <span class="token function">handleLaunchActivity</span><span class="token punctuation">(</span>ActivityClientRecord r<span class="token punctuation">,</span>            PendingTransactionActions pendingActions<span class="token punctuation">,</span> Intent customIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">final</span> Activity a <span class="token operator">=</span> <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> customIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1进去</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span>createdConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>mConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">reportSizeConfigurations</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span>mFinished <span class="token operator">&amp;&amp;</span> pendingActions <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                pendingActions<span class="token punctuation">.</span><span class="token function">setOldState</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>                pendingActions<span class="token punctuation">.</span><span class="token function">setRestoreInstanceState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pendingActions<span class="token punctuation">.</span><span class="token function">setCallOnPostCreate</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> </code></pre><p>这里1进入会调用到Activity的 <strong>onCreate</strong>方法，从而完成<strong>DecorView</strong>的创建，</p></li><li><p>handleResumeActivity</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleResumeActivity</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span> <span class="token keyword">boolean</span> finalStateRequest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isForward<span class="token punctuation">,</span>            String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ActivityClientRecord r <span class="token operator">=</span> <span class="token function">performResumeActivity</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> finalStateRequest<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>window <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">.</span>mFinished <span class="token operator">&amp;&amp;</span> willBeVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span>window <span class="token operator">=</span> r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              View decor <span class="token operator">=</span> r<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//得到DecorView</span>            decor<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>INVISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ViewManager wm <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getWindowManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//得到WindowManager</span>            WindowManager<span class="token punctuation">.</span>LayoutParams l <span class="token operator">=</span> r<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>mDecor <span class="token operator">=</span> decor<span class="token punctuation">;</span>            l<span class="token punctuation">.</span>type <span class="token operator">=</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>TYPE_BASE_APPLICATION<span class="token punctuation">;</span>            l<span class="token punctuation">.</span>softInputMode <span class="token operator">|=</span> forwardBit<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>mPreserveWindow<span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">.</span>mWindowAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span>mPreserveWindow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                ViewRootImpl impl <span class="token operator">=</span> decor<span class="token punctuation">.</span><span class="token function">getViewRootImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>impl <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    impl<span class="token punctuation">.</span><span class="token function">notifyChildRebuilt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>mVisibleFromClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span>mWindowAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    a<span class="token punctuation">.</span>mWindowAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                     wm<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>decor<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//调用的是WindowManager的实现类的方法</span>                <span class="token punctuation">}</span></code></pre></li><li><p>WindowManager的实现类中的addView</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> View view<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">applyDefaultToken</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        mGlobal<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">,</span> mContext<span class="token punctuation">.</span><span class="token function">getDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mParentWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//进入</span>    <span class="token punctuation">}</span></code></pre></li><li><p>WindowManagerGlobal 的 addView方</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">,</span>            Display display<span class="token punctuation">,</span> Window parentWindow<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewRootImpl</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> display<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1</span>            view<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>            mViews<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>            mRoots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            mParams<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// do this last because it fires off messages to start doing things</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                root<span class="token punctuation">.</span><span class="token function">setView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> wparams<span class="token punctuation">,</span> panelParentView<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// BadTokenException or InvalidDisplayException, clean up.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">removeViewLocked</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>1处创建了ViewRootImpl实例，2处调用了ViewRootImpl的addView</p><p>这样就把DecorView加载到了Window中</p></li></ol><p><img src="https://ftp.bmp.ovh/imgs/2019/11/df7fb45aa65f6173.jpg" alt></p><h3 id="2-ViewRootlmpl的PerformTraveals方法"><a href="#2-ViewRootlmpl的PerformTraveals方法" class="headerlink" title="2.ViewRootlmpl的PerformTraveals方法"></a>2.ViewRootlmpl的PerformTraveals方法</h3><p>ViewTree开始View的工作流程</p><p>这里面主要执行了3个方法，分别是<strong>performMeasure</strong>、<strong>performLayout</strong>和<strong>performDraw</strong>，在其方法的内部又会分别调用View的measure、layout和draw方法。</p><h2 id="3-7-2-理解MeasureSpec"><a href="#3-7-2-理解MeasureSpec" class="headerlink" title="3.7.2 .理解MeasureSpec"></a>3.7.2 .理解MeasureSpec</h2><h4 id="1-什么是MeasureSpec"><a href="#1-什么是MeasureSpec" class="headerlink" title="1.什么是MeasureSpec"></a>1.什么是MeasureSpec</h4><p>View的内部类，其封装了一个View的<strong>规格尺寸</strong>，包括View的宽和高的信息，</p><h4 id="2-有几种模式SpecMode？"><a href="#2-有几种模式SpecMode？" class="headerlink" title="2.有几种模式SpecMode？"></a>2.有几种模式SpecMode？</h4><ul><li>UNSPECIFIED，specified（规定的）：未指定模式，View想多大就多大，父容器不做限制，</li><li>AT_MOST：最大模式，对应于wrap_comtent</li><li>EXACTLY：精确模式，对应于 match_parent </li></ul><h4 id="3-怎么保存和得到宽高呢"><a href="#3-怎么保存和得到宽高呢" class="headerlink" title="3.怎么保存和得到宽高呢"></a>3.怎么保存和得到宽高呢</h4><p><strong>makeMeasureSpec</strong>来<strong>保存</strong>宽和高的信息。通过<strong>getMode</strong>或getSize<strong>得到</strong>模式和宽、高。 </p><h4 id="4-顶层View怎么得到MeasureSpec呢"><a href="#4-顶层View怎么得到MeasureSpec呢" class="headerlink" title="4.顶层View怎么得到MeasureSpec呢"></a>4.顶层View怎么得到MeasureSpec呢</h4><p>其实是根据自身的LayoutParams来得到MeasureSpec</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRootMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> windowSize<span class="token punctuation">,</span> <span class="token keyword">int</span> rootDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> measureSpec<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>rootDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token operator">:</span>            measureSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token operator">:</span>            measureSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            measureSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>rootDimension<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> measureSpec<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-7-3-View的measure流程"><a href="#3-7-3-View的measure流程" class="headerlink" title="3.7.3 View的measure流程"></a>3.7.3 View的measure流程</h2><blockquote><p>分为 <strong>View</strong> 的 measure 流程和 <strong>ViewGroup</strong> 的measure流程， 只不过ViewGroup的measure流程除了要完成自己的测量，还要遍历地调用子元素的measure（）方法</p></blockquote><h3 id="1-View的measure流程"><a href="#1-View的measure流程" class="headerlink" title="1.View的measure流程"></a>1.View的measure流程</h3><p><img src="https://ftp.bmp.ovh/imgs/2019/11/a0fcfb0d4496bb91.jpg" alt></p><h3 id="2-ViewGroup的measure流程"><a href="#2-ViewGroup的measure流程" class="headerlink" title="2.ViewGroup的measure流程"></a>2.ViewGroup的measure流程</h3><p><img src="https://ftp.bmp.ovh/imgs/2019/11/95f40f7096aa4078.jpg" alt></p><p>LinearLayout的measure流程</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/76e23c250d4d8c11.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.5 解析Scroller</title>
      <link href="/2019/11/21/3.5-jie-xi-scroller/"/>
      <url>/2019/11/21/3.5-jie-xi-scroller/</url>
      
        <content type="html"><![CDATA[<h1 id="3-5-解析Scroller"><a href="#3-5-解析Scroller" class="headerlink" title="3.5 解析Scroller"></a>3.5 解析Scroller</h1><blockquote><p>什么是Scroller呢？他的工作流程是怎样的呢？</p></blockquote><h2 id="1-什么是Scroller？"><a href="#1-什么是Scroller？" class="headerlink" title="1.什么是Scroller？"></a>1.什么是Scroller？</h2><p>实现有过渡效果的滑动</p><h2 id="2-startScroller（）源码是怎样的呢？"><a href="#2-startScroller（）源码是怎样的呢？" class="headerlink" title="2.startScroller（）源码是怎样的呢？"></a>2.startScroller（）源码是怎样的呢？</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startScroll</span><span class="token punctuation">(</span><span class="token keyword">int</span> startX<span class="token punctuation">,</span> <span class="token keyword">int</span> startY<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">,</span> <span class="token keyword">int</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mMode <span class="token operator">=</span> SCROLL_MODE<span class="token punctuation">;</span>        mFinished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        mDuration <span class="token operator">=</span> duration<span class="token punctuation">;</span>        mStartTime <span class="token operator">=</span> AnimationUtils<span class="token punctuation">.</span><span class="token function">currentAnimationTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mStartX <span class="token operator">=</span> startX<span class="token punctuation">;</span>        mStartY <span class="token operator">=</span> startY<span class="token punctuation">;</span>        mFinalX <span class="token operator">=</span> startX <span class="token operator">+</span> dx<span class="token punctuation">;</span>        mFinalY <span class="token operator">=</span> startY <span class="token operator">+</span> dy<span class="token punctuation">;</span>        mDeltaX <span class="token operator">=</span> dx<span class="token punctuation">;</span>        mDeltaY <span class="token operator">=</span> dy<span class="token punctuation">;</span>        mDurationReciprocal <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> mDuration<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看出，<strong>startScroller</strong>只是用来做<strong>前期准备</strong>的，并不能使 View 进行滑动</p><h2 id="3-computeScroll（）方法是怎样的呢？"><a href="#3-computeScroll（）方法是怎样的呢？" class="headerlink" title="3.computeScroll（）方法是怎样的呢？"></a>3.computeScroll（）方法是怎样的呢？</h2><p>computeScroll是什么？</p><p>其实就是通过这个方法进行不断地重绘，从而实现滑动效果,重绘的话，会调用draw,draw会调用computeScroll</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过不断的重绘不断的调用computeScroll方法</span>            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-在scoller中怎么获取当前的ScrollX和ScrollY呢？"><a href="#4-在scoller中怎么获取当前的ScrollX和ScrollY呢？" class="headerlink" title="4.在scoller中怎么获取当前的ScrollX和ScrollY呢？"></a>4.在scoller中怎么获取当前的ScrollX和ScrollY呢？</h2><p>其实就是在调用scrollTo前，调用computeScrollOffset,</p><p>computeScrollOffset（）源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFinished<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算持续时间</span>        <span class="token keyword">int</span> timePassed <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>AnimationUtils<span class="token punctuation">.</span><span class="token function">currentAnimationTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mStartTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//小于设定时间，还没结束</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timePassed <span class="token operator">&lt;</span> mDuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>mMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//执行</span>            <span class="token keyword">case</span> SCROLL_MODE<span class="token operator">:</span>                <span class="token keyword">final</span> <span class="token keyword">float</span> x <span class="token operator">=</span> mInterpolator<span class="token punctuation">.</span><span class="token function">getInterpolation</span><span class="token punctuation">(</span>timePassed <span class="token operator">*</span> mDurationReciprocal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//得到当前的位置</span>                    mCurrX <span class="token operator">=</span> mStartX <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x <span class="token operator">*</span> mDeltaX<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mCurrY <span class="token operator">=</span> mStartY <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x <span class="token operator">*</span> mDeltaY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FLING_MODE<span class="token operator">:</span>                <span class="token keyword">final</span> <span class="token keyword">float</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> timePassed <span class="token operator">/</span> mDuration<span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>NB_SAMPLES <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> distanceCoef <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span>                <span class="token keyword">float</span> velocityCoef <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> NB_SAMPLES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> t_inf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> index <span class="token operator">/</span> NB_SAMPLES<span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> t_sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> NB_SAMPLES<span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> d_inf <span class="token operator">=</span> SPLINE_POSITION<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> d_sup <span class="token operator">=</span> SPLINE_POSITION<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    velocityCoef <span class="token operator">=</span> <span class="token punctuation">(</span>d_sup <span class="token operator">-</span> d_inf<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>t_sup <span class="token operator">-</span> t_inf<span class="token punctuation">)</span><span class="token punctuation">;</span>                    distanceCoef <span class="token operator">=</span> d_inf <span class="token operator">+</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> t_inf<span class="token punctuation">)</span> <span class="token operator">*</span> velocityCoef<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                mCurrVelocity <span class="token operator">=</span> velocityCoef <span class="token operator">*</span> mDistance <span class="token operator">/</span> mDuration <span class="token operator">*</span> <span class="token number">1000.0f</span><span class="token punctuation">;</span>                mCurrX <span class="token operator">=</span> mStartX <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>distanceCoef <span class="token operator">*</span> <span class="token punctuation">(</span>mFinalX <span class="token operator">-</span> mStartX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Pin to mMinX &lt;= mCurrX &lt;= mMaxX</span>                mCurrX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>mCurrX<span class="token punctuation">,</span> mMaxX<span class="token punctuation">)</span><span class="token punctuation">;</span>                mCurrX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>mCurrX<span class="token punctuation">,</span> mMinX<span class="token punctuation">)</span><span class="token punctuation">;</span>                mCurrY <span class="token operator">=</span> mStartY <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>distanceCoef <span class="token operator">*</span> <span class="token punctuation">(</span>mFinalY <span class="token operator">-</span> mStartY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Pin to mMinY &lt;= mCurrY &lt;= mMaxY</span>                mCurrY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>mCurrY<span class="token punctuation">,</span> mMaxY<span class="token punctuation">)</span><span class="token punctuation">;</span>                mCurrY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>mCurrY<span class="token punctuation">,</span> mMinY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mCurrX <span class="token operator">==</span> mFinalX <span class="token operator">&amp;&amp;</span> mCurrY <span class="token operator">==</span> mFinalY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mFinished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            mCurrX <span class="token operator">=</span> mFinalX<span class="token punctuation">;</span>            mCurrY <span class="token operator">=</span> mFinalY<span class="token punctuation">;</span>            mFinished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>首先会计算动画<strong>持续时间</strong>，如果持续时间<strong>小于设定</strong>的滑动时间的话，就执行Switch,因为在startScroll中的mMode值为<strong>SCROLL_MODE</strong>，执行分支语句 SCROLL_MODE，然后得到滑动后的位置</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>其实就是Scroller不能直接实现滑动，先<strong>start</strong>,再调用重绘<strong>invalidate</strong>，重绘调用<strong>draw</strong>，draw调用<strong>computeScroll</strong>，computeScroll中调用<strong>computeScrollOffset获取当前位置</strong>，再调用<strong>invalidate</strong>，循环进行，<strong>直到动画结束</strong></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.6 View的事件分发机制</title>
      <link href="/2019/11/21/3.6-view-de-shi-jian-fen-fa-ji-zhi/"/>
      <url>/2019/11/21/3.6-view-de-shi-jian-fen-fa-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="3-6-View的事件分发机制"><a href="#3-6-View的事件分发机制" class="headerlink" title="3.6 View的事件分发机制"></a>3.6 View的事件分发机制</h1><h2 id="3-6-1-源码解析Activity的构成"><a href="#3-6-1-源码解析Activity的构成" class="headerlink" title="3.6.1 源码解析Activity的构成"></a>3.6.1 源码解析Activity的构成</h2><h3 id="1-让我们来一步一步看源码"><a href="#1-让我们来一步一步看源码" class="headerlink" title="1.让我们来一步一步看源码"></a>1.让我们来一步一步看源码</h3><pre class=" language-java"><code class="language-java"><span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_change_password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//进入</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@LayoutRes</span> <span class="token keyword">int</span> layoutResID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span>layoutResID<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//进入</span>        <span class="token function">initWindowDecorActionBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> mWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneWindow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> window<span class="token punctuation">,</span> activityConfigCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentView</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mContentParent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">installDecor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//进去</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasFeature</span><span class="token punctuation">(</span>FEATURE_CONTENT_TRANSITIONS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mContentParent<span class="token punctuation">.</span><span class="token function">removeAllViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasFeature</span><span class="token punctuation">(</span>FEATURE_CONTENT_TRANSITIONS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Scene newScene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>mContentParent<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">transitionTo</span><span class="token punctuation">(</span>newScene<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mContentParent<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mContentParent<span class="token punctuation">.</span><span class="token function">requestApplyInsets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Callback cb <span class="token operator">=</span> <span class="token function">getCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cb<span class="token punctuation">.</span><span class="token function">onContentChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mContentParentExplicitlySet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre><code> return new DecorView(context, featureId, this, getAttributes());</code></pre><p>总的Activity的构成</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/bda68cabafb44473.png" alt></p><h2 id="3-6-2-源码解析View的事件分发机制"><a href="#3-6-2-源码解析View的事件分发机制" class="headerlink" title="3.6.2 源码解析View的事件分发机制"></a>3.6.2 源码解析View的事件分发机制</h2><h3 id="1-点击事件的关键"><a href="#1-点击事件的关键" class="headerlink" title="1.点击事件的关键"></a>1.点击事件的关键</h3><ul><li>dispatchTouchEvent  —用来进行事件的分发。 </li><li>onInterceptTouchEvent —用来进行事件的拦截</li><li>onTouchEvent —用来处理点击事件</li></ul><h3 id="2-View的事件分发机制"><a href="#2-View的事件分发机制" class="headerlink" title="2.View的事件分发机制"></a>2.View的事件分发机制</h3><p>点击事件-&gt;Activity.dispatchTouchEvent()-&gt;PhoneWindow-&gt;DecorView-&gt;ViewGroup.dispatchTouchEvent</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cancelAndClearTouchTargets</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resetTouchState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> intercepted<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//mFirstTouchTarget的意义是，如果为null,表示当前ViewGroup拦截了事件，否则，没有拦截并交由子View处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN                    <span class="token operator">||</span> mFirstTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">boolean</span> disallowIntercept <span class="token operator">=</span> <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_DISALLOW_INTERCEPT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disallowIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    intercepted <span class="token operator">=</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ev<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// restore action in case it was changed</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                intercepted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span></code></pre><p>总结，如果<strong>拦截</strong>了，<strong>后续</strong>的事件序列都将<strong>交给它处理</strong>，而<strong>不</strong>用再调用<strong>onInterceptTouchEvent</strong>（）方法了。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认情况下不拦截，如果需要拦截就重写该方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childrenCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">final</span> <span class="token keyword">int</span> childIndex <span class="token operator">=</span> <span class="token function">getAndVerifyPreorderedIndex</span><span class="token punctuation">(</span>                                    childrenCount<span class="token punctuation">,</span> i<span class="token punctuation">,</span> customOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">final</span> View child <span class="token operator">=</span> <span class="token function">getAndVerifyPreorderedView</span><span class="token punctuation">(</span>                                    preorderedList<span class="token punctuation">,</span> children<span class="token punctuation">,</span> childIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>childWithAccessibilityFocus <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>childWithAccessibilityFocus <span class="token operator">!=</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                childWithAccessibilityFocus <span class="token operator">=</span> null<span class="token punctuation">;</span>                                i <span class="token operator">=</span> childrenCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个for循环是<strong>倒序遍历</strong>的，即 从<strong>最上层的子View开始往内层遍历。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cancel<span class="token punctuation">,</span>            View child<span class="token punctuation">,</span> <span class="token keyword">int</span> desiredPointerIdBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> handled<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> oldAction <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cancel <span class="token operator">||</span> oldAction <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            event<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//否则调用父类的dispatchTouchEvent ，，进入</span>                handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//如果有子View，就调用子View的</span>                handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            event<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>oldAction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> handled<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>​    <img src="https://ftp.bmp.ovh/imgs/2019/11/f91df53ab01ddefd.png" alt></p><p><img src="https://i.bmp.ovh/imgs/2019/11/8b75a303d20b2887.png" alt></p><p>只要View的<strong>CLICKABLE</strong>和<strong>LONG_CLICKABLE</strong>有<strong>一个为true</strong>，那么 onTouchEvent（）就会返回true消耗这个事件</p><p><img src="https://i.bmp.ovh/imgs/2019/11/3ee29774a431ad5a.png" alt></p><p>如果<strong>设置了点击事件</strong>的话，那么它的<strong>onClick</strong>（）方法 就会被执行。</p><h3 id="3-点击事件分发的传递规则"><a href="#3-点击事件分发的传递规则" class="headerlink" title="3.点击事件分发的传递规则"></a>3.点击事件分发的传递规则</h3><h4 id="3-1-自上而下的传递规则"><a href="#3-1-自上而下的传递规则" class="headerlink" title="3.1 自上而下的传递规则"></a>3.1 自上而下的传递规则</h4><p>其实就是一直寻找子类，如果有子类的话，就将点击事件传到子类（先不管子类处理与否）</p><h4 id="3-2-自下而上的传递规则"><a href="#3-2-自下而上的传递规则" class="headerlink" title="3.2 自下而上的传递规则"></a>3.2 自下而上的传递规则</h4><p>其实就是子类不处理的话，就向上传递给父类，如此，直到找到可以处理的</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.8 自定义View</title>
      <link href="/2019/11/21/3.8-zi-ding-yi-view/"/>
      <url>/2019/11/21/3.8-zi-ding-yi-view/</url>
      
        <content type="html"><![CDATA[<h1 id="3-8-自定义View"><a href="#3-8-自定义View" class="headerlink" title="3.8 自定义View"></a>3.8 自定义View</h1><blockquote><p>自定义View有几类呢？分别的实现方式是什么呢？别急，下面为你一一解答</p></blockquote><h2 id="3-8-0-自定义View分为几类？"><a href="#3-8-0-自定义View分为几类？" class="headerlink" title="3.8.0 自定义View分为几类？"></a>3.8.0 自定义View分为几类？</h2><h3 id="1-自定义View"><a href="#1-自定义View" class="headerlink" title="1.自定义View"></a>1.自定义View</h3><p>自定义View又分为<strong>继承系统控件</strong>（比如TextView）和<strong>继承View</strong></p><h3 id="2-自定义ViewGroup"><a href="#2-自定义ViewGroup" class="headerlink" title="2.自定义ViewGroup"></a>2.自定义ViewGroup</h3><p>自定义ViewGroup也分为<strong>继承 ViewGroup</strong> 和继承<strong>系统特定</strong>的 ViewGroup</p><h3 id="3-自定义组合控件"><a href="#3-自定义组合控件" class="headerlink" title="3.自定义组合控件"></a>3.自定义组合控件</h3><h2 id="3-8-1-继承系统控件的自定义View"><a href="#3-8-1-继承系统控件的自定义View" class="headerlink" title="3.8.1 继承系统控件的自定义View"></a>3.8.1 继承系统控件的自定义View</h2><p>一般是在onDraw方法(绘制)里面处理</p><p>例子：画一个中间带线的TextView</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvalidTextView</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Paint mPaint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">InvalidTextView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">InvalidTextView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">InvalidTextView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置画笔</span>        mPaint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPaint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写onDraw方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.bmp.ovh/imgs/2019/11/ba867dfeb90d257d.png" alt></p><h2 id="3-8-2-继承View的自定义View"><a href="#3-8-2-继承View的自定义View" class="headerlink" title="3.8.2 继承View的自定义View"></a>3.8.2 继承View的自定义View</h2><h3 id="1-要实现或者重写什么方法呢？"><a href="#1-要实现或者重写什么方法呢？" class="headerlink" title="1.要实现或者重写什么方法呢？"></a>1.要实现或者重写什么方法呢？</h3><ul><li>onDraw</li><li>wrap_content属性以及padding 属性的设置</li><li>对外提供自定义的属性</li><li>重写 onTouchEvent（）等触控事件</li></ul><h3 id="2-例子：画一个能够设置padding和支持wrap-content，自定义属性的矩形"><a href="#2-例子：画一个能够设置padding和支持wrap-content，自定义属性的矩形" class="headerlink" title="2.例子：画一个能够设置padding和支持wrap_content，自定义属性的矩形"></a>2.例子：画一个能够设置padding和支持wrap_content，自定义属性的矩形</h3><p><img src="https://i.bmp.ovh/imgs/2019/11/98ff9b43d4123875.png" alt></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RectView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Paint mPaint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mColor<span class="token operator">=</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RectView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">RectView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提取自定义属性</span>        TypedArray mTypedArray<span class="token operator">=</span>context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>RectView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提取RectView属性集合的rect_color属性，如果没设置默认值为Color.RED</span>        mColor<span class="token operator">=</span>mTypedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>RectView_rect_color<span class="token punctuation">,</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取资源后要及时回收</span>        mTypedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">RectView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPaint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>mColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPaint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测量宽高，能够适配wrap_content</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> widthSpecMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightSpecMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> widthSpecSize<span class="token operator">=</span>MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightSpecSize<span class="token operator">=</span>MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//宽高都是wrap_content</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>widthSpecMode<span class="token operator">==</span>MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token operator">&amp;&amp;</span>heightSpecMode<span class="token operator">==</span>MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//宽是wrap_content</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>widthSpecMode<span class="token operator">==</span>MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span>heightSpecSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//高是wrap_content</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>heightSpecMode<span class="token operator">==</span>MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>widthSpecSize<span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//绘制</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到padding</span>        <span class="token keyword">int</span> paddingLeft <span class="token operator">=</span> <span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> paddingRight <span class="token operator">=</span> <span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> paddingTop <span class="token operator">=</span> <span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> paddingBottom <span class="token operator">=</span> <span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到绘制的宽度</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> paddingLeft <span class="token operator">-</span> paddingRight<span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> paddingTop <span class="token operator">-</span> paddingBottom<span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> paddingLeft<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">+</span> paddingTop<span class="token punctuation">,</span> width <span class="token operator">+</span> paddingLeft<span class="token punctuation">,</span> height <span class="token operator">+</span> paddingTop<span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义属性的属性组合：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-stylexable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RectView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rect_color<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>调用：</p><pre class=" language-xml"><code class="language-xml"> &lt;com.example.liuwangshu.mooncustomview.RectView        xmlns:app="http://schemas.android.com/apk/res-auto"        android:id="@+id/rv_rect"        android:layout_width="wrap_content"        android:layout_height="200dp"        android:layout_below="@id/iv_text"        android:layout_marginTop="50dp"        android:layout_centerHorizontal="true"        android:padding="10dp"        <span class="token comment" spellcheck="true">&lt;!--设置图片--></span>        app:rect_color="@android:color/holo_blue_light"        /></code></pre><h2 id="3-8-3-自定义组合控件"><a href="#3-8-3-自定义组合控件" class="headerlink" title="3.8.3 自定义组合控件"></a>3.8.3 自定义组合控件</h2><h3 id="1-适用情况"><a href="#1-适用情况" class="headerlink" title="1.适用情况"></a>1.适用情况</h3><p>顶部的标题栏，或者弹出的固定样式的Dialog</p><h3 id="2-例子：自定义标题栏"><a href="#2-例子：自定义标题栏" class="headerlink" title="2.例子：自定义标题栏"></a>2.例子：自定义标题栏</h3><h4 id="1-布局："><a href="#1-布局：" class="headerlink" title="1.布局："></a>1.布局：</h4><p>其实就是左右两个图片，中间是文字</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/layout_titlebar_rootlayout<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>45dp<span class="token punctuation">"</span></span>   <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_titlebar_left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerInParent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/ico_return<span class="token punctuation">"</span></span>       <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_titlebar_title<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerInParent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>maxEms</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>singleLine</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>ellipsize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>end<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">bold</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_titlebar_right<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerInParent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/title_right<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>clickable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span></code></pre><h4 id="2-代码："><a href="#2-代码：" class="headerlink" title="2.代码："></a>2.代码：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TitleBar</span> <span class="token keyword">extends</span> <span class="token class-name">RelativeLayout</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ImageView iv_titlebar_left<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageView iv_titlebar_right<span class="token punctuation">;</span>    <span class="token keyword">private</span> TextView tv_titlebar_title<span class="token punctuation">;</span>    <span class="token keyword">private</span> RelativeLayout layout_titlebar_rootlayout<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mTextColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">;</span>    <span class="token keyword">private</span> String titlename<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TitleBar</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TitleBar</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initTypedArray</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TitleBar</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initTypedArray</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initTypedArray</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TypedArray mTypedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TitleBar<span class="token punctuation">)</span><span class="token punctuation">;</span>        mColor <span class="token operator">=</span> mTypedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TitleBar_title_bg<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        mTextColor <span class="token operator">=</span> mTypedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TitleBar_title_text_color<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        titlename <span class="token operator">=</span> mTypedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TitleBar_title_text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取资源后要及时回收</span>        mTypedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_customtitle<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iv_titlebar_left <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_titlebar_left<span class="token punctuation">)</span><span class="token punctuation">;</span>        iv_titlebar_right <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_titlebar_right<span class="token punctuation">)</span><span class="token punctuation">;</span>        tv_titlebar_title <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_titlebar_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        layout_titlebar_rootlayout <span class="token operator">=</span> <span class="token punctuation">(</span>RelativeLayout<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>layout_titlebar_rootlayout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置背景颜色</span>        layout_titlebar_rootlayout<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>mColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置标题文字颜色</span>        tv_titlebar_title<span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>mTextColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTitle</span><span class="token punctuation">(</span>titlename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span>String titlename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>titlename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tv_titlebar_title<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>titlename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置点击事件监听</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeftListener</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iv_titlebar_left<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>onClickListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRightListener</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iv_titlebar_right<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>onClickListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TitleBar mTitleBar<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        mTitleBar<span class="token operator">=</span> <span class="token punctuation">(</span>TitleBar<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        mTitleBar<span class="token punctuation">.</span><span class="token function">setLeftListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"点击左键"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTitleBar<span class="token punctuation">.</span><span class="token function">setRightListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"点击右键"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-8-4-自定义ViewGroup"><a href="#3-8-4-自定义ViewGroup" class="headerlink" title="3.8.4 自定义ViewGroup"></a>3.8.4 自定义ViewGroup</h2><h3 id="1-例子：一个能够左右滑动的类似于ViewPager的控件"><a href="#1-例子：一个能够左右滑动的类似于ViewPager的控件" class="headerlink" title="1.例子：一个能够左右滑动的类似于ViewPager的控件"></a>1.例子：一个能够左右滑动的类似于ViewPager的控件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HorizontalView</span> <span class="token keyword">extends</span> <span class="token class-name">ViewGroup</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastX<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastY<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前子元素</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> childWidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Scroller scroller<span class="token punctuation">;</span>    <span class="token keyword">private</span> VelocityTracker tracker<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增加速度检测,如果速度比较快的话,就算没有滑动超过一半的屏幕也可以</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastInterceptX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastInterceptY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HorizontalView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HorizontalView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HorizontalView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        scroller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scroller</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tracker <span class="token operator">=</span> VelocityTracker<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> intercept <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                intercept <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//再次触摸阻止屏幕滑动</span>                <span class="token comment" spellcheck="true">//如果scroller没有执行完毕,则打断</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scroller<span class="token punctuation">.</span><span class="token function">isFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    scroller<span class="token punctuation">.</span><span class="token function">abortAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                <span class="token keyword">int</span> deltaX <span class="token operator">=</span> x <span class="token operator">-</span> lastInterceptX<span class="token punctuation">;</span>                <span class="token keyword">int</span> deltaY <span class="token operator">=</span> y <span class="token operator">-</span> lastInterceptY<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//水平方向距离长  MOVE中返回true一次,后续的MOVE和UP都不会收到此请求</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>deltaX<span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>deltaY<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    intercept <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>                intercept <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastX <span class="token operator">=</span> x<span class="token punctuation">;</span>        lastY <span class="token operator">=</span> y<span class="token punctuation">;</span>        lastInterceptX <span class="token operator">=</span> x<span class="token punctuation">;</span>        lastInterceptY <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">return</span> intercept<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tracker<span class="token punctuation">.</span><span class="token function">addMovement</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scroller<span class="token punctuation">.</span><span class="token function">isFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    scroller<span class="token punctuation">.</span><span class="token function">abortAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//跟随手指滑动</span>                <span class="token keyword">int</span> deltaX <span class="token operator">=</span> x <span class="token operator">-</span> lastX<span class="token punctuation">;</span>                <span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token operator">-</span>deltaX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//释放手指以后开始自动滑动到目标位置</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//相对于当前View滑动的距离,正为向左,负为向右</span>                <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> currentIndex <span class="token operator">*</span> childWidth<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//必须滑动的距离要大于1/2个宽度,否则不会切换到其他页面</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span> <span class="token operator">></span> childWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        currentIndex<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        currentIndex<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果速度能够超过50的话，也可以滑动</span>                    tracker<span class="token punctuation">.</span><span class="token function">computeCurrentVelocity</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">float</span> xV <span class="token operator">=</span> tracker<span class="token punctuation">.</span><span class="token function">getXVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>xV<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>xV <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            currentIndex<span class="token operator">--</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            currentIndex<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                currentIndex <span class="token operator">=</span> currentIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> currentIndex <span class="token operator">></span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> currentIndex<span class="token punctuation">;</span>                <span class="token function">smoothScrollTo</span><span class="token punctuation">(</span>currentIndex <span class="token operator">*</span> childWidth<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tracker<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastX <span class="token operator">=</span> x<span class="token punctuation">;</span>        lastY <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> widthMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> widthSize <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightSize <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//测量所有子元素</span>        <span class="token function">measureChildren</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理wrap_content的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//宽高都是wrap_content，宽度设置为所有元素的值，高度设置为第一个子元素的高度</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>widthMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST <span class="token operator">&amp;&amp;</span> heightMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            View childOne <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> childWidth <span class="token operator">=</span> childOne<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> childHeight <span class="token operator">=</span> childOne<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>childWidth <span class="token operator">*</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>widthMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            View childOne <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> childWidth <span class="token operator">=</span> childOne<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>childWidth <span class="token operator">*</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> heightSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>heightMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> childHeight <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>widthSize<span class="token punctuation">,</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//弹性滑动到其他页面</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scrollTo</span><span class="token punctuation">(</span>scroller<span class="token punctuation">.</span><span class="token function">getCurrX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scroller<span class="token punctuation">.</span><span class="token function">getCurrY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">postInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smoothScrollTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> destX<span class="token punctuation">,</span> <span class="token keyword">int</span> destY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scroller<span class="token punctuation">.</span><span class="token function">startScroll</span><span class="token punctuation">(</span><span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> destX <span class="token operator">-</span> <span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> destY <span class="token operator">-</span> <span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左边的距离</span>        View child<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历布局子元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> width <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                childWidth <span class="token operator">=</span> width<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//赋值给子元素宽度变量</span>                child<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> left <span class="token operator">+</span> width<span class="token punctuation">,</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                left <span class="token operator">+=</span> width<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-引用使用"><a href="#2-引用使用" class="headerlink" title="2.引用使用"></a>2.引用使用</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.example.liuwangshu.mooncustomviewgroup.HorizontalView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/lv_one<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/lv_two<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.example.liuwangshu.mooncustomviewgroup.HorizontalView</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.4 属性动画</title>
      <link href="/2019/11/21/3.4-shu-xing-dong-hua/"/>
      <url>/2019/11/21/3.4-shu-xing-dong-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="3-4-属性动画"><a href="#3-4-属性动画" class="headerlink" title="3.4 属性动画"></a>3.4 属性动画</h1><blockquote><p>什么是属性动画呢？为什么要有属性动画呢？</p></blockquote><h2 id="1-什么是属性动画"><a href="#1-什么是属性动画" class="headerlink" title="1.什么是属性动画"></a>1.什么是属性动画</h2><p>简单来说就是通过<strong>改变对象属性</strong>而形成的动画效果</p><h2 id="2-为什么要有属性动画呢？"><a href="#2-为什么要有属性动画呢？" class="headerlink" title="2.为什么要有属性动画呢？"></a>2.为什么要有属性动画呢？</h2><p>传统的动画没有交互性，属性动画具有<strong>交互性</strong></p><h2 id="3-属性动画中有哪些比较重要的类呢？"><a href="#3-属性动画中有哪些比较重要的类呢？" class="headerlink" title="3.属性动画中有哪些比较重要的类呢？"></a>3.属性动画中有哪些比较重要的类呢？</h2><h3 id="1-ObjectAnimator"><a href="#1-ObjectAnimator" class="headerlink" title="1. ObjectAnimator"></a>1. ObjectAnimator</h3><p><strong>静态工厂方法</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一个参数是对象，第二个是对象的属性名字，第3个是值的变化，可以是ofFloat或者是ofInt，根据参数的类型直接写</span>ObjectAnimator objectAnimator <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span><span class="token string">"alpha"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置持续时间</span>objectAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> objectAnimator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>源码</strong>分析：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ObjectAnimator <span class="token function">ofFloat</span> <span class="token punctuation">(</span>Object target<span class="token punctuation">,</span>String propertyName<span class="token punctuation">,</span><span class="token keyword">float</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>            ObjectAnimator anim<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectAnimator</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>            anim<span class="token punctuation">.</span><span class="token function">setFloatValues</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> anim<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>直接返还一个 ObjectAnimator对象</p><p><strong>属性值</strong>：</p><ul><li>translationX和translationY：用来沿着X轴或者Y轴进行平移。</li><li>rotation、rotationX、rotationY：用来围绕View的支点进行旋转</li><li>PrivotX和PrivotY：控制View对象的支点位置，围绕这个支点进行旋转和缩放变换处理</li><li>alpha：透明度，默认是<strong>1（不透明</strong>），<strong>0</strong>代表完全<strong>透明</strong>（简单记忆，0是不存在的，所以是透明）</li><li>x和y：描述View对象在其容器中的最终位置。</li></ul><p>自定义属性类：</p><p>如果一个属性没有get和Set的方法的话，就可以通过包装类的方式，增加get和set方法</p><pre class=" language-Java"><code class="language-Java">   private static class MyView{        private View mTarget;        private MyView (View view){            mTarget =view;        }       //属性的setget方法        public int getWidth(){            return mTarget.getLayoutParams().width;        }        public void setWidth(int width){            mTarget.getLayoutParams().width=width;            mTarget.requestLayout();        }    }</code></pre><p>使用的时候</p><pre class=" language-java"><code class="language-java">MyView myView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span>mButton<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span>myView<span class="token punctuation">,</span> <span class="token string">"width"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-ValueAnimator"><a href="#2-ValueAnimator" class="headerlink" title="2.ValueAnimator"></a>2.ValueAnimator</h3><p>ValueAnimator<strong>不提供</strong>任何<strong>动画</strong>效果，更像一个<strong>数值发生器</strong>，用来产生有一定规律的数字，从而让调用者控制动画的实现过程。</p><p>一般在AnimatorUpdateListener中监听数值的变化，而完成动画的变换</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现颜色的渐变</span>    ValueAnimator valueAnimator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofArgb</span><span class="token punctuation">(</span><span class="token number">0xFFFF5454</span><span class="token punctuation">,</span> <span class="token number">0xFF5DDE5D</span><span class="token punctuation">,</span> <span class="token number">0xFF5DBEDE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    valueAnimator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> color <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> animation<span class="token punctuation">.</span><span class="token function">getAnimatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            button<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    valueAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记得start</span>    valueAnimator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-动画的监听"><a href="#3-动画的监听" class="headerlink" title="3.动画的监听"></a>3.动画的监听</h3><p>动画有4个过程：有start、Repeat、End、Cancel这4个过程，</p><p>大部分时候我们只关心 onAnimationEnd 事件，可以用AnimatorListenterAdaper来对必要的事件进行监听</p><pre class=" language-java"><code class="language-java">valueAnimator<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnimatorListenerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>Animator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-组合动画——AnimatorSet"><a href="#4-组合动画——AnimatorSet" class="headerlink" title="4.组合动画——AnimatorSet"></a>4.组合动画——AnimatorSet</h3><p>AnimatorSet提供了一个play方法，们向这个方法中传入一个 Animator 对象 ，会返回一个AnimatorSet.Builder的实例。</p><p>play的源码：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> Builder <span class="token function">play</span><span class="token punctuation">(</span>Animator anim<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>anim <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span>anim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>AnimatorSet.Builder中有4个方法</p><p>• after（Animator anim）：将现有动画插入到传入的动画之后执行。 //这里面的after是别人after</p><p>• after（long delay）：将现有动画延迟指定毫秒后执行。</p><p>• before（Animator anim）：将现有动画插入到传入的动画之前执行。</p><p>• with（Animator anim）：将现有动画和传入的动画同时执行。</p><p>animatorSet的使用</p><pre class=" language-java"><code class="language-java">ObjectAnimator alphaAnimator <span class="token operator">=</span>                        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"alpha"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectAnimator rotateAnimator <span class="token operator">=</span>                        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"rotation"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rotateAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectAnimator scaleAnimator <span class="token operator">=</span>                        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"scaleX"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectAnimator translateAnimator <span class="token operator">=</span>                        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"translationX"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                AnimatorSet animatorSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatorSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                animatorSet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>alphaAnimator<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>rotateAnimator<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>scaleAnimator<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>translateAnimator<span class="token punctuation">)</span><span class="token punctuation">;</span>                animatorSet<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>scaleAnimator-&gt;alphaAnimator==rotateAnimator-&gt;translateAnimator</p><h3 id="5-组合动画——PropertyValuesHolder"><a href="#5-组合动画——PropertyValuesHolder" class="headerlink" title="5.组合动画——PropertyValuesHolder"></a>5.组合动画——PropertyValuesHolder</h3><p>PropertyValuesHolder只能实现动画同时执行</p><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新建动画类 </span>PropertyValuesHolder valuesHolder1<span class="token operator">=</span>PropertyValuesHolder<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">"scaleX"</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PropertyValuesHolder valuesHolder2<span class="token operator">=</span>PropertyValuesHolder<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">"rotationX"</span><span class="token punctuation">,</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">90.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新建ObjectAnimator</span>ObjectAnimator animator<span class="token operator">=</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofPropertyValuesHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span>valuesHolder1<span class="token punctuation">,</span>valuesHolder2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启动画 </span>animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-在xml中用属性动画"><a href="#6-在xml中用属性动画" class="headerlink" title="6.在xml中用属性动画"></a>6.在xml中用属性动画</h3><p>直接新建anim文件</p><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8hees97f4j30nv08p75s.jpg" alt="http://tva1.sinaimg.cn/large/007X8olVly1g8hees97f4j30nv08p75s.jpg"></p><p>scaleX是水平缩放比例</p><p>然后导入：</p><pre class=" language-java"><code class="language-java">        Animator animator<span class="token operator">=</span> AnimatorInflater<span class="token punctuation">.</span><span class="token function">loadAnimator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>scale<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置对象</span>        animator<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.2 坐标系</title>
      <link href="/2019/11/21/3.2-zuo-biao-xi/"/>
      <url>/2019/11/21/3.2-zuo-biao-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="3-2-坐标系"><a href="#3-2-坐标系" class="headerlink" title="3.2 坐标系"></a>3.2 坐标系</h1><h2 id="3-2-1-Android坐标系"><a href="#3-2-1-Android坐标系" class="headerlink" title="3.2.1 Android坐标系"></a>3.2.1 Android坐标系</h2><p>以屏幕<strong>左上角的顶点</strong>作为Android的<strong>原点</strong>，这个原点向右是X轴正方向，向下是Y 轴正方向</p><p>在<strong>触控</strong>事件中，<strong>getRawX</strong>和getRawY也是Android坐标系的坐标</p><p><img src="https://s2.ax1x.com/2019/10/27/KscNIs.png" alt="KscNIs.png"></p><h2 id="3-2-2-View-坐标系"><a href="#3-2-2-View-坐标系" class="headerlink" title="3.2.2 View 坐标系"></a>3.2.2 View 坐标系</h2><p><img src="https://img-blog.csdn.net/20161219235525714?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzg3Mjg1Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="å¾1.1"></p><p><img src="https://img-blog.csdn.net/20170719232348885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzg3Mjg1Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="å¾2.1"></p><h3 id="1-获取自身的宽高"><a href="#1-获取自身的宽高" class="headerlink" title="1.获取自身的宽高"></a>1.获取自身的宽高</h3><p>getWidth</p><p>getHeight</p><h2 id="3-3-View的滑动"><a href="#3-3-View的滑动" class="headerlink" title="3.3 View的滑动"></a>3.3 View的滑动</h2><h3 id="1-基本思想是什么？"><a href="#1-基本思想是什么？" class="headerlink" title="1.基本思想是什么？"></a>1.基本思想是什么？</h3><ol><li>记下触摸点的坐标</li><li>移动之后，记下移动后的坐标</li><li>算出偏移量</li></ol><h3 id="2-滑动方法有哪些？"><a href="#2-滑动方法有哪些？" class="headerlink" title="2.滑动方法有哪些？"></a>2.滑动方法有哪些？</h3><h4 id="3-3-1-layout（）方法"><a href="#3-3-1-layout（）方法" class="headerlink" title="3.3.1 layout（）方法"></a>3.3.1 layout（）方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到手指处的横坐标和纵坐标</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//lastX是存储上一次的x</span>                lastX <span class="token operator">=</span> x<span class="token punctuation">;</span>                lastY <span class="token operator">=</span> y<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//计算移动的距离</span>                <span class="token keyword">int</span> offsetX <span class="token operator">=</span> x <span class="token operator">-</span> lastX<span class="token punctuation">;</span>                <span class="token keyword">int</span> offsetY <span class="token operator">=</span> y <span class="token operator">-</span> lastY<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用layout方法来重新放置它的位置,左上右下</span>               <span class="token function">layout</span><span class="token punctuation">(</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetX<span class="token punctuation">,</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetY<span class="token punctuation">,</span>                       <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetX <span class="token punctuation">,</span> <span class="token function">getBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="3-3-2-offsetLeftAndRight（）与offsetTopAndBottom（）"><a href="#3-3-2-offsetLeftAndRight（）与offsetTopAndBottom（）" class="headerlink" title="3.3.2  offsetLeftAndRight（）与offsetTopAndBottom（）"></a>3.3.2  offsetLeftAndRight（）与offsetTopAndBottom（）</h4><p>类似于layout(),将layout方法换为<strong>offsetLeftAndRight和offsetTopAndBottom</strong></p><pre class=" language-java"><code class="language-java">           <span class="token comment" spellcheck="true">// 对left和right进行偏移</span>           <span class="token function">offsetLeftAndRight</span><span class="token punctuation">(</span>offsetX<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对top和bottom进行偏移</span>           <span class="token function">offsetTopAndBottom</span><span class="token punctuation">(</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-3-3-使用LayoutParams（改变布局参数）"><a href="#3-3-3-使用LayoutParams（改变布局参数）" class="headerlink" title="3.3.3 使用LayoutParams（改变布局参数）"></a>3.3.3 使用LayoutParams（改变布局参数）</h4><pre class=" language-java"><code class="language-java">                <span class="token comment" spellcheck="true">//使用LayoutParams</span>     LinearLayout<span class="token punctuation">.</span>LayoutParams layoutParams<span class="token operator">=</span> <span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> <span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//改变Margin</span>               layoutParams<span class="token punctuation">.</span>leftMargin <span class="token operator">=</span> <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetX<span class="token punctuation">;</span>                layoutParams<span class="token punctuation">.</span>topMargin <span class="token operator">=</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetY<span class="token punctuation">;</span>                <span class="token function">setLayoutParams</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意的是：这里的LayoutParams需要<strong>根据父控件</strong>获得，</p><p>如果父控件是RelativeLayout， 则要使用RelativeLayout.LayoutParams</p><p>除了使用布局的LayoutParams外，我们<strong>还可以用 ViewGroup.MarginLayoutParams</strong>来实现：</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//使用MarginLayoutParams</span>      ViewGroup<span class="token punctuation">.</span>MarginLayoutParams layoutParams <span class="token operator">=</span> <span class="token punctuation">(</span>ViewGroup<span class="token punctuation">.</span>MarginLayoutParams<span class="token punctuation">)</span> <span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               layoutParams<span class="token punctuation">.</span>leftMargin <span class="token operator">=</span> <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetX<span class="token punctuation">;</span>               layoutParams<span class="token punctuation">.</span>topMargin <span class="token operator">=</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetY<span class="token punctuation">;</span>              <span class="token function">setLayoutParams</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-3-4-动画"><a href="#3-3-4-动画" class="headerlink" title="3.3.4 动画"></a>3.3.4 动画</h4><h5 id="1-新建anim文件夹，在里面新建translate-xml"><a href="#1-新建anim文件夹，在里面新建translate-xml" class="headerlink" title="1.新建anim文件夹，在里面新建translate.xml"></a>1.新建anim文件夹，在里面新建translate.xml</h5><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>fillAfter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span>        <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span></code></pre><p>注意，这里加上fillAfter=”true”是表明停留在动画移动后的位置</p><h5 id="2-调用动画"><a href="#2-调用动画" class="headerlink" title="2.调用动画"></a>2.调用动画</h5><pre class=" language-java"><code class="language-java">mCustomView<span class="token punctuation">.</span><span class="token function">setAnimation</span><span class="token punctuation">(</span>AnimationUtils<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>translate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-需要注意什么？"><a href="#3-需要注意什么？" class="headerlink" title="3.需要注意什么？"></a>3.需要注意什么？</h5><p>动画并<strong>不能改变</strong>View的<strong>具体位置</strong>，只是改变了他的显示位置，所以我们如果在新的位置点击的话，不会有反应</p><p>解决方式是用属性动画，既可以执行动画，又可以改变位置</p><h4 id="3-3-5-scrollTo与scollBy"><a href="#3-3-5-scrollTo与scollBy" class="headerlink" title="3.3.5 scrollTo与scollBy"></a>3.3.5 scrollTo与scollBy</h4><p>scroll<strong>To</strong>（x，y）表示移动到一个<strong>具体的坐标点</strong></p><p>scroll<strong>By</strong>（dx，dy）则表示移动的<strong>增量</strong>为dx、dy,其实底层还是调用scrollTo的</p><h5 id="1-scrollTo的源码是怎样的？"><a href="#1-scrollTo的源码是怎样的？" class="headerlink" title="1.scrollTo的源码是怎样的？"></a>1.scrollTo的源码是怎样的？</h5><p><img src="https://s2.ax1x.com/2019/10/27/KshSaD.png" alt="KshSaD.png"></p><h5 id="2-怎么使用呢？"><a href="#2-怎么使用呢？" class="headerlink" title="2.怎么使用呢？"></a>2.怎么使用呢？</h5><p>我们将 ACTION_MOVE中的代码替换成如下代码；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用scrollBy</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token operator">-</span>offsetX<span class="token punctuation">,</span><span class="token operator">-</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为啥这里是<strong>偏移是负数</strong>呢？</p><p>因为这个偏移是把手机屏幕偏移了，<strong>界面自然就反方向移动</strong></p><h4 id="3-3-6-Scroller"><a href="#3-3-6-Scroller" class="headerlink" title="3.3.6 Scroller"></a>3.3.6 Scroller</h4><h5 id="1-为什么要用这个呢"><a href="#1-为什么要用这个呢" class="headerlink" title="1.为什么要用这个呢"></a>1.为什么要用这个呢</h5><p>实现有过渡效果的滑动</p><h5 id="2-怎么使用呢？-1"><a href="#2-怎么使用呢？-1" class="headerlink" title="2.怎么使用呢？"></a>2.怎么使用呢？</h5><ol><li><p>初始化</p><pre class=" language-java"><code class="language-java">mScroller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scroller</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>重写computeScroll方法</p><p>当系统调用draw的时候会调用这个方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过不断的重绘不断的调用computeScroll方法</span>            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>新建一个smoothScrollTo方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smoothScrollTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> destX<span class="token punctuation">,</span><span class="token keyword">int</span> destY<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> scrollX<span class="token operator">=</span><span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> delta<span class="token operator">=</span>destX<span class="token operator">-</span>scrollX<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1000秒内滑向destX</span>        mScroller<span class="token punctuation">.</span><span class="token function">startScroll</span><span class="token punctuation">(</span>scrollX<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>delta<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>调用</p><pre class=" language-java"><code class="language-java">mCustomView<span class="token punctuation">.</span><span class="token function">smoothScrollTo</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向右平移400像素</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2 Design Support Library 常用控件详解</title>
      <link href="/2019/11/21/2.2-design-support-library-chang-yong-kong-jian-xiang-jie/"/>
      <url>/2019/11/21/2.2-design-support-library-chang-yong-kong-jian-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="2-2-Design-Support-Library-常用控件详解"><a href="#2-2-Design-Support-Library-常用控件详解" class="headerlink" title="2.2 Design Support Library 常用控件详解"></a>2.2 Design Support Library 常用控件详解</h1><h2 id="2-2-2-TextInputLayout输入框"><a href="#2-2-2-TextInputLayout输入框" class="headerlink" title="2.2.2 TextInputLayout输入框"></a>2.2.2 TextInputLayout输入框</h2><h3 id="1-什么是TextInputLayout？"><a href="#1-什么是TextInputLayout？" class="headerlink" title="1.什么是TextInputLayout？"></a>1.什么是TextInputLayout？</h3><p>其实是一个输入框的控件</p><p><img src="https://upload-images.jianshu.io/upload_images/8850933-06fc0260057f22e4.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/482/format/webp" alt="img"></p><h3 id="2-TextInputLayout的使用"><a href="#2-TextInputLayout的使用" class="headerlink" title="2.TextInputLayout的使用"></a>2.TextInputLayout的使用</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.TextInputLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tl_username<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerInParent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/et_username<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>maxLength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>maxLines</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.TextInputLayout</span><span class="token punctuation">></span></span></code></pre><h3 id="3-显示错误信息"><a href="#3-显示错误信息" class="headerlink" title="3.显示错误信息"></a>3.显示错误信息</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">validateUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         tl_username<span class="token punctuation">.</span><span class="token function">setErrorEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         tl_username<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"请输入正确的邮箱地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>         tl_username<span class="token punctuation">.</span><span class="token function">setErrorEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         tl_password<span class="token punctuation">.</span><span class="token function">setErrorEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre><h3 id="4-改变样式"><a href="#4-改变样式" class="headerlink" title="4.改变样式"></a>4.改变样式</h3><p>如果对TextInputLayout输入框以及输入框上方的hint提示颜色不满意，则还可以在style.xml文件中对 colorAccent属性进行修改</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorAccent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/colorAccent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span></code></pre><h2 id="2-2-4-用TabLayout实现动态滑动效果"><a href="#2-2-4-用TabLayout实现动态滑动效果" class="headerlink" title="2.2.4 用TabLayout实现动态滑动效果"></a>2.2.4 用TabLayout实现动态滑动效果</h2><h3 id="1-主界面布局"><a href="#1-主界面布局" class="headerlink" title="1.主界面布局"></a>1.主界面布局</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.TabLayoutActivity<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这里用AppBarLayout是为了把tabLayout放在标题栏里--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.AppBarLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/appbar<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/ThemeOverlay.AppCompat.Dark.ActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.Toolbar</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/toolbar<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>?attr/actionBarSize<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_scrollFlags</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll|enterAlways<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>popupTheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/ThemeOverlay.AppCompat.Light<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.TabLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tabs<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>tabIndicatorColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ADBE107E<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>tabMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scrollable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.AppBarLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v4.view.ViewPager</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/viewpager<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_behavior</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/appbar_scrolling_view_behavior<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p><img src="https://i.bmp.ovh/imgs/2019/10/b160476c557804fc.png" alt></p><h3 id="2-流程："><a href="#2-流程：" class="headerlink" title="2.流程："></a>2.流程：</h3><ol><li><p>初始化Toolbar和TabLayout和ViewPager</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> ViewPager mViewPager<span class="token operator">=</span> <span class="token punctuation">(</span>ViewPager<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>viewpager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> TabLayout mTabLayout <span class="token operator">=</span> <span class="token punctuation">(</span>TabLayout<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tabs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre></li><li><p>准备好tabLayout的标题</p><pre class=" language-java"><code class="language-java"> List<span class="token operator">&lt;</span>String<span class="token operator">></span> titles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"精选"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"体育"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"巴萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"购物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"明星"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"健康"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"励志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"图文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"本地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"动漫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"搞笑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"精选"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将tabLayout的标题设置进tabLayout</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTabLayout<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>mTabLayout<span class="token punctuation">.</span><span class="token function">newTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>titles<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>新建和标题数量相等的fragment</p><pre class=" language-java"><code class="language-java"> List<span class="token operator">&lt;</span>Fragment<span class="token operator">></span> fragments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fragments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>准备好ViewPager和TabLayout的adapter</p><pre class=" language-java"><code class="language-java"></code></pre></li></ol><p>   public class FragmentAdapter extends FragmentStatePagerAdapter {<br>       private List<fragment> mFragments;<br>       private List<string> mTitles;</string></fragment></p><pre><code>   public FragmentAdapter(FragmentManager fm, List&lt;Fragment&gt; fragments, List&lt;String&gt; titles) {       super(fm);       mFragments = fragments;       mTitles = titles;   }   //得到具体的fragment   @Override   public Fragment getItem(int position) {       return mFragments.get(position);   }   //得到数目   @Override   public int getCount() {       return mFragments.size();   }   //得到title   @Override   public CharSequence getPageTitle(int position) {       return mTitles.get(position);   }</code></pre><p>   }</p><pre><code>6. 准备好fragment7. 给ViewPager和tabLayout设置adapter,并且将二者关联起来   ```java    FragmentAdapter mFragmentAdapteradapter =                   new FragmentAdapter(getSupportFragmentManager(), fragments, titles);           //给ViewPager设置适配器           mViewPager.setAdapter(mFragmentAdapteradapter);           //将TabLayout和ViewPager关联起来。           mTabLayout.setupWithViewPager(mViewPager);       }</code></pre><h3 id="3-总的代码："><a href="#3-总的代码：" class="headerlink" title="3.总的代码："></a>3.总的代码：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>liuwangshu<span class="token punctuation">.</span>mytablayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>design<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TabLayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Fragment<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewPager<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>DrawerLayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toolbar<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TabLayoutActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> DrawerLayout mDrawerLayout<span class="token punctuation">;</span>    <span class="token keyword">private</span> ViewPager mViewPager<span class="token punctuation">;</span>    <span class="token keyword">private</span> TabLayout mTabLayout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_tab_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        Toolbar toolbar <span class="token operator">=</span> <span class="token punctuation">(</span>Toolbar<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setSupportActionBar</span><span class="token punctuation">(</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>        mViewPager <span class="token operator">=</span> <span class="token punctuation">(</span>ViewPager<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>viewpager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initViewPager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initViewPager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTabLayout <span class="token operator">=</span> <span class="token punctuation">(</span>TabLayout<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tabs<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> titles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"精选"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"体育"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"巴萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"购物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"明星"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"健康"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"励志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"图文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"本地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"动漫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"搞笑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"精选"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTabLayout<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>mTabLayout<span class="token punctuation">.</span><span class="token function">newTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>titles<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Fragment<span class="token operator">></span> fragments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fragments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        FragmentAdapter mFragmentAdapteradapter <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">FragmentAdapter</span><span class="token punctuation">(</span><span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fragments<span class="token punctuation">,</span> titles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给ViewPager设置适配器</span>        mViewPager<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>mFragmentAdapteradapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将TabLayout和ViewPager关联起来</span>        mTabLayout<span class="token punctuation">.</span><span class="token function">setupWithViewPager</span><span class="token punctuation">(</span>mViewPager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-当tab数不确定的时候，怎么动态添加fragment并且区分他们"><a href="#4-当tab数不确定的时候，怎么动态添加fragment并且区分他们" class="headerlink" title="4.当tab数不确定的时候，怎么动态添加fragment并且区分他们"></a>4.当tab数不确定的时候，怎么动态添加fragment并且区分他们</h3><p>利用bundle，setArguments</p><pre class=" language-java"><code class="language-java">  mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"特惠新品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"有机果蔬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"放养牲畜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"健康吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"调味品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"素食者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"时令食品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"野生菌类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"放养家禽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"休闲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"粮油类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"素食类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"周边菜场"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态添加Fragment</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mTabs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Fragment fragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Bundle bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"position"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            fragment<span class="token punctuation">.</span><span class="token function">setArguments</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>            mFragmentArrays<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>然后在fragment中</p><pre class=" language-java"><code class="language-java">mPosition <span class="token operator">=</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"position"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-怎么解决切换回来的时候，空白的情况"><a href="#5-怎么解决切换回来的时候，空白的情况" class="headerlink" title="5.怎么解决切换回来的时候，空白的情况"></a>5.怎么解决切换回来的时候，空白的情况</h3><p>在fragment  缓存View</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 首页 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tablayout<span class="token punctuation">)</span>    TabLayout tablayout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab_viewpager<span class="token punctuation">)</span>    ViewPager tabViewpager<span class="token punctuation">;</span>    Unbinder unbinder<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_fenlei<span class="token punctuation">)</span>    ImageView mIvFenlei<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Fragment<span class="token operator">></span> mFragmentArrays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> mTabs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> View view<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup container<span class="token punctuation">,</span>                             Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//解决点击“我的”回来方法二，首页空白的问题，推荐的方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            unbinder <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//必须加，不然报ButterKnife的异常</span>            ViewGroup parent <span class="token operator">=</span> <span class="token punctuation">(</span>ViewGroup<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                parent<span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> view<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_home<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unbinder <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里也得有，不然报ButterKnife的异常</span>        <span class="token function">initView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mIvFenlei<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tablayout<span class="token punctuation">.</span><span class="token function">removeAllTabs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tabViewpager<span class="token punctuation">.</span><span class="token function">removeAllViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFragmentArrays <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mFragmentArrays<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mTabs<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//替换成从服务器接口请求数据就成动态了</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"特惠新品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"有机果蔬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"放养牲畜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"健康吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"调味品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"素食者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"时令食品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"野生菌类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"放养家禽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"休闲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"粮油类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"素食类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"周边菜场"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态添加Fragment</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mTabs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Fragment fragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Bundle bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"position"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            fragment<span class="token punctuation">.</span><span class="token function">setArguments</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>            mFragmentArrays<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tabViewpager<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TabFragmentAdapter</span><span class="token punctuation">(</span><span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mFragmentArrays<span class="token punctuation">,</span> mTabs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tablayout<span class="token punctuation">.</span><span class="token function">setupWithViewPager</span><span class="token punctuation">(</span>tabViewpager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_fenlei<span class="token operator">:</span>                <span class="token function">startPopuwindows</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startPopuwindows</span><span class="token punctuation">(</span>View view1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        View view<span class="token operator">=</span>LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_main_popuwindows<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        RecyclerView recyclerView<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>recycler<span class="token punctuation">)</span><span class="token punctuation">;</span>        recyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayoutManager</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RecycleViewGridAdapter gridAdapter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RecycleViewGridAdapter</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_gride_fenlei<span class="token punctuation">,</span>mTabs<span class="token punctuation">)</span><span class="token punctuation">;</span>        recyclerView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>gridAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> PopupWindow popupWindow<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PopupWindow</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        popupWindow<span class="token punctuation">.</span><span class="token function">showAsDropDown</span><span class="token punctuation">(</span>view1<span class="token punctuation">)</span><span class="token punctuation">;</span>        gridAdapter<span class="token punctuation">.</span><span class="token function">setOnItemChildClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseQuickAdapter<span class="token punctuation">.</span>OnItemChildClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemChildClick</span><span class="token punctuation">(</span>BaseQuickAdapter adapter<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"点击了"</span><span class="token operator">+</span>mTabs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tabViewpager<span class="token punctuation">.</span><span class="token function">setCurrentItem</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                popupWindow<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gridAdapter<span class="token punctuation">.</span><span class="token function">setOnItemChildClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseQuickAdapter<span class="token punctuation">.</span>OnItemChildClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemChildClick</span><span class="token punctuation">(</span>BaseQuickAdapter adapter<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tabViewpager<span class="token punctuation">.</span><span class="token function">setCurrentItem</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                popupWindow<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unbinder<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-2-6-实现Toolbar隐藏和折叠"><a href="#2-2-6-实现Toolbar隐藏和折叠" class="headerlink" title="2.2.6 实现Toolbar隐藏和折叠"></a>2.2.6 实现Toolbar隐藏和折叠</h2><h3 id="1-自定义Behavior"><a href="#1-自定义Behavior" class="headerlink" title="1.自定义Behavior"></a>1.自定义Behavior</h3><p>Behavior就是实现组件和滑动交互</p><h4 id="1-实现自定义Behavior的方式有哪些？"><a href="#1-实现自定义Behavior的方式有哪些？" class="headerlink" title="1.实现自定义Behavior的方式有哪些？"></a>1.实现自定义Behavior的方式有哪些？</h4><p>我们来做个demo,就是底部提示条，当向上滑的时候就消失，当向下滑的时候就显示</p><ol><li><h5 id="定义View监听CoordinatorLayout里的滑动状态"><a href="#定义View监听CoordinatorLayout里的滑动状态" class="headerlink" title="定义View监听CoordinatorLayout里的滑动状态"></a>定义View监听CoordinatorLayout里的滑动状态</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooterBehavior</span> <span class="token keyword">extends</span> <span class="token class-name">CoordinatorLayout<span class="token punctuation">.</span>Behavior</span><span class="token operator">&lt;</span>View<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> directionChange<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FooterBehavior</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回值表示滑动要不要关注</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onStartNestedScroll</span><span class="token punctuation">(</span>CoordinatorLayout coordinatorLayout<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View directTargetChild<span class="token punctuation">,</span> View target<span class="token punctuation">,</span> <span class="token keyword">int</span> nestedScrollAxes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//关注竖直方向的滑动</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>nestedScrollAxes <span class="token operator">&amp;</span> ViewCompat<span class="token punctuation">.</span>SCROLL_AXIS_VERTICAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//dy是滑动的距离，上滑是正，下滑是负</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNestedPreScroll</span><span class="token punctuation">(</span>CoordinatorLayout coordinatorLayout<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View target<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> consumed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dy <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> directionChange <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> dy <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> directionChange <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            child<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            directionChange <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        directionChange <span class="token operator">+=</span> dy<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>directionChange <span class="token operator">></span> child<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span><span class="token function">getVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">hide</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>directionChange <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span><span class="token function">getVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token keyword">final</span> View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置动画</span>        ViewPropertyAnimator animator <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">translationY</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FastOutSlowInInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animator<span class="token punctuation">.</span><span class="token function">setListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnimatorListenerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>Animator animator<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//动画结束</span>                view<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">final</span> View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewPropertyAnimator animator <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">translationY</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FastOutSlowInInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animator<span class="token punctuation">.</span><span class="token function">setListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnimatorListenerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>Animator animator<span class="token punctuation">)</span> <span class="token punctuation">{</span>                view<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启动画</span>        animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在xml中</p><pre class=" language-xml"><code class="language-xml">//指定behavior<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span><span class="token attr-name">...</span><span class="token attr-name"><span class="token namespace">app:</span>layout_behavior</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.FooterBehavior<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><h5 id="定义View来监听另一个View的显示，来改变自己的状态"><a href="#定义View来监听另一个View的显示，来改变自己的状态" class="headerlink" title="定义View来监听另一个View的显示，来改变自己的状态"></a>定义View来监听另一个View的显示，来改变自己的状态</h5><p>java:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooterBehaviorAppBar</span> <span class="token keyword">extends</span> <span class="token class-name">CoordinatorLayout<span class="token punctuation">.</span>Behavior</span><span class="token operator">&lt;</span>View<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">FooterBehaviorAppBar</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这个方法是返回我们关心的类，第一个参数是CoordinatorLayout，第2个是设置这个Behavior的view,第3个dependency是我们监听的View</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">layoutDependsOn</span><span class="token punctuation">(</span>CoordinatorLayout parent<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View dependency<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里我们监听的是AppBarLayout</span>        <span class="token keyword">return</span> dependency <span class="token keyword">instanceof</span> <span class="token class-name">AppBarLayout</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onDependentViewChanged</span><span class="token punctuation">(</span>CoordinatorLayout parent<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View dependency<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//得到监听的控件的y</span>        <span class="token keyword">float</span> translationY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dependency<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"wangshu"</span><span class="token punctuation">,</span>translationY<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//使其与被监听的控件同步显示</span>        child<span class="token punctuation">.</span><span class="token function">setTranslationY</span><span class="token punctuation">(</span>translationY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> Material Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.2 Android 6.0 新特性</title>
      <link href="/2019/11/21/1.2-android-6.0-xin-te-xing/"/>
      <url>/2019/11/21/1.2-android-6.0-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-2-Android-6-0-新特性"><a href="#1-2-Android-6-0-新特性" class="headerlink" title="1.2 Android 6.0 新特性"></a>1.2 Android 6.0 新特性</h1><h2 id="1-2-2-运行时权限机制"><a href="#1-2-2-运行时权限机制" class="headerlink" title="1.2.2 运行时权限机制"></a>1.2.2 运行时权限机制</h2><h3 id="1-处理不再询问选项"><a href="#1-处理不再询问选项" class="headerlink" title="1.处理不再询问选项"></a>1.处理不再询问选项</h3><p>其实就是当你选择不再询问的时候，会弹出一个提示</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> permissions<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grantResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCode <span class="token operator">==</span> PERMISSIONS_REQUEST_CALL_PHONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>grantResults<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>PERMISSION_GRANTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">callPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当选择不再询问，shouldShowRequestPermissionRationale返回false</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ActivityCompat<span class="token punctuation">.</span><span class="token function">shouldShowRequestPermissionRationale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    AlertDialog dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"该功能需要访问电话的权限，不开启将无法正常工作！"</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token annotation punctuation">@Override</span>                                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>DialogInterface dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    dialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://s2.ax1x.com/2019/10/26/KDrqC8.png" alt="KDrqC8.png"></p><p><img src="https://s2.ax1x.com/2019/10/26/KDrxDs.png" alt="KDrxDs.png"></p><h2 id="2-PermissionsDispatcher解析"><a href="#2-PermissionsDispatcher解析" class="headerlink" title="2.PermissionsDispatcher解析"></a>2.PermissionsDispatcher解析</h2><h3 id="1-什么是PermissionsDispatcher"><a href="#1-什么是PermissionsDispatcher" class="headerlink" title="1.什么是PermissionsDispatcher"></a>1.什么是PermissionsDispatcher</h3><p>其实就是一个权限申请框架，</p><h3 id="2-怎么使用"><a href="#2-怎么使用" class="headerlink" title="2.怎么使用"></a>2.怎么使用</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><pre><code> implementation &#39;com.github.hotchemi:permissionsdispatcher:2.3.2&#39;    annotationProcessor &#39;com.github.hotchemi:permissionsdispatcher-processor:2.3.2&#39;</code></pre><h4 id="2-权限的讲解"><a href="#2-权限的讲解" class="headerlink" title="2.权限的讲解"></a>2.权限的讲解</h4><ul><li>RuntimePermissions：必需的注释，它用来注册一个 <strong>Activity</strong> 或 Fragment，使它们可以<strong>处理权限</strong>。 </li><li>NeedsPermission：必需的注释，在需要获取权限的地方注释，用来<strong>获取权限</strong>。 </li><li>OnShowRationale：提示用户为何要开启此权限。在用户选择拒绝后，<strong>再次需要访问该权限</strong>时调用。 </li><li>OnPermissionDenied：用户选择<strong>拒绝时</strong>的提示。</li><li>OnNeverAskAgain：用户选择<strong>不再询问</strong>后的提示。 </li></ul><h3 id="3-在onRequestPermissionsResult中注册一下框架"><a href="#3-在onRequestPermissionsResult中注册一下框架" class="headerlink" title="3.在onRequestPermissionsResult中注册一下框架"></a>3.在onRequestPermissionsResult中注册一下框架</h3><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> permissions<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grantResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里注意一下，要注册一下</span>        ThirdPartyActivityPermissionsDispatcher<span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-代码："><a href="#4-代码：" class="headerlink" title="4.代码："></a>4.代码：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//类的权限</span><span class="token annotation punctuation">@RuntimePermissions</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThirdPartyActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button bt_call<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_third_party<span class="token punctuation">)</span><span class="token punctuation">;</span>        bt_call <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>bt_call<span class="token punctuation">)</span><span class="token punctuation">;</span>        bt_call<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//检查权限</span>                ThirdPartyActivityPermissionsDispatcher<span class="token punctuation">.</span><span class="token function">callWithCheck</span><span class="token punctuation">(</span>ThirdPartyActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@NeedsPermission</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在需要获取权限的地方注释</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_CALL<span class="token punctuation">)</span><span class="token punctuation">;</span>        Uri data <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"tel:"</span> <span class="token operator">+</span> <span class="token string">"10086"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnShowRationale</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//提示用户为何要开启此权限</span>    <span class="token keyword">void</span> <span class="token function">showWhy</span><span class="token punctuation">(</span><span class="token keyword">final</span> PermissionRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"提示用户为何要开启此权限"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"知道了"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>DialogInterface dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        request<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再次执行权限请求</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnPermissionDenied</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用户选择拒绝时的提示</span>    <span class="token keyword">void</span> <span class="token function">showDenied</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"用户选择拒绝时的提示"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnNeverAskAgain</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用户选择不再询问后的提示</span>    <span class="token keyword">void</span> <span class="token function">showNotAsk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"该功能需要访问电话的权限，不开启将无法正常工作！"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>DialogInterface dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> permissions<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grantResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里注意一下，要注册一下</span>        ThirdPartyActivityPermissionsDispatcher<span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-注意注意：需要先在AndoirdManifest中注册权限"><a href="#5-注意注意：需要先在AndoirdManifest中注册权限" class="headerlink" title="5.注意注意：需要先在AndoirdManifest中注册权限"></a>5.注意注意：需要先在AndoirdManifest中注册权限</h4>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> Android新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1 安卓5.0新特性</title>
      <link href="/2019/11/21/1.1-an-zhuo-5.0-xin-te-xing/"/>
      <url>/2019/11/21/1.1-an-zhuo-5.0-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-安卓5-0新特性"><a href="#1-1-安卓5-0新特性" class="headerlink" title="1.1 安卓5.0新特性"></a>1.1 安卓5.0新特性</h1><h2 id="1-1-1-Android-5-0-主要新特性"><a href="#1-1-1-Android-5-0-主要新特性" class="headerlink" title="1.1.1 Android 5.0 主要新特性"></a>1.1.1 Android 5.0 主要新特性</h2><p><strong>1. 全新的 Material Design 新风格</strong></p><p><strong>2. 支持多种设备</strong></p><p><strong>3. 全新的通知中心设计</strong></p><p><strong>4. 支持 64 位 ART 虚拟机（ART:Android runtime）</strong></p><p><strong>5. Overview</strong>（多任务，就是关后台程序的那个，小米手机上拉）</p><p><strong>6. 设备识别解锁</strong></p><p><strong>7. Ok Google 语音指令</strong>（语音助手）</p><p><strong>8. Face unlock 面部解锁</strong></p><h2 id="1-1-2-替换-ListView-和-GridView-的-RecyclerView"><a href="#1-1-2-替换-ListView-和-GridView-的-RecyclerView" class="headerlink" title="1.1.2 替换 ListView 和 GridView 的 RecyclerView"></a>1.1.2 替换 ListView 和 GridView 的 RecyclerView</h2><blockquote><p>有什么优点？</p><p>具有高度的解耦、异常的灵活性和更高的效率，通过设置它提供的不同 LayoutManager、ItemDecoration、ItemAnimator 可实现更加丰富多样的效果</p><p>缺点：</p><p>分割线需要自定义，另外列表的点击事件需要自己去实现。</p></blockquote><h3 id="1-设置分割线"><a href="#1-设置分割线" class="headerlink" title="1.设置分割线"></a>1.设置分割线</h3><p>现在谷歌有提供默认的分割线</p><pre class=" language-java"><code class="language-java">  recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DividerItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>DividerItemDecoration<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果是网格布局的话，横着，竖着都画</p><h3 id="2-自定义分割线"><a href="#2-自定义分割线" class="headerlink" title="2.自定义分割线"></a>2.自定义分割线</h3><p>利用setDrawable方法</p><p>首先编写1个样式</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rectangle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;gradient        android:centerColor="#ff00ff00" //绿色        android:endColor="#ff0000ff"    //蓝色        android:startColor="#ffff0000"  //红色        android:type="linear" />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span> <span class="token attr-name"><span class="token namespace">android:</span>height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span></code></pre><p>然后</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//添加自定义分割线</span>  DividerItemDecoration divider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DividerItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>DividerItemDecoration<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>；                           divider<span class="token punctuation">.</span><span class="token function">setDrawable</span><span class="token punctuation">(</span>ContextCompat<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>custom_divider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span>divider<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者用代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Moon on 2015/11/21. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DividerItemDecoration</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ItemDecoration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ATTRS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>listDivider    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HORIZONTAL_LIST <span class="token operator">=</span> LinearLayoutManager<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> VERTICAL_LIST <span class="token operator">=</span> LinearLayoutManager<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">;</span>    <span class="token keyword">private</span> Drawable mDivider<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mOrientation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DividerItemDecoration</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token keyword">int</span> orientation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> TypedArray a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>ATTRS<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDivider <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setOrientation</span><span class="token punctuation">(</span>orientation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrientation</span><span class="token punctuation">(</span><span class="token keyword">int</span> orientation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orientation <span class="token operator">!=</span> HORIZONTAL_LIST <span class="token operator">&amp;&amp;</span> orientation <span class="token operator">!=</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"invalid orientation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mOrientation <span class="token operator">=</span> orientation<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientation <span class="token operator">==</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">drawVertical</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">drawHorizontal</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawVertical</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> left <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> right <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> View child <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> <span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> child                    <span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> top <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>bottomMargin<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> bottom <span class="token operator">=</span> top <span class="token operator">+</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawHorizontal</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> top <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> bottom <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> View child <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> <span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> child                    <span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> left <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>rightMargin<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> right <span class="token operator">=</span> left <span class="token operator">+</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getItemOffsets</span><span class="token punctuation">(</span>Rect outRect<span class="token punctuation">,</span> <span class="token keyword">int</span> itemPosition<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientation <span class="token operator">==</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            outRect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            outRect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-自定义点击事件"><a href="#3-自定义点击事件" class="headerlink" title="3.自定义点击事件"></a>3.自定义点击事件</h3><ol><li>定义接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnItemClickListener</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.这里写的为了调用方法，用到上面的接口回调</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span>OnItemClickListener mOnItemClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mOnItemClickListener <span class="token operator">=</span> mOnItemClickListener<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.在onCreateViewHolder里面设置</p><pre class=" language-java"><code class="language-java"> view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//点击事件</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//回调</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//长按事件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//回调</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.在activity中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setLister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mHomeAdaper<span class="token punctuation">.</span><span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HomeAdapter<span class="token punctuation">.</span>OnItemClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>RecyclerViewActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"点击第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>RecyclerViewActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"确认删除吗？"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string">"取消"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>DialogInterface dialogInterface<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                mHomeAdaper<span class="token punctuation">.</span><span class="token function">removeData</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>5.总的代码Adapter</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>liuwangshu<span class="token punctuation">.</span>myrecyclerview<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>LayoutInflater<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>FrameLayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by Moon on 2015/11/21. */</span><span class="token keyword">class</span> <span class="token class-name">HomeAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token operator">&lt;</span>HomeAdapter<span class="token punctuation">.</span>MyViewHolder<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">,</span>View<span class="token punctuation">.</span>OnLongClickListener<span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> mList<span class="token punctuation">;</span>    <span class="token keyword">private</span> Context mContext<span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> OnItemClickListener mOnItemClickListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HomeAdapter</span><span class="token punctuation">(</span>Context mContext<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span>mList<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mContext<span class="token operator">=</span>mContext<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mList<span class="token operator">=</span>mList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnItemClickListener</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span>OnItemClickListener mOnItemClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mOnItemClickListener <span class="token operator">=</span> mOnItemClickListener<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeData</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//动态效果</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MyViewHolder <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>ViewGroup parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        View view<span class="token operator">=</span>LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>                mContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_recycler<span class="token punctuation">,</span> parent<span class="token punctuation">,</span>                <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyViewHolder holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyViewHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> holder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token keyword">final</span> MyViewHolder holder<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> mList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">MyViewHolder</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span>    <span class="token punctuation">{</span>        TextView tv<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyViewHolder</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>            tv <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-1-4-3种通知"><a href="#1-1-4-3种通知" class="headerlink" title="1.1.4 3种通知"></a>1.1.4 3种通知</h2><h3 id="1-普通通知"><a href="#1-普通通知" class="headerlink" title="1.普通通知"></a>1.普通通知</h3><p><img src="https://i.loli.net/2019/10/10/qyiDrenEUch7A1t.jpg" alt></p><p>就是显示在那个状态栏的通知</p><h3 id="2-折叠式"><a href="#2-折叠式" class="headerlink" title="2.折叠式"></a>2.折叠式</h3><p>它有两种状态，一种是<strong>普通状态</strong>下的视图（如果不是自定义的话和上面普通通知的视图样式一样），一种是<strong>展开状态</strong>下的视图。</p><p> 自定义的视图，而这个视图显示的进程和我们创建视图的进程不再一个进程，所以我们需要使用RemoteViews，首先要使用RemoteViews来创建我们的自定义视图:</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//用RemoteViews来创建自定义Notification视图</span>RemoteViews remoteViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteViews</span><span class="token punctuation">(</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_fold<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>1.展开后的视图的布局文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/fold<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_image<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/fold<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_text<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>展开后的自定义视图<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorPrimaryDark<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>2.指定展开的视图</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定展开时的视图</span>notification<span class="token punctuation">.</span>bigContentView <span class="token operator">=</span> remoteViews<span class="token punctuation">;</span></code></pre><p>3.总的代码</p><pre class=" language-java"><code class="language-java">        Notification<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Intent mIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">,</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://blog.csdn.net/itachi85/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PendingIntent pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mIntent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setContentIntent</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>foldleft<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setLargeIcon</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>lanucher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setAutoCancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">"折叠式通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用RemoteViews来创建自定义Notification视图</span>        RemoteViews remoteViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteViews</span><span class="token punctuation">(</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_fold<span class="token punctuation">)</span><span class="token punctuation">;</span>        Notification notification <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定展开时的视图</span>        notification<span class="token punctuation">.</span>bigContentView <span class="token operator">=</span> remoteViews<span class="token punctuation">;</span>        notificationManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.界面展示</p><p><img src="https://i.loli.net/2019/10/10/MH24lmvzAUGiafL.jpg" alt></p><p><img src="https://i.loli.net/2019/10/10/dkVYmfyvABLgjKr.jpg" alt></p><h3 id="3-悬挂式"><a href="#3-悬挂式" class="headerlink" title="3.悬挂式"></a>3.悬挂式</h3><p>就是不需要下拉状态栏就行了</p><p><img src="https://i.loli.net/2019/10/10/VKYW8LRlDdj3ytb.jpg" alt></p><p>1.不同的是，需要用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果描述的PendingIntent已经存在，则在产生新的Intent之前会先取消掉当前的</span>        PendingIntent hangPendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hangIntent<span class="token punctuation">,</span> PendingIntent<span class="token punctuation">.</span>FLAG_CANCEL_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里需要设置setFullScreenIntent而不是setContentIntent</span>        builder<span class="token punctuation">.</span><span class="token function">setFullScreenIntent</span><span class="token punctuation">(</span>hangPendingIntent<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="1-1-5-ToolBar和Palette"><a href="#1-1-5-ToolBar和Palette" class="headerlink" title="1.1.5 ToolBar和Palette"></a>1.1.5 ToolBar和Palette</h2><h3 id="1-怎么在ToolBar中的按钮中指定控件呢"><a href="#1-怎么在ToolBar中的按钮中指定控件呢" class="headerlink" title="1.怎么在ToolBar中的按钮中指定控件呢"></a>1.怎么在ToolBar中的按钮中指定控件呢</h3><p>其实就是在menu中的item里面</p><p>app:actionViewClass=”控件”就行了</p><h2 id="2-Palette的应用"><a href="#2-Palette的应用" class="headerlink" title="2.Palette的应用"></a>2.Palette的应用</h2><blockquote><p>这个是什么，其实就是得到图片的色调的</p></blockquote><p>怎么使用？</p><p>1.导入包</p><pre><code>‘com.android.support:palette-v7:23.0.1</code></pre><p>2.先获取图片的Bitmap</p><pre class=" language-java"><code class="language-java">        Bitmap bitmap<span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.然后在Palette的回调中获取色调</p><pre class=" language-java"><code class="language-java"> Palette<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Palette<span class="token punctuation">.</span>PaletteAsyncListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGenerated</span><span class="token punctuation">(</span>Palette palette<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Palette<span class="token punctuation">.</span>Swatch swatch<span class="token operator">=</span>palette<span class="token punctuation">.</span><span class="token function">getVibrantSwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//得到他的rgb色</span>                <span class="token function">getSupportActionBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorDrawable</span><span class="token punctuation">(</span>swatch<span class="token punctuation">.</span><span class="token function">getRgb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.内置提取颜色的种类</p><ul><li>Vibrant 充满活力的</li><li>Vibrant dark充满活力的黑</li><li>Vibrant light 充满活力的亮</li><li>Muted 柔和</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> Android新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.7 平衡二叉树</title>
      <link href="/2019/11/21/8.7-ping-heng-er-cha-shu/"/>
      <url>/2019/11/21/8.7-ping-heng-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="8-7-平衡二叉树"><a href="#8-7-平衡二叉树" class="headerlink" title="8.7 平衡二叉树"></a>8.7 平衡二叉树</h1><blockquote><p>二叉排序树如果不平衡的话，效率会高吗？当然不会</p></blockquote><h2 id="什么是平衡二叉树？"><a href="#什么是平衡二叉树？" class="headerlink" title="什么是平衡二叉树？"></a>什么是平衡二叉树？</h2><p>是一种<strong>二叉排序树</strong>，当中每个节点的<strong>左子树和右子树的高度差至多等于1</strong>.</p><h2 id="什么是平衡因子BF？"><a href="#什么是平衡因子BF？" class="headerlink" title="什么是平衡因子BF？"></a>什么是平衡因子BF？</h2><p>二叉树上节点的<strong>左子树深度减去右子树深度</strong>的值</p><h2 id="什么是最小不平衡树呢？"><a href="#什么是最小不平衡树呢？" class="headerlink" title="什么是最小不平衡树呢？"></a>什么是最小不平衡树呢？</h2><p>距离<strong>插入节点</strong>最<strong>近</strong>的。且<strong>平衡因子的绝对值大于1</strong>的节点为根的子树。<br>下图中，新插入节点37时。距离它近期的平衡因子绝对值超过1的节点是58。所以从58开始下面的子树为最小不平衡子树。</p><p><img src="https://s2.ax1x.com/2019/11/15/Ma25KP.png" alt="Ma25KP.png"></p><h2 id="8-7-1-实现原理"><a href="#8-7-1-实现原理" class="headerlink" title="8.7.1 实现原理"></a>8.7.1 实现原理</h2><h3 id="1-什么是左旋，右旋，双旋"><a href="#1-什么是左旋，右旋，双旋" class="headerlink" title="1.什么是左旋，右旋，双旋"></a>1.什么是左旋，右旋，双旋</h3><p>原理：其实就是利用左旋，右旋，双旋，进行二叉树的调整，</p><p>当BF&gt;1就右旋，反之左旋</p><p>什么是<strong>左旋</strong>？</p><p>其实就是将要旋转的结点B，<strong>左孩子A与它断开</strong>，然后旋转后，A再接到旋转后的B的左孩子下面，作为B的左孩子的右孩子</p><p>同理右旋</p><p><strong>双旋</strong>分为<strong>先左后右双旋转</strong>和<strong>先右后左双旋转</strong>，具体情况具体分析，下面的例子是先左后右双旋转的</p><p> <img src="https://img-blog.csdnimg.cn/20190505172528631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODcwMzM2Ng==,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"> </p><p> <img src="https://img-blog.csdnimg.cn/20190505172601987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODcwMzM2Ng==,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"> </p><h2 id="8-7-2-平衡二叉树的实现算法"><a href="#8-7-2-平衡二叉树的实现算法" class="headerlink" title="8.7.2 平衡二叉树的实现算法"></a>8.7.2 平衡二叉树的实现算法</h2><h3 id="1-平衡二叉树的结构"><a href="#1-平衡二叉树的结构" class="headerlink" title="1.平衡二叉树的结构"></a>1.平衡二叉树的结构</h3><p>其实就是相对于二叉排序树来说<strong>多了个平衡因子</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span>  <span class="token keyword">struct</span> BiTNode <span class="token comment" spellcheck="true">/* 结点结构 */</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 结点数据 */</span>    <span class="token keyword">int</span> bf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  结点的平衡因子 */</span>     <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 左右孩子指针 */</span><span class="token punctuation">}</span> BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span></code></pre><h3 id="2-右旋操作"><a href="#2-右旋操作" class="headerlink" title="2.右旋操作"></a>2.右旋操作</h3><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* 对以p为根的二叉排序树作右旋处理。 */</span><span class="token comment" spellcheck="true">/* 处理之后p指向新的树根结点。即旋转处理之前的左子树的根结点 */</span><span class="token keyword">void</span> <span class="token function">R_Rotate</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">{</span>     BiTree L<span class="token punctuation">;</span>    L<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*L指向P的左子树根结点 */</span>     <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token operator">=</span>L<span class="token operator">-></span>rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*L的右子树挂接为P的左子树 */</span>     L<span class="token operator">-></span>rchild<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>P<span class="token operator">=</span>L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*P指向新的根结点 */</span> <span class="token punctuation">}</span></code></pre><p><img src="https://s2.ax1x.com/2019/11/15/Ma2O8s.png" alt="Ma2O8s.png"></p><p>左旋操作类似，所以不写出来了</p><h3 id="3-左平衡旋转代码"><a href="#3-左平衡旋转代码" class="headerlink" title="3.左平衡旋转代码"></a>3.左平衡旋转代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> LH +1 </span><span class="token comment" spellcheck="true">/*  左高 */</span> <span class="token macro property">#<span class="token directive keyword">define</span> EH 0  </span><span class="token comment" spellcheck="true">/*  等高 */</span> <span class="token macro property">#<span class="token directive keyword">define</span> RH -1 </span><span class="token comment" spellcheck="true">/*  右高 */</span> <span class="token comment" spellcheck="true">/*  对以指针T所指结点为根的二叉树作左平衡旋转处理 */</span><span class="token comment" spellcheck="true">/*  本算法结束时，指针T指向新的根结点*/</span><span class="token keyword">void</span> <span class="token function">LeftBalance</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>     BiTree L<span class="token punctuation">,</span>Lr<span class="token punctuation">;</span>    L<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  L指向T的左子树根结点 */</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>L<span class="token operator">-></span>bf<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  检查T的左子树的平衡度，并作对应平衡处理 */</span>          <span class="token keyword">case</span> LH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  新结点插入在T的左孩子的左子树上。要作单右旋处理 */</span>             <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>L<span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>            <span class="token function">R_Rotate</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> RH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  新结点插入在T的左孩子的右子树上。要作双旋处理 */</span>             Lr<span class="token operator">=</span>L<span class="token operator">-></span>rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  Lr指向T的左孩子的右子树根 */</span>             <span class="token keyword">switch</span><span class="token punctuation">(</span>Lr<span class="token operator">-></span>bf<span class="token punctuation">)</span>            <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  改动T及其左孩子的平衡因子 */</span>                 <span class="token keyword">case</span> LH<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>RH<span class="token punctuation">;</span>                         L<span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>                         <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> EH<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>L<span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>                         <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> RH<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>                         L<span class="token operator">-></span>bf<span class="token operator">=</span>LH<span class="token punctuation">;</span>                         <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Lr<span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>            <span class="token function">L_Rotate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  对T的左子树作左旋平衡处理 */</span>             <span class="token function">R_Rotate</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  对T作右旋平衡处理 */</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-主函数代码"><a href="#4-主函数代码" class="headerlink" title="4.主函数代码"></a>4.主函数代码</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*  若在平衡的二叉排序树T中不存在和e有同样关键字的结点，则插入一个 */</span> <span class="token comment" spellcheck="true">/*  数据元素为e的新结点。并返回1，否则返回0。若因插入而使二叉排序树 */</span> <span class="token comment" spellcheck="true">/*  失去平衡，则作平衡旋转处理。布尔变量taller反映T长高与否。 */</span>Status <span class="token function">InsertAVL</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">,</span>Status <span class="token operator">*</span>taller<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>T<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  插入新结点。树“长高”，置taller为TRUE */</span>          <span class="token operator">*</span>T<span class="token operator">=</span><span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>         <span class="token operator">*</span>taller<span class="token operator">=</span>TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">==</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  树中已存在和e有同样关键字的结点则不再插入 */</span>             <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  应继续在T的左子树中进行搜索 */</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">InsertAVL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">,</span>e<span class="token punctuation">,</span>taller<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  未插入 */</span>                 <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>taller<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*   已插入到T的左子树中且左子树“长高” */</span>                 <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  检查T的平衡度 */</span>                 <span class="token punctuation">{</span>                    <span class="token keyword">case</span> LH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本左子树比右子树高。须要作左平衡处理 */</span>                             <span class="token function">LeftBalance</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> EH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本左、右子树等高，现因左子树增高而使树增高 */</span>                             <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>LH<span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>TRUE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> RH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本右子树比左子树高，现左、右子树等高 */</span>                              <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  应继续在T的右子树中进行搜索 */</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">InsertAVL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">,</span>e<span class="token punctuation">,</span>taller<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  未插入 */</span>                 <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>taller<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  已插入到T的右子树且右子树“长高” */</span>                 <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  检查T的平衡度 */</span>                 <span class="token punctuation">{</span>                    <span class="token keyword">case</span> LH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本左子树比右子树高。现左、右子树等高 */</span>                             <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> EH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本左、右子树等高，现因右子树增高而使树增高  */</span>                            <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>RH<span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>TRUE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> RH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本右子树比左子树高，须要作右平衡处理 */</span>                             <span class="token function">RightBalance</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.2 设计模式分类</title>
      <link href="/2019/11/16/6.2-she-ji-mo-shi-fen-lei/"/>
      <url>/2019/11/16/6.2-she-ji-mo-shi-fen-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="6-2-设计模式分类"><a href="#6-2-设计模式分类" class="headerlink" title="6.2 设计模式分类"></a>6.2 设计模式分类</h1><h2 id="1-创建型"><a href="#1-创建型" class="headerlink" title="1.创建型"></a>1.创建型</h2><p>单例模式、工厂方法模式、抽象工厂模式、建造者模式、原型模式。 </p><h2 id="2-结构型"><a href="#2-结构型" class="headerlink" title="2.结构型"></a>2.结构型</h2><p>适配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><h2 id="3-行为型"><a href="#3-行为型" class="headerlink" title="3.行为型"></a>3.行为型</h2><p>策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.6 二叉排序树</title>
      <link href="/2019/10/29/8.6-er-cha-pai-xu-shu/"/>
      <url>/2019/10/29/8.6-er-cha-pai-xu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="8-6-二叉排序树"><a href="#8-6-二叉排序树" class="headerlink" title="8.6 二叉排序树"></a>8.6 二叉排序树</h1><blockquote><p>在前面我们了解了动态查找表（在查找的时候进行插入和删除的查找表），那什么结构可以实现动态查找表呢？</p></blockquote><h2 id="什么是二叉排序树？"><a href="#什么是二叉排序树？" class="headerlink" title="什么是二叉排序树？"></a>什么是二叉排序树？</h2><p>二叉排序树(Binary Sort Tree)，又称二叉查找树。它或者是一颗空树，或者是具有下列性质的二叉树。</p><ul><li>若它的左子树不空，则<strong>左子树</strong>上所有节点的值都<strong>小于它的根节点</strong>的值；</li><li>若它的右子树不空，则<strong>右子树</strong>上所有节点的值都<strong>大于它的根节点</strong>的值；</li><li>它的左、右子树也分别为二叉排序树。</li></ul><p>简而言之，就是左边孩子小，右边孩子大</p><h2 id="8-6-1-二叉排序树查找操作"><a href="#8-6-1-二叉排序树查找操作" class="headerlink" title="8.6.1 二叉排序树查找操作"></a>8.6.1 二叉排序树查找操作</h2><p>递归查找是否存在key；</p><h3 id="1-二叉树的结构"><a href="#1-二叉树的结构" class="headerlink" title="1.二叉树的结构"></a>1.二叉树的结构</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 二叉树的二叉链表结点结构定义 */</span><span class="token keyword">typedef</span>  <span class="token keyword">struct</span> BiTNode <span class="token comment" spellcheck="true">/* 结点结构 */</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 结点数据 */</span>    <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 左右孩子指针 */</span><span class="token punctuation">}</span> BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span></code></pre><h3 id="2-代码："><a href="#2-代码：" class="headerlink" title="2.代码："></a>2.代码：</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 递归查找二叉排序树T中是否存在key, */</span><span class="token comment" spellcheck="true">/* 指针f指向T的双亲，其初始调用值为NULL */</span><span class="token comment" spellcheck="true">/* 若查找成功，则指针p指向该数据元素结点，并返回TRUE */</span><span class="token comment" spellcheck="true">/* 否则指针p指向查找路径上访问的最后一个结点并返回FALSE */</span>Status <span class="token function">SearchBST</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> BiTree f<span class="token punctuation">,</span> BiTree <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  查找不成功 */</span>    <span class="token comment" spellcheck="true">//判断是否是叶子</span>    <span class="token punctuation">{</span>         <span class="token operator">*</span>p <span class="token operator">=</span> f<span class="token punctuation">;</span>          <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  查找成功 */</span>     <span class="token punctuation">{</span>         <span class="token operator">*</span>p <span class="token operator">=</span> T<span class="token punctuation">;</span>          <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">&lt;</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">,</span> key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  在左子树中继续查找 */</span>    <span class="token keyword">else</span>          <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">,</span> key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  在右子树中继续查找 */</span><span class="token punctuation">}</span></code></pre><h2 id="8-6-2-插入操作"><a href="#8-6-2-插入操作" class="headerlink" title="8.6.2 插入操作"></a>8.6.2 插入操作</h2><h3 id="1-代码："><a href="#1-代码：" class="headerlink" title="1.代码："></a>1.代码：</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*  当二叉排序树T中不存在关键字等于key的数据元素时， */</span><span class="token comment" spellcheck="true">/*  插入key并返回TRUE，否则返回FALSE */</span>Status <span class="token function">InsertBST</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      BiTree p<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">SearchBST</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/* 查找不成功，p是查到的最后一个结点 */</span>    <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> key<span class="token punctuation">;</span>          s<span class="token operator">-></span>lchild <span class="token operator">=</span> s<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>             <span class="token operator">*</span>T <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*  插入s为新的根结点 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">&lt;</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span>             p<span class="token operator">-></span>lchild <span class="token operator">=</span> s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  插入s为左孩子 */</span>        <span class="token keyword">else</span>             p<span class="token operator">-></span>rchild <span class="token operator">=</span> s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  插入s为右孩子 */</span>        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span>         <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  树中已有关键字相同的结点，不再插入 */</span><span class="token punctuation">}</span></code></pre><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="8-6-3-二叉排序树删除操作"><a href="#8-6-3-二叉排序树删除操作" class="headerlink" title="8.6.3 二叉排序树删除操作"></a>8.6.3 二叉排序树删除操作</h2><h3 id="1-叶子结点的删除"><a href="#1-叶子结点的删除" class="headerlink" title="1.叶子结点的删除"></a>1.叶子结点的删除</h3><p>直接删除，不影响原树；</p><p><img src="https://img-blog.csdn.net/20150609175928707" alt="è¿éåå°"></p><h3 id="2-只有左或右子树的节点的删除："><a href="#2-只有左或右子树的节点的删除：" class="headerlink" title="2.只有左或右子树的节点的删除："></a>2.只有左或右子树的节点的删除：</h3><p>节点删除后，将它的左子树或右子树整个移动到删除节点的位置即可，子承父业；</p><p><img src="https://img-blog.csdn.net/20150609180000500" alt="è¿éåå¾çæè¿°"></p><h3 id="3-既有左又有右子树的节点的删除："><a href="#3-既有左又有右子树的节点的删除：" class="headerlink" title="3.既有左又有右子树的节点的删除："></a>3.既有左又有右子树的节点的删除：</h3><p>找到需要删除的节点p的<strong>直接前驱</strong>或者直接后继<strong>s</strong>，用s来<strong>替换节点p</strong>，然后<strong>再删除节点s</strong>。</p><p><img src="https://img-blog.csdn.net/20150609180012387" alt="è¿éåå¾çæè¿°"></p><h3 id="4-代码："><a href="#4-代码：" class="headerlink" title="4.代码："></a>4.代码：</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 若二叉排序树T中存在关键字等于key的数据元素时，则删除该数据元素结点, */</span><span class="token comment" spellcheck="true">/* 并返回TRUE；否则返回FALSE*/</span>Status <span class="token function">DeleteBST</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 不存在关键字等于key的数据元素 */</span>         <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* 找到关键字等于key的数据元素 */</span> <span class="token comment" spellcheck="true">//找到要删除的地方</span>            <span class="token keyword">return</span> <span class="token function">Delete</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">DeleteBST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">DeleteBST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 从二叉排序树中删除结点p，并重接它的左或右子树。 */</span>Status <span class="token function">Delete</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiTree q<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 右子树空则只需重接它的左子树（待删结点是叶子也走此分支) */</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 只需重接它的右子树 */</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token comment" spellcheck="true">/* 左右子树均不空 */</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span> s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">-></span>rchild<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 转左，然后向右到尽头（找待删结点的前驱） */</span>        <span class="token punctuation">{</span>            q<span class="token operator">=</span>s<span class="token punctuation">;</span>            s<span class="token operator">=</span>s<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token operator">=</span>s<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  s指向被删结点的直接前驱（将被删结点前驱的值取代被删结点的值） */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token operator">*</span>p<span class="token punctuation">)</span>            q<span class="token operator">-></span>rchild<span class="token operator">=</span>s<span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  重接q的右子树 */</span>         <span class="token keyword">else</span>            q<span class="token operator">-></span>lchild<span class="token operator">=</span>s<span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  重接q的左子树 */</span>        <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="8-6-4-总结"><a href="#8-6-4-总结" class="headerlink" title="8.6.4 总结"></a>8.6.4 总结</h2><h3 id="1-时间复杂度是多少？"><a href="#1-时间复杂度是多少？" class="headerlink" title="1.时间复杂度是多少？"></a>1.时间复杂度是多少？</h3><p>当二叉排序树是比较平衡的时候，时间复杂度是O（logn），类似于折半查找，当不够平衡的时候，时间复杂度是O（n）</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.7 堆排序</title>
      <link href="/2019/10/29/9.7-dui-pai-xu/"/>
      <url>/2019/10/29/9.7-dui-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="9-7-堆排序"><a href="#9-7-堆排序" class="headerlink" title="9.7 堆排序"></a>9.7 堆排序</h1><blockquote><p>我们前面学过简单选择排序，那么这里的堆排序和简单选择排序有什么关系呢？</p></blockquote><h2 id="堆是什么？"><a href="#堆是什么？" class="headerlink" title="堆是什么？"></a>堆是什么？</h2><p>堆是具有下列性质的<strong>完全二叉树</strong>：每个<strong>结点</strong>的值都<strong>大于或等于其左右孩子</strong>结点的值，称为<strong>大顶堆</strong>（例如图9-7-2左图）；或者每个结点的值都<strong>小于或等于其左右孩子</strong>结点的值，称为<strong>小顶堆</strong>（例如图9-7-2右图）</p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-02.jpg" alt="img"></p><h2 id="简单选择排序的缺点是什么？"><a href="#简单选择排序的缺点是什么？" class="headerlink" title="简单选择排序的缺点是什么？"></a>简单选择排序的缺点是什么？</h2><p>简单选择排序没有将每一趟比较结果保存下来，以至于在后面的比较中有与前面的重复的比较的现象。</p><h2 id="9-7-1-堆排序算法"><a href="#9-7-1-堆排序算法" class="headerlink" title="9.7.1 堆排序算法"></a>9.7.1 堆排序算法</h2><h3 id="1-堆排序是什么"><a href="#1-堆排序是什么" class="headerlink" title="1.堆排序是什么"></a>1.堆排序是什么</h3><p>堆排序（Heap Sort）就是利用堆（假设利用<strong>大顶堆</strong>）进行<strong>排序</strong>的方法</p><p>核心思想是：先将待排序的序列构造成一个<strong>大顶堆</strong>，然后将<strong>根节点移走</strong>，接着将<strong>剩余的n-1个序列</strong>重新构造成<strong>大顶堆</strong>，如此<strong>反复执行</strong>，便能得到一个有序序列了。</p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-04.jpg" alt="img"></p><h3 id="2-堆排序的代码："><a href="#2-堆排序的代码：" class="headerlink" title="2.堆排序的代码："></a>2.堆排序的代码：</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L进行堆排序 */</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 把L中的r构建成一个大顶堆 */</span>   <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*将堆顶记录和当前未经排序子序列的最后一个记录交换*/</span>   <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 将L->r[1..i-1]重新调整为大顶堆 */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在构建大顶堆的时候，为什么是<strong>i=L-&gt;length/2？</strong></p><p>因为<strong>i</strong>这时候是<strong>有孩子</strong>的结点</p><h3 id="3-HeapAdjust（堆调整）的代码是怎样的？"><a href="#3-HeapAdjust（堆调整）的代码是怎样的？" class="headerlink" title="3.HeapAdjust（堆调整）的代码是怎样的？"></a>3.HeapAdjust（堆调整）的代码是怎样的？</h3><pre class=" language-C"><code class="language-C">/* 已知L->r[s..m]中记录的关键字除L->r[s]之外均满足堆的定义， *//* 本函数调整L->r[s]的关键字,使L->r[s..m]成为一个大顶堆 */  //这里s是当前结点序号，m是长度void HeapAdjust(SqList *L,int s,int m){  int temp,j; temp=L->r[s]; for(j=2*s;j<=m;j*=2)  /* 沿关键字较大的孩子结点向下筛选 */ {  if(j<m && L->r[j]<L->r[j+1])   ++j;   /* j为关键字中较大的记录的下标 */  if(temp>=L->r[j])   break;   /* rc应插入在位置s上 */  L->r[s]=L->r[j];  s=j; } L->r[s]=temp;   /* 插入 */}</code></pre><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-07.jpg" alt="img"></p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-08.jpg" alt="img"></p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-09.jpg" alt="img"></p><h3 id="4-堆调整后，怎么办？"><a href="#4-堆调整后，怎么办？" class="headerlink" title="4.堆调整后，怎么办？"></a>4.堆调整后，怎么办？</h3><pre class=" language-c"><code class="language-c"> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 将堆顶记录和当前未经排序子序列的最后一个记录交换 */</span>   <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 将L->r[1..i-1]重新调整为大顶堆 */</span> <span class="token punctuation">}</span></code></pre><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-10.jpg" alt="img"></p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-11.jpg" alt="img"></p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-12.jpg" alt="img"></p><p>堆排序的<strong>核心思想</strong>就是：<strong>从下往上找大的，大的放在前面</strong></p><h2 id="9-7-2-堆排序复杂度分析"><a href="#9-7-2-堆排序复杂度分析" class="headerlink" title="9.7.2 堆排序复杂度分析"></a>9.7.2 堆排序复杂度分析</h2><p>时间复杂度为O（nlogn）</p><p>不稳定的，不适合个数较少的情况</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.3 Android 7.0新特性</title>
      <link href="/2019/10/29/1.3-android-7.0-xin-te-xing/"/>
      <url>/2019/10/29/1.3-android-7.0-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-3-Android-7-0新特性"><a href="#1-3-Android-7-0新特性" class="headerlink" title="1.3 Android 7.0新特性"></a>1.3 Android 7.0新特性</h1><h2 id="1-3-2-多窗口模式"><a href="#1-3-2-多窗口模式" class="headerlink" title="1.3.2 多窗口模式"></a>1.3.2 多窗口模式</h2><h3 id="1-多窗口模式的生命周期是怎样的？"><a href="#1-多窗口模式的生命周期是怎样的？" class="headerlink" title="1.多窗口模式的生命周期是怎样的？"></a>1.多窗口模式的生命周期是怎样的？</h3><h4 id="1-当进入多窗口模式的时候"><a href="#1-当进入多窗口模式的时候" class="headerlink" title="1.当进入多窗口模式的时候"></a>1.当进入多窗口模式的时候</h4><ul><li><p>onPause </p></li><li><p>onStop </p></li><li><p>onDestroy </p></li><li><p>onCreate </p></li><li><p>onStart </p></li><li><p>onResume </p></li><li><p>onPause </p><p>先停止销毁后重建，最后停留在pause</p></li></ul><h4 id="2-当退出多窗口模式的时候"><a href="#2-当退出多窗口模式的时候" class="headerlink" title="2.当退出多窗口模式的时候"></a>2.当退出多窗口模式的时候</h4><ul><li><p>onStop </p></li><li><p>onDestroy </p></li><li><p>onCreate </p></li><li><p>onStart </p></li><li><p>onResume </p></li><li><p>onPause </p></li><li><p>onResume </p><p>先销毁后重建，最后停在onResume </p></li></ul><h3 id="3-怎么禁用多窗口模式"><a href="#3-怎么禁用多窗口模式" class="headerlink" title="3.怎么禁用多窗口模式"></a>3.怎么禁用多窗口模式</h3><h4 id="1-当targetSdkVersion-gt-24时"><a href="#1-当targetSdkVersion-gt-24时" class="headerlink" title="1.当targetSdkVersion&gt;=24时"></a>1.当targetSdkVersion&gt;=24时</h4><p><img src="https://s2.ax1x.com/2019/10/26/KDclGV.png" alt="KDclGV.png"></p><h4 id="2-当targetSdkVersion-lt-24"><a href="#2-当targetSdkVersion-lt-24" class="headerlink" title="2.当targetSdkVersion&lt;24"></a>2.当targetSdkVersion&lt;24</h4><p>禁止横竖屏转化</p><p><img src="https://s2.ax1x.com/2019/10/26/KDc0G6.png" alt="KDc0G6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> Android新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/10/26/jin-jie-zhi-guang-1.1-an-zhuo-5.0-xin-te-xing/"/>
      <url>/2019/10/26/jin-jie-zhi-guang-1.1-an-zhuo-5.0-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-安卓5-0新特性"><a href="#1-1-安卓5-0新特性" class="headerlink" title="1.1 安卓5.0新特性"></a>1.1 安卓5.0新特性</h1><h2 id="1-1-1-Android-5-0-主要新特性"><a href="#1-1-1-Android-5-0-主要新特性" class="headerlink" title="1.1.1 Android 5.0 主要新特性"></a>1.1.1 Android 5.0 主要新特性</h2><p><strong>1. 全新的 Material Design 新风格</strong></p><p><strong>2. 支持多种设备</strong></p><p><strong>3. 全新的通知中心设计</strong></p><p><strong>4. 支持 64 位 ART 虚拟机（ART:Android runtime）</strong></p><p><strong>5. Overview</strong>（多任务，就是关后台程序的那个，小米手机上拉）</p><p><strong>6. 设备识别解锁</strong></p><p><strong>7. Ok Google 语音指令</strong>（语音助手）</p><p><strong>8. Face unlock 面部解锁</strong></p><h2 id="1-1-2-替换-ListView-和-GridView-的-RecyclerView"><a href="#1-1-2-替换-ListView-和-GridView-的-RecyclerView" class="headerlink" title="1.1.2 替换 ListView 和 GridView 的 RecyclerView"></a>1.1.2 替换 ListView 和 GridView 的 RecyclerView</h2><blockquote><p>有什么优点？</p><p>具有高度的解耦、异常的灵活性和更高的效率，通过设置它提供的不同 LayoutManager、ItemDecoration、ItemAnimator 可实现更加丰富多样的效果</p><p>缺点：</p><p>分割线需要自定义，另外列表的点击事件需要自己去实现。</p></blockquote><h3 id="1-设置分割线"><a href="#1-设置分割线" class="headerlink" title="1.设置分割线"></a>1.设置分割线</h3><p>现在谷歌有提供默认的分割线</p><pre class=" language-java"><code class="language-java">  recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DividerItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>DividerItemDecoration<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果是网格布局的话，横着，竖着都画</p><h3 id="2-自定义分割线"><a href="#2-自定义分割线" class="headerlink" title="2.自定义分割线"></a>2.自定义分割线</h3><p>利用setDrawable方法</p><p>首先编写1个样式</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rectangle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;gradient        android:centerColor="#ff00ff00" //绿色        android:endColor="#ff0000ff"    //蓝色        android:startColor="#ffff0000"  //红色        android:type="linear" />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span> <span class="token attr-name"><span class="token namespace">android:</span>height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span></code></pre><p>然后</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//添加自定义分割线</span>        DividerItemDecoration divider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DividerItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>DividerItemDecoration<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        divider<span class="token punctuation">.</span><span class="token function">setDrawable</span><span class="token punctuation">(</span>ContextCompat<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>custom_divider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span>divider<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者用代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Moon on 2015/11/21. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DividerItemDecoration</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ItemDecoration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ATTRS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>listDivider    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HORIZONTAL_LIST <span class="token operator">=</span> LinearLayoutManager<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> VERTICAL_LIST <span class="token operator">=</span> LinearLayoutManager<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">;</span>    <span class="token keyword">private</span> Drawable mDivider<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mOrientation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DividerItemDecoration</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token keyword">int</span> orientation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> TypedArray a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>ATTRS<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDivider <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setOrientation</span><span class="token punctuation">(</span>orientation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrientation</span><span class="token punctuation">(</span><span class="token keyword">int</span> orientation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orientation <span class="token operator">!=</span> HORIZONTAL_LIST <span class="token operator">&amp;&amp;</span> orientation <span class="token operator">!=</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"invalid orientation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mOrientation <span class="token operator">=</span> orientation<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientation <span class="token operator">==</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">drawVertical</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">drawHorizontal</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawVertical</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> left <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> right <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> View child <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> <span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> child                    <span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> top <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>bottomMargin<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> bottom <span class="token operator">=</span> top <span class="token operator">+</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawHorizontal</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> top <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> bottom <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> View child <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> <span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> child                    <span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> left <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>rightMargin<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> right <span class="token operator">=</span> left <span class="token operator">+</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getItemOffsets</span><span class="token punctuation">(</span>Rect outRect<span class="token punctuation">,</span> <span class="token keyword">int</span> itemPosition<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientation <span class="token operator">==</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            outRect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            outRect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-自定义点击事件"><a href="#3-自定义点击事件" class="headerlink" title="3.自定义点击事件"></a>3.自定义点击事件</h3><ol><li>定义接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnItemClickListener</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.这里写的为了调用方法，用到上面的接口回调</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span>OnItemClickListener mOnItemClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mOnItemClickListener <span class="token operator">=</span> mOnItemClickListener<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.在onCreateViewHolder里面设置</p><pre class=" language-java"><code class="language-java"> view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//点击事件</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//回调</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//长按事件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//回调</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.在activity中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setLister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mHomeAdaper<span class="token punctuation">.</span><span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HomeAdapter<span class="token punctuation">.</span>OnItemClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>RecyclerViewActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"点击第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>RecyclerViewActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"确认删除吗？"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string">"取消"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>DialogInterface dialogInterface<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                mHomeAdaper<span class="token punctuation">.</span><span class="token function">removeData</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>5.总的代码Adapter</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>liuwangshu<span class="token punctuation">.</span>myrecyclerview<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>LayoutInflater<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>FrameLayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by Moon on 2015/11/21. */</span><span class="token keyword">class</span> <span class="token class-name">HomeAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token operator">&lt;</span>HomeAdapter<span class="token punctuation">.</span>MyViewHolder<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">,</span>View<span class="token punctuation">.</span>OnLongClickListener<span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> mList<span class="token punctuation">;</span>    <span class="token keyword">private</span> Context mContext<span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> OnItemClickListener mOnItemClickListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HomeAdapter</span><span class="token punctuation">(</span>Context mContext<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span>mList<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mContext<span class="token operator">=</span>mContext<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mList<span class="token operator">=</span>mList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnItemClickListener</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span>OnItemClickListener mOnItemClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mOnItemClickListener <span class="token operator">=</span> mOnItemClickListener<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeData</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//动态效果</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MyViewHolder <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>ViewGroup parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        View view<span class="token operator">=</span>LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>                mContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_recycler<span class="token punctuation">,</span> parent<span class="token punctuation">,</span>                <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyViewHolder holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyViewHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> holder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token keyword">final</span> MyViewHolder holder<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> mList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">MyViewHolder</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span>    <span class="token punctuation">{</span>        TextView tv<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyViewHolder</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>            tv <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-1-4-3种通知"><a href="#1-1-4-3种通知" class="headerlink" title="1.1.4 3种通知"></a>1.1.4 3种通知</h2><h3 id="1-普通通知"><a href="#1-普通通知" class="headerlink" title="1.普通通知"></a>1.普通通知</h3><p><img src="https://i.loli.net/2019/10/10/qyiDrenEUch7A1t.jpg" alt></p><p>就是显示在那个状态栏的通知</p><h3 id="2-折叠式"><a href="#2-折叠式" class="headerlink" title="2.折叠式"></a>2.折叠式</h3><p>它有两种状态，一种是普通状态下的视图（如果不是自定义的话和上面普通通知的视图样式一样），一种是展开状态下的视图。</p><p> 自定义的视图，而这个视图显示的进程和我们创建视图的进程不再一个进程，所以我们需要使用RemoteViews，首先要使用RemoteViews来创建我们的自定义视图:</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//用RemoteViews来创建自定义Notification视图</span>RemoteViews remoteViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteViews</span><span class="token punctuation">(</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_fold<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>1.展开后的视图的布局文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/fold<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_image<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/fold<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_text<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>展开后的自定义视图<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorPrimaryDark<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>2.指定展开的视图</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定展开时的视图</span>notification<span class="token punctuation">.</span>bigContentView <span class="token operator">=</span> remoteViews<span class="token punctuation">;</span></code></pre><p>3.总的代码</p><pre class=" language-java"><code class="language-java">        Notification<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Intent mIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">,</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://blog.csdn.net/itachi85/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PendingIntent pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mIntent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setContentIntent</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>foldleft<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setLargeIcon</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>lanucher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setAutoCancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">"折叠式通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用RemoteViews来创建自定义Notification视图</span>        RemoteViews remoteViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteViews</span><span class="token punctuation">(</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_fold<span class="token punctuation">)</span><span class="token punctuation">;</span>        Notification notification <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定展开时的视图</span>        notification<span class="token punctuation">.</span>bigContentView <span class="token operator">=</span> remoteViews<span class="token punctuation">;</span>        notificationManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.界面展示</p><p><img src="https://i.loli.net/2019/10/10/MH24lmvzAUGiafL.jpg" alt></p><p><img src="https://i.loli.net/2019/10/10/dkVYmfyvABLgjKr.jpg" alt></p><h3 id="3-悬挂式"><a href="#3-悬挂式" class="headerlink" title="3.悬挂式"></a>3.悬挂式</h3><p>就是不需要下拉状态栏就行了</p><p><img src="https://i.loli.net/2019/10/10/VKYW8LRlDdj3ytb.jpg" alt></p><p>1.不同的是，需要用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果描述的PendingIntent已经存在，则在产生新的Intent之前会先取消掉当前的</span>        PendingIntent hangPendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hangIntent<span class="token punctuation">,</span> PendingIntent<span class="token punctuation">.</span>FLAG_CANCEL_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里需要设置setFullScreenIntent而不是setContentIntent</span>        builder<span class="token punctuation">.</span><span class="token function">setFullScreenIntent</span><span class="token punctuation">(</span>hangPendingIntent<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="1-1-5-ToolBar和Palette"><a href="#1-1-5-ToolBar和Palette" class="headerlink" title="1.1.5 ToolBar和Palette"></a>1.1.5 ToolBar和Palette</h2><h3 id="1-怎么在ToolBar中的按钮中指定控件呢"><a href="#1-怎么在ToolBar中的按钮中指定控件呢" class="headerlink" title="1.怎么在ToolBar中的按钮中指定控件呢"></a>1.怎么在ToolBar中的按钮中指定控件呢</h3><p>其实就是在menu中的item里面</p><p>app:actionViewClass=”控件”就行了</p><h2 id="2-Palette的应用"><a href="#2-Palette的应用" class="headerlink" title="2.Palette的应用"></a>2.Palette的应用</h2><blockquote><p>这个是什么，其实就是得到图片的色调的</p></blockquote><p>怎么使用？</p><p>1.导入包</p><pre><code>‘com.android.support:palette-v7:23.0.1</code></pre><p>2.先获取图片的Bitmap</p><pre class=" language-java"><code class="language-java">        Bitmap bitmap<span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.然后在Palette的回调中获取色调</p><pre class=" language-java"><code class="language-java"> Palette<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Palette<span class="token punctuation">.</span>PaletteAsyncListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGenerated</span><span class="token punctuation">(</span>Palette palette<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Palette<span class="token punctuation">.</span>Swatch swatch<span class="token operator">=</span>palette<span class="token punctuation">.</span><span class="token function">getVibrantSwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//得到他的rgb色</span>                <span class="token function">getSupportActionBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorDrawable</span><span class="token punctuation">(</span>swatch<span class="token punctuation">.</span><span class="token function">getRgb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.内置提取颜色的种类</p><ul><li>Vibrant 充满活力的</li><li>Vibrant dark充满活力的黑</li><li>Vibrant light 充满活力的亮</li><li>Muted 柔和</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>7.7 最短路径</title>
      <link href="/2019/10/26/7.7-zui-duan-lu-jing/"/>
      <url>/2019/10/26/7.7-zui-duan-lu-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="7-7-最短路径"><a href="#7-7-最短路径" class="headerlink" title="7.7 最短路径"></a>7.7 最短路径</h1><blockquote><p>上节我们探讨了最小生成树的生成方法，分别是prim算法和Kruskal算法,这节课我们来探讨下求最短路径的算法</p><p>上上节我们探讨了广度优先和深度优先，其实这与本节有一定的关系</p></blockquote><h2 id="7-7-1-Dijkstra算法"><a href="#7-7-1-Dijkstra算法" class="headerlink" title="7.7.1 Dijkstra算法"></a>7.7.1 Dijkstra算法</h2><h3 id="1-什么是Dijkstra算法？"><a href="#1-什么是Dijkstra算法？" class="headerlink" title="1.什么是Dijkstra算法？"></a>1.什么是Dijkstra算法？</h3><p>用于计算一个结点到其他结点的最短路径</p><p>算法的<strong>主要特点</strong>是以起始点为中心向外层层扩展(<strong>广度优先搜索</strong>思想)， 直到扩展到终点为止，不断地找最小值的点中的连线</p><h3 id="2-图解"><a href="#2-图解" class="headerlink" title="2.图解"></a>2.图解</h3><p><img src="https://s2.ax1x.com/2019/10/26/KBYanO.png" alt="KBYanO.png"></p><p>其实就是不断找最短的距离，要和之前的比较</p><h3 id="3-算法"><a href="#3-算法" class="headerlink" title="3.算法"></a>3.算法</h3><p><code>final</code>数组为<strong>已求</strong>得<strong>最短路径</strong>的顶点<strong>集合</strong>，<code>D</code>数组为起点到各顶点的最短路径的<strong>权值和</strong>， <code>P</code>数组为最短路径的<strong>路径的顶点</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Dijkstra算法， 求有向网 G 的 v0 顶点到其余顶点 v 最短路径 P[v] 及带权长度 D[v], P[v] 的值为前驱顶点下标, * D[v] 表示 v0 到 v 的最短路径长度和 */</span><span class="token keyword">void</span> <span class="token function">ShortestPath_Dijkstra</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v0<span class="token punctuation">,</span> ShortPathTable <span class="token operator">*</span>D<span class="token punctuation">,</span> Patharc <span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> min<span class="token punctuation">,</span> k<span class="token punctuation">,</span> final<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* final[w] = 1 表示求得顶点 v0 至 vw 的最短路径 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 初始化数据 */</span>    <span class="token punctuation">{</span>        final<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 全部顶点初始化为未知最短路径状态 */</span>        <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>v0<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 将与 v0 顶点有连线的顶点加上权值 */</span>        <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 初始化路径数组 P 为 0 */</span>    <span class="token punctuation">}</span>    final<span class="token punctuation">[</span>v0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* v0 至 v0 不需要求路径 */</span>    <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* v0 至 v0 路径为 0 */</span>    <span class="token comment" spellcheck="true">/* 开始主循环, 每次求得 v0 到某个 v 顶点的最短路径 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        min <span class="token operator">=</span> INF<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 当前所知离 v0 顶点的最近距离 */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">/* 寻找离 v0 最近的顶点 */</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>final<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                min <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* w 顶点离 v0 顶点更近 */</span>                k <span class="token operator">=</span> w<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        final<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 将目前找到的最近的顶点置为 1 */</span>        <span class="token comment" spellcheck="true">//这里是更新最短路径长度</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">/* 更新当前最短路径及距离 */</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 如果经过 v 顶点的路径比现在这条路径的长度短的话 */</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>final<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* 说明找到了更短的路径, 修改 D[w] 和 P[w] */</span>                <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> min <span class="token operator">+</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 修改当前路径长度 */</span>                <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-如果还想知道v3到v5这样任意顶点开始的最短路径怎么办？"><a href="#4-如果还想知道v3到v5这样任意顶点开始的最短路径怎么办？" class="headerlink" title="4.如果还想知道v3到v5这样任意顶点开始的最短路径怎么办？"></a>4.如果还想知道v3到v5这样任意顶点开始的最短路径怎么办？</h3><p>对每个顶点作为源点运行一次上述算法</p><p>时间复杂度是O(n3)</p><h2 id="7-7-2-Floyd算法"><a href="#7-7-2-Floyd算法" class="headerlink" title="7.7.2 Floyd算法"></a>7.7.2 Floyd算法</h2><h3 id="1-什么是Floyd算法"><a href="#1-什么是Floyd算法" class="headerlink" title="1.什么是Floyd算法"></a>1.什么是<code>Floyd</code>算法</h3><p>在给定的加权图中求最短路径的算法，其实就是不断尝试借助中间结点，而不是之间一步到位的结点，来求最短路径</p><h3 id="2-核心是什么？"><a href="#2-核心是什么？" class="headerlink" title="2.核心是什么？"></a>2.核心是什么？</h3><p><img src="https://s2.ax1x.com/2019/10/26/KBU3NQ.jpg" alt="KBU3NQ.jpg"></p><h3 id="3-步骤是什么？"><a href="#3-步骤是什么？" class="headerlink" title="3.步骤是什么？"></a>3.步骤是什么？</h3><ol><li>首先明确定义，定义两个二维数组<code>D[MAXVEX][MAXVEX]</code>和<code>P[MAXVEX][MAXVEX]</code>，<strong>D</strong>数组代表顶点到顶点的<strong>最短路径权值和</strong>矩阵， <code>P</code>代表对应顶点的<strong>最小路径前驱矩阵</strong>。</li><li>初始的时候，将矩阵<code>D</code>中顶点<code>D[v][w]</code>设置为顶点<code>v</code>到顶点<code>w</code>的<strong>权值</strong>，若两顶点<strong>不相连</strong>，则<code>D[v][w] = INF</code>。</li><li>接下来对矩阵<code>D</code>更新， <strong>如果D[v][w] &gt; D[v][k] + D[k][w]</strong><code>，</code>k<code>表示</code>v、w`两顶点通过中转顶点，该表达式表示通过中转顶点的权值和较小时，<strong>更新v、w权值和</strong>。</li></ol><p><img src="https://s2.ax1x.com/2019/10/26/KBa3qK.png" alt="KBa3qK.png"></p><h3 id="4-算法是什么？"><a href="#4-算法是什么？" class="headerlink" title="4.算法是什么？"></a>4.算法是什么？</h3><p>结构</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXVEX 9</span><span class="token macro property">#<span class="token directive keyword">define</span> INF 65535</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Patharc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ShortPathTable<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> vexs<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">}</span>MGraph<span class="token punctuation">;</span></code></pre><p>算法：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Floyd 算法， 求网图 G 中各顶点 v 到其余顶点 w 的最短路径 P[v][w] 及带权长度 D[v][w] */</span><span class="token keyword">void</span> <span class="token function">ShortestPath_Floyd</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> Patharc <span class="token operator">*</span>P<span class="token punctuation">,</span> ShortPathTable <span class="token operator">*</span>D<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 初始化 D 与 P */</span>    <span class="token comment" spellcheck="true">//双重循环初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>w<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* D[v][w] 值即为对应顶点间的权值 */</span>            <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 初始化 P */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//三重循环更新最短路径</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//k是中间的结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>w<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* 如果经过下标为 k 的顶点路径比原两点间路径更短 */</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将当前两点间权值设为更小的一个 */</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 路径设置为经过下标为 k 的顶点 */</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打印各节点间的最短路径</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 打印各顶点间的最短路径 */</span><span class="token keyword">void</span> <span class="token function">ShowShortestPath</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> Patharc <span class="token operator">*</span>P<span class="token punctuation">,</span> ShortPathTable <span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"v%d-v%d weight: %d "</span><span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 获得第一个路径顶点下标 */</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" path: %d"</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印源点 */</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> w<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 如果路径顶点下标不是终点 */</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -> %d"</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 打印路径顶点 */</span>                k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 获得下一个路径顶点下标 */</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -> %d\n"</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 打印终点 */</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.6 最小生成树</title>
      <link href="/2019/10/25/7.6-zui-xiao-sheng-cheng-shu/"/>
      <url>/2019/10/25/7.6-zui-xiao-sheng-cheng-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="7-6-最小生成树"><a href="#7-6-最小生成树" class="headerlink" title="7.6 最小生成树"></a>7.6 最小生成树</h1><blockquote><p>什么是最小生成树呢？</p></blockquote><h2 id="什么是最小生成树呢？"><a href="#什么是最小生成树呢？" class="headerlink" title="什么是最小生成树呢？"></a>什么是最小生成树呢？</h2><p>即构造连通图的最小代价生成树，就是能够到达每个点，花费最少的路径</p><h2 id="7-6-1-Prim算法"><a href="#7-6-1-Prim算法" class="headerlink" title="7.6.1 Prim算法"></a>7.6.1 Prim算法</h2><p><img src="https://s2.ax1x.com/2019/10/25/Kw73hd.jpg" alt="Kw73hd.jpg"></p><h3 id="1-代码："><a href="#1-代码：" class="headerlink" title="1.代码："></a>1.代码：</h3><h3 id="邻接矩阵结构："><a href="#邻接矩阵结构：" class="headerlink" title="邻接矩阵结构："></a>邻接矩阵结构：</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXVER 10</span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    VertexType vexs<span class="token punctuation">[</span>MAXVER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arc<span class="token punctuation">[</span>MAXVER<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">}</span>MGraph<span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Prim 算法生成最小生成树 */</span><span class="token keyword">void</span> <span class="token function">MiniSpanTree_Prim</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> min<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// min 为当前权值最小值</span>    <span class="token keyword">int</span> lowcost<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 保存顶点间边的权值 */</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 保存相关顶点的下标，即下标与其值所连边为当前最小权值边 */</span>    lowcost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 选取第一个顶点为起始点， 即 v0 加入树， lowcost的值为0，在这里就是此下标的顶点已经加入生成树 */</span>    adjvex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 初始化第一个顶点下标为0 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 循环除下标为 0 外的全部顶点 */</span>    <span class="token punctuation">{</span>        lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将与 v0 顶点有边的权值存入数组 */</span>        adjvex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将其他所有顶点的值初始化为 v0 的下标 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        min <span class="token operator">=</span> INF<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 初始化最小权值为 无穷大 */</span>        j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 循环全部顶点，寻找当前最小生成树顶点集合中最小权值的边 */</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 如果权值不为 0(即不在树中), 且权值小于 min */</span>            <span class="token punctuation">{</span>                min <span class="token operator">=</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 则让当前权值成为最小值 */</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/* 将当前最小值的下标存入k */</span>            <span class="token punctuation">}</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将当前顶点的权值设置为0, 表示此顶点已加入树的顶点集合 */</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d, %d)"</span><span class="token punctuation">,</span> adjvex<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印当前顶点边中权值最小的边 */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 循环所有顶点 */</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 如果下标为 k 的顶点边集中权值小于已存在的权值, 比如 (v0, v6)权值为INF, 而(v1, v6)权值为 16， 更新*/</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将较小的权值存入 lowcost 相应位置 */</span>                adjvex<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 将下标为 k 的顶点存入 adjvex */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>lowcost其实存着最小的权,当lowcost==0的时候，说明该结点已经放入最小生成树中了</p><p>adjvex其实存在点，</p><h3 id="2-复杂度"><a href="#2-复杂度" class="headerlink" title="2.复杂度"></a>2.复杂度</h3><p>时间复杂度是O（n2）</p><h2 id="7-6-2-Kruskal算法"><a href="#7-6-2-Kruskal算法" class="headerlink" title="7.6.2 Kruskal算法"></a>7.6.2 Kruskal算法</h2><h3 id="1-什么是克鲁斯卡尔算法"><a href="#1-什么是克鲁斯卡尔算法" class="headerlink" title="1.什么是克鲁斯卡尔算法"></a>1.什么是克鲁斯卡尔算法</h3><p>按照<strong>权值从小到大</strong>的顺序选择<code>n - 1</code>条边，并保证这<code>n - 1</code>条边<strong>不构成回路</strong></p><h3 id="2-思路是怎样的？"><a href="#2-思路是怎样的？" class="headerlink" title="2.思路是怎样的？"></a>2.思路是怎样的？</h3><ol><li>将邻接矩阵转化为边集数组</li><li>构造一个只含<code>n</code>个顶点的森林，</li><li>然后<strong>依权值从小到大</strong>从连通网中选择边加入到森林中，并使森林<strong>不产生回路</strong>，直至森林变成过一棵树为止</li></ol><p><img src="https://s2.ax1x.com/2019/10/25/KwbbTO.jpg" alt="KwbbTO.jpg"></p><h3 id="3-具体算法"><a href="#3-具体算法" class="headerlink" title="3.具体算法"></a>3.具体算法</h3><p>边集数组结构</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token punctuation">}</span>Edge<span class="token punctuation">;</span></code></pre><p>算法</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 生成最小生成树 */</span><span class="token keyword">void</span> <span class="token function">MiniSpanTree_Kruskal</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 定义一数组用来判断边与边是否形成环路 */</span>    Edge edges<span class="token punctuation">[</span>MAXEDGE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 定义边集数组,edge的结构为begin,end,weight,均为整型 */</span>    <span class="token comment" spellcheck="true">/* 用来构建边集数组并排序********************* */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> INF<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>begin <span class="token operator">=</span> i<span class="token punctuation">;</span>                edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>end <span class="token operator">=</span> j<span class="token punctuation">;</span>                edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> <span class="token operator">&amp;</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* ******************************************* */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打印最小生成树：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 初始化数组值为0 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 循环每一条边 */</span>    <span class="token punctuation">{</span>        n <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> m<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 假如n与m不等，说明此边没有与现有的生成树形成环路 */</span>        <span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将此边的结尾顶点放入下标为起点的parent中。 表示此顶点已经在生成树集合中*/</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d, %d) %d\n"</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Kruskal（克鲁斯卡尔算法）生成最小生成树</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       f <span class="token operator">=</span> parent<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，如果已经加入的话，parent[5]=8表示(5,8)在边集合里面</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.5 图的遍历</title>
      <link href="/2019/10/25/7.5-tu-de-bian-li/"/>
      <url>/2019/10/25/7.5-tu-de-bian-li/</url>
      
        <content type="html"><![CDATA[<h1 id="7-5-图的遍历"><a href="#7-5-图的遍历" class="headerlink" title="7.5 图的遍历"></a>7.5 图的遍历</h1><h2 id="7-5-1-深度优先遍历"><a href="#7-5-1-深度优先遍历" class="headerlink" title="7.5.1 深度优先遍历"></a>7.5.1 深度优先遍历</h2><h3 id="1-什么是深度优先遍历呢"><a href="#1-什么是深度优先遍历呢" class="headerlink" title="1.什么是深度优先遍历呢?"></a>1.什么是深度优先遍历呢?</h3><p>深度优先遍历（Depth_First_Search)，也称为深度优先搜索，简称DFS</p><p>从图中某个顶点<code>v</code>出发，访问此顶点，然后从<code>v</code>的未被访问的邻接点出发深度优先遍历图，直至图中所有和<code>v</code>有路径想通的顶点都被访问到。若图中尚有顶点未被访问到，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。显然，深度优先遍历是一个 <strong>递归</strong>的过程，类似于树的前序遍历</p><p>打个比方，就是一个房间无死角地找，找完再去下一个房间</p><p><img src="https://i.loli.net/2019/10/25/4bxnUeEVWDO9dcm.jpg" alt></p><ul><li>顶点A出发，访问A， 假设没有碰到重复顶点的情况下，始终向右手边走</li><li>访问A的邻接点B， B的邻接点C， C的邻接点D， D的邻接点E， E的邻接点F</li><li>在顶点F处，右手边为顶点A，但已被访问过，故访问顶点G</li><li>在顶点G处，右手边为顶点B，下一个为D， 都已被访问，故访问顶点H</li><li>在顶点H处，由于邻接点G、D和E都被访问，故回退到G，同理，一直回退到D处，访问I</li></ul><h3 id="2-邻接矩阵的方式深度遍历的算法是怎样的？"><a href="#2-邻接矩阵的方式深度遍历的算法是怎样的？" class="headerlink" title="2.邻接矩阵的方式深度遍历的算法是怎样的？"></a>2.邻接矩阵的方式深度遍历的算法是怎样的？</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> Boolean<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Boolean 是布尔类型， 其值是 TRUE 或 FALSE */</span>Boolean visited<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 访问标志的数组 */</span><span class="token comment" spellcheck="true">/* 邻接矩阵的深度优先递归算法 */</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%C "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印顶点，也可以是其他操作 */</span>    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 对未访问的邻接顶点递归调用 */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 邻接矩阵的深度遍历操作 */</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 初始所有顶点状态都是未访问过状态 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 对未访问过的顶点调用 DFS， 若是连通图，只会执行一次 */</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意，void DFSTraverse(MGraph G)中的第二个循环，主要是为了遍历非连通图的情况</p><h3 id="3-邻接表的深度遍历的算法是怎样的？"><a href="#3-邻接表的深度遍历的算法是怎样的？" class="headerlink" title="3.邻接表的深度遍历的算法是怎样的？"></a>3.邻接表的深度遍历的算法是怎样的？</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 邻接表的深度优先递归算法 */</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    EdgeNode <span class="token operator">*</span>p <span class="token operator">=</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">visited</span><span class="token punctuation">(</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>GL<span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 邻接表的深度遍历操作 */</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>GL<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-邻接表和邻接矩阵二者哪个好"><a href="#4-邻接表和邻接矩阵二者哪个好" class="headerlink" title="4.邻接表和邻接矩阵二者哪个好"></a>4.邻接表和邻接矩阵二者哪个好</h3><p>如果是点多边少的话，用邻接表比较好</p><h2 id="7-5-2-广度优先遍历"><a href="#7-5-2-广度优先遍历" class="headerlink" title="7.5.2 广度优先遍历"></a>7.5.2 广度优先遍历</h2><h3 id="1-什么是广度优先遍历"><a href="#1-什么是广度优先遍历" class="headerlink" title="1.什么是广度优先遍历"></a>1.什么是<strong>广度优先遍历</strong></h3><p><strong>广度优先遍历(Breadth First Search)</strong>，又称为 <strong>广度优先搜索</strong>， 简称 <strong>BFS</strong>。</p><p>思想：</p><p>从图中某个顶点<code>v</code>出发，在访问了顶点<code>v</code>后，依次访问顶点<code>v</code>的所有未被访问过的邻接点，然后分别从这些邻接点依次访问他们的邻接点，并使得<code>先被访问过的顶点的邻接点先于后被访问的顶点的邻接点被访问</code>， 直至图中所有已被访问的顶点的邻接点都被访问到。</p><p>类似于层序遍历</p><h3 id="2-图解"><a href="#2-图解" class="headerlink" title="2.图解"></a>2.图解</h3><p><img src="https://i.loli.net/2019/10/25/NpQqzhHudERPUSA.jpg" alt></p><p>核心思想是：出队一个，要把与它直接相连的都进队</p><p>比如说：第2步出队一个A，进队与他直接相连的B F</p><h3 id="3-代码："><a href="#3-代码：" class="headerlink" title="3.代码："></a>3.代码：</h3><h4 id="1-无向图的邻接矩阵"><a href="#1-无向图的邻接矩阵" class="headerlink" title="1.无向图的邻接矩阵"></a>1.无向图的邻接矩阵</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    SqQueue Q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 初始化辅助用的队列 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 对每一个顶点做循环 */</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 若是未访问过就处理 */</span>        <span class="token punctuation">{</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将此队列入队 */</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印顶点，也可以是其他操作 */</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 设置当前顶点访问过 */</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 若当前队列不为空 */</span>            <span class="token punctuation">{</span>                <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将队列中元素出队列，赋值给 i */</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* 判断其他顶点若与当前顶点存在边且未被访问过 */</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                      <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印顶点 */</span>                        visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将找到的此顶点标记为已访问 */</span>                        <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将找到的此顶点入队 */</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>               <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-无向图的邻接表"><a href="#2-无向图的邻接表" class="headerlink" title="2.无向图的邻接表"></a>2.无向图的邻接表</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 邻接表的广度遍历算法 */</span><span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span><span class="token punctuation">{</span>    SqQueue Q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印顶点，也可以是其他操作 */</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                NodeEdge <span class="token operator">*</span>p <span class="token operator">=</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 找到当前顶点边表链表头指针 */</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 若此顶点未被访问 */</span>                    <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将此顶点入队 */</span>                        visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 指针指向下一个邻接点 */</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="DFS和BFS哪个更好呢？"><a href="#DFS和BFS哪个更好呢？" class="headerlink" title="DFS和BFS哪个更好呢？"></a>DFS和BFS哪个更好呢？</h2><p>DFS适合目标更明确</p><p>BFS适合不断扩大范围找到相对最优解</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.4 图的存储结构</title>
      <link href="/2019/10/25/7.4-tu-de-cun-chu-jie-gou/"/>
      <url>/2019/10/25/7.4-tu-de-cun-chu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="7-4-图的存储结构"><a href="#7-4-图的存储结构" class="headerlink" title="7.4 图的存储结构"></a>7.4 图的存储结构</h1><h2 id="7-4-1-邻接矩阵"><a href="#7-4-1-邻接矩阵" class="headerlink" title="7.4.1 邻接矩阵"></a>7.4.1 邻接矩阵</h2><h3 id="1-什么是邻接矩阵"><a href="#1-什么是邻接矩阵" class="headerlink" title="1.什么是邻接矩阵"></a>1.什么是邻接矩阵</h3><p>图的邻接矩阵存储方式是用两个数组来标示图。一个<strong>一维数组</strong>存储图<strong>顶点</strong>的信息，一个<strong>二维数组</strong>（称为邻接矩阵）存储图中<strong>边或者弧</strong>的信息。</p><h4 id="1-无向图的邻接矩阵："><a href="#1-无向图的邻接矩阵：" class="headerlink" title="1.无向图的邻接矩阵："></a>1.无向图的邻接矩阵：</h4><p><img src="https://i.loli.net/2019/10/25/81XwrqsD7CuzT3o.jpg" alt></p><h4 id="2-有向图的邻接矩阵："><a href="#2-有向图的邻接矩阵：" class="headerlink" title="2.有向图的邻接矩阵："></a>2.有向图的邻接矩阵：</h4><p><img src="https://i.loli.net/2019/10/25/XTVAmFcyEovWSMJ.jpg" alt></p><p>可以很容易看出，入度是多少（看列），出度是多少（看行）</p><h4 id="3-网图的邻接矩阵："><a href="#3-网图的邻接矩阵：" class="headerlink" title="3.网图的邻接矩阵："></a>3.网图的邻接矩阵：</h4><p>当2个点到达不了的，用无穷表示距离，当自己到自己的，用0表示距离</p><p><img src="https://i.loli.net/2019/10/25/nqPfX9szxOT63Lw.jpg" alt></p><h3 id="2-邻接矩阵的存储结构："><a href="#2-邻接矩阵的存储结构：" class="headerlink" title="2.邻接矩阵的存储结构："></a>2.邻接矩阵的存储结构：</h3><p><img src="https://i.loli.net/2019/10/25/QJplD6WanVSydCX.jpg" alt></p><h3 id="3-无向网图的创建："><a href="#3-无向网图的创建：" class="headerlink" title="3.无向网图的创建："></a>3.无向网图的创建：</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateMGraph</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>w<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入顶点数和边数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-></span>numVertexes<span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-></span>numEdges<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入顶点数和边数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token operator">-></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//初始化顶点表 </span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>G<span class="token operator">-></span>vex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token operator">-></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>inj<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token operator">-></span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            G<span class="token operator">-></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INFINITY<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//邻接矩阵初始化</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>G<span class="token operator">-></span>numEdges<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入边(vi,vj)的下标i，j和权w：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入边(vi,vj)的下标i，j和权w：</span>            G<span class="token operator">-></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">;</span>            G<span class="token operator">-></span>arc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token operator">-></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//因为是无向图，矩阵对称 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h2 id="7-4-2-邻接表"><a href="#7-4-2-邻接表" class="headerlink" title="7.4.2 邻接表"></a>7.4.2 邻接表</h2><h3 id="1-什么是邻接表？"><a href="#1-什么是邻接表？" class="headerlink" title="1.什么是邻接表？"></a>1.什么是邻接表？</h3><p>用<strong>数组和链表结合</strong>的存储方式来标示图的方法称为<strong>邻接表</strong>。类似于树中的孩子表示法</p><h3 id="2-邻接表的处理思路"><a href="#2-邻接表的处理思路" class="headerlink" title="2.邻接表的处理思路"></a>2.邻接表的处理思路</h3><ol><li><strong>顶点用一维数组</strong>存储</li><li>每个顶点的<strong>邻接点用链表</strong>存储，这个表在<strong>有向图</strong>中叫做弧尾的<strong>出边表</strong>，在<strong>无向图</strong>中叫<strong>边表</strong></li></ol><p><img src="https://i.loli.net/2019/10/25/CoyZhOaBTIfmr84.jpg" alt></p><h3 id="3-邻接表结构分析"><a href="#3-邻接表结构分析" class="headerlink" title="3.邻接表结构分析"></a>3.邻接表结构分析</h3><p><strong>data</strong>是存储<strong>顶点的信息</strong>，<strong>firstedge</strong>是<strong>指针域</strong>，<strong>adjvex</strong>是<strong>邻接点域</strong>，<strong>next</strong>存储边表<strong>下一个结点的地址</strong></p><h3 id="4-带权重的网图是怎样的？"><a href="#4-带权重的网图是怎样的？" class="headerlink" title="4.带权重的网图是怎样的？"></a>4.带权重的网图是怎样的？</h3><p><img src="https://i.loli.net/2019/10/25/UtC1jmIGQEqporL.jpg" alt></p><p><img src="https://i.loli.net/2019/10/25/nlSpAICoqc3Fr2d.jpg" alt></p><h3 id="5-存储结构定义："><a href="#5-存储结构定义：" class="headerlink" title="5.存储结构定义："></a>5.存储结构定义：</h3><p><img src="https://i.loli.net/2019/10/25/jyEYkXLFcPe6tW9.jpg" alt></p><h3 id="6-无向图邻接表的创建代码："><a href="#6-无向图邻接表的创建代码：" class="headerlink" title="6.无向图邻接表的创建代码："></a>6.无向图邻接表的创建代码：</h3><p><img src="https://i.loli.net/2019/10/25/jMaQtV8RBcuKmk9.jpg" alt></p><p><img src="https://i.loli.net/2019/10/25/4QPOBge6WCywHbk.jpg" alt></p><p>因为一条边对应了2个顶点，所以一次循环插入2条边</p><h2 id="7-4-3-十字链表"><a href="#7-4-3-十字链表" class="headerlink" title="7.4.3 十字链表"></a>7.4.3 十字链表</h2><h3 id="1-什么是十字链表"><a href="#1-什么是十字链表" class="headerlink" title="1.什么是十字链表"></a>1.什么是十字链表</h3><p>十字链表把邻接表与逆邻接表结合起来</p><h3 id="2-十字链表的结构是怎样的？"><a href="#2-十字链表的结构是怎样的？" class="headerlink" title="2.十字链表的结构是怎样的？"></a>2.十字链表的结构是怎样的？</h3><p><img src="https://i.loli.net/2019/10/25/l3NMa6KIcWnOeQV.jpg" alt></p><p><img src="https://i.loli.net/2019/10/25/zrt8YwxTEG7h5HW.jpg" alt></p><p>注意的是：headlink是指向终点相同的下一条边，taillink是指向起点相同的下一条边</p><h3 id="3-有什么好处？"><a href="#3-有什么好处？" class="headerlink" title="3.有什么好处？"></a>3.有什么好处？</h3><p>便于求出度和入度</p><h2 id="7-4-4-邻接多重表"><a href="#7-4-4-邻接多重表" class="headerlink" title="7.4.4 邻接多重表"></a>7.4.4 邻接多重表</h2><h3 id="1-为什么要设计邻接多重表呢？"><a href="#1-为什么要设计邻接多重表呢？" class="headerlink" title="1.为什么要设计邻接多重表呢？"></a>1.为什么要设计邻接多重表呢？</h3><p>其实是为了便于边的操作，一条边对应一个结点</p><h3 id="2-邻接多重表的结构是怎样的？"><a href="#2-邻接多重表的结构是怎样的？" class="headerlink" title="2.邻接多重表的结构是怎样的？"></a>2.邻接多重表的结构是怎样的？</h3><p><img src="https://i.loli.net/2019/10/25/v2D3gjczXla5IOP.jpg" alt></p><p>注意的是：ilink与jvex相连，jlink与ivex相连</p><p><img src="https://i.loli.net/2019/10/25/irCVB1XcYu5fvqx.jpg" alt></p><p>如果想要去掉（v0,v2）这条边，只需要把6和9的连接改为null就行</p><h2 id="7-4-5-边集数组"><a href="#7-4-5-边集数组" class="headerlink" title="7.4.5 边集数组"></a>7.4.5 边集数组</h2><h3 id="1-边集数组的结构是怎样的？"><a href="#1-边集数组的结构是怎样的？" class="headerlink" title="1.边集数组的结构是怎样的？"></a>1.边集数组的结构是怎样的？</h3><p><img src="https://i.loli.net/2019/10/25/jnCNfa5JkvoZQmh.jpg" alt></p><p><img src="https://i.loli.net/2019/10/25/dChOJexVnzFvof3.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.12 赫夫曼树及其应用</title>
      <link href="/2019/10/24/6.12-he-fu-man-shu-ji-qi-ying-yong/"/>
      <url>/2019/10/24/6.12-he-fu-man-shu-ji-qi-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="6-12-赫夫曼树及其应用"><a href="#6-12-赫夫曼树及其应用" class="headerlink" title="6.12 赫夫曼树及其应用"></a>6.12 赫夫曼树及其应用</h1><blockquote><p>用来干什么呢？其实就是最基本的压缩算法</p></blockquote><h2 id="6-12-2-赫夫曼树定义和原理"><a href="#6-12-2-赫夫曼树定义和原理" class="headerlink" title="6.12.2 赫夫曼树定义和原理"></a>6.12.2 赫夫曼树定义和原理</h2><h3 id="1-什么是路径，什么是路径长度"><a href="#1-什么是路径，什么是路径长度" class="headerlink" title="1.什么是路径，什么是路径长度"></a>1.什么是路径，什么是路径长度</h3><p>路径就是：从树中一个结点到另一个结点之间的分支</p><p>路径长度是：路径上的分支数目</p><p>树的路径长度是：从树根到一每结点的路径长度之和。</p><p><img src="https://i.loli.net/2019/10/24/tkaxuSOz57sfHL2.jpg" alt></p><p>比如上图，根节点到A的路径长度是3，树的路径长度=1+2+3+3+2+1=12</p><h3 id="2-什么是带权路径长度"><a href="#2-什么是带权路径长度" class="headerlink" title="2.什么是带权路径长度"></a>2.什么是带权路径长度</h3><p>就是路径长度*权值，上面的树的带权路径长度=3 *5+3 *15+2 *70+1 *10</p><h3 id="3-什么是赫夫曼树"><a href="#3-什么是赫夫曼树" class="headerlink" title="3.什么是赫夫曼树"></a>3.什么是赫夫曼树</h3><p>带权路径长度WPL最小的二叉树称作赫夫曼树</p><h3 id="4-怎么构造赫夫曼树呢？"><a href="#4-怎么构造赫夫曼树呢？" class="headerlink" title="4.怎么构造赫夫曼树呢？"></a>4.怎么构造赫夫曼树呢？</h3><ol><li><p>在森林中选出两颗根结点的权值最小的二叉树。</p></li><li><p>合并两棵树，增加一个新结点作为新二叉树的根，权值为左右孩子的权重之和。</p></li><li><p>再从未选中的结点中选择一个最小的，和第2步的结点比较，小的放左边，大的放右边，然后重复，一直到结点没有了为止</p><p>具体如下图所示</p></li></ol><p><img src="https://i.loli.net/2019/10/24/EJ57lqokSVDbrfp.jpg" alt></p><h2 id="6-12-3-赫夫曼编码"><a href="#6-12-3-赫夫曼编码" class="headerlink" title="6.12.3 赫夫曼编码"></a>6.12.3 赫夫曼编码</h2><h3 id="1-什么是赫夫曼编码"><a href="#1-什么是赫夫曼编码" class="headerlink" title="1.什么是赫夫曼编码"></a>1.什么是赫夫曼编码</h3><p>其实是一种<strong>按照赫夫曼树定义的编码规则</strong>，出现多的字符的编码比较短，反之比较长，赫夫曼编码可以节省空间</p><h3 id="2-怎么生成赫夫曼编码呢？"><a href="#2-怎么生成赫夫曼编码呢？" class="headerlink" title="2.怎么生成赫夫曼编码呢？"></a>2.怎么生成赫夫曼编码呢？</h3><p>先把一系列数字转换成<strong>赫夫曼树</strong>，然后将权值<strong>左分支改为0</strong>，<strong>右分支改为1</strong>，得到下图：</p><p><img src="https://i.loli.net/2019/10/24/xfmdUTr32nL6CBF.jpg" alt></p><p>然后用<strong>树根到叶子所经过路径的0或者1来编码</strong>，比如B的编码是1001</p><p><img src="https://i.loli.net/2019/10/24/bIkjSQWZDxrm4EF.jpg" alt></p><h3 id="3-怎么由赫夫曼编码解码呢？"><a href="#3-怎么由赫夫曼编码解码呢？" class="headerlink" title="3.怎么由赫夫曼编码解码呢？"></a>3.怎么由赫夫曼编码解码呢？</h3><ol><li>先得到已知的赫夫曼树</li><li>按照数字对着赫夫曼树逐个查找就可以了</li></ol><p>比如说10010100101是什么？</p><p>B A D C</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.10 线索二叉树</title>
      <link href="/2019/10/24/6.10-xian-suo-er-cha-shu/"/>
      <url>/2019/10/24/6.10-xian-suo-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="6-10-线索二叉树"><a href="#6-10-线索二叉树" class="headerlink" title="6.10 线索二叉树"></a>6.10 线索二叉树</h1><h2 id="6-10-1-线索二叉树的原理"><a href="#6-10-1-线索二叉树的原理" class="headerlink" title="6.10.1  线索二叉树的原理"></a>6.10.1  线索二叉树的原理</h2><h3 id="1-普通的二叉树存在什么浪费空间的地方吗？"><a href="#1-普通的二叉树存在什么浪费空间的地方吗？" class="headerlink" title="1.普通的二叉树存在什么浪费空间的地方吗？"></a>1.普通的二叉树存在什么浪费空间的地方吗？</h3><p>对于有n个结点的二叉树，空链域却有n+1个</p><h3 id="2-怎么利用那些浪费的空间呢"><a href="#2-怎么利用那些浪费的空间呢" class="headerlink" title="2.怎么利用那些浪费的空间呢?"></a>2.怎么利用那些浪费的空间呢?</h3><p>因此，提出了一种方法，利用原来的<strong>空链域存放指针</strong>，指向树中其他结点。我们把指向前驱后继的这种指针称为线索。</p><p>相应的二叉树就是线索二叉树</p><h3 id="3-怎么知道某一个结点的lchild是指向左孩子还是前驱呢？"><a href="#3-怎么知道某一个结点的lchild是指向左孩子还是前驱呢？" class="headerlink" title="3.怎么知道某一个结点的lchild是指向左孩子还是前驱呢？"></a>3.怎么知道某一个结点的lchild是指向左孩子还是前驱呢？</h3><p>其实思路很简单，<strong>加个标记</strong>就行，0表示孩子，1表示前驱或者后继</p><p><img src="https://i.loli.net/2019/10/24/9DdJ51EHlzPi4aV.jpg" alt></p><p>修改后的二叉树是怎样的？</p><p><img src="https://i.loli.net/2019/10/24/i4QtNHmd5pqErVw.jpg" alt></p><h2 id="6-10-2-线索二叉树结构实现"><a href="#6-10-2-线索二叉树结构实现" class="headerlink" title="6.10.2 线索二叉树结构实现"></a>6.10.2 线索二叉树结构实现</h2><h3 id="1-线索二叉树存储结构是怎样的？"><a href="#1-线索二叉树存储结构是怎样的？" class="headerlink" title="1.线索二叉树存储结构是怎样的？"></a>1.线索二叉树存储结构是怎样的？</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 二叉树的二叉线索存储结构定义*/</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>Link<span class="token punctuation">,</span> Thread<span class="token punctuation">}</span>PointerTag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Link = 0表示指向左右孩子指针；Thread = 1表示指向前驱或后继的线索</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BitNode<span class="token punctuation">{</span>       <span class="token keyword">char</span> data<span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//结点数据</span>       <span class="token keyword">struct</span> BitNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//左右孩子指针</span>       PointerTag  Ltag<span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//左右标志</span>       PointerTag  rtal<span class="token punctuation">;</span><span class="token punctuation">}</span>BitNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span></code></pre><h3 id="2-怎么将普通二叉树转换为线索二叉树呢？"><a href="#2-怎么将普通二叉树转换为线索二叉树呢？" class="headerlink" title="2.怎么将普通二叉树转换为线索二叉树呢？"></a>2.怎么将普通二叉树转换为线索二叉树呢？</h3><p>其实<strong>线索化的实质</strong>是将二叉链表中的<strong>空指针改为指向前驱或后继</strong>的线索。</p><p><strong>中序遍历线索化</strong>的代码：</p><pre class=" language-c"><code class="language-c">BiTree pre<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//全局变量，始终指向刚刚访问过的结点</span><span class="token comment" spellcheck="true">//中序遍历进行中序线索化</span><span class="token keyword">void</span> <span class="token function">InThreading</span><span class="token punctuation">(</span>BiTree p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//递归左子树线索化</span>        <span class="token comment" spellcheck="true">//  中序遍历的是printf("%c",T->data);//显示结点数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//当前结点没有左孩子</span>        <span class="token punctuation">{</span>            p<span class="token operator">-></span>ltag <span class="token operator">=</span> Thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//前驱线索</span>            p<span class="token operator">-></span>lchild <span class="token operator">=</span> pre<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左孩子指针指向前驱</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pre<span class="token operator">-></span>rchild<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//前驱结点没有右孩子</span>        <span class="token punctuation">{</span>            pre<span class="token operator">-></span>rtag <span class="token operator">=</span> Thread<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//后继线索</span>            pre<span class="token operator">-></span>rchild <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//前驱右孩子指针指向后继(当前结点p)</span>        <span class="token punctuation">}</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//往上走</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//递归右子树线索化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-为什么后继的遍历要用前驱结点没有右孩子来判断呢？"><a href="#1-为什么后继的遍历要用前驱结点没有右孩子来判断呢？" class="headerlink" title="1.为什么后继的遍历要用前驱结点没有右孩子来判断呢？"></a>1.为什么后继的遍历要用前驱结点没有右孩子来判断呢？</h4><p>因为当前结点的后继还没有访问到，所以用前驱结点的后继来实现</p><h4 id="2-这里中序遍历线索化的代码和中序遍历有什么相同点呢？"><a href="#2-这里中序遍历线索化的代码和中序遍历有什么相同点呢？" class="headerlink" title="2.这里中序遍历线索化的代码和中序遍历有什么相同点呢？"></a>2.这里中序遍历线索化的代码和中序遍历有什么相同点呢？</h4><p>其实这里只是用改变空指针的代码代替了中序遍历中打印结点的代码</p><h3 id="3-怎么遍历线索二叉树呢？"><a href="#3-怎么遍历线索二叉树呢？" class="headerlink" title="3.怎么遍历线索二叉树呢？"></a>3.怎么遍历线索二叉树呢？</h3><p>类似遍历双向链表的方法，加个头指针</p><p><img src="https://i.loli.net/2019/10/24/hMZevPtKx1LRX48.jpg" alt></p><p>代码是怎样的？</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//t指向头结点，头结点左链lchild指向根结点，头结点右链rchild指向中序遍历的最后一个结点。</span><span class="token comment" spellcheck="true">//中序遍历二叉线索树表示二叉树t</span><span class="token keyword">int</span> <span class="token function">InOrderThraverse_Thr</span><span class="token punctuation">(</span>BiTree t<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiTree p<span class="token punctuation">;</span>    p <span class="token operator">=</span> t<span class="token operator">-></span>lchild<span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//p指向根结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> t<span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true">//空树或遍历结束时p == t</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>ltag <span class="token operator">==</span> Link<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true">//当ltag = 0时循环到中序序列的第一个结点，到达最底部结点</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//显示结点数据，可以更改为其他对结点的操作</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rtag <span class="token operator">==</span> Thread <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>rchild <span class="token operator">!=</span> t<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当右指针指向后继的时候，循环打印</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//p进入其右子树</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>什么时候使用线索二叉树呢？</p><p>当需要经常遍历或者查找结点的时候，可以用线索二叉树</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口和接口回调</title>
      <link href="/2019/10/23/jie-kou-he-jie-kou-hui-diao/"/>
      <url>/2019/10/23/jie-kou-he-jie-kou-hui-diao/</url>
      
        <content type="html"><![CDATA[<h1 id="接口和接口回调"><a href="#接口和接口回调" class="headerlink" title="接口和接口回调"></a>接口和接口回调</h1><h2 id="1-什么是接口·"><a href="#1-什么是接口·" class="headerlink" title="1.什么是接口·"></a>1.什么是接口·</h2><p>一种规范，一种规则，比如说，如果你是鸟，你就一定会飞，这里，鸟其实可以简单看成1个接口，会飞，可以看成接口里面的一个方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//有两条腿</span>    <span class="token keyword">void</span> <span class="token function">haveTwoLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swallow</span> <span class="token keyword">implements</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是燕子我会飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">haveTwoLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是燕子我有2条腿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-接口的作用"><a href="#2-接口的作用" class="headerlink" title="2.接口的作用"></a>2.接口的作用</h2><ul><li><p>实现了高内聚</p><p>其实就是通过接口，把使用细节封装起来，向外展示的是一个方法而已，类似于说明书的作用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Chat</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这样就声明这个聊天的功能有2个，让别人一看就知道</span>    <span class="token comment" spellcheck="true">//发消息</span>    <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收消息</span>    <span class="token keyword">void</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Class <span class="token class-name">GroupChat</span> <span class="token keyword">implements</span> <span class="token class-name">Chat</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>很多行代码    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>很多行代码    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>低耦合</p><p>我也不是很明白</p><p>百度说的</p><p>其次是接口的松耦合是我们可以编写可复性高的代码。比如Server层本来引用使用Dao层mysql数据库的实现类，现在遇到mysql解决不了的业务，需要orcale实现，难道你要为了这一个或几个的功能，把所有的引用mysql的全删掉重写？只要再写一个dao层的实现类去引用这个接口，遇到需要orcale方法使用哪个接口变量就好了，别人写的代码也无需去删改。抽象类可以再写一个子类，但子类却不受父类过多约束，随意添加方法，对于项目的协同工作不利。抽象类做不到==对修改封闭，对扩展开放==的原则。<br>————————————————<br>版权声明：本文为CSDN博主「云等风来」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_33667439/article/details/78666979" target="_blank" rel="noopener">https://blog.csdn.net/qq_33667439/article/details/78666979</a></p><h2 id="3-接口的应用之一–接口回调"><a href="#3-接口的应用之一–接口回调" class="headerlink" title="3.接口的应用之一–接口回调"></a>3.接口的应用之一–接口回调</h2><h3 id="1-什么是接口回调呢"><a href="#1-什么是接口回调呢" class="headerlink" title="1.什么是接口回调呢"></a>1.什么是接口回调呢</h3><p>​    其实就是，A调用B，B再回去调用A的另一个方法，是不是很晕，晕就对了</p><p>打个比方：就是A去打车，问B多少钱，B说100块，然后A给了B 100元</p><p>再打个比方：小明问小花数学题，小花说我先学完java，学完后就打回给你，之后半小时，小花打电话回去给小明了</p></li></ul><h3 id="2-为什么要回调呢"><a href="#2-为什么要回调呢" class="headerlink" title="2.为什么要回调呢"></a>2.为什么要回调呢</h3><p>有人想说，直接A调用A的另一个方法就行了鸭，但是事情往往不是那么简单的，有一些事情必须要问别人，等待别人的回答，才能调用A的另一个方法，类比，总不能A自问自答吧</p><h3 id="3-简单的回调示例"><a href="#3-简单的回调示例" class="headerlink" title="3.简单的回调示例"></a>3.简单的回调示例</h3><p>实现功能，小明打电话给小花，小花接到电话后，完成数学作业后，再打电话给小明</p><p>//接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> net<span class="token punctuation">.</span>qiujuer<span class="token punctuation">.</span>web<span class="token punctuation">.</span>italker<span class="token punctuation">.</span>push<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CallBack</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">callBackToXiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//小明</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMing</span> <span class="token keyword">implements</span> <span class="token class-name">CallBack</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">askToXiaoHua</span><span class="token punctuation">(</span>XiaoHua xiaoHua<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明打电话给小花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaoHua<span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里为什么传入this,因为他实现了CallBack，本来是应该传入callBack的，但是因为当前类实现了CallBack，所以callBack有的东西当前的类也有，自然就可以传入this了</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callBackToXiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明收到回电"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>//小花</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoHua</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">answer</span><span class="token punctuation">(</span>CallBack callBack<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小花接到了小明的电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//这里写的是小花花费了半个小时写作业</span>            <span class="token comment" spellcheck="true">//半小时后，打电话回去</span>        callBack<span class="token punctuation">.</span><span class="token function">callBackToXiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>main方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> net<span class="token punctuation">.</span>qiujuer<span class="token punctuation">.</span>web<span class="token punctuation">.</span>italker<span class="token punctuation">.</span>push<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCallBack</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        XiaoHua xiaoHua <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoHua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XiaoMing xiaoMing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">askToXiaoHua</span><span class="token punctuation">(</span>xiaoHua<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-安卓中的接口回调是怎样的？"><a href="#4-安卓中的接口回调是怎样的？" class="headerlink" title="4.安卓中的接口回调是怎样的？"></a>4.安卓中的接口回调是怎样的？</h2><blockquote><p>其实接口回调经常见到</p></blockquote><h3 id="1-点击事件就是接口回调"><a href="#1-点击事件就是接口回调" class="headerlink" title="1.点击事件就是接口回调"></a>1.点击事件就是接口回调</h3><pre class=" language-java"><code class="language-java">mIvMe<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里面写了点击后的处理，调用了点击事件的接口，注意：点击事件的接口的设计相对于上面所说的司机的角色</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>BaseActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>MeActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-接口回调怎么写？"><a href="#2-接口回调怎么写？" class="headerlink" title="2.接口回调怎么写？"></a>2.接口回调怎么写？</h3><h4 id="1-在需要传递数据的地方定义一个接口，例如可以直接接收点击事件的地方（RecyclerView的adapter）"><a href="#1-在需要传递数据的地方定义一个接口，例如可以直接接收点击事件的地方（RecyclerView的adapter）" class="headerlink" title="1.在需要传递数据的地方定义一个接口，例如可以直接接收点击事件的地方（RecyclerView的adapter）"></a>1.在需要传递数据的地方定义一个接口，例如可以直接接收点击事件的地方（RecyclerView的adapter）</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/** * 定义一个接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span>  <span class="token class-name">onListener</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">OnListener</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-在需要传递数据的地方定义一个的接口类型的变量存储数据。"><a href="#2-在需要传递数据的地方定义一个的接口类型的变量存储数据。" class="headerlink" title="2.在需要传递数据的地方定义一个的接口类型的变量存储数据。"></a>2.在需要传递数据的地方<strong>定义一个的接口类型的变量存储数据。</strong></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *定义一个变量储存数据 */</span><span class="token keyword">private</span> onListener listener<span class="token punctuation">;</span> </code></pre><h4 id="3-在需要传递数据的地方定义一个公共的方法，让外部去调用，并且传递接口类型的参数，给其定义的接口类型的数据初始化"><a href="#3-在需要传递数据的地方定义一个公共的方法，让外部去调用，并且传递接口类型的参数，给其定义的接口类型的数据初始化" class="headerlink" title="3.在需要传递数据的地方定义一个公共的方法，让外部去调用，并且传递接口类型的参数，给其定义的接口类型的数据初始化"></a>3.在需要传递数据的地方<strong>定义一个公共的方法，让外部去调用，并且传递接口类型的参数，给其定义的接口类型的数据初始化</strong></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *提供公共的方法,并且初始化接口类型的数据 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setListener</span><span class="token punctuation">(</span> onListener listener<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>listener <span class="token operator">=</span> listener<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-在需要传递数据的地方，合适的位置调用接口里面的方法，传递数据。（比如点击事件的地方）"><a href="#4-在需要传递数据的地方，合适的位置调用接口里面的方法，传递数据。（比如点击事件的地方）" class="headerlink" title="4.在需要传递数据的地方，合适的位置调用接口里面的方法，传递数据。（比如点击事件的地方）"></a>4.在需要传递数据的地方，<strong>合适的位置调用接口里面的方法，传递数据。（比如点击事件的地方）</strong></h4><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/** * 在合适的位置给其调用接口，给其赋值 */</span> @Override <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//这个判断不可少</span>          listener<span class="token punctuation">.</span><span class="token function">OnListener</span><span class="token punctuation">(</span>rtncode<span class="token punctuation">,</span>rtnmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-在需要获取数据的地方，创建对象调方法。"><a href="#5-在需要获取数据的地方，创建对象调方法。" class="headerlink" title="5.在需要获取数据的地方，创建对象调方法。"></a>5.<strong>在需要获取数据的地方，创建对象调方法。</strong></h4><pre class=" language-java"><code class="language-java">allPersonAdapter<span class="token punctuation">.</span><span class="token function">setItemOnClickInterface</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AllPersonAdapter<span class="token punctuation">.</span>ItemOnClickInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//在这里获取数据进行处理</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓基础知识 </tag>
            
            <tag> java基础知识 </tag>
            
            <tag> 接口回调 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.11 树、森林与二叉树的转换</title>
      <link href="/2019/10/23/6.11-shu-sen-lin-yu-er-cha-shu-de-zhuan-huan/"/>
      <url>/2019/10/23/6.11-shu-sen-lin-yu-er-cha-shu-de-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="6-11-树、森林与二叉树的转换"><a href="#6-11-树、森林与二叉树的转换" class="headerlink" title="6.11 树、森林与二叉树的转换"></a>6.11 树、森林与二叉树的转换</h1><h2 id="6-11-1-树转换为二叉树"><a href="#6-11-1-树转换为二叉树" class="headerlink" title="6.11.1 树转换为二叉树"></a>6.11.1 树转换为<strong>二叉树</strong></h2><h3 id="1-步骤是什么？"><a href="#1-步骤是什么？" class="headerlink" title="1.步骤是什么？"></a>1.步骤是什么？</h3><ol><li>加线，在所有兄弟结点之间加一条连线；</li><li>去线，就是对树中的每个结点，只保留他与第一个孩子结点之间的连线，删除它与其它孩子结点之间的连线；</li><li>层次调整，是以树的根结点为轴心，将整棵树顺时针旋转一定角度，使之结构层次分明。</li></ol><p><img src="https://i.loli.net/2019/10/23/CxQZTmFYn3h8ELw.jpg" alt></p><h2 id="6-11-2-森林转换为二叉树"><a href="#6-11-2-森林转换为二叉树" class="headerlink" title="6.11.2 森林转换为二叉树"></a>6.11.2 森林<strong>转换为二叉树</strong></h2><h3 id="1-步骤是什么？-1"><a href="#1-步骤是什么？-1" class="headerlink" title="1.步骤是什么？"></a>1.步骤是什么？</h3><ol><li>先把<strong>每棵树转换为二叉树</strong>；</li><li>第一棵二叉树不动，从第二棵二叉树开始，依次<strong>把后一棵二叉树的根结点</strong>作为<strong>前一棵二叉树</strong>的<strong>根结点的右孩子</strong>结点，用线连接起来。当所有的二叉树连接起来后得到的二叉树就是由森林转换得到的二叉树</li></ol><p><img src="https://i.loli.net/2019/10/23/kDR29fTqIHF38Xl.jpg" alt></p><h2 id="6-11-3-二叉树转化为树"><a href="#6-11-3-二叉树转化为树" class="headerlink" title="6.11.3 二叉树转化为树"></a>6.11.3 二叉树转化为树</h2><h3 id="1-步骤是什么？-2"><a href="#1-步骤是什么？-2" class="headerlink" title="1.步骤是什么？"></a>1.步骤是什么？</h3><ol><li>若某结点的左孩子结点存在，将左孩子结点的右孩子结点、右孩子结点的右孩子结点……都作为该结点的孩子结点，将该结点与这些右孩子结点用线连接起来（反正是左孩子的n个右孩子结点）</li><li>去线，删除原二叉树中所有结点与其右孩子结点的连线；</li><li>层次调整</li></ol><p><img src="https://i.loli.net/2019/10/23/YGgTMPKELtbAxcm.jpg" alt></p><h2 id="6-11-4-二叉树转换为森林"><a href="#6-11-4-二叉树转换为森林" class="headerlink" title="6.11.4 二叉树转换为森林"></a>6.11.4 <strong>二叉树转换为森林</strong></h2><h3 id="1-步骤是什么？-3"><a href="#1-步骤是什么？-3" class="headerlink" title="1.步骤是什么？"></a>1.步骤是什么？</h3><ol><li><p>先把每个结点与右孩子结点的连线删除，得到分离的二叉树；（先分出每棵树）</p></li><li><p>把分离后的每棵二叉树转换为树；</p></li><li><p>整理</p><p><img src="https://i.loli.net/2019/10/23/WUjwXCGIJulRPb3.jpg" alt></p></li></ol><h2 id="6-11-5-树和森林的遍历"><a href="#6-11-5-树和森林的遍历" class="headerlink" title="6.11.5 树和森林的遍历"></a>6.11.5 树和森林的遍历</h2><h3 id="1-树的遍历方式有几种？"><a href="#1-树的遍历方式有几种？" class="headerlink" title="1.树的遍历方式有几种？"></a>1.树的遍历方式有几种？</h3><p><img src="https://i.loli.net/2019/10/23/YGgTMPKELtbAxcm.jpg" alt></p><h4 id="1-第一种，根优先遍历"><a href="#1-第一种，根优先遍历" class="headerlink" title="1.第一种，根优先遍历"></a>1.第一种，根优先遍历</h4><p>先根遍历树，就是<strong>先访问树的根节点，然后依次根遍历根的子树</strong>，拿上图举例，就是 <strong>ABCEFDGHI</strong></p><h4 id="2-第二种，后根遍历"><a href="#2-第二种，后根遍历" class="headerlink" title="2.第二种，后根遍历"></a>2.第二种，后根遍历</h4><p><strong>先依次后根遍历每棵子树</strong>，然后<strong>再访问根结点</strong>，拿上图举例，就是 <strong>ECFBDHIGA</strong></p><h3 id="2-森林的遍历有几种方式？"><a href="#2-森林的遍历有几种方式？" class="headerlink" title="2.森林的遍历有几种方式？"></a>2.森林的遍历有几种方式？</h3><p><img src="https://i.loli.net/2019/10/23/WUjwXCGIJulRPb3.jpg" alt></p><h4 id="1-前序遍历："><a href="#1-前序遍历：" class="headerlink" title="1.前序遍历："></a>1.前序遍历：</h4><p>其实就是先访问森林中第一棵树的根节点，然后依次遍历根的子树，然后再找下一棵树的根，再重复上述操作</p><p>上图的就是，ABCDEFGHJI</p><h4 id="2-后序遍历："><a href="#2-后序遍历：" class="headerlink" title="2.后序遍历："></a>2.后序遍历：</h4><p>其实就是以后根方式依次遍历每一棵树</p><p>上图的就是，BCDAFEJHIG</p><h3 id="总结前面的，其实我们可以知道，森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同"><a href="#总结前面的，其实我们可以知道，森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同" class="headerlink" title="总结前面的，其实我们可以知道，森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同"></a>总结前面的，其实我们可以知道，森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同</h3>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广义表简析</title>
      <link href="/2019/10/23/guang-yi-biao-jian-xi/"/>
      <url>/2019/10/23/guang-yi-biao-jian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="广义表简析"><a href="#广义表简析" class="headerlink" title="广义表简析"></a>广义表简析</h1><blockquote><p>什么是广义表呢？你知道文件系统吗</p></blockquote><h2 id="1-什么是广义表呢？"><a href="#1-什么是广义表呢？" class="headerlink" title="1.什么是广义表呢？"></a>1.什么是广义表呢？</h2><p>其实就是一个可以表中有表的，允许表的嵌套的结构</p><p>例如:文件系统，文件夹下面可能是文件夹，也可能是文件，这就是广义表</p><h2 id="2-广义表有什么属性呢？"><a href="#2-广义表有什么属性呢？" class="headerlink" title="2.广义表有什么属性呢？"></a>2.广义表有什么属性呢？</h2><ul><li><p>表头，表尾</p><p>表头是第一个元素，表尾是除表头以外的元素</p></li><li><p>长度</p><p>广义表的元素个数</p></li><li><p>深度</p><p>广义表的嵌套层数，需要注意，<strong>空表</strong>的深度是1，<strong>原子</strong>的深度是0</p></li></ul><h2 id="3-存储结构"><a href="#3-存储结构" class="headerlink" title="3.存储结构"></a>3.存储结构</h2><h3 id="1-是链式还是顺序表式"><a href="#1-是链式还是顺序表式" class="headerlink" title="1.是链式还是顺序表式"></a>1.是链式还是顺序表式</h3><p>链式，便于存储空间的扩容</p><h3 id="2-结点的分类："><a href="#2-结点的分类：" class="headerlink" title="2.结点的分类："></a>2.结点的分类：</h3><ol><li><p>原子结点（ATOM==0）</p></li><li><p>表结点（LIST==1）</p><p>表结点用来表示一个广义表</p></li></ol><p><img src="https://i.loli.net/2019/10/23/Z1dzhrqCw6ypnxO.jpg" alt></p><h2 id="4-广义表的分解方式"><a href="#4-广义表的分解方式" class="headerlink" title="4.广义表的分解方式"></a>4.广义表的分解方式</h2><h3 id="1-分解为表头和表尾，2个子集，分别递归求解，直至空表或者原子出现"><a href="#1-分解为表头和表尾，2个子集，分别递归求解，直至空表或者原子出现" class="headerlink" title="1.分解为表头和表尾，2个子集，分别递归求解，直至空表或者原子出现"></a>1.分解为表头和表尾，2个子集，分别递归求解，直至空表或者原子出现</h3><p><img src="https://i.loli.net/2019/10/23/Bhi4Sp8ZlJLow5q.jpg" alt></p><h3 id="2-每个元素依次分解"><a href="#2-每个元素依次分解" class="headerlink" title="2.每个元素依次分解"></a>2.每个元素依次分解</h3><p><img src="https://i.loli.net/2019/10/23/j3rRJdYagkwvIGx.jpg" alt></p><p>由此可见，方式2比方式1分解层数少</p><h2 id="5-广义表常用操作实现"><a href="#5-广义表常用操作实现" class="headerlink" title="5.广义表常用操作实现"></a>5.广义表常用操作实现</h2><h3 id="1-求深度的算法"><a href="#1-求深度的算法" class="headerlink" title="1.求深度的算法"></a>1.求深度的算法</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">GListDepth</span><span class="token punctuation">(</span>GList L<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> h1<span class="token punctuation">,</span>h2<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>L<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//空表</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>ATOM<span class="token operator">==</span>L<span class="token operator">-></span>tag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//原子</span>     h1<span class="token operator">=</span><span class="token function">GListDepth</span><span class="token punctuation">(</span>L<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表头深度+1</span>     h2<span class="token operator">=</span><span class="token function">GListDepth</span><span class="token punctuation">(</span>L<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表尾的深度和原表相同</span>     <span class="token keyword">return</span> h1<span class="token operator">>=</span>h2<span class="token operator">?</span> h1<span class="token punctuation">:</span>h2<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="2-在表尾添加元素"><a href="#2-在表尾添加元素" class="headerlink" title="2.在表尾添加元素"></a>2.在表尾添加元素</h3><pre class=" language-c"><code class="language-c">bool <span class="token function">Append</span><span class="token punctuation">(</span>GList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>GLNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在广义表末尾添加新的表结点，将参数p赋予表头指针hp</span>    GLNode <span class="token operator">*</span>pp<span class="token punctuation">;</span>    GList tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新建表尾结点</span>    tail<span class="token operator">=</span><span class="token punctuation">(</span>GList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>GLNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>tail<span class="token punctuation">)</span> <span class="token keyword">return</span> OVERFLOW<span class="token punctuation">;</span>    tail<span class="token operator">-></span>tag<span class="token operator">=</span>LIST<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加数据</span>    tail<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>hp<span class="token operator">=</span>p<span class="token punctuation">;</span>    tail<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>tp<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>L<span class="token punctuation">)</span> L<span class="token operator">=</span>tail<span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>pp<span class="token operator">=</span>L<span class="token punctuation">;</span>pp<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>tp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>pp<span class="token operator">=</span>pp<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定位到最后一个结点</span>        pp<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>tp<span class="token operator">=</span>tail<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广义表 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.9 二叉树的建立</title>
      <link href="/2019/10/23/6.9-er-cha-shu-de-jian-li/"/>
      <url>/2019/10/23/6.9-er-cha-shu-de-jian-li/</url>
      
        <content type="html"><![CDATA[<h1 id="6-9-二叉树的建立"><a href="#6-9-二叉树的建立" class="headerlink" title="6.9 二叉树的建立"></a>6.9 二叉树的建立</h1><h2 id="1-什么是拓展二叉树"><a href="#1-什么是拓展二叉树" class="headerlink" title="1.什么是拓展二叉树"></a>1.什么是拓展二叉树</h2><p>简单说，就是将叶子结点也补上空指针，使其形成类似于完全二叉树的样子</p><p><img src="https://i.loli.net/2019/10/15/kS9qYKHmROis4gh.jpg" alt></p><h2 id="2-怎么生成一个二叉树呢？"><a href="#2-怎么生成一个二叉树呢？" class="headerlink" title="2.怎么生成一个二叉树呢？"></a>2.怎么生成一个二叉树呢？</h2><p>我们把刚才<strong>前序</strong>遍历序列<strong>AB#D##C##</strong>用键盘挨个输入。实现如下算法：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//根左右</span><span class="token keyword">void</span>  <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>BiTree   <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>     TElemType   ch<span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token operator">*</span>T<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>               <span class="token operator">*</span>T<span class="token operator">=</span><span class="token punctuation">(</span>SiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SiTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成根结点</span>                 <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>T<span class="token punctuation">)</span>                <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左子树</span>                <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右子树</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实生成二叉树的方法也是用到了递归的思想</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.8 遍历二叉树</title>
      <link href="/2019/10/23/6.8-bian-li-er-cha-shu/"/>
      <url>/2019/10/23/6.8-bian-li-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="6-8-遍历二叉树"><a href="#6-8-遍历二叉树" class="headerlink" title="6.8 遍历二叉树"></a>6.8 遍历二叉树</h1><h2 id="6-8-1-原理"><a href="#6-8-1-原理" class="headerlink" title="6.8.1 原理"></a>6.8.1 原理</h2><p>是指从根节点出发，按照<strong>某种次序依次</strong>访问二叉树中的所有节点，使得每个节点被访问一次且<strong>仅被访问一次</strong>。</p><p>重点和难点是<strong>次序</strong></p><h2 id="6-8-2-二叉树遍历方法"><a href="#6-8-2-二叉树遍历方法" class="headerlink" title="6.8.2  二叉树遍历方法"></a>6.8.2  二叉树遍历方法</h2><h3 id="1-前序遍历"><a href="#1-前序遍历" class="headerlink" title="1.前序遍历"></a>1.前序遍历</h3><p><strong>根左右</strong></p><p>简单说就是：从根节点开始，<strong>先左边，后右边,从高到低</strong></p><p>比如说下面的次序是：ABDGHCEIF</p><p><img src="https://s2.ax1x.com/2019/10/15/KPQJrn.jpg" alt="KPQJrn.jpg"></p><p>代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*先序遍历: 根-左-右*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示结点数据</span>        <span class="token function">PreOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先遍历左子树</span>        <span class="token function">PreOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//再遍历右子树</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-中序遍历：左根右"><a href="#2-中序遍历：左根右" class="headerlink" title="2.中序遍历：左根右"></a>2.中序遍历：左根右</h3><p>简单说就是，从下面开始，<strong>左根右</strong></p><p><img src="https://s2.ax1x.com/2019/10/15/KPltQH.jpg" alt="KPltQH.jpg"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*中序遍历：左-根-右*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先遍历左子树</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示结点数据</span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//再遍历右子树</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-后序遍历：左右根"><a href="#3-后序遍历：左右根" class="headerlink" title="3.后序遍历：左右根"></a>3.后序遍历：左右根</h3><p>从下到上，左右根</p><p><img src="https://s2.ax1x.com/2019/10/15/KPlb6J.jpg" alt="KPlb6J.jpg"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*后序遍历：左-右-根*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先遍历左子树</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//再遍历右子树</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示结点数据</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-层序遍历"><a href="#4-层序遍历" class="headerlink" title="4.层序遍历"></a>4.层序遍历</h3><p>从根节点出发，依次访问左右孩子结点，再从左右孩子出发，依次它们的孩子结点，直到节点访问完毕</p><p>简而言之：从上到下，一层一层</p><p><img src="https://i.loli.net/2019/10/15/gKQ42qOy6WSrwt3.jpg" alt></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*层序遍历 思路：按从左至右的顺序来逐层访问每个节点，层序遍历的过程需要队列*/</span><span class="token keyword">void</span> <span class="token function">LevelOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiTree p <span class="token operator">=</span> T<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>BiTree<span class="token operator">></span> queue<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*队列*/</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/*根节点入队*/</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*队列不空循环 */</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*对头元素出队*/</span>        <span class="token comment" spellcheck="true">//printf("%c ",p->data); </span><span class="token comment" spellcheck="true">/*访问p指向的结点*/</span>        cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*退出队列*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*左子树不空，将左子树入队*/</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*右子树不空，将右子树入队*/</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-8-6-推导遍历结果"><a href="#6-8-6-推导遍历结果" class="headerlink" title="6.8.6 推导遍历结果"></a>6.8.6 推导遍历结果</h2><h3 id="1-已知前序遍历序列和中序遍历序列，可以唯一确定二叉树吗？"><a href="#1-已知前序遍历序列和中序遍历序列，可以唯一确定二叉树吗？" class="headerlink" title="1.已知前序遍历序列和中序遍历序列，可以唯一确定二叉树吗？"></a>1.已知前序遍历序列和中序遍历序列，可以唯一确定二叉树吗？</h3><p>前序的话，可以一眼看出根节点是第一个</p><h3 id="2-已知后序和中序，可以唯一确定二叉树吗"><a href="#2-已知后序和中序，可以唯一确定二叉树吗" class="headerlink" title="2.已知后序和中序，可以唯一确定二叉树吗?"></a>2.已知后序和中序，可以唯一确定二叉树吗?</h3><p>后序的话，可以一眼看出根节点是最后一个</p><h3 id="结论：中序是一定要有的，才能确定二叉树"><a href="#结论：中序是一定要有的，才能确定二叉树" class="headerlink" title="结论：中序是一定要有的，才能确定二叉树"></a>结论：中序是一定要有的，才能确定二叉树</h3><h2 id="本节重点："><a href="#本节重点：" class="headerlink" title="本节重点："></a>本节重点：</h2><h3 id="记住三字口诀"><a href="#记住三字口诀" class="headerlink" title="记住三字口诀"></a>记住三字口诀</h3><h3 id="根左右"><a href="#根左右" class="headerlink" title="根左右"></a>根左右</h3><h3 id="左根右"><a href="#左根右" class="headerlink" title="左根右"></a>左根右</h3><h3 id="左右根"><a href="#左右根" class="headerlink" title="左右根"></a>左右根</h3>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.7 二叉树的存储结构</title>
      <link href="/2019/10/23/6.7-er-cha-shu-de-cun-chu-jie-gou/"/>
      <url>/2019/10/23/6.7-er-cha-shu-de-cun-chu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="6-7-二叉树的存储结构"><a href="#6-7-二叉树的存储结构" class="headerlink" title="6.7 二叉树的存储结构"></a>6.7 二叉树的存储结构</h1><h2 id="1-顺序存储"><a href="#1-顺序存储" class="headerlink" title="1.顺序存储"></a>1.顺序存储</h2><p>一般只有用于完全二叉树（由于普通的二叉树，例如左斜树，造成存储空间的浪费）</p><h2 id="2-二叉链表"><a href="#2-二叉链表" class="headerlink" title="2.二叉链表"></a>2.二叉链表</h2><p>1个数据域，2个指针域，</p><p><img src="https://s2.ax1x.com/2019/10/15/KPiCQO.png" alt="KPiCQO.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.6 二叉树的性质</title>
      <link href="/2019/10/23/6.6-er-cha-shu-de-xing-zhi/"/>
      <url>/2019/10/23/6.6-er-cha-shu-de-xing-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-6-二叉树的性质"><a href="#6-6-二叉树的性质" class="headerlink" title="6.6 二叉树的性质"></a>6.6 二叉树的性质</h1><h2 id="1-一层最多结点数性质："><a href="#1-一层最多结点数性质：" class="headerlink" title="1.一层最多结点数性质："></a>1.一层最多结点数性质：</h2><p>最多2的（层数-1）次方个结点</p><h2 id="2-已知深度，求最大结点数的性质"><a href="#2-已知深度，求最大结点数的性质" class="headerlink" title="2.已知深度，求最大结点数的性质"></a>2.已知深度，求最大结点数的性质</h2><p><img src="https://s2.ax1x.com/2019/10/15/KP9OcF.png" alt="KP9OcF.png"></p><p>与上面不同，上面是次方里面-1，这里是次方外面-1</p><h2 id="3-终端结点数和度数为2的结点数的关系"><a href="#3-终端结点数和度数为2的结点数的关系" class="headerlink" title="3.终端结点数和度数为2的结点数的关系"></a>3.终端结点数和度数为2的结点数的关系</h2><p>叶子结点数=度数为2的结点数+1</p><h2 id="4-已知结点数，求深度"><a href="#4-已知结点数，求深度" class="headerlink" title="4.已知结点数，求深度"></a>4.已知结点数，求深度</h2><p><img src="https://s2.ax1x.com/2019/10/15/KPC4gO.png" alt="KPC4gO.png"></p><h2 id="5-根据结点总数和编号判断结点类型"><a href="#5-根据结点总数和编号判断结点类型" class="headerlink" title="5.根据结点总数和编号判断结点类型"></a>5.根据结点总数和编号判断结点类型</h2><p>如果对一棵有n个结点的完全二叉树的结点按层序编号，对任一结点 i 有</p><ul><li>若i=1,则i是根；如果i&gt;1,则双亲是结点i/2（向下取整）</li><li>如果2i&gt;n,则结点i是叶子结点；否则左孩子是2i</li><li>如果2i+1&gt;n,则无右孩子；否则右孩子是2i+1；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.5 二叉树的定义</title>
      <link href="/2019/10/23/6.5-er-cha-shu-de-ding-yi/"/>
      <url>/2019/10/23/6.5-er-cha-shu-de-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-5-二叉树的定义"><a href="#6-5-二叉树的定义" class="headerlink" title="6.5 二叉树的定义"></a>6.5 二叉树的定义</h1><blockquote><p>上一节6.4 我们已经探讨了一种树的表示方法，孩子兄弟表示法，其实这就和我们这节要探讨的二叉树很有相似性</p></blockquote><h2 id="总起：二叉树是什么？"><a href="#总起：二叉树是什么？" class="headerlink" title="总起：二叉树是什么？"></a>总起：二叉树是什么？</h2><p>二叉树其实就是每个结点最多只有2个分叉的树</p><p>百度上的概念是：</p><p><img src="https://i.loli.net/2019/10/15/jzasn8x1cVgw47b.jpg" alt></p><p>例如：</p><p><img src="https://i.loli.net/2019/10/15/wAaNCqcfJVSPItL.jpg" alt></p><h2 id="6-5-1-二叉树的特点"><a href="#6-5-1-二叉树的特点" class="headerlink" title="6.5.1 二叉树的特点"></a>6.5.1 二叉树的特点</h2><h3 id="1-二叉树的特点有什么呢？"><a href="#1-二叉树的特点有什么呢？" class="headerlink" title="1.二叉树的特点有什么呢？"></a>1.二叉树的特点有什么呢？</h3><ul><li>每个结点最多2个子树</li><li>左子树和右子树是<strong>有顺序的</strong></li><li>即使只有<strong>1个</strong>结点，也要<strong>区分是左子树还是右子树</strong></li></ul><h3 id="2-二叉树有几种形态呢"><a href="#2-二叉树有几种形态呢" class="headerlink" title="2.二叉树有几种形态呢"></a>2.二叉树有几种形态呢</h3><ul><li>空二叉树</li><li>只有根节点</li><li>只有左子树</li><li>只有右子树</li><li>既有左子树，又有右子树</li></ul><h3 id="3-如果是1棵树只有3个结点的话，有几种形态呢？"><a href="#3-如果是1棵树只有3个结点的话，有几种形态呢？" class="headerlink" title="3.如果是1棵树只有3个结点的话，有几种形态呢？"></a>3.如果是1棵树只有3个结点的话，有几种形态呢？</h3><p>5种</p><p><img src="https://s2.ax1x.com/2019/10/15/KCTZ0e.png" alt="KCTZ0e.png"></p><h2 id="6-5-2-特殊二叉树"><a href="#6-5-2-特殊二叉树" class="headerlink" title="6.5.2  特殊二叉树"></a>6.5.2  特殊二叉树</h2><h3 id="1-什么是斜树"><a href="#1-什么是斜树" class="headerlink" title="1.什么是斜树"></a>1.什么是斜树</h3><p><img src="https://s2.ax1x.com/2019/10/15/KCTonO.png" alt="KCTonO.png"></p><p>所有结点都只有左子树的二叉树叫左斜树</p><p>所有结点都只有右子树的二叉树叫右斜树</p><p>这两者统称为斜树。</p><p>线性表结构可以理解为是树的一种极其特殊的表现形式</p><h3 id="2-满二叉树"><a href="#2-满二叉树" class="headerlink" title="2.满二叉树"></a>2.满二叉树</h3><p>定义：一棵二叉树中，所有分支结点都存在左右子树，并且所有叶子都在同一层</p><p>类比完美的学生，什么都会</p><p><img src="https://s2.ax1x.com/2019/10/15/KC7ACn.png" alt="KC7ACn.png"></p><h3 id="3-完全二叉树"><a href="#3-完全二叉树" class="headerlink" title="3.完全二叉树"></a>3.完全二叉树</h3><p>定义：对一棵具有n个结点的二叉树按层序编号，如果编号i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中<strong>位置完全相同</strong>，则此二叉树为完全二叉树</p><p>类比：追求完美的勤奋的学生，就是他的轨迹都模仿着完美的学生，不能突破常规，要什么都学精了再前进</p><p><img src="https://s2.ax1x.com/2019/10/15/KC7tKK.png" alt="KC7tKK.png"></p><h4 id="非完全二叉树示例："><a href="#非完全二叉树示例：" class="headerlink" title="非完全二叉树示例："></a>非完全二叉树示例：</h4><p><img src="https://s2.ax1x.com/2019/10/15/KC7o2q.png" alt="KC7o2q.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.8 归并排序</title>
      <link href="/2019/10/22/9.8-gui-bing-pai-xu/"/>
      <url>/2019/10/22/9.8-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="9-8-归并排序"><a href="#9-8-归并排序" class="headerlink" title="9.8 归并排序"></a>9.8 归并排序</h1><blockquote><p>什么是归并排序呢？</p></blockquote><p><img src="https://i.loli.net/2019/10/22/GTd3q5UmOg6rBoS.jpg" alt></p><h2 id="9-8-1-归并排序算法"><a href="#9-8-1-归并排序算法" class="headerlink" title="9.8.1 归并排序算法"></a>9.8.1 归并排序算法</h2><h3 id="1-什么是归并排序（2路归并）？"><a href="#1-什么是归并排序（2路归并）？" class="headerlink" title="1.什么是归并排序（2路归并）？"></a>1.什么是归并排序（2路归并）？</h3><p>其实简单说就是，把一个数字序列，按数字一个一个分开来，然后相邻的数字两两归并，如上图</p><h3 id="2-归并排序代码是怎样的？"><a href="#2-归并排序代码是怎样的？" class="headerlink" title="2.归并排序代码是怎样的？"></a>2.归并排序代码是怎样的？</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L作归并排序 */</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">MSort</span><span class="token punctuation">(</span>L<span class="token operator">-></span>r<span class="token punctuation">,</span>L<span class="token operator">-></span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 将SR[s..t]归并排序为TR1[s..t] */</span><span class="token keyword">void</span> <span class="token function">MSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> SR<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> TR1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token keyword">int</span> TR2<span class="token punctuation">[</span>MAXSIZE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>t<span class="token punctuation">)</span>  TR1<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当细分为1个数字的时候，递归结束</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      m<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 将SR[s..t]平分为SR[s..m]和SR[m+1..t] */</span>      <span class="token function">MSort</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR2<span class="token punctuation">,</span>s<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归地将SR[s..m]归并为有序的TR2[s..m] */</span> <span class="token comment" spellcheck="true">//将前半部分归并</span>      <span class="token function">MSort</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR2<span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归地将SR[m+1..t]归并为有序TR2[m+1..t] */</span> <span class="token comment" spellcheck="true">//将后半部分归并</span>      <span class="token function">Merge</span><span class="token punctuation">(</span>TR2<span class="token punctuation">,</span>TR1<span class="token punctuation">,</span>s<span class="token punctuation">,</span>m<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 将TR2[s..m]和TR2[m+1..t]归并到TR1[s..t] */</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实思路就是，先把一串数字，分为单个数字，然后对相邻的单个数字进行递归排序</p><p>总的数字是：</p><p><img src="https://i.loli.net/2019/10/22/UWvQHiG8otAkujL.jpg" alt></p><p>现在我们来分析重点代码：</p><pre class=" language-c"><code class="language-c"> <span class="token function">MSort</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR2<span class="token punctuation">,</span>s<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//其实是将前半部分分开</span><span class="token comment" spellcheck="true">//每次递归返回后都会执行当前递归函数的Merge(TR2,TR1,s,m,t);，将TR2归并到TR1中。如图9-8-4的右图。最终使得当前序列有序。</span></code></pre><p><img src="https://i.loli.net/2019/10/22/c9jqwiXvhbLAx7P.jpg" alt></p><p>同理：</p><pre class=" language-c"><code class="language-c">  <span class="token function">MSort</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR2<span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归地将SR[m+1..t]归并为有序TR2[m+1..t] */</span> <span class="token comment" spellcheck="true">//将后半部分归并</span></code></pre><p><img src="https://i.loli.net/2019/10/22/zPkSiVbcUmN8v5t.jpg" alt></p><p>其实两部分结合，总体就是：</p><p><img src="https://i.loli.net/2019/10/22/wKd1bVck9NCYJF6.jpg" alt></p><h3 id="3-Merge函数的代码是怎样的？"><a href="#3-Merge函数的代码是怎样的？" class="headerlink" title="3.Merge函数的代码是怎样的？"></a>3.Merge函数的代码是怎样的？</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 将有序的SR[i..m]和SR[m+1..n]归并为有序的TR[i..n] */</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> SR<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> TR<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>l<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 将SR中记录由小到大归并入TR */</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>SR<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>SR<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>   TR<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>   TR<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果前半部分有剩余</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>m<span class="token operator">-</span>i<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>   TR<span class="token punctuation">[</span>k<span class="token operator">+</span>l<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>i<span class="token operator">+</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将剩余的SR[i..m]复制到TR */</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果后半部分有剩余</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>n<span class="token operator">-</span>j<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>   TR<span class="token punctuation">[</span>k<span class="token operator">+</span>l<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>j<span class="token operator">+</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将剩余的SR[j..n]复制到TR */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码不是很难：直接看图可以明白</p><p><img src="https://i.loli.net/2019/10/22/K2WvDbgVCQado4m.jpg" alt></p><p><img src="https://i.loli.net/2019/10/22/J7X964hPg1nDKur.jpg" alt></p><p><img src="https://i.loli.net/2019/10/22/XwObf2jZY97xJ3S.jpg" alt></p><p><img src="https://i.loli.net/2019/10/22/BLufKq3vN69igQ7.jpg" alt></p><h2 id="9-8-2-归并排序的复杂度是多少？"><a href="#9-8-2-归并排序的复杂度是多少？" class="headerlink" title="9.8.2 归并排序的复杂度是多少？"></a>9.8.2 归并排序的复杂度是多少？</h2><ul><li>时间复杂度是：O（nlogn）</li><li>空间复杂度是：O（n+logn）</li></ul><h2 id="9-8-3-非递归实现归并排序"><a href="#9-8-3-非递归实现归并排序" class="headerlink" title="9.8.3  非递归实现归并排序"></a>9.8.3  非递归实现归并排序</h2><h3 id="1-思想是什么？"><a href="#1-思想是什么？" class="headerlink" title="1.思想是什么？"></a>1.思想是什么？</h3><p>其实就是用迭代的方式，代替递归的方式，思想主要是，用迭代的方式找单个数字，而不是用递归分为单个数字再返回</p><h3 id="2-代码是怎样的？"><a href="#2-代码是怎样的？" class="headerlink" title="2.代码是怎样的？"></a>2.代码是怎样的？</h3><p>注意：这里的TR的临时空间，相当于中转站的作用，最后的排序的结构还是要放在原来的空间中</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L作归并非递归排序 */</span><span class="token keyword">void</span> <span class="token function">MergeSort2</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span><span class="token operator">*</span> TR<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 申请额外空间 */</span> <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">MergePass</span><span class="token punctuation">(</span>L<span class="token operator">-></span>r<span class="token punctuation">,</span>TR<span class="token punctuation">,</span>k<span class="token punctuation">,</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//先归并放到TR中</span>  k<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 子序列长度加倍 */</span>  <span class="token function">MergePass</span><span class="token punctuation">(</span>TR<span class="token punctuation">,</span>L<span class="token operator">-></span>r<span class="token punctuation">,</span>k<span class="token punctuation">,</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//再归并放回原来的空间</span>  k<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 子序列长度加倍 */</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MergePass的代码：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 将SR[]中相邻长度为s的子序列两两归并到TR[] */</span><span class="token keyword">void</span> <span class="token function">MergePass</span><span class="token punctuation">(</span><span class="token keyword">int</span> SR<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> TR<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token number">-2</span><span class="token operator">*</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token function">Merge</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span>s<span class="token number">-1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>s<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 两两归并 */</span>  i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>s<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">/* 归并最后两个序列 */</span>  <span class="token comment" spellcheck="true">//最后一步</span>  <span class="token function">Merge</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span>s<span class="token number">-1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将单个的数字归并进序列</span> <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">/* 若最后只剩下单个子序列 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span>i<span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>   TR<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> SR<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将单个的数字放在最后</span><span class="token punctuation">}</span></code></pre><p>一轮MergePass，这里的20是直接排在队尾的</p><p><img src="https://i.loli.net/2019/10/22/ZHJCEt9rpnl7iXY.jpg" alt></p><p><img src="https://i.loli.net/2019/10/22/RZQGTjJLnkhAVHt.jpg" alt></p><p>二轮MergePass，这里的20也是直接排在队尾的</p><p><img src="https://i.loli.net/2019/10/22/X4Dqeuih6ycnAN7.jpg" alt></p><p>三轮MergePass</p><p>这里的20是按顺序放入的</p><h3 id="3-相对递归的方式有什么优点呢？"><a href="#3-相对递归的方式有什么优点呢？" class="headerlink" title="3.相对递归的方式有什么优点呢？"></a>3.相对递归的方式有什么优点呢？</h3><ul><li>时间复杂度提升了</li><li>空间复杂度为O（n）,递归的空间复杂度是O（n+logn）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式简析</title>
      <link href="/2019/10/20/2019-10-20-dan-li-mo-shi-jian-xi/"/>
      <url>/2019/10/20/2019-10-20-dan-li-mo-shi-jian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式简析"><a href="#单例模式简析" class="headerlink" title="单例模式简析"></a>单例模式简析</h1><h2 id="1-什么是单例模式（Singleton-Pattern）"><a href="#1-什么是单例模式（Singleton-Pattern）" class="headerlink" title="1.什么是单例模式（Singleton Pattern）"></a>1.什么是单例模式（Singleton Pattern）</h2><p>单例，其实就是整个程序中只有1个实例</p><h2 id="2-有什么好处呢？"><a href="#2-有什么好处呢？" class="headerlink" title="2.有什么好处呢？"></a>2.有什么好处呢？</h2><p>优点：</p><ul><li>内存中只有1个实例，减少内存的开销</li><li>避免对资源的多重占用（比如说写文件操作）</li></ul><h2 id="3-有什么缺点呢？"><a href="#3-有什么缺点呢？" class="headerlink" title="3.有什么缺点呢？"></a>3.有什么缺点呢？</h2><ul><li>没有接口，不能继承</li><li>与单一职责原则冲突（一个类只应该关心内部逻辑，而不关心外面怎么来实例化）</li></ul><h2 id="4-适用场景"><a href="#4-适用场景" class="headerlink" title="4.适用场景"></a>4.适用场景</h2><p>下面举例子</p><ul><li>用于数据库连接池的设计，因为数据库连接池在打开或者关闭数据库连接的时候所引起的效率的损耗很大，用单例模式可以减少</li><li>线程池</li></ul><h2 id="5-单例模式的套路"><a href="#5-单例模式的套路" class="headerlink" title="5.单例模式的套路"></a>5.单例模式的套路</h2><ul><li>构造器私有</li><li>提供private的静态属性–&gt;存储对象的地址</li><li>提供公共的静态方法–&gt;获取属性</li></ul><h2 id="6-单例模式分为哪几类呢？"><a href="#6-单例模式分为哪几类呢？" class="headerlink" title="6.单例模式分为哪几类呢？"></a>6.单例模式分为哪几类呢？</h2><h3 id="1-懒汉式"><a href="#1-懒汉式" class="headerlink" title="1.懒汉式"></a>1.懒汉式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>线程不安全，延迟初始化，严格上不是单例模式</p><h3 id="2-饿汉式"><a href="#2-饿汉式" class="headerlink" title="2.饿汉式"></a>2.饿汉式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>线程安全，但是容易产生垃圾对象</p><h3 id="3-双重锁模式"><a href="#3-双重锁模式" class="headerlink" title="3.双重锁模式"></a>3.<strong>双重锁模式</strong></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//注意这里用volatile修饰，避免重排序</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>第一次是判断是为了避免不必要的同步，因为已经存在对象，第二次判断是为了进行同步，避免多线程问题</p><p>由于 singleton = new Singleton();  可能存在重排序的问题，什么是重排序，请往下看</p><h4 id="1-对象新建的过程是什么？"><a href="#1-对象新建的过程是什么？" class="headerlink" title="1.对象新建的过程是什么？"></a>1.对象新建的过程是什么？</h4><ol><li>开辟空间</li><li>初始化对象信息</li><li>返回对象的地址给引用</li></ol><h4 id="2-什么情况下会出现重排序呢？"><a href="#2-什么情况下会出现重排序呢？" class="headerlink" title="2.什么情况下会出现重排序呢？"></a>2.什么情况下会出现重排序呢？</h4><p>就是上述的第二步还没完成的时候，已经完成了第三步，这个时候就会获取到对象的空的引用</p><h3 id="4-静态内部类单例模式"><a href="#4-静态内部类单例模式" class="headerlink" title="4.静态内部类单例模式"></a>4.静态内部类单例模式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> </code></pre><p>这样既可以懒加载，因为只有一个线程可以获得对象的初始化锁，又适用于多线程，书写难度也不是很大，较为推荐</p>]]></content>
      
      
      <categories>
          
          <category> java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
            <tag> java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.3 树的抽象数据类型</title>
      <link href="/2019/10/15/6.3-shu-de-chou-xiang-shu-ju-lei-xing/"/>
      <url>/2019/10/15/6.3-shu-de-chou-xiang-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="6-3-树的抽象数据类型"><a href="#6-3-树的抽象数据类型" class="headerlink" title="6.3 树的抽象数据类型"></a>6.3 树的抽象数据类型</h1><h2 id="如图所示"><a href="#如图所示" class="headerlink" title="如图所示"></a>如图所示</h2><p><img src="https://i.loli.net/2019/10/13/Sj47DBQyFYKublL.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.4 树的存储结构</title>
      <link href="/2019/10/15/6.4-shu-de-cun-chu-jie-gou/"/>
      <url>/2019/10/15/6.4-shu-de-cun-chu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="6-4-树的存储结构"><a href="#6-4-树的存储结构" class="headerlink" title="6.4 树的存储结构"></a>6.4 树的存储结构</h1><h2 id="6-4-1-双亲表示法"><a href="#6-4-1-双亲表示法" class="headerlink" title="6.4.1 双亲表示法"></a>6.4.1 双亲表示法</h2><blockquote><p>因为树一定有且仅有一个双亲。所以采用这种方法</p></blockquote><h3 id="1-容易找到双亲的方法"><a href="#1-容易找到双亲的方法" class="headerlink" title="1.容易找到双亲的方法"></a>1.容易找到双亲的方法</h3><h4 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h4><p>假设以一组连续空间存储树的结点，同时在每个结点中，附设一个位置指示其双亲结点到链表中的位置。</p><p><img src="https://i.loli.net/2019/10/13/vaocCM9NxWSphZu.jpg" alt></p><p>data存储数据，parent是指针域，存储双亲在数组中的下标</p><p>结构定义代码如下图：</p><p><img src="https://i.loli.net/2019/10/13/oBpdTj9gFhmEk5H.jpg" alt></p><p><img src="https://i.loli.net/2019/10/13/lTepUDu8MJjr7XO.jpg" alt></p><h4 id="2-树结构转化为表结构例子："><a href="#2-树结构转化为表结构例子：" class="headerlink" title="2.树结构转化为表结构例子："></a>2.树结构转化为表结构例子：</h4><p><img src="https://i.loli.net/2019/10/13/E2rKz7ODHl1sStU.jpg" alt></p><h4 id="3-缺点是什么"><a href="#3-缺点是什么" class="headerlink" title="3.缺点是什么"></a>3.缺点是什么</h4><p>就是如果想知道孩子是谁的话，就要遍历整个结构了</p><h3 id="2-容易找到孩子的方法"><a href="#2-容易找到孩子的方法" class="headerlink" title="2.容易找到孩子的方法"></a>2.容易找到孩子的方法</h3><blockquote><p>思路是增加1个长子域</p></blockquote><p>我们增加一个结点最左边孩子的域，不妨叫它长子域，这样就可以很容易得到结点的孩子。如果没有孩子的结点，这个长子域就设置为-1，如表6-4-3所示。</p><p><img src="https://i.loli.net/2019/10/13/cQ5uYq2sBzmULkW.jpg" alt></p><p>缺点是什么？</p><p>缺点是兄弟之间的关系难以确定</p><h3 id="3-容易区别兄弟之间的关系的方法"><a href="#3-容易区别兄弟之间的关系的方法" class="headerlink" title="3.容易区别兄弟之间的关系的方法"></a>3.容易区别兄弟之间的关系的方法</h3><p>可以增加一个右兄弟域来体现兄弟关系，也就是说，每一个结点如果它存在右兄弟，则记录下右兄弟的下标。同样的，如果右兄弟不存在，则赋值为-1，如表6-4-4所示。</p><p><img src="https://i.loli.net/2019/10/13/qkBFrwnzp4PWOaA.jpg" alt></p><h3 id="4-要求同时关注双亲，孩子，兄弟怎么办？"><a href="#4-要求同时关注双亲，孩子，兄弟怎么办？" class="headerlink" title="4.要求同时关注双亲，孩子，兄弟怎么办？"></a>4.要求同时关注双亲，孩子，兄弟怎么办？</h3><p>还可以把次结构扩展为有双亲域、长子域、再有右兄弟域。</p><p><strong>存储结构的设计是一个非常灵活的过程。一个存储结构设计得是否合理，取决于基于该存储结构的运算是否适合，是否方便，时间复杂度好不好等</strong>。</p><h2 id="6-4-2-孩子表示法"><a href="#6-4-2-孩子表示法" class="headerlink" title="6.4.2 孩子表示法"></a>6.4.2 孩子表示法</h2><h3 id="1-当有多个孩子的时候怎么处理？"><a href="#1-当有多个孩子的时候怎么处理？" class="headerlink" title="1.当有多个孩子的时候怎么处理？"></a>1.当有多个孩子的时候怎么处理？</h3><p>考虑用多重链表，即<strong>每个结点有多个指针域</strong>，其中每个指针指向一棵子树的根结点，我们把这种方法叫做<strong>多重链表表示法</strong>。其实就是将他的孩子都用指针给指出来。</p><h3 id="2-方案1：以度数为指针域的个数（最大化处理）管够"><a href="#2-方案1：以度数为指针域的个数（最大化处理）管够" class="headerlink" title="2.方案1：以度数为指针域的个数（最大化处理）管够"></a>2.方案1：以度数为指针域的个数（最大化处理）管够</h3><p><img src="https://i.loli.net/2019/10/13/FNC9cw8eI4oHYbk.jpg" alt></p><p>缺点是：当度数相差很大的时候，浪费空间</p><h3 id="3-方案2：按需分配，省钱"><a href="#3-方案2：按需分配，省钱" class="headerlink" title="3.方案2：按需分配，省钱"></a>3.方案2：按需分配，省钱</h3><p>专门取一个位置来存储结点指针域的个数，如下图</p><p><img src="https://i.loli.net/2019/10/13/HJZ6vran4KcNido.jpg" alt></p><p>其中data为数据域，degree为度域，也就是存储该结点的孩子结点的个数，child1到childd为指针域，指向该结点的各个孩子的结点。</p><p><img src="https://i.loli.net/2019/10/13/OeYCjXUqdMIr7P9.jpg" alt></p><p>缺点：结构不统一，时间复杂度上升（相对方法1）</p><h3 id="4-孩子表示法"><a href="#4-孩子表示法" class="headerlink" title="4.孩子表示法"></a>4.孩子表示法</h3><blockquote><p>可以减少空指针的浪费和统一结构</p></blockquote><h4 id="1-孩子表示法是怎么样的？"><a href="#1-孩子表示法是怎么样的？" class="headerlink" title="1.孩子表示法是怎么样的？"></a>1.孩子表示法是怎么样的？</h4><p>其实是先将所有的结点都放在一个数组里面，然后再对每个结点的孩子建立一个单链表体现它们的关系</p><p>具体办法是：</p><p>把每个结点的<strong>孩子</strong>结点排列起来，以<strong>单链表</strong>作存储结构，则n个结点由n个孩子链表，如果是叶子结点则此单链表为空。然后<strong>n个头指针</strong>又<strong>组成</strong>一个<strong>线性表</strong>，采用顺序存储结构，存放进一个<strong>一维数组</strong>中，如图6-4-4所示。</p><p><img src="https://i.loli.net/2019/10/13/cOhVGSHYCIi4zmT.jpg" alt></p><p>为此设计两种结构：</p><h4 id="2-孩子结点"><a href="#2-孩子结点" class="headerlink" title="2.孩子结点"></a>2.孩子结点</h4><p>其中child是数据域，用来存储某个结点在表头数组中的下标。next是指针域，用来存储指向某结点的下一个孩子结点的指针。</p><p><img src="https://i.loli.net/2019/10/13/ZF5ASGX6jP2lerh.jpg" alt></p><h4 id="3-表头结点："><a href="#3-表头结点：" class="headerlink" title="3.表头结点："></a>3.表头结点：</h4><p>其中data是数据域，存储某结点的数据信息。firstchild是头指针域，存储该结点的孩子链表的头指针。</p><p><img src="https://i.loli.net/2019/10/13/T8X7Vq2mdLBStne.jpg" alt></p><h4 id="4-结构定义代码是怎样？"><a href="#4-结构定义代码是怎样？" class="headerlink" title="4.结构定义代码是怎样？"></a>4.结构定义代码是怎样？</h4><p><img src="https://i.loli.net/2019/10/13/n81AjeyPLSHFZOJ.jpg" alt></p><p><img src="https://i.loli.net/2019/10/13/fbzy321usTEFK7j.jpg" alt></p><p>表头和孩子的结构都类似，都是数据域加上指针域</p><h4 id="5-可不可以和找到双亲呢？"><a href="#5-可不可以和找到双亲呢？" class="headerlink" title="5.可不可以和找到双亲呢？"></a>5.可不可以和找到双亲呢？</h4><p>其实就是在表头加上个双亲就行了</p><p><img src="https://i.loli.net/2019/10/13/KVEZJQpIFwWYL26.jpg" alt></p><h2 id="6-4-3-孩子兄弟表示法"><a href="#6-4-3-孩子兄弟表示法" class="headerlink" title="6.4.3 孩子兄弟表示法"></a>6.4.3 孩子兄弟表示法</h2><h3 id="1-什么是孩子兄弟表示法"><a href="#1-什么是孩子兄弟表示法" class="headerlink" title="1.什么是孩子兄弟表示法"></a>1.什么是孩子兄弟表示法</h3><p>任意一棵树，它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟。其实就是长子唯一，右兄弟也唯一。</p><p><img src="https://s2.ax1x.com/2019/10/13/ux5zGD.png" alt="ux5zGD.png"></p><p><img src="https://s2.ax1x.com/2019/10/13/uxIkZt.png" alt="uxIkZt.png"></p><h3 id="2-好处是什么？"><a href="#2-好处是什么？" class="headerlink" title="2.好处是什么？"></a>2.好处是什么？</h3><p>把复杂的树变成了二叉树</p><p><img src="https://s2.ax1x.com/2019/10/13/uxImRg.png" alt="uxImRg.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.2 树的定义</title>
      <link href="/2019/10/15/6.2-shu-de-ding-yi/"/>
      <url>/2019/10/15/6.2-shu-de-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-2-树的定义"><a href="#6-2-树的定义" class="headerlink" title="6.2 树的定义"></a>6.2 树的定义</h1><blockquote><p>树，个人觉得是一种从生活中抽象而成的数据结构，类似于我们现实生活中的树</p></blockquote><h2 id="树是什么？"><a href="#树是什么？" class="headerlink" title="树是什么？"></a>树是什么？</h2><h3 id="树（非空树），需要满足下面2个条件："><a href="#树（非空树），需要满足下面2个条件：" class="headerlink" title="树（非空树），需要满足下面2个条件："></a>树（非空树），需要满足下面2个条件：</h3><ol><li><strong>有且只有</strong>1个特点的节点的根结点</li><li>当n&gt;1时，其余结点可以分为m个<strong>互不相交</strong>的有限集，其中每个有限集本身又是树，成为子树</li></ol><p><img src="https://i.loli.net/2019/10/13/bLxwVNpzCcDsZhm.jpg" alt></p><h3 id="不是树的例子："><a href="#不是树的例子：" class="headerlink" title="不是树的例子："></a>不是树的例子：</h3><p><img src="https://i.loli.net/2019/10/13/Ui6tbdrL5MFJNKV.jpg" alt></p><h2 id="6-2-1-结点分类"><a href="#6-2-1-结点分类" class="headerlink" title="6.2.1 结点分类"></a>6.2.1 结点分类</h2><h3 id="1-什么是度"><a href="#1-什么是度" class="headerlink" title="1.什么是度"></a>1.什么是度</h3><p>结点拥有的子树数称为结点的度，度为0的结点称为叶结点，度不为0的结点称为非终端结点或分支结点</p><p>如图：</p><p><img src="https://i.loli.net/2019/10/13/H8nXLTfZOsewCAm.jpg" alt></p><h3 id="2-树的度是什么？"><a href="#2-树的度是什么？" class="headerlink" title="2.树的度是什么？"></a>2.树的度是什么？</h3><p>树内各结点的度的最大值,上图的度是3</p><h2 id="6-2-2-结点间关系"><a href="#6-2-2-结点间关系" class="headerlink" title="6.2.2 结点间关系"></a>6.2.2 结点间关系</h2><h3 id="1-什么是孩子，什么是双亲"><a href="#1-什么是孩子，什么是双亲" class="headerlink" title="1.什么是孩子，什么是双亲"></a>1.什么是孩子，什么是双亲</h3><p>A结点的<strong>子树的根结点</strong>B，是A的<strong>孩子</strong>，相应，A结点是B的<strong>双亲</strong>（为什么是双亲呢？因为对于结点来说，他的上面指向他自己的只有1个，双亲只有1个）</p><p>如图：</p><p><img src="https://i.loli.net/2019/10/13/xdh5MknpAriHlCb.jpg" alt></p><h3 id="2-什么是兄弟？什么是祖先？"><a href="#2-什么是兄弟？什么是祖先？" class="headerlink" title="2.什么是兄弟？什么是祖先？"></a>2.什么是兄弟？什么是祖先？</h3><p><strong>同一个双亲的孩子之间互称兄弟</strong>，<strong>结点的祖先是从根到该结点所经分支上的所有结点</strong>，简而言之就是，从上面来的指向它的结点的就是祖先</p><h2 id="6-2-3-树的其他相关概念"><a href="#6-2-3-树的其他相关概念" class="headerlink" title="6.2.3 树的其他相关概念"></a>6.2.3 树的其他相关概念</h2><h3 id="1-什么是树的层次？"><a href="#1-什么是树的层次？" class="headerlink" title="1.什么是树的层次？"></a>1.什么是树的层次？</h3><p>其实就是从根开始定义起，根为第一层，根的孩子为第二层。</p><p>如图：</p><p><img src="https://i.loli.net/2019/10/13/anqojCTQ1If5dg6.jpg" alt></p><h3 id="2-什么是树的深度？"><a href="#2-什么是树的深度？" class="headerlink" title="2.什么是树的深度？"></a>2.什么是树的深度？</h3><p><strong>树中结点的最大层次</strong></p><h3 id="3-什么是堂兄弟？"><a href="#3-什么是堂兄弟？" class="headerlink" title="3.什么是堂兄弟？"></a>3.什么是堂兄弟？</h3><p>就是双亲同层的结点，显然图6-2-6中的D、E、F是堂兄弟，</p><h3 id="4-什么是有序树"><a href="#4-什么是有序树" class="headerlink" title="4.什么是有序树"></a>4.什么是有序树</h3><p>如果将树中结点的各子树看成<strong>从左到右是有次序</strong>的，不能互换的，则称该树为有序树，否则称为无序树。</p><h3 id="5-什么是森林？"><a href="#5-什么是森林？" class="headerlink" title="5.什么是森林？"></a>5.什么是森林？</h3><p>是m(m&gt;=0)棵<strong>互不相交</strong>的<strong>树的集合</strong></p><h3 id="6-线性表和树的结构有什么不同？"><a href="#6-线性表和树的结构有什么不同？" class="headerlink" title="6.线性表和树的结构有什么不同？"></a>6.线性表和树的结构有什么不同？</h3><p><img src="https://i.loli.net/2019/10/13/ZRiJVHukgAo7K9Y.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.3 栈的顺序存储结构及实现</title>
      <link href="/2019/10/14/4.3-zhan-de-shun-xu-cun-chu-jie-gou-ji-shi-xian/"/>
      <url>/2019/10/14/4.3-zhan-de-shun-xu-cun-chu-jie-gou-ji-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="4-3-栈的顺序存储结构及实现"><a href="#4-3-栈的顺序存储结构及实现" class="headerlink" title="4.3 栈的顺序存储结构及实现"></a>4.3 栈的顺序存储结构及实现</h1><h2 id="1-栈的结构定义"><a href="#1-栈的结构定义" class="headerlink" title="1.栈的结构定义"></a>1.栈的结构定义</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> SElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    SElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*用于栈顶指针*/</span><span class="token punctuation">}</span>SqStack<span class="token punctuation">;</span></code></pre><h2 id="2-进栈操作"><a href="#2-进栈操作" class="headerlink" title="2.进栈操作"></a>2.进栈操作</h2><pre class=" language-c"><code class="language-c">Status <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>S <span class="token punctuation">,</span>SElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top<span class="token operator">==</span>MAXSIZE<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//栈满</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    S<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈顶指针增加</span>    S<span class="token operator">-></span>data<span class="token punctuation">[</span>S<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将新插入元素赋值给栈顶空间</span>    <span class="token keyword">return</span> Ok<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-出栈操作"><a href="#3-出栈操作" class="headerlink" title="3.出栈操作"></a>3.出栈操作</h2><pre class=" language-c"><code class="language-c">Status <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>S<span class="token punctuation">,</span>SElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">return</span> error<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e<span class="token operator">=</span>S<span class="token operator">-></span>data<span class="token punctuation">[</span>S<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>     S<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈顶指针减1 </span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.12 散列表查找实现</title>
      <link href="/2019/10/13/8.12-san-lie-biao-cha-zhao-shi-xian/"/>
      <url>/2019/10/13/8.12-san-lie-biao-cha-zhao-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="8-12-散列表查找实现"><a href="#8-12-散列表查找实现" class="headerlink" title="8.12 散列表查找实现"></a>8.12 散列表查找实现</h1><h2 id="8-12-1-散列表查找算法实现"><a href="#8-12-1-散列表查找算法实现" class="headerlink" title="8.12.1 散列表查找算法实现"></a>8.12.1 散列表查找算法实现</h2><h3 id="1-定义结构"><a href="#1-定义结构" class="headerlink" title="1.定义结构"></a>1.定义结构</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span><span class="token macro property">#<span class="token directive keyword">define</span> ERROR 0</span><span class="token macro property">#<span class="token directive keyword">define</span> TRUE 1</span><span class="token macro property">#<span class="token directive keyword">define</span> FALSE 0</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100 </span><span class="token comment" spellcheck="true">/* 存储空间初始分配量 */</span><span class="token macro property">#<span class="token directive keyword">define</span> SUCCESS 1</span><span class="token macro property">#<span class="token directive keyword">define</span> UNSUCCESS 0</span><span class="token macro property">#<span class="token directive keyword">define</span> HASHSIZE 12 </span><span class="token comment" spellcheck="true">/* 定义散列表长为数组的长度 */</span><span class="token macro property">#<span class="token directive keyword">define</span> NULLKEY -32768 </span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Status是函数的类型,其值是函数结果状态代码，如OK等 */</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> <span class="token operator">*</span>elem<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 数据元素存储基址，动态分配数组 */</span>   <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  当前数据元素个数 */</span><span class="token punctuation">}</span>HashTable<span class="token punctuation">;</span></code></pre><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 初始化散列表 */</span>Status <span class="token function">InitHashTable</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>H<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    m<span class="token operator">=</span>HASHSIZE<span class="token punctuation">;</span>    H<span class="token operator">-></span>count<span class="token operator">=</span>m<span class="token punctuation">;</span>    H<span class="token operator">-></span>elem<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>m<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        H<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>NULLKEY<span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-散列函数"><a href="#3-散列函数" class="headerlink" title="3.散列函数"></a>3.散列函数</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 散列函数 */</span><span class="token keyword">int</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> key <span class="token operator">%</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 除留余数法 */</span><span class="token punctuation">}</span></code></pre><h3 id="4-插入关键字进散列表"><a href="#4-插入关键字进散列表" class="headerlink" title="4./* 插入关键字进散列表 */"></a>4./* 插入关键字进散列表 */</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 插入关键字进散列表 */</span><span class="token keyword">void</span> <span class="token function">InsertHash</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>H<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> addr <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 求散列地址 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>H<span class="token operator">-></span>elem<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">!=</span> NULLKEY<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 如果不为空，则冲突 */</span>    <span class="token punctuation">{</span>        addr <span class="token operator">=</span> <span class="token punctuation">(</span>addr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 开放定址法的线性探测 */</span>    <span class="token punctuation">}</span>    H<span class="token operator">-></span>elem<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 直到有空位后插入关键字 */</span><span class="token punctuation">}</span></code></pre><h3 id="5-散列表查找关键字"><a href="#5-散列表查找关键字" class="headerlink" title="5.散列表查找关键字"></a>5.散列表查找关键字</h3><pre class=" language-c"><code class="language-c">Status <span class="token function">SearchHash</span><span class="token punctuation">(</span>HashTable H<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 求散列地址 */</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token operator">*</span>addr<span class="token punctuation">]</span> <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当不是关键词,冲突了 </span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 开放定址法的线性探测 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>H<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token operator">*</span>addr<span class="token punctuation">]</span> <span class="token operator">==</span> NULLKEY <span class="token operator">||</span> <span class="token operator">*</span>addr <span class="token operator">==</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当散列查找的话，查找的是空的话，说明没有了，因为是空的都不存 </span><span class="token comment" spellcheck="true">/* 如果循环回到原点 */</span>            <span class="token keyword">return</span> UNSUCCESS<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 则说明关键字不存在 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>查找相对于插入，就多了个空和回头的判断</p><h2 id="8-12-2-散列表查找性能分析"><a href="#8-12-2-散列表查找性能分析" class="headerlink" title="8.12.2 散列表查找性能分析"></a>8.12.2 散列表查找性能分析</h2><h3 id="1-时间复杂度是多少"><a href="#1-时间复杂度是多少" class="headerlink" title="1.时间复杂度是多少"></a>1.时间复杂度是多少</h3><p>O（1）</p><h3 id="2-取决于什么因素？"><a href="#2-取决于什么因素？" class="headerlink" title="2.取决于什么因素？"></a>2.取决于什么因素？</h3><ul><li>是否均匀</li><li>处理冲突的方法</li><li>装填因子</li></ul><h3 id="3-什么是装填因子"><a href="#3-什么是装填因子" class="headerlink" title="3.什么是装填因子"></a>3.什么是装填因子</h3><p>就是用来衡量散列表的装满的程度的数字，记录个数/长度=装填因子</p><p>装填因子越大，表明产生冲突的可能性越大</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.11 处理冲突的方法</title>
      <link href="/2019/10/13/8.11-chu-li-chong-tu-de-fang-fa/"/>
      <url>/2019/10/13/8.11-chu-li-chong-tu-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="8-11-处理冲突的方法"><a href="#8-11-处理冲突的方法" class="headerlink" title="8.11 处理冲突的方法"></a>8.11 处理冲突的方法</h1><h2 id="8-11-1-开放定址法"><a href="#8-11-1-开放定址法" class="headerlink" title="8.11.1 开放定址法"></a>8.11.1 开放定址法</h2><h3 id="1-什么是开放定址法呢"><a href="#1-什么是开放定址法呢" class="headerlink" title="1.什么是开放定址法呢"></a>1.什么是开放定址法呢</h3><p>一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</p><h3 id="公式为：fi-key-f-key-di-MOD-m-di-1-2-3-……-m-1"><a href="#公式为：fi-key-f-key-di-MOD-m-di-1-2-3-……-m-1" class="headerlink" title="公式为：fi(key) = (f(key)+di) MOD m (di=1,2,3,……,m-1)"></a>公式为：fi(key) = (f(key)+di) MOD m (di=1,2,3,……,m-1)</h3><h3 id="2-什么是线性探测法"><a href="#2-什么是线性探测法" class="headerlink" title="2.什么是线性探测法"></a>2.什么是线性探测法</h3><p>其实就是按顺序找下去地定址</p><h3 id="3-什么是堆积"><a href="#3-什么是堆积" class="headerlink" title="3.什么是堆积"></a>3.什么是堆积</h3><p>其实就是冲突的连环出现，我原本a有冲突，a的冲突解决了，b又和a有冲突了，本来都不是同义词却需要争夺一个地址的叫做堆积</p><h3 id="4-什么是二次探测法"><a href="#4-什么是二次探测法" class="headerlink" title="4.什么是二次探测法"></a>4.什么是二次探测法</h3><p>其实就是增加了平方和正负运算，</p><p>fi(key) = (f(key)+di) MOD m (di = 1 2, -1 2, 2 2, -2 2,……, q 2, -q 2, q &lt;= m/2) 这里的是指平方</p><h3 id="5-什么是随机探测法"><a href="#5-什么是随机探测法" class="headerlink" title="5.什么是随机探测法"></a>5.什么是随机探测法</h3><p>对于位移量 di 采用随机函数计算得到，我们称之为随机探测法。</p><h3 id="6-什么是伪随机数"><a href="#6-什么是伪随机数" class="headerlink" title="6.什么是伪随机数"></a>6.什么是伪随机数</h3><p>其实就是由随机种子按照某种随机算法，生成的数，</p><p>随机种子是以随机数作为对象的以真随机数（种子）为初始条件的随机数。一般以系统时间作为随机种子</p><h2 id="8-11-2-再散列函数法"><a href="#8-11-2-再散列函数法" class="headerlink" title="8.11.2 再散列函数法"></a>8.11.2 再散列函数法</h2><p>其实就是随机调用不同的散列函数</p><h2 id="8-11-3-链地址法"><a href="#8-11-3-链地址法" class="headerlink" title="8.11.3 链地址法"></a>8.11.3 链地址法</h2><p>就是在冲突的地址里面，生成1个链表，类似于HashMap</p><h2 id="8-11-4-公共溢出区法"><a href="#8-11-4-公共溢出区法" class="headerlink" title="8.11.4 公共溢出区法"></a>8.11.4 公共溢出区法</h2><p>其实就是把所有冲突的关键词存到一个公共区，查找的时候，当在普通区查不到，就到公共溢出区查</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.10 散列函数的构造方法</title>
      <link href="/2019/10/13/8.10-san-lie-han-shu-de-gou-zao-fang-fa/"/>
      <url>/2019/10/13/8.10-san-lie-han-shu-de-gou-zao-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="8-10-散列函数的构造方法"><a href="#8-10-散列函数的构造方法" class="headerlink" title="8.10 散列函数的构造方法"></a>8.10 散列函数的构造方法</h1><blockquote><p>什么才是好的散列函数呢？</p><ul><li>计算简单</li><li>地址分布均匀</li></ul></blockquote><h2 id="8-10-1-直接定址法"><a href="#8-10-1-直接定址法" class="headerlink" title="8.10.1.直接定址法"></a>8.10.1.直接定址法</h2><p>就是通过关键字的某个线性函数值来作为散列地址</p><p>例如：</p><p>f(key)=a*key+b</p><h3 id="1-优点是："><a href="#1-优点是：" class="headerlink" title="1.优点是："></a>1.优点是：</h3><p>简单，均匀，不会产生冲突</p><h3 id="2-缺点是："><a href="#2-缺点是：" class="headerlink" title="2.缺点是："></a>2.缺点是：</h3><p>需要事先知道关键字分布情况，</p><h3 id="3-适合什么？"><a href="#3-适合什么？" class="headerlink" title="3.适合什么？"></a>3.适合什么？</h3><p>查找数据量少且连续的，知道分布</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="8-10-2-数字分析法"><a href="#8-10-2-数字分析法" class="headerlink" title="8.10.2 数字分析法"></a>8.10.2 数字分析法</h2><h3 id="1-什么是数字分析法呢"><a href="#1-什么是数字分析法呢" class="headerlink" title="1.什么是数字分析法呢"></a>1.什么是数字分析法呢</h3><p>其实就是找到数字分布的规律，然后抽取其中的不容易重复的一部分作为地址，例如手机号码的后4位</p><h3 id="2-适用什么？"><a href="#2-适用什么？" class="headerlink" title="2.适用什么？"></a>2.适用什么？</h3><p>位数大，知道分布</p><h2 id="8-10-3-平方取中法"><a href="#8-10-3-平方取中法" class="headerlink" title="8.10.3 平方取中法"></a>8.10.3 平方取中法</h2><h3 id="1-是什么意思呢"><a href="#1-是什么意思呢" class="headerlink" title="1.是什么意思呢"></a>1.是什么意思呢</h3><p>其实就是将数字平方后，取中间的3位数字，</p><h3 id="2-适用什么？-1"><a href="#2-适用什么？-1" class="headerlink" title="2.适用什么？"></a>2.适用什么？</h3><p>位数小，不知道分布</p><h2 id="8-10-4-折叠法"><a href="#8-10-4-折叠法" class="headerlink" title="8.10.4 折叠法"></a>8.10.4 折叠法</h2><h3 id="1-什么是折叠法"><a href="#1-什么是折叠法" class="headerlink" title="1.什么是折叠法"></a>1.什么是折叠法</h3><p>其实就是将关键字分割成位数相等的几部分，然后再叠加求和，取后3位为散列地址（散列表表长是3），有时候，可以一端向另一端折叠</p><p>例如：9876543210，变成：987+456+321=1566取后3位</p><h3 id="2-适用什么"><a href="#2-适用什么" class="headerlink" title="2.适用什么"></a>2.适用什么</h3><p>位数大，不知道分布</p><h2 id="8-10-5-除留余数法"><a href="#8-10-5-除留余数法" class="headerlink" title="8.10.5 除留余数法"></a>8.10.5 除留余数法</h2><h3 id="1-是什么？"><a href="#1-是什么？" class="headerlink" title="1.是什么？"></a>1.是什么？</h3><p>其实就是除某个数取余，通常取小于或者等于表长的最大质数</p><p>例如:某散列表的长度为100，散列函数H(k)=k%P,则P通常情况下最好选择哪个呢？</p><p>A、91 B、93 C、97 D、99</p><p>选97</p><h2 id="8-10-6-随机数法"><a href="#8-10-6-随机数法" class="headerlink" title="8.10.6 随机数法"></a>8.10.6 随机数法</h2><h3 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h3><p>其实就是取随机数</p><p>random(key)</p><h3 id="2-适用范围"><a href="#2-适用范围" class="headerlink" title="2.适用范围"></a>2.适用范围</h3><p>其实就是关键字的长度不等的时候</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>怎么选择呢</p><p>其实考虑因素有几个</p><ul><li>计算地址的时间</li><li>关键字的长度</li><li>散列表的大小</li><li>分布情况</li><li>查找的概率</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.9 散列表查找（哈希表）概述</title>
      <link href="/2019/10/13/8.9-san-lie-biao-cha-zhao-ha-xi-biao-gai-shu/"/>
      <url>/2019/10/13/8.9-san-lie-biao-cha-zhao-ha-xi-biao-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="8-9-散列表查找（哈希表）概述"><a href="#8-9-散列表查找（哈希表）概述" class="headerlink" title="8.9 散列表查找（哈希表）概述"></a>8.9 散列表查找（哈希表）概述</h1><h2 id="8-9-1-散列查找定义"><a href="#8-9-1-散列查找定义" class="headerlink" title="8.9.1 散列查找定义"></a>8.9.1 散列查找定义</h2><h3 id="1-什么是散列技术"><a href="#1-什么是散列技术" class="headerlink" title="1.什么是散列技术"></a>1.什么是散列技术</h3><p>散列技术其实是存储位置和关键字的对应关系，一个关键字对应1个存储位置</p><h3 id="2-什么是哈希表"><a href="#2-什么是哈希表" class="headerlink" title="2.什么是哈希表"></a>2.什么是哈希表</h3><p>采用散列技术将记录存储在一块连续的内存空间里面，这个连续的内存空间就是哈希表</p><h2 id="8-9-2-散列表查找步骤"><a href="#8-9-2-散列表查找步骤" class="headerlink" title="8.9.2 散列表查找步骤"></a>8.9.2 散列表查找步骤</h2><ul><li>存储的时候，首先用散列技术计算出地址，然后在计算出来的地址里面存数据</li><li>查找的时候，首先用散列技术计算关键字的地址，然后在地址里面取数据</li></ul><h3 id="2-适用范围是什么"><a href="#2-适用范围是什么" class="headerlink" title="2.适用范围是什么"></a>2.适用范围是什么</h3><p>不适合范围查找，例如18-35岁，最大岁</p><p>不适合一个关键词对应很多一样类别的查找，例如：男生，女生</p><h3 id="3-什么是冲突"><a href="#3-什么是冲突" class="headerlink" title="3.什么是冲突"></a>3.什么是冲突</h3><p>其实就是不同的关键字，但是他们的地址相同，就是冲突</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.12 循环队列</title>
      <link href="/2019/10/13/4.12-xun-huan-dui-lie/"/>
      <url>/2019/10/13/4.12-xun-huan-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="4-12-循环队列"><a href="#4-12-循环队列" class="headerlink" title="4.12 循环队列"></a>4.12 循环队列</h1><h2 id="1-队列顺序存储的不足"><a href="#1-队列顺序存储的不足" class="headerlink" title="1.队列顺序存储的不足"></a>1.队列顺序存储的不足</h2><p>如果队头有个人走了的话，就需要所有元素向前移动，这样效率太低了</p><p>但是如果，队头有人走了的话，就把下一个人当作队头的话，原来的队头的位置又会空着，这样也不好</p><h2 id="2-什么是假溢出"><a href="#2-什么是假溢出" class="headerlink" title="2.什么是假溢出"></a>2.什么是假溢出</h2><p>其实就是队头没坐满，但是队尾已经没有位置了</p><h2 id="3-循环队列的定义是什么"><a href="#3-循环队列的定义是什么" class="headerlink" title="3.循环队列的定义是什么"></a>3.循环队列的定义是什么</h2><p>头尾相接的队列</p><h2 id="4-什么时候队列满了呢"><a href="#4-什么时候队列满了呢" class="headerlink" title="4.什么时候队列满了呢"></a>4.什么时候队列满了呢</h2><ol><li>设置一个标志flag,当front==rear，且flag=0时，队列为空，当front==rear,且flag=1的时候为满</li><li>不允许全满的情况出现，当队列满的时候，存在一个空闲单元</li><li>(rear+1)%QueneSize==front;这样的话，就可以综合rear&gt;front的情况了</li></ol><h2 id="5-计算队列的长度的方法"><a href="#5-计算队列的长度的方法" class="headerlink" title="5.计算队列的长度的方法"></a>5.计算队列的长度的方法</h2><p>(rear-front+QueueSize)%QueueSIze </p><h2 id="6-入队的代码是怎样的"><a href="#6-入队的代码是怎样的" class="headerlink" title="6.入队的代码是怎样的"></a>6.入队的代码是怎样的</h2><pre class=" language-c"><code class="language-c">Status <span class="token function">EnQuene</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span>Q，QElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token operator">==</span>Q<span class="token operator">-></span>front<span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列满了</span>    Q<span class="token operator">-></span>data<span class="token punctuation">[</span>Q<span class="token operator">-></span>rear<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将元素e赋值给队尾</span>    Q<span class="token operator">-></span>rear<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将指针后移一位</span>    <span class="token keyword">return</span> Ok<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="7-出队的代码是怎样的"><a href="#7-出队的代码是怎样的" class="headerlink" title="7.出队的代码是怎样的"></a>7.出队的代码是怎样的</h2><pre class=" language-c"><code class="language-c">Status <span class="token function">EnQuene</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span>Q，QElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token operator">==</span>Q<span class="token operator">-></span>front<span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列满了</span>  <span class="token operator">*</span>e<span class="token operator">=</span>Q<span class="token operator">-></span>data<span class="token punctuation">[</span>Q<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将队头元素赋值给e</span>    Q<span class="token operator">-></span>front<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将front指针向后移动1位，如果到最后则到最前面</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.8 栈的应用</title>
      <link href="/2019/10/13/4.8-zhan-de-ying-yong/"/>
      <url>/2019/10/13/4.8-zhan-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="4-8-栈的应用"><a href="#4-8-栈的应用" class="headerlink" title="4.8 栈的应用"></a>4.8 栈的应用</h1><blockquote><p>栈的应用有哪些呢？1.是递归 2.是后缀表示法</p></blockquote><h2 id="1-为什么栈和递归有关系呢？"><a href="#1-为什么栈和递归有关系呢？" class="headerlink" title="1.为什么栈和递归有关系呢？"></a>1.为什么栈和递归有关系呢？</h2><p>其实递归是存储某些数据，后面又以存储的逆序恢复这些数据，显然符合栈的数据结构</p><h2 id="2-后缀表示法定义"><a href="#2-后缀表示法定义" class="headerlink" title="2.后缀表示法定义"></a>2.后缀表示法定义</h2><h3 id="1-什么是后缀表示法"><a href="#1-什么是后缀表示法" class="headerlink" title="1.什么是后缀表示法"></a>1.什么是后缀表示法</h3><p>其实就是不要括号的表示法，逆波兰法，</p><h3 id="2-后缀表达式的计算是怎样的呢"><a href="#2-后缀表达式的计算是怎样的呢" class="headerlink" title="2.后缀表达式的计算是怎样的呢"></a>2.后缀表达式的计算是怎样的呢</h3><p>从左到右遍历，遇到数字就出栈，遇到符合，就将栈顶两个数字出栈进行运算，运算结果进栈</p><h3 id="3-中缀表达式怎么转后缀表达式呢"><a href="#3-中缀表达式怎么转后缀表达式呢" class="headerlink" title="3.中缀表达式怎么转后缀表达式呢"></a>3.中缀表达式怎么转后缀表达式呢</h3><p>如果是数字，直接出栈，如果是符号的话，和栈顶符号进行比较，如果优先级大于栈顶符号的话，就入栈，如果优先级小于栈顶符号或者是右括号的话，就依次出栈（右括号的话，出栈到左括号）</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.7 栈的作用</title>
      <link href="/2019/10/13/4.7-zhan-de-zuo-yong/"/>
      <url>/2019/10/13/4.7-zhan-de-zuo-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="4-7-栈的作用"><a href="#4-7-栈的作用" class="headerlink" title="4.7 栈的作用"></a>4.7 栈的作用</h1><h2 id="为什么要用栈呢？"><a href="#为什么要用栈呢？" class="headerlink" title="为什么要用栈呢？"></a>为什么要用栈呢？</h2><p>其实栈，简化了程序设计的问题，划分的了不同关注层次，使思考范围聚集于问题核心</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.6 栈的链式存储结构及实现</title>
      <link href="/2019/10/13/4.6-zhan-de-lian-shi-cun-chu-jie-gou-ji-shi-xian/"/>
      <url>/2019/10/13/4.6-zhan-de-lian-shi-cun-chu-jie-gou-ji-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="4-6-栈的链式存储结构及实现"><a href="#4-6-栈的链式存储结构及实现" class="headerlink" title="4.6 栈的链式存储结构及实现"></a>4.6 栈的链式存储结构及实现</h1><h2 id="1-什么是链栈呢"><a href="#1-什么是链栈呢" class="headerlink" title="1.什么是链栈呢"></a>1.什么是链栈呢</h2><p>其实很像链表，不过那个栈顶指针和头指针基本一样，所以对于链栈来说，不需要头指针，但是他其实方式是和链表的头插法是一样的，就是先来的在链表尾部，最后来的在链表头</p><h2 id="2-链栈的结构代码是怎样？"><a href="#2-链栈的结构代码是怎样？" class="headerlink" title="2.链栈的结构代码是怎样？"></a>2.链栈的结构代码是怎样？</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> StackNode<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这个是链表</span>    SElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> StackNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>StackNode<span class="token punctuation">,</span><span class="token operator">*</span>LinkStackPtr<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> LinkStack<span class="token punctuation">{</span>    LinkStackPtr top<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈顶指针</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span>LinkStack<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.5 两栈共享空间</title>
      <link href="/2019/10/13/4.5-liang-zhan-gong-xiang-kong-jian/"/>
      <url>/2019/10/13/4.5-liang-zhan-gong-xiang-kong-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="4-5-两栈共享空间"><a href="#4-5-两栈共享空间" class="headerlink" title="4.5 两栈共享空间"></a>4.5 两栈共享空间</h1><h2 id="1-栈的缺点"><a href="#1-栈的缺点" class="headerlink" title="1.栈的缺点"></a>1.栈的缺点</h2><p>就是必须事先确定存储空间的大小，</p><h2 id="2-解决上面的缺点怎么办？"><a href="#2-解决上面的缺点怎么办？" class="headerlink" title="2.解决上面的缺点怎么办？"></a>2.解决上面的缺点怎么办？</h2><p>用两栈共享空间来解决，就是用1个数组来存储两个栈，要求是2个栈的类型相同</p><p>一个栈底是数组的开端，另一个栈的栈底是数组的结尾，</p><h2 id="3-什么时候会满呢"><a href="#3-什么时候会满呢" class="headerlink" title="3.什么时候会满呢"></a>3.什么时候会满呢</h2><p>就是两个栈顶见面的时候，就是S-&gt;top+1==S-&gt;top2</p><h2 id="4-两栈共享空间的结构是什么呢？"><a href="#4-两栈共享空间的结构是什么呢？" class="headerlink" title="4.两栈共享空间的结构是什么呢？"></a>4.两栈共享空间的结构是什么呢？</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>Max<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈顶1</span>    <span class="token keyword">int</span> top2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈顶2 </span><span class="token punctuation">}</span></code></pre><p>插入方法</p><pre class=" language-c"><code class="language-c">Status <span class="token function">Push</span><span class="token punctuation">(</span>SqDoubleStack <span class="token operator">*</span>S<span class="token punctuation">,</span>SElemType e<span class="token punctuation">,</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top1<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>S<span class="token operator">-></span>top2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//栈满</span><span class="token keyword">if</span><span class="token punctuation">(</span>stackNumber<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//栈1中有元素进栈</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top1<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//空栈，溢出</span>    <span class="token punctuation">}</span>    S<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token operator">++</span>S<span class="token operator">-></span>top1<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//栈2中有元素进栈</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top2<span class="token operator">==</span>MAX<span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空栈</span>       S<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token operator">--</span>S<span class="token operator">-></span>top2<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><p>出栈是</p><p>*e=S-&gt;data[S-&gt;top2++];</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.2 栈的定义</title>
      <link href="/2019/10/13/4.2-zhan-de-ding-yi/"/>
      <url>/2019/10/13/4.2-zhan-de-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="4-2-栈的定义"><a href="#4-2-栈的定义" class="headerlink" title="4.2 栈的定义"></a>4.2 栈的定义</h1><h2 id="1-什么是栈呢"><a href="#1-什么是栈呢" class="headerlink" title="1.什么是栈呢"></a>1.什么是栈呢</h2><p>栈是限定只能在表尾进行操作的线性表</p><p>后进先出</p><h2 id="2-出栈的顺序只有1种吗？"><a href="#2-出栈的顺序只有1种吗？" class="headerlink" title="2.出栈的顺序只有1种吗？"></a>2.出栈的顺序只有1种吗？</h2><p>不是，有很多</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章 栈和队列 目录</title>
      <link href="/2019/10/13/di-4-zhang-zhan-he-dui-lie/"/>
      <url>/2019/10/13/di-4-zhang-zhan-he-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="第4章-栈和队列"><a href="#第4章-栈和队列" class="headerlink" title="第4章 栈和队列"></a>第4章 栈和队列</h1><h2 id="1-栈的定义"><a href="#1-栈的定义" class="headerlink" title="1.栈的定义"></a>1.栈的定义</h2><h2 id="2-抽象数据类型"><a href="#2-抽象数据类型" class="headerlink" title="2.抽象数据类型"></a>2.抽象数据类型</h2><h2 id="3-顺序存储结构及其实现"><a href="#3-顺序存储结构及其实现" class="headerlink" title="3.顺序存储结构及其实现"></a>3.顺序存储结构及其实现</h2><h2 id="4-两栈共享空间"><a href="#4-两栈共享空间" class="headerlink" title="4.两栈共享空间"></a>4.两栈共享空间</h2><h2 id="5-栈的链式存储结构及实现"><a href="#5-栈的链式存储结构及实现" class="headerlink" title="5.栈的链式存储结构及实现"></a>5.栈的链式存储结构及实现</h2><h2 id="6-栈的作用"><a href="#6-栈的作用" class="headerlink" title="6.栈的作用"></a>6.栈的作用</h2><h2 id="7-递归"><a href="#7-递归" class="headerlink" title="7.递归"></a>7.递归</h2><h2 id="8-四则运算表达式求值"><a href="#8-四则运算表达式求值" class="headerlink" title="8.四则运算表达式求值"></a>8.四则运算表达式求值</h2><h2 id="9-队列定义"><a href="#9-队列定义" class="headerlink" title="9.队列定义"></a>9.队列定义</h2><h2 id="10-队列抽象数据类型"><a href="#10-队列抽象数据类型" class="headerlink" title="10.队列抽象数据类型"></a>10.队列抽象数据类型</h2><h2 id="11-循环队列"><a href="#11-循环队列" class="headerlink" title="11.循环队列"></a>11.循环队列</h2><h2 id="12-链式存储结构及其实现"><a href="#12-链式存储结构及其实现" class="headerlink" title="12.链式存储结构及其实现"></a>12.链式存储结构及其实现</h2>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 第4章 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.7 KMP模式匹配算法</title>
      <link href="/2019/10/13/5.7-kmp-mo-shi-pi-pei-suan-fa/"/>
      <url>/2019/10/13/5.7-kmp-mo-shi-pi-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="5-7-KMP模式匹配算法"><a href="#5-7-KMP模式匹配算法" class="headerlink" title="5.7 KMP模式匹配算法"></a>5.7 KMP模式匹配算法</h1><blockquote><p>什么是KMP模式匹配算法?</p><p>其实就是1个模式匹配算法，<strong>大大避免重复遍历</strong>，简称<strong>KMP算法</strong></p></blockquote><h2 id="5-7-1-算法原理"><a href="#5-7-1-算法原理" class="headerlink" title="5.7.1 算法原理"></a>5.7.1 算法原理</h2><p>1.我们先假设一种情况，这种情况是子串<strong>没有重复</strong>的，主串<strong>S=”abcdefgab”</strong>，我们要匹配的<strong>T=”abcdex”</strong>，那么如果用前面的朴素算法的话，如图所示</p><p><img src="https://i.loli.net/2019/10/13/O85ylgkjHvbaCRV.jpg" alt></p><p>可仔细观察发现，子串T来说，”abcdex”首字母”a”与后面的串”bcdex”中任意一个字符都不相等，就是子串T没有重复的，</p><p>那么对于图5-7-1的(1)来说，前五位字符分别相等，意味着子串T的首字符”a”不可能与S串的第2位到第5位的字符相等。在图5-7-1中，(2)(3)(4)(5)的判断都是多余。我们直接跳到6这一步</p><p>2.我们再假设第2种情况，这种情况是子串<strong>有重复</strong>的，<strong>S=”abcabcabc”</strong>，<strong>T=”abcabx”</strong>,如图</p><p><img src="https://i.loli.net/2019/10/13/LDkKFNjgnmT6Gox.jpg" alt></p><p>由上面的经验，我们发现2，3步（<strong>重复出现之前</strong>的步骤）都是多余的，又因为第四位的”a”和第五位的”b”已经与主串S中的相应位置比较过了，是相等的，因此可以断定，T的首字符”a”、第二位的字符”b”与S的第四位字符和第五位字符也不需要比较了，肯定也是相等的，所以(4)(5)这两个比较得出字符相等的步骤也可以省略。</p><p>简化后的图：</p><p><img src="https://i.loli.net/2019/10/13/xeMEwg8vkf5GOVb.jpg" alt></p><p>3.你明白什么是<strong>避免不必要的回溯</strong>了吗？</p><p>上面的例子很好说明了<strong>避免不必要的回溯</strong>，但是我们思考下，主串的i（当前位置下标）会不会回头走的呢？</p><p>很显然，不会，在第一个例子中，i一开始是1，一轮循环后，就到了6，类似于：“好马不吃回头草”</p><p>子串的位标j会吃回头草吗？</p><p><strong>通过观察也可发现，我们屡屡提到了T串的首字符与自身后面字符的比较，T串如果自身重复，发现如果有相等字符，j值的变化就会不相同</strong>，也就是说，这个<strong>j值的变化</strong>与主串其实没什么关系，关键就<strong>取决于T串的结构中是否有重复</strong>（<strong>相似度</strong>）的问题。</p><p>我们把T串各个位置的j值的变化，定义为一个数组next，那么next的长度就是T串的长度（因为next是T串各个元素位置的变化）,<strong>next的意思就是T串，j位置每次回溯的位置</strong>（<strong>回头吃草的位置</strong>），这里我们暂时不深究next数组中每个元素的值，我们可以定义一个函数：</p><h2 id="5-7-2-next数组推导"><a href="#5-7-2-next数组推导" class="headerlink" title="5.7.2 next数组推导"></a>5.7.2 next数组推导</h2><h3 id="先看例子："><a href="#先看例子：" class="headerlink" title="先看例子："></a>先看例子：</h3><h4 id="1-T-”abcdex”"><a href="#1-T-”abcdex”" class="headerlink" title="1.T=”abcdex”"></a>1.T=”abcdex”</h4><p>注意：我们观察的时候，看到j位置前面的字符就行了，比如说j=2，是看j=2之前的字符”a“</p><p><img src="https://i.loli.net/2019/10/13/pUoN2gY5zWO8chl.jpg" alt></p><ul><li>1)当j=1时，next[1]=0;</li><li>2)当j=2时，j由1到j-1（<strong>j的前一个字符</strong>）就只有字符”a”，属于其他情况next[2]=1;</li><li>3)当j=3时，j由1到j-1串是”ab”，显然”a”与”b”<strong>不相等</strong>，属其他情况，next[3]=<strong>1;</strong></li><li>4)以后同理，所以最终此T串的next[j]为011111。</li></ul><h3 id="2-T-”abcabx”"><a href="#2-T-”abcabx”" class="headerlink" title="2.T=”abcabx”"></a>2.T=”abcabx”</h3><p>注意：当我们看重复的时候，是看<strong>顺序重复</strong>，不是回文重复，例如：”abcab”（顺序重复）,这样重复的元素个数是2，”abcba”（回文重复）这样重复的元素只有:”a”</p><p>当<strong>出现重复</strong>的时候，<strong>next[j]的值是重复的元素个数+1</strong></p><p><img src="https://i.loli.net/2019/10/13/yWwtDC4xiLPAufM.jpg" alt></p><ul><li>1)当j=1时，next[1]=0;</li><li>2)当j=2时，同上例说明，next[2]=1;</li><li>3)当j=3时，同上，next[3]=1;</li><li>4)当j=4时，同上，next[4]=1;</li><li>5)当j=5时，此时j由1到j-1的串是”abca”，前缀字符”a”与后缀字符”a”相等，因此可推算出k值为2，因此next[5]=2;</li><li>6)当j=6时，j由1到j-1的串是”abcab”，由于前缀字符”ab”与后缀”ab”相等，所以next[6]=3。</li></ul><h3 id="3-T-”ababaaaba”"><a href="#3-T-”ababaaaba”" class="headerlink" title="3.T=”ababaaaba”"></a>3.T=”ababaaaba”</h3><p>注意：重复要看在末尾位置的重复，中间位置没有接到末尾的重复不算，比如说，T=”ababaaaba”中，如果看，第1到第3位置的aba和第3到第5位置的aba重复，这样就是错的，因为第3到第5位置的aba不在末尾</p><p><img src="https://i.loli.net/2019/10/13/ZNVKAWQzh7S3cPO.jpg" alt></p><ul><li>1)当j=1时，next[1]=0;</li><li>2)当j=2时，同上next[2]=1;</li><li>3)当j=3时，同上next[3]=1;</li><li>4)当j=4时，j由1到j-1的串是”aba”，前缀字符”a”与后缀字符”a”相等，next[4]=2;</li><li>5)当j=5时，j由1到j-1的串是”abab”，由于前缀字符”ab”与后缀”ab”相等，所以next[5]=3;</li><li>6)当j=6时，j由1到j-1的串的”ababa”，由于前缀字符”aba”与后缀”aba”相等，所以next[6]=4;</li><li>7)当j=7时，j由1到j-1的串是”ababaa”，由于前缀字符”ab”与后缀”aa”并不相等，只有”a”相等，所以next[7]=2;</li><li>8)当j=8时，j由1到j-1的串是”ababaaa”，只有”a”相等，所以next[8]=2;</li><li>9)当j=9时，j由1到j-1的串是”ababaaab”，由于前缀字符”ab”与后缀”ab”相等，所以next[9]=3</li></ul><h3 id="4-T-”aaaaaaaab”"><a href="#4-T-”aaaaaaaab”" class="headerlink" title="4.T=”aaaaaaaab”"></a>4.T=”aaaaaaaab”</h3><p>注意：比如看,aaaa的时候，重复的元素个数是多少呢？</p><p>有的人说是4，你看它全是重复的，这样其实是不对的</p><p>正确答案是3，有规定，<strong>重复元素不能是整个字符串的元素</strong>，所以这里只是3(“aaa”)</p><p><img src="https://i.loli.net/2019/10/13/d4yZwgDnW6vqKPe.jpg" alt></p><ul><li>1)当j=1时，next[1]=0;</li><li>2)当j=2时，同上next[2]=1;</li><li>3)当j=3时，j由1到j-1的串是”aa”，前缀字符”a”与后缀字符”a”相等，next[3]=2;</li><li>4)当j=4时，j由1到j-1的串是”aaa”，由于前缀字符”aa”与后缀”aa”相等，所以next[4]=3;</li><li>5)……</li><li>6)当j=9时，j由1到j-1的串是”aaaaaaaa”，由于前缀字符”aaaaaaa”与后缀”aaaaaaa”相等，所以next[9]=8。</li></ul><h2 id="5-7-3-算法实现"><a href="#5-7-3-算法实现" class="headerlink" title="5.7.3 算法实现"></a>5.7.3 算法实现</h2><blockquote><p>看了这么多，其实这个算法最核心的部分就是next数组了，也就是每次j要回溯的位置（回头吃草的位置）</p></blockquote><h3 id="1-得到next数组的代码"><a href="#1-得到next数组的代码" class="headerlink" title="1.得到next数组的代码"></a>1.得到next数组的代码</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 通过计算返回子串T的next数组。 */</span><span class="token keyword">void</span> <span class="token function">get_next</span><span class="token punctuation">(</span>String T<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>      i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 此处T[0]表示串T的长度 */</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* T[i]表示后缀的单个字符，T[j]表示前缀的单个字符 */</span>        <span class="token punctuation">{</span>              <span class="token operator">++</span>i<span class="token punctuation">;</span>              <span class="token operator">++</span>j<span class="token punctuation">;</span>              next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span>             j<span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 若字符不相同，则j值回溯 */</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主代码：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 返回子串T在主串S中第pos个字符之后的位置。若不存在，则函数返回值为0。 */</span><span class="token comment" spellcheck="true">/*  T非空，1≤pos≤StrLength(S)。 */</span><span class="token keyword">int</span> <span class="token function">Index_KMP</span><span class="token punctuation">(</span>String S<span class="token punctuation">,</span> String T<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* i用于主串S中当前位置下标值，若pos不为1，则从pos位置开始匹配 */</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* j用于子串T中当前位置下标值 */</span>    <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 定义一next数组 */</span>    <span class="token function">get_next</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 对串T作分析，得到next数组 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 若i小于S的长度并且j小于T的长度时，循环继续 */</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* 两字母相等则继续，与朴素算法增加了j=0判断 */</span>          <span class="token punctuation">{</span>             <span class="token operator">++</span>i<span class="token punctuation">;</span>             <span class="token operator">++</span>j<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span>             <span class="token comment" spellcheck="true">/* 指针后退重新开始匹配 */</span>               j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* j退回合适的位置，i值不变 */</span>        <span class="token comment" spellcheck="true">/**前面的朴素的是：        i=i-j+2; //返回i下一个位置        j=1; //j回到头               **/</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> i<span class="token operator">-</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实相对于朴素算法来说，就是增加了得到next数组，和在两字母相等的时候的判断增加j==0的条件，和回头的时候，只是变化j为next[j]，而i不变</p><h2 id="5-7-4-KMP算法改进"><a href="#5-7-4-KMP算法改进" class="headerlink" title="5.7.4 KMP算法改进"></a>5.7.4 KMP算法改进</h2><h3 id="1-KMP算法还存在什么缺陷呢？"><a href="#1-KMP算法还存在什么缺陷呢？" class="headerlink" title="1.KMP算法还存在什么缺陷呢？"></a>1.KMP算法还存在什么缺陷呢？</h3><p>主要是当字符串出现重复的字符的时候，会出现重复回溯的情况</p><p>例子：</p><p>如果我们的主串S=”aaaabcde”，子串T=”aaaax”，其next数组值分别为012345，</p><p><img src="https://i.loli.net/2019/10/13/dTDk63mKNGz1wUf.jpg" alt></p><p>在开始时，当 i=5、j=5时，我们发现”b”与”a”不相等，如图5-7-6的①，因此j=next[5]=4，如图中的②，此时”b”与第4位置的”a”依然不等，j=next[4}=3。如图中的③，接着依次是④⑤，直到j=next[i]=0时，根据算法，此时i++、j++，得到i=6、j=l如图中的⑥。</p><p>我们发现，当中的②③④⑤步骤，其实是多余的判断</p><p><strong>怎么解决呢？</strong></p><p>由于T串的第二、三、四、五位置的字符<strong>都与首位的 “a” 相等</strong>，那么可以用首位 next[l]的值去<strong>取代与它相等的字符</strong>后续next[j]的值，这是个很好的办法。因此我们对求next函数进行了改良，改良后的叫nextval。</p><p>这就是nextval的由来了</p><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="5-7-5-nextval数组值推导"><a href="#5-7-5-nextval数组值推导" class="headerlink" title="5.7.5 nextval数组值推导"></a>5.7.5 nextval数组值推导</h2><blockquote><p>举例子来说明比较简单</p></blockquote><h3 id="1-T-”ababaaaba”"><a href="#1-T-”ababaaaba”" class="headerlink" title="1. T=”ababaaaba”"></a>1. T=”ababaaaba”</h3><p><img src="https://s2.ax1x.com/2019/10/13/uv6ddH.png" alt="uv6ddH.png"></p><ul><li>1)当j=1时。nextval[1]=0;</li><li>2)当j=2时，因第二位字符”b”的next值是1，而第一位就是”a”，他们不相等，所以nextval[2]=next[2]=1，维持原值。</li><li>3)当j=3时，因为第三位字符”a”的next值为1，所以与第一位的”a”比较得知它们相等，所以nextval[3]=nextval[1]=0；如图5-7-7所示。</li></ul><p><a href="https://imgchr.com/i/uvclnS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/13/uvclnS.png" alt="uvclnS.png"></a></p><ul><li><p>4)当j=4时，第四位的字符”b”，next值为2，所以与第二位的”b”相比较得到结果是相等，因此nextval[4]=nextval[2]=1；如图5-7-8所示。</p></li><li><p>5)当j=5时，next值为3，第五个字符”a”与第三个字符”a”相等，因此nextval[5]=nextval[3]=0;</p></li><li><p>6)当j=6时，next值为4，第六个字符”a”与第四个字符”b”不相等，因此nextval[6]=4;</p></li><li><p>7)当j=7时，next值为2，第七个字符”a”与第二个字符”b”不相等，因此nextval[7]=2;</p></li><li><p>8)当j=8时，next值为2，第八个字符”b”与第二个字符”b”相等，因此nextval[8]=nextval[2]=1;</p></li><li><p>9)当j=9时，next值为3，第九个字符”a”与第三个字符”a”相等，因此nextval[9]=nextval[3]=1。</p></li></ul><h3 id="2-T-”aaaaaaaab”（如表5-7-6）"><a href="#2-T-”aaaaaaaab”（如表5-7-6）" class="headerlink" title="2.T=”aaaaaaaab”（如表5-7-6）"></a>2.T=”aaaaaaaab”（如表5-7-6）</h3><p><img src="https://s2.ax1x.com/2019/10/13/uvg4x0.png" alt="uvg4x0.png"></p><ul><li>1)当j=1时，nextval[1]=0;</li><li>2)当j=2时，next值为1，第二个字符与第一个字符相等，所以nextval[2]=nextval[1]=0;</li><li>3)同样的道理，其后都为0….;</li><li>4)当j=9时，next值为8，第九个字符”b”与第八个字符”a”不相等，所以nextval[9]=8。</li></ul><h3 id="3-总结改进的kmp算法："><a href="#3-总结改进的kmp算法：" class="headerlink" title="3.总结改进的kmp算法："></a>3.总结改进的kmp算法：</h3><p>其实思路：</p><p>就是比较j位置的字符和next[j]位置的字符是否相等，如果相等的话，就nextval [ j ] = nextval [ next [ j ] ];他们的nextval值也相等</p><h3 id="4-nextval-算法揭秘"><a href="#4-nextval-算法揭秘" class="headerlink" title="4.nextval 算法揭秘"></a>4.nextval 算法揭秘</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 求模式串T的next函数修正值并存入数组nextval */</span><span class="token keyword">void</span> <span class="token function">get_nextval</span><span class="token punctuation">(</span>String T<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>      i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      nextval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 此处T[0]表示串T的长度 */</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* T[i]表示后缀的单个字符，T[j]表示前缀的单个字符 */</span>        <span class="token punctuation">{</span>              <span class="token operator">++</span>i<span class="token punctuation">;</span>              <span class="token operator">++</span>j<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">/* 若当前字符与前缀字符不同*/</span>                nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 则当前的j为nextval在i位置的值*/</span>               <span class="token keyword">else</span>                 nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 如果与前缀字符相同，则将前缀字符的 */</span>                                            <span class="token comment" spellcheck="true">/* nextval值赋值给nextval在i位置的值 */</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span>             j<span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 若字符不相同，则j值回溯 */</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用的时候，只需要将”get_next(T,next)”;改为”get_nextval(T,next);”即可</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.6 朴素的模式匹配算法</title>
      <link href="/2019/10/13/5.6-po-su-de-mo-shi-pi-pei-suan-fa/"/>
      <url>/2019/10/13/5.6-po-su-de-mo-shi-pi-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="5-6-朴素的模式匹配算法"><a href="#5-6-朴素的模式匹配算法" class="headerlink" title="5.6 朴素的模式匹配算法"></a>5.6 朴素的模式匹配算法</h1><blockquote><p>这个算法有什么用呢？</p><p>比如你想查找字符串的位置，就需要用到这个算法</p></blockquote><h2 id="1-什么是朴素的模式匹配算法"><a href="#1-什么是朴素的模式匹配算法" class="headerlink" title="1.什么是朴素的模式匹配算法"></a>1.什么是朴素的模式匹配算法</h2><p>简单来说<strong>就是对主串的每一个字符作为子串开头，与要匹配的字符串进行匹配。对主串做大循环，每个字符开头做T的长度的小循环，直到匹配成功或全部遍历完成为止</strong>。</p><p>还是用图来说明比较简单：</p><p>现在，从下面的主串S=”goodgoogle”中，找到T=”google”这个子串的位置。我们通常需要下面的步骤：</p><p>注意，其中竖直连线表示相等，闪电状弯折连线表示不等</p><ol><li><p>主串S第一位开始，S与T前三个字母都匹配成功，但S第四个字母是d而T的是g。第一位匹配失败。</p><p><img src="https://i.loli.net/2019/10/13/3KMzpI6ctjwXESo.jpg" alt></p></li><li><p>主串S第二位开始，主串S首字母是o，要匹配的T首字母是g，匹配失败</p><p><img src="https://i.loli.net/2019/10/13/GrlwjKY8SkNMFTi.jpg" alt></p></li><li><p>主串S第三位开始，主串S首字母是o，要匹配的T首字母是g，匹配失败，</p><p><img src="https://i.loli.net/2019/10/13/28VIfAWbUvjnHXz.jpg" alt></p></li><li><p>主串S第四位开始，主串S首字母是d，要匹配的T首字母是g，匹配失败</p><p><img src="https://i.loli.net/2019/10/13/FrLMTcJnPZap2j7.jpg" alt></p></li><li><p>主串S第五位开始，S与T，6个字母全匹配，匹配成功</p><p><img src="https://i.loli.net/2019/10/13/1kKD5MP6BAeGTub.jpg" alt></p></li></ol><h2 id="2-算法是怎么写的？"><a href="#2-算法是怎么写的？" class="headerlink" title="2.算法是怎么写的？"></a>2.算法是怎么写的？</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 返回子串T在主串S中第pos个字符之后的起始位置。若不存在,则函数返回值为0。 */</span><span class="token comment" spellcheck="true">/* 其中,T非空,1≤pos≤StrLength(S)。 */</span><span class="token keyword">int</span> <span class="token function">Index</span><span class="token punctuation">(</span>String S<span class="token punctuation">,</span> String T<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* i用于主串S中当前位置下标值，若pos不为1，则从pos位置开始匹配 */</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* j用于子串T中当前位置下标值 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 若i小于S的长度并且j小于T的长度时，循环继续 */</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* 两字母相等则继续 */</span>          <span class="token punctuation">{</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>             <span class="token operator">++</span>j<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span>                 <span class="token comment" spellcheck="true">/* 指针后退重新开始匹配 */</span>          <span class="token punctuation">{</span>               i <span class="token operator">=</span> i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* i退回到上次匹配首位的下一位 */</span>             j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/* j退回到子串T的首位 */</span>          <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//通过主串的位置-子串的长度，得到子串在主串中的起始位置</span>        <span class="token keyword">return</span> i<span class="token operator">-</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-有什么缺点呢？"><a href="#3-有什么缺点呢？" class="headerlink" title="3.有什么缺点呢？"></a>3.有什么缺点呢？</h2><p>就是每次不成功的匹配都发生在子串的最后一个字符的话，这样就会造成很大的性能浪费</p><p>主串S=“00000000000000000001”，子串是“0001”</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.5 串的存储结构</title>
      <link href="/2019/10/13/5.5-chuan-de-cun-chu-jie-gou/"/>
      <url>/2019/10/13/5.5-chuan-de-cun-chu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="5-5-串的存储结构"><a href="#5-5-串的存储结构" class="headerlink" title="5.5 串的存储结构"></a>5.5 串的存储结构</h1><h2 id="5-5-1-顺序存储"><a href="#5-5-1-顺序存储" class="headerlink" title="5.5.1 顺序存储"></a>5.5.1 顺序存储</h2><h3 id="1-串的顺序存储与普通的顺序存储（数组）有什么区别？"><a href="#1-串的顺序存储与普通的顺序存储（数组）有什么区别？" class="headerlink" title="1.串的顺序存储与普通的顺序存储（数组）有什么区别？"></a>1.串的顺序存储与普通的顺序存储（数组）有什么区别？</h3><p>由于串需要一些特殊的操作：比如说replace，有可能新的长度超过了原来的长度，所以他的存储空间可以由程序执行过程中动态分配而得到，不是一直固定的。</p><h2 id="5-5-2-串的链式存储"><a href="#5-5-2-串的链式存储" class="headerlink" title="5.5.2 串的链式存储"></a>5.5.2 串的链式存储</h2><h3 id="1-串的链式存储与链表有什么不同？"><a href="#1-串的链式存储与链表有什么不同？" class="headerlink" title="1.串的链式存储与链表有什么不同？"></a>1.串的链式存储与链表有什么不同？</h3><p>串的链式存储，一个结点可以存放1个字符，或者多个字符，如果最后一个结点没有放满的话，就用＃或者其他非串值字符补全，</p><h3 id="2-为啥这样呢？"><a href="#2-为啥这样呢？" class="headerlink" title="2.为啥这样呢？"></a>2.为啥这样呢？</h3><p>节省空间</p><h3 id="3-怎么决定一个结点放多少个字符呢？"><a href="#3-怎么决定一个结点放多少个字符呢？" class="headerlink" title="3.怎么决定一个结点放多少个字符呢？"></a>3.怎么决定一个结点放多少个字符呢？</h3><p>根据实际情况决定</p><h3 id="4-它和顺序存储哪个比较优秀呢？"><a href="#4-它和顺序存储哪个比较优秀呢？" class="headerlink" title="4.它和顺序存储哪个比较优秀呢？"></a>4.它和顺序存储哪个比较优秀呢？</h3><p>链式存储的优点：连接串和串的操作方便</p><p>缺点：灵活性不及顺序存储，性能不及顺序存储</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.3 串的比较</title>
      <link href="/2019/10/13/5.3-chuan-de-bi-jiao/"/>
      <url>/2019/10/13/5.3-chuan-de-bi-jiao/</url>
      
        <content type="html"><![CDATA[<h1 id="5-3-串的比较"><a href="#5-3-串的比较" class="headerlink" title="5.3 串的比较"></a>5.3 串的比较</h1><h2 id="1-怎么进行串的比较呢？"><a href="#1-怎么进行串的比较呢？" class="headerlink" title="1.怎么进行串的比较呢？"></a>1.怎么进行串的比较呢？</h2><p>举例子：</p><ol><li><p>“hap”&lt;”hapa”，因为“”hapa”前面3个字母已经包含了”hap”,可以简单理解为：儿子的年龄肯定没有父亲的大</p></li><li><p>”hpaaa“&lt;”hpb”,因为前2个字母均相同，但是”hpb“第3个字母是b,”hpaaa“第3个字母是a，b&gt;a，所以”hpb”&gt;”hpaaa”，</p><p>可以简单理解为：不是父子关系的，看父亲（前面的字母），拼爹，只要你父亲厉害，无论你后面有多大努力（多长），都是白费（比不过）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.10 队列的定义</title>
      <link href="/2019/10/13/4.10-dui-lie-de-ding-yi/"/>
      <url>/2019/10/13/4.10-dui-lie-de-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="4-10-队列的定义"><a href="#4-10-队列的定义" class="headerlink" title="4.10 队列的定义"></a>4.10 队列的定义</h1><h2 id="1-什么是队列呢"><a href="#1-什么是队列呢" class="headerlink" title="1.什么是队列呢"></a>1.什么是队列呢</h2><p>队列是只允许在一端进行插入的操作，在另一端删除的线性表</p><h2 id="2-什么是队头，什么是队尾呢"><a href="#2-什么是队头，什么是队尾呢" class="headerlink" title="2.什么是队头，什么是队尾呢"></a>2.什么是队头，什么是队尾呢</h2><p>队尾就是允许插入的一端，队头就是允许删除的一端，类似于排队，排队要从后面排起来</p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.3 冒泡排序</title>
      <link href="/2019/10/11/9.3-mou-pao-pai-xu/"/>
      <url>/2019/10/11/9.3-mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="9-3-冒泡排序"><a href="#9-3-冒泡排序" class="headerlink" title="9.3 冒泡排序"></a>9.3 冒泡排序</h1><h2 id="9-3-1-什么是冒泡排序，最简单的冒泡排序"><a href="#9-3-1-什么是冒泡排序，最简单的冒泡排序" class="headerlink" title="9.3.1.什么是冒泡排序，最简单的冒泡排序"></a>9.3.1.什么是冒泡排序，最简单的冒泡排序</h2><p>其实就是两两比较相邻记录的关键字，如果反序就交换，直到没有反序</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L作交换排序（冒泡排序初级版） */</span><span class="token keyword">void</span> <span class="token function">BubbleSort0</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token function">swap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 交换L->r[i]与L->r[j]的值 */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个算法其实不是真正的冒泡，他是让每个关键字都和后面的每个比较，而且它只对排序的关键字有效，对未排序的没有帮助</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="9-3-2-冒泡排序算法"><a href="#9-3-2-冒泡排序算法" class="headerlink" title="9.3.2 冒泡排序算法"></a>9.3.2 冒泡排序算法</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L作冒泡排序 */</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 注意j是从后往前循环 */</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 若前者大于后者（注意这里与上一算法的差异）*/</span>            <span class="token punctuation">{</span>                 <span class="token function">swap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 交换L->r[j]与L->r[j+1]的值 */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它对排序的关键字有效，对未排序的也有帮助</p><h2 id="9-3-3-冒泡排序优化"><a href="#9-3-3-冒泡排序优化" class="headerlink" title="9.3.3 冒泡排序优化"></a>9.3.3 冒泡排序优化</h2><p>如果是已经有序了的话，就不用进行后面的循环继续，增加1个flag就行</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L作改进冒泡算法 */</span><span class="token keyword">void</span> <span class="token function">BubbleSort2</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    Status flag<span class="token operator">=</span>TRUE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* flag用来作为标记 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token operator">-></span>length <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 若flag为true说明有过数据交换，否则停止循环 */</span>    <span class="token punctuation">{</span>        flag<span class="token operator">=</span>FALSE<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 初始为False */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token function">swap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 交换L->r[j]与L->r[j+1]的值 */</span>                 flag<span class="token operator">=</span>TRUE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 如果有数据交换，则flag为true */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="9-3-4-冒泡排序复杂度是多少"><a href="#9-3-4-冒泡排序复杂度是多少" class="headerlink" title="9.3.4 冒泡排序复杂度是多少"></a>9.3.4 冒泡排序复杂度是多少</h2><p>其实就是O(n2)</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.2 排序的基本概念和分类</title>
      <link href="/2019/10/11/9.2-pai-xu-de-ji-ben-gai-nian-he-fen-lei/"/>
      <url>/2019/10/11/9.2-pai-xu-de-ji-ben-gai-nian-he-fen-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="9-2-排序的基本概念和分类"><a href="#9-2-排序的基本概念和分类" class="headerlink" title="9.2 排序的基本概念和分类"></a>9.2 排序的基本概念和分类</h1><h2 id="9-2-1-排序的稳定性怎么区分"><a href="#9-2-1-排序的稳定性怎么区分" class="headerlink" title="9.2.1 排序的稳定性怎么区分"></a>9.2.1 排序的稳定性怎么区分</h2><p>同分的时候，前后不变是稳定的，反之是不稳定的</p><h2 id="9-2-2-内排序和外排序"><a href="#9-2-2-内排序和外排序" class="headerlink" title="9.2.2 内排序和外排序"></a>9.2.2 内排序和外排序</h2><p>什么是内排序呢</p><p>其实就是所有记录都是放在内存中</p><p>什么是外排序呢</p><p>其实就是不能同时放在内存中，必须在内外存中多次交换数据</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
