<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阅读手札 | 手把手带你探索『图解 HTTP』</title>
      <link href="/2020/07/15/yue-du-shou-zha-shou-ba-shou-dai-ni-tan-suo-tu-jie-http/"/>
      <url>/2020/07/15/yue-du-shou-zha-shou-ba-shou-dai-ni-tan-suo-tu-jie-http/</url>
      
        <content type="html"><![CDATA[<h1 id="阅读手札-手把手带你探索『图解-HTTP』"><a href="#阅读手札-手把手带你探索『图解-HTTP』" class="headerlink" title="阅读手札 | 手把手带你探索『图解 HTTP』"></a>阅读手札 | 手把手带你探索『图解 HTTP』</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的 <code>Github</code> 个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的 Github 博客</a></p></blockquote><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><p><img src="https://imgkr.cn-bj.ufileos.com/0fb7a392-71c6-48df-9150-85670e3d4dea.png" alt></p><h2 id="一、网络基础-TCP-IP"><a href="#一、网络基础-TCP-IP" class="headerlink" title="一、网络基础 TCP/IP"></a>一、网络基础 <code>TCP/IP</code></h2><p>通常使用的网络（包括互联网）是在 <code>TCP/IP</code> 协议族的基础上运作，而 <code>HTTP</code> 属于它内部的一个<strong>子集</strong></p><p><img src="https://imgkr.cn-bj.ufileos.com/3764a1be-a503-4057-9745-82a010940638.png" alt></p><h3 id="1-1-层次划分"><a href="#1-1-层次划分" class="headerlink" title="1.1 层次划分"></a>1.1 层次划分</h3><ul><li><strong>应用层：</strong> 决定了<strong>向用户提供应用服务时通信</strong>的活动，比如 <code>FTP</code>、<code>DNS</code>、<code>HTTP</code></li></ul><blockquote><p>易记：应用层，顾名思义，是提供给应用服务的活动，然后现在最火的应用是微信（通信功能），所以就是：向用户提供<strong>应用</strong>服务时<strong>通信</strong></p></blockquote><ul><li><strong>传输层：</strong> <strong>对上层应用层</strong>，<strong>提供</strong>处于网络连接中的两台<strong>计算机之间的数据传输</strong>，比如 <code>TCP</code>、<code>UDP</code></li></ul><blockquote><p>易记：传输层，顾名思义，提供计算机之间的数据传输</p></blockquote><ul><li><strong>网络层：</strong> 用来<strong>处理在网络上流动的数据包</strong>，该层规定了通过怎样的<strong>路径</strong>到达对方计算机，并把数据包传送给对方；与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线</li></ul><blockquote><p>易记：网络层，顾名思义，处理在网络上流动的数据包，规定通过什么路径</p></blockquote><ul><li><strong>数据链路层：</strong> 用来<strong>处理连接网络的硬件</strong>部分</li></ul><blockquote><p>易记：数据链路层，顾名思义，链路偏硬件的东西，而数据是偏软件层面的东西，自然可以想到是起到连接作用</p></blockquote><h3 id="1-2-通信的过程"><a href="#1-2-通信的过程" class="headerlink" title="1.2 通信的过程"></a>1.2 通信的过程</h3><ol><li>首先作为发送端的客户端在<strong>应用层</strong>（<code>HTTP</code> 协议）发出获取 <code>Web</code> 页面的 <code>HTTP</code> 请求</li><li>接着，为了传输方便，在<strong>传输层</strong>（<code>TCP</code> 协议）把从应用层处收到的数据（<code>HTTP</code> 请求报文）进行<strong>分割</strong>，并在各个报文上<strong>打上标记序号及端口号</strong>后转发给网络层</li><li>在<strong>网络层</strong>（<code>IP</code> 协议），增加作为<strong>通信目的地</strong>的 <code>MAC</code> 地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了</li><li>接收端的服务器在<strong>链路层</strong>接收到数据，<strong>按序往上层发送</strong>，一直到应用层。当传输到应用层，才能算真正接收到由客户端发送过来的 <code>HTTP</code> 请求</li></ol><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/07/164155-310814.png" alt="image-20200707164153058"></p><h3 id="1-3-三次握手"><a href="#1-3-三次握手" class="headerlink" title="1.3 三次握手"></a>1.3 三次握手</h3><blockquote><p>之前已经笔者已经写了，因此在这里就不再赘述，点击链接即可跳转：<a href="https://juejin.im/post/5e742c4b51882549746817a2#heading-12" target="_blank" rel="noopener"><code>TCP</code> 连接管理</a></p></blockquote><h3 id="1-4-各协议与-HTTP-协议的关系"><a href="#1-4-各协议与-HTTP-协议的关系" class="headerlink" title="1.4 各协议与 HTTP 协议的关系"></a>1.4 各协议与 <code>HTTP</code> 协议的关系</h3><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/07/173710-724833.png" alt="image-20200707164806629"></p><h3 id="1-5-URI-和-URL"><a href="#1-5-URI-和-URL" class="headerlink" title="1.5 URI 和 URL"></a>1.5 URI 和 URL</h3><p>Q1：<code>URL</code> 和 <code>URI</code> 的区别</p><ul><li><code>URI</code> 用字符串标识某一互联网资源</li><li><code>URL</code> 表示资源的地点</li></ul><blockquote><p>由此可见， <code>URL</code> 是 <code>URI</code> 的子集</p></blockquote><p>Q2：<code>URI</code> 的各部分结构</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/07/181243-115407.png" alt="image-20200707181219904"></p><h2 id="二、简单的-HTTP-协议"><a href="#二、简单的-HTTP-协议" class="headerlink" title="二、简单的 HTTP 协议"></a>二、简单的 <code>HTTP</code> 协议</h2><h3 id="2-1-HTTP-方法"><a href="#2-1-HTTP-方法" class="headerlink" title="2.1  HTTP 方法"></a>2.1  <code>HTTP</code> 方法</h3><ul><li><strong><code>GET</code> 获取资源：</strong> 用来请求访问<strong>已被 <code>URI</code> 识别的资源</strong>，指定的资源经服务器端解析后返回响应内容</li><li><strong><code>POST</code> 传输实体主体：</strong> 用来传输实体的主体 虽然用 <code>GET</code> 方法也可以<strong>传输实体的主体</strong>，但一般不用 <code>GET</code> 方法进行传输，而是用 <code>POST</code> 方法</li><li><strong><code>PUT</code> 传输文件：</strong> 在请求报文的主体中包含文件内容，然后保存到请求 <code>URI</code> 指定的位置 鉴于 <code>HTTP1.1</code> 的 <code>PUT</code> 方法自身不带验证机制，<strong>任何人都可以上传文件</strong>，存在<strong>安全性问题</strong>，因此一般不使用该方法</li><li><strong><code>HEAD</code> 获得报文首部：</strong> 和 <code>GET</code> 方法一样，只是<strong>不返回报文主体部分</strong>。 用于确认 <strong><code>URI</code> 的有效性及资源更新的日期</strong>时间等</li><li><strong><code>DELETE</code> 删除文件：</strong> 用来删除文件，是与 <code>PUT</code> 相反的方法。<code>DELETE</code> 方法按请求 URI 删除指定的资源。 不带验证机制，所以一般不使用 <code>DELETE</code> 方法</li></ul><blockquote><p>和 <code>put</code> 相对应，两者都不具备验证机制 </p></blockquote><ul><li><strong><code>OPTIONS</code> 询问支持的方法：</strong> 用来查询针对请求 <code>URI</code> 指定的资源支持的方法（了解即可）</li><li><strong><code>TRACE</code> 追踪路径：</strong> 让 <code>Web</code> 服务器端将之前的请求通信返回给客户端的方法。 但 <code>TRACE</code> 方法本来就不怎么常用，再加上它容易引发 <code>XST</code>攻击，通常就更不会用到了（了解即可）</li><li><strong><code>CONNECT</code> 要求用隧道协议连接代理：</strong> 要求在与代理服务器通信时建立隧道，实现用隧道协议进行 <code>TCP</code> 通信。 主要使用 <code>SSL</code>（Secure Sockets Layer，安全套接层）和 <code>TLS</code>（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</li></ul><h3 id="2-2-持久连接节省通信量"><a href="#2-2-持久连接节省通信量" class="headerlink" title="2.2 持久连接节省通信量"></a>2.2 持久连接节省通信量</h3><h4 id="2-2-1-持久链接"><a href="#2-2-1-持久链接" class="headerlink" title="2.2.1 持久链接"></a>2.2.1 持久链接</h4><p>持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 <code>TCP</code> 连接状态</p><p>持久连接的好处：</p><ul><li>减少了 <code>TCP</code> 连接的<strong>重复建立和断开</strong>所造成的额外开销，<strong>减轻了服务器端的负载</strong></li></ul><blockquote><p>感觉有点类似于连接池的作用</p></blockquote><ul><li>减少开销的那部分时间，使 <code>HTTP</code> 请求和响应能够更早地结束，这样 <code>Web</code> 页面的显示速度也就相应提高了</li></ul><h4 id="2-2-2-管线化"><a href="#2-2-2-管线化" class="headerlink" title="2.2.2 管线化"></a>2.2.2 管线化</h4><p>管线化技术出现后，<strong>不用等待响应亦可直接发送下一个请求</strong></p><p>这样就能够做到同时<strong>并行发送</strong>多个请求，而不需要一个接一个地等待响应了</p><p>用持久连接可以让请求更快结束。而管线化技术则比持久连接还要快。请求数越多，时间差就越明显。</p><h3 id="2-4-使用-Cookie-的状态管理"><a href="#2-4-使用-Cookie-的状态管理" class="headerlink" title="2.4 使用 Cookie 的状态管理"></a>2.4 使用 <code>Cookie</code> 的状态管理</h3><blockquote><p>状态管理其实还有很多种，比如 <code>Session</code> ,<code>token</code>  ，这里仅介绍 <code>cookie</code></p></blockquote><p><code>HTTP</code> 是无状态协议，它不对之前发生过的请求和响应的状态进行管理。</p><p><code>Cookie</code> 技术通过在请求和响应报文中写入 <code>Cookie</code> 信息来控制客户端的状态。<code>Cookie</code> 会根据从服务器端发送的响应报文内的一个叫做 <code>Set-Cookie</code> 的首部字段信息，通知客户端保存 <code>Cookie</code>。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 <code>Cookie</code> 值后发送出去</p><h2 id="三、HTTP-报文内的-HTTP-信息"><a href="#三、HTTP-报文内的-HTTP-信息" class="headerlink" title="三、HTTP 报文内的 HTTP 信息"></a>三、HTTP 报文内的 HTTP 信息</h2><h3 id="3-1-压缩传输的内容编码"><a href="#3-1-压缩传输的内容编码" class="headerlink" title="3.1 压缩传输的内容编码"></a>3.1 压缩传输的内容编码</h3><p>内容编码指明应用在实体内容上的<strong>编码格式</strong>，并保持实体信息原样压缩</p><p>常用的内容编码有：</p><ul><li><code>gzip</code></li><li><code>compress</code></li><li><code>deflate</code></li><li><code>identity</code></li></ul><h2 id="四、返回结果的-HTTP-状态码"><a href="#四、返回结果的-HTTP-状态码" class="headerlink" title="四、返回结果的 HTTP 状态码"></a>四、返回结果的 HTTP 状态码</h2><h3 id="4-1-状态码告知从服务器端返回的请求结果"><a href="#4-1-状态码告知从服务器端返回的请求结果" class="headerlink" title="4.1 状态码告知从服务器端返回的请求结果"></a>4.1 状态码告知从服务器端返回的请求结果</h3><p>数字中的<strong>第一位指定了响应类别</strong>，后两位无分类</p><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>Informational</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error</td><td>客户端无法处理请求</td></tr><tr><td>5XX</td><td>Server Error</td><td>服务器处理请求出错</td></tr></tbody></table><h3 id="4-2-2xx-成功"><a href="#4-2-2xx-成功" class="headerlink" title="4.2 2xx 成功"></a>4.2 2xx 成功</h3><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/11/223656-894674.png" alt="2xx 成功"></p><h3 id="4-3-3xx-重定向"><a href="#4-3-3xx-重定向" class="headerlink" title="4.3 3xx 重定向"></a>4.3 3xx 重定向</h3><p><img src="https://imgkr.cn-bj.ufileos.com/f76205e5-3560-41b3-889d-4f4238d00e97.png" alt></p><h3 id="4-4-4XX-客户端错误"><a href="#4-4-4XX-客户端错误" class="headerlink" title="4.4 4XX 客户端错误"></a>4.4 4XX 客户端错误</h3><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/11/225018-953119.png" alt="image-20200711224935405"></p><p>PS:注意区分 403 和 404，一个是被拒绝（一般是权限问题），另一个是无法找到</p><h3 id="4-5-5XX-服务器错误"><a href="#4-5-5XX-服务器错误" class="headerlink" title="4.5 5XX 服务器错误"></a>4.5 5XX 服务器错误</h3><p><img src="https://imgkr.cn-bj.ufileos.com/b75df92b-d718-49fc-a1ab-99ce77151a99.png" alt></p><h2 id="五、Web-服务器"><a href="#五、Web-服务器" class="headerlink" title="五、Web 服务器"></a>五、Web 服务器</h2><h3 id="5-1-用单台虚拟主机实现多个域名"><a href="#5-1-用单台虚拟主机实现多个域名" class="headerlink" title="5.1 用单台虚拟主机实现多个域名"></a>5.1 用单台虚拟主机实现多个域名</h3><p><code>HTTP1.1</code> 规范允许一个服务器搭建多个 <code>Web</code> 站点，这是虚拟主机功能。</p><p>Q1：为啥 <code>Host</code> 首部内完整<strong>指定主机名或域名</strong>的 <code>URI</code>？</p><p>因为虚拟主机可以寄存多个<strong>不同主机名和域名</strong>的 <code>Web</code> 网站</p><h3 id="5-2-通信数据转发程序"><a href="#5-2-通信数据转发程序" class="headerlink" title="5.2 通信数据转发程序"></a>5.2 通信数据转发程序</h3><p>这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接收从那台服务器发送的响应再转发给客户端。</p><ol><li>代理：接收客户端发送的请求后<strong>转发给其他服务器</strong>；代理<strong>不改变请求 <code>URI</code></strong>，会直接发送给前方持有资源的目标服务器。</li></ol><blockquote><ul><li>缓存代理：预先将资源<strong>缓存</strong>保存在代理服务器上，当代理再次接收到对相同资源的请求时，就可以直接将之前缓存的资源作为响应返回</li><li>透明代理：转发请求或响应时，<strong>不对报文做任何加工</strong>被称为透明代理，对报文内容进行加工的称为非透明代理。</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/12/195434-126846.png" alt="image-20200712195432972"></p><p>2.<strong>网关</strong>:<strong>转发其他服务器通信数据的服务器</strong>，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/12/195500-49027.png" alt="image-20200712195459045"></p><p>3.<strong>隧道：</strong> 按要求建立起一条与其他服务器的通信线路，届时使用 <code>SSL</code> 等加密手段进行通信，在通信双方断开连接时结束。隧道的目的是确保客户端能与服务器进行安全的通信。</p><p><img src="https://imgkr.cn-bj.ufileos.com/d2c412b7-1865-445f-b6ed-12311cffb792.png" alt></p><h3 id="5-3-保存资源的缓存"><a href="#5-3-保存资源的缓存" class="headerlink" title="5.3 保存资源的缓存"></a>5.3 保存资源的缓存</h3><p><strong>客户端的缓存：</strong> 浏览器缓存如果有效，不必再向服务器请求，而直接从本地读取。当判定缓存过期后，会向源服务器确认资源的有效性。若判断浏览器缓存失效，浏览器会再次请求新资源。</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/12/172524-808070.png" alt="image-20200712172523006"></p><h2 id="六、HTTP-首部"><a href="#六、HTTP-首部" class="headerlink" title="六、HTTP 首部"></a>六、HTTP 首部</h2><p><code>HTTP</code> 协议的请求和响应报文中必定包含 <code>HTTP</code> 首部，请求报文和响应报文结构如下</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/13/143254-166120.png" alt="image-20200713143253306"></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/15/193833-705059.png" alt="image-20200713143234364"></p><h3 id="6-1-HTTP-首部字段"><a href="#6-1-HTTP-首部字段" class="headerlink" title="6.1 HTTP 首部字段"></a>6.1 HTTP 首部字段</h3><p><code>HTTP</code> 首部字段将定义成<strong>缓存代理</strong>和<strong>非缓存代理</strong>的行为，分成 2 种类型。</p><ol><li><strong>端到端首部：</strong> 分在此类别中的首部会转发给请求 / 响应对应的最终接收目标，且<strong>必须保存在由缓存生成的响应</strong>中，另外规定它<strong>必须被转发</strong>。</li><li><strong>逐跳首部：</strong> 分在此类别中的首部<strong>只对单次转发有效</strong>，会因通过缓存或代理而不再转发。<code>HTTP1.1</code> 和之后版本中，如果要使用 <code>hop-by-hop</code> 首部，需提供 <code>Connection</code> 首部字段。</li></ol><h4 id="6-1-1-通用首部字段"><a href="#6-1-1-通用首部字段" class="headerlink" title="6.1.1 通用首部字段"></a>6.1.1 通用首部字段</h4><p>请求报文和响应报文两方都会使用的首部。</p><table><thead><tr><th><strong>首部字段名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>Cache-Control</code></td><td>控制缓存的行为</td></tr><tr><td><code>Connection</code></td><td>逐跳首部、连接的管理</td></tr><tr><td><code>Date</code></td><td>创建报文的日期时间</td></tr><tr><td><code>Pragma</code></td><td>报文指令</td></tr><tr><td><code>Trailer</code></td><td>报文末端的首部一览</td></tr><tr><td><code>Transfer-Encoding</code></td><td>指定报文主体的传输编码方式</td></tr><tr><td><code>Upgrade</code></td><td>升级为其他协议</td></tr><tr><td><code>Via</code></td><td>代理服务器的相关信息</td></tr><tr><td><code>Warning</code></td><td>错误通知</td></tr></tbody></table><h4 id="6-1-2-请求首部字段"><a href="#6-1-2-请求首部字段" class="headerlink" title="6.1.2 请求首部字段"></a>6.1.2 请求首部字段</h4><p>从客户端向服务器端发送请求报文时使用的首部。<strong>补充了请求的附加内容、客户端信息、响应内容相关优先级</strong>等信息。</p><table><thead><tr><th><strong>首部字段名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Accept</td><td>用户代理可处理的媒体类型</td></tr><tr><td>Accept-Charset</td><td>优先的字符集</td></tr><tr><td>Accept-Encoding</td><td>优先的内容编码</td></tr><tr><td>Accept-Language</td><td>优先的语言（自然语言）</td></tr><tr><td>Authorization</td><td>Web认证信息</td></tr><tr><td>Expect</td><td>期待服务器的特定行为</td></tr><tr><td>From</td><td>用户的电子邮箱地址</td></tr><tr><td>Host</td><td>请求资源所在服务器</td></tr><tr><td>If-Match</td><td>比较实体标记（ETag）</td></tr><tr><td>If-Modified-Since</td><td>比较资源的更新时间</td></tr><tr><td>If-None-Match</td><td>比较实体标记（与 If-Match 相反）</td></tr><tr><td>If-Range</td><td>资源未更新时发送实体 Byte 的范围请求</td></tr><tr><td>If-Unmodified-Since</td><td>比较资源的更新时间（与If-Modified-Since相反）</td></tr><tr><td>Max-Forwards</td><td>最大传输逐跳数</td></tr><tr><td>Proxy-Authorization</td><td>代理服务器要求客户端的认证信息</td></tr><tr><td>Range</td><td>实体的字节范围请求</td></tr><tr><td>Referer</td><td>对请求中 URI 的原始获取方</td></tr><tr><td>TE</td><td>传输编码的优先级</td></tr><tr><td>User-Agent</td><td>HTTP 客户端程序的信息</td></tr></tbody></table><h4 id="6-1-3-响应首部字段"><a href="#6-1-3-响应首部字段" class="headerlink" title="6.1.3 响应首部字段"></a>6.1.3 响应首部字段</h4><p>从服务器端向客户端返回响应报文时使用的首部。<strong>补充了响应的附加内容</strong>，也会要求客户端附加额外的内容信息。</p><table><thead><tr><th><strong>首部字段名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>是否接受字节范围请求</td></tr><tr><td>Age</td><td>推算资源创建经过时间</td></tr><tr><td>ETag</td><td>资源的匹配信息</td></tr><tr><td>Location</td><td>令客户端重定向至指定URI</td></tr><tr><td>Proxy-Authenticate</td><td>代理服务器对客户端的认证信息</td></tr><tr><td>Retry-After</td><td>对再次发起请求的时机要求</td></tr><tr><td>Server</td><td>HTTP服务器的安装信息</td></tr><tr><td>Vary</td><td>代理服务器缓存的管理信息</td></tr><tr><td>WWW-Authenticate</td><td>服务器对客户端的认证信息</td></tr></tbody></table><h4 id="6-1-4-实体首部字段"><a href="#6-1-4-实体首部字段" class="headerlink" title="6.1.4 实体首部字段"></a>6.1.4 实体首部字段</h4><p>针对请求报文和响应报文的实体部分使用的首部。补充了资源内容<strong>更新时间</strong>等与实体有关的信息。</p><table><thead><tr><th><strong>首部字段名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Allow</td><td>资源可支持的HTTP方法</td></tr><tr><td>Content-Encoding</td><td>实体主体适用的编码方式</td></tr><tr><td>Content-Language</td><td>实体主体的自然语言</td></tr><tr><td>Content-Length</td><td>实体主体的大小（单位：字节）</td></tr><tr><td>Content-Location</td><td>替代对应资源的URI</td></tr><tr><td>Content-MD5</td><td>实体主体的报文摘要</td></tr><tr><td>Content-Range</td><td>实体主体的位置范围</td></tr><tr><td>Content-Type</td><td>实体主体的媒体类型</td></tr><tr><td>Expires</td><td>实体主体过期的日期时间</td></tr><tr><td>Last-Modified</td><td>资源的最后修改日期时间</td></tr></tbody></table><h3 id="6-2-HTTP1-1-通用首部字段"><a href="#6-2-HTTP1-1-通用首部字段" class="headerlink" title="6.2 HTTP1.1 通用首部字段"></a>6.2 HTTP1.1 通用首部字段</h3><p>通用首部字段是指请求报文和响应报文都会使用的首部。</p><h4 id="6-2-1-Cache-Control"><a href="#6-2-1-Cache-Control" class="headerlink" title="6.2.1 Cache-Control"></a>6.2.1 Cache-Control</h4><ol><li><strong>no-cache：</strong> 防止从缓存中返回<strong>过期</strong>的资源。客户端请求如果包含 <code>no-cache</code>，表示客户端将不会接收缓存过的响应，缓存服务器必须把客户端请求转发给源服务器。服务器响应中包含 <code>no-cache</code>，那么缓存服务器不能对资源进行缓存，源服务器以后也将不再对缓存服务器请求中提出的资源有效性进行确认，且禁止其对响应资源进行缓存操作。</li><li><strong>no-store：</strong> 缓存不能在本地存储请求或响应的任一部分。</li></ol><p>从字面意思上很容易把 <code>no-cache</code> 误解成为不缓存，但 <strong><code>no-cache</code> 代表不缓存过期的资源</strong>，缓存会向源服务器进行有效期确认后处理资源，<strong><code>no-store</code> 才是真正地不进行缓存</strong>。</p><h4 id="6-2-2-Connection"><a href="#6-2-2-Connection" class="headerlink" title="6.2.2 Connection"></a>6.2.2 Connection</h4><p>1.<strong>控制不再转发给代理的首部字段：</strong> 在客户端发送请求和服务器返回响应内，使用 <code>Connection</code> 首部字段，可控制不再转发给代理的首部字段（即 <code>Hop-by-hop</code> 逐跳首部）。</p><p>2.<strong>管理持久连接：</strong> <code>HTTP1.1</code> 默认<strong>持久</strong>连接，客户端会在持久连接上连续发送请求。服务器端想断开连接时，则设置 <code>Connection</code> 首部字段为 <code>Close</code>。<code>HTTP1.1</code> 之前默认都是非持久连接。为此，如果想在旧版本 HTTP 协议上持续连接，则需设置 <code>Connection</code> 首部字段为 <code>Keep-Alive</code>。</p><h4 id="6-2-3-Date"><a href="#6-2-3-Date" class="headerlink" title="6.2.3 Date"></a>6.2.3 Date</h4><p>表明创建 <code>HTTP</code> 报文的日期和时间。</p><h4 id="6-2-4-Upgrade"><a href="#6-2-4-Upgrade" class="headerlink" title="6.2.4 Upgrade"></a>6.2.4 Upgrade</h4><p>用于检测 <code>HTTP</code> 协议及其他协议是否可使用更高的版本进行通信，其参数值可以用来指定一个完全不同的通信协议。</p><h3 id="6-3-请求首部字段"><a href="#6-3-请求首部字段" class="headerlink" title="6.3 请求首部字段"></a>6.3 请求首部字段</h3><p>从客户端往服务器端发送请求报文中所使用的字段，用于补充<strong>请求的附加信息、客户端信息、对响应内容相关的优先级</strong>等内容。</p><h4 id="6-3-1-Accept"><a href="#6-3-1-Accept" class="headerlink" title="6.3.1 Accept"></a>6.3.1 Accept</h4><p>通知服务器，用户代理能够处理的<strong>媒体类型</strong>及<strong>媒体类型的相对优先级</strong>。可使用 <code>type/subtype</code> 这种形式，一次指定多种媒体类型。</p><pre><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</code></pre><h4 id="6-3-2-Host"><a href="#6-3-2-Host" class="headerlink" title="6.3.2 Host"></a>6.3.2 Host</h4><p>告知服务器，请求的资源所处的互联网主机名和端口号。Host 首部字段在 <code>HTTP1.1</code> 规范内是唯一一个<strong>必须</strong>被包含在请求内的首部字段。</p><h4 id="6-3-3-If-Match"><a href="#6-3-3-If-Match" class="headerlink" title="6.3.3 If-Match"></a>6.3.3 If-Match</h4><p>形如 <code>If-xxx</code> 这种，都可称为条件请求。服务器接收到后，<strong>只有判断指定条件为真时，才会执行请求</strong>。</p><h4 id="6-3-4-If-None-Match"><a href="#6-3-4-If-None-Match" class="headerlink" title="6.3.4 If-None-Match"></a>6.3.4 If-None-Match</h4><p>和 <code>If-Match</code> 相反</p><h4 id="6-3-5-If-Modified-Since"><a href="#6-3-5-If-Modified-Since" class="headerlink" title="6.3.5 If-Modified-Since"></a>6.3.5 If-Modified-Since</h4><p>如果在 <code>If-Modified-Since</code> 字段<strong>指定的日期时间后资源发生了更新</strong>，服务器会接受请求。</p><h4 id="6-3-6-If-Unmodified-Since"><a href="#6-3-6-If-Unmodified-Since" class="headerlink" title="6.3.6 If-Unmodified-Since"></a>6.3.6 If-Unmodified-Since</h4><p>和 <code>If-Modified-Since</code> 的作用相反</p><h4 id="6-3-7-If-Range"><a href="#6-3-7-If-Range" class="headerlink" title="6.3.7 If-Range"></a>6.3.7 If-Range</h4><p>字段如果跟 <code>ETag</code> 值或更新的日期时间一致，那么就作为<strong>范围请求</strong>处理。反之，则返回全体资源。</p><h3 id="6-4-响应首部字段"><a href="#6-4-响应首部字段" class="headerlink" title="6.4 响应首部字段"></a>6.4 响应首部字段</h3><p>由服务器端向客户端<strong>返回响应报文中所使用的字段</strong>，用于<strong>补充响应的附加信息</strong>、<strong>服务器信息</strong>，以及对客户端的附加要求等信息。</p><h4 id="6-4-1-ETag"><a href="#6-4-1-ETag" class="headerlink" title="6.4.1 ETag"></a>6.4.1 ETag</h4><p>实体标识，将资源以字符串形式做唯一性标识的方式。服务器会为每份资源分配对应的 <code>ETag</code> 值。当资源更新时，<code>ETag</code> 值也需要更新。</p><p>若在下载过程中出现连接中断、再连接的情况，都会依照 <code>ETag</code> 值来指定资源。</p><h3 id="6-5-实体首部字段"><a href="#6-5-实体首部字段" class="headerlink" title="6.5 实体首部字段"></a>6.5 实体首部字段</h3><p>包含在请求报文和响应报文中的<strong>实体部分所使用的首部</strong>，用于补充内容的更新时间等与实体相关的信息。</p><h4 id="6-5-1-Allow"><a href="#6-5-1-Allow" class="headerlink" title="6.5.1 Allow"></a>6.5.1 Allow</h4><p>通知客户端能够支持的所有 <code>HTTP</code> 方法。当服务器接收到不支持的 <code>HTTP</code> 方法时，会以状态码 <code>405 Method Not Allowed</code> 作为响应返回。与此同时，还会把所有能支持的 <code>HTTP</code> 方法写入首部字段 <code>Allow</code> 后返回。</p><h4 id="6-5-2-Content-Encoding"><a href="#6-5-2-Content-Encoding" class="headerlink" title="6.5.2 Content-Encoding"></a>6.5.2 Content-Encoding</h4><p>告知客户端服务器对实体的主体部分选用的<strong>内容编码</strong>方式。内容编码是指在不丢失实体信息的前提下所进行的压缩。</p><p>主要有：<code>gzip</code>、<code>compress</code>、<code>deflate</code>、<code>identity</code></p><h4 id="6-5-3-Content-Type"><a href="#6-5-3-Content-Type" class="headerlink" title="6.5.3 Content-Type"></a>6.5.3 Content-Type</h4><p>说明了实体主体内对象的<strong>媒体类型</strong>，用 type/subtype 形式赋值。</p><h4 id="6-5-4-Expires"><a href="#6-5-4-Expires" class="headerlink" title="6.5.4 Expires"></a>6.5.4 Expires</h4><p><code>Expires</code> 会将<strong>资源失效的日期告知客户端</strong>。缓存服务器在收到有 <code>Expires</code> 的响应后，会以缓存来应答请求，在 <code>Expires</code> 字段值指定的时间之前，响应的副本会一直被保存。当超过指定的时间后，缓存服务器在请求发送过来时，会转向源服务器请求资源。</p><h4 id="6-5-5-Last-Modified"><a href="#6-5-5-Last-Modified" class="headerlink" title="6.5.5 Last-Modified"></a>6.5.5 Last-Modified</h4><p>包含源头服务器认定的<strong>资源做出修改的日期及时间</strong>。</p><h3 id="6-6-为-Cookie-服务的首部字段"><a href="#6-6-为-Cookie-服务的首部字段" class="headerlink" title="6.6 为 Cookie 服务的首部字段"></a>6.6 为 Cookie 服务的首部字段</h3><table><thead><tr><th><strong>首部字段名</strong></th><th><strong>说明</strong></th><th><strong>首部类型</strong></th></tr></thead><tbody><tr><td>Set-Cookie</td><td><strong>开始状态管理</strong>所使用的Cookie信息</td><td>响应首部字段</td></tr><tr><td>Cookie</td><td><strong>服务器接收到</strong>的Cookie信息</td><td>请求首部字段</td></tr></tbody></table><h3 id="6-7-其他首部字段"><a href="#6-7-其他首部字段" class="headerlink" title="6.7 其他首部字段"></a>6.7 其他首部字段</h3><h4 id="6-7-1-X-XSS-Protection"><a href="#6-7-1-X-XSS-Protection" class="headerlink" title="6.7.1 X-XSS-Protection"></a>6.7.1 X-XSS-Protection</h4><p>是针对跨站脚本攻击（XSS）的一种对策，用于控制浏览器 <strong>XSS 防护机制</strong>的开关，可指定的字段值如下</p><ul><li>0：将 <code>XSS</code> 过滤设置成无效状态</li><li>1：将 <code>XSS</code> 过滤设置成有效状态</li></ul><h2 id="七、-HTTPS"><a href="#七、-HTTPS" class="headerlink" title="七、  HTTPS"></a>七、  HTTPS</h2><blockquote><p><code>HTTP</code> 协议中有可能存在信息窃听或身份伪装等安全问题，怎么解决呢？<code>HTTPS</code> 了解一下</p></blockquote><h3 id="7-1-HTTP-的缺点是啥？"><a href="#7-1-HTTP-的缺点是啥？" class="headerlink" title="7.1 HTTP 的缺点是啥？"></a>7.1 HTTP 的缺点是啥？</h3><ul><li>通信使用<strong>明文</strong>（不加密），内容可能会被<strong>窃听</strong></li><li><strong>不验证通信方的身份</strong>，因此有可能遭遇<strong>伪装</strong></li><li>无法证明报文的<strong>完整性</strong>，所以有可能已遭<strong>篡改</strong></li></ul><h3 id="7-2-HTTPS-是啥-？"><a href="#7-2-HTTPS-是啥-？" class="headerlink" title="7.2 HTTPS 是啥 ？"></a>7.2 HTTPS 是啥 ？</h3><blockquote><p>简单来说，就是：HTTP+ 加密 + 认证 + 完整性保护</p></blockquote><p>把添加了加密及认证机制的 <code>HTTP</code> 称为 <code>HTTPS</code></p><p><code>HTTPS</code> <strong>并非</strong>是应用层的一种<strong>新协议</strong>，只是 <code>HTTP</code> 通信接口部分用 <code>SSL</code>（Secure Socket Layer）和 <code>TLS</code>（Transport Layer Security）协议代替而已。</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/14/132749-422573.png" alt="image-20200714132749462"></p><p><code>HTTPS</code> 采用<strong>共享密钥加密和公开密钥加密两者并用的混合</strong>加密机制。若密钥能够实现安全交换，那么有可能会考虑仅使用公开密钥加密来通信。但是公开密钥加密与共享密钥加密相比，其处理速度要慢。</p><p>所以取长补短，在<strong>交换密钥环节</strong>使用<strong>公开密钥</strong>加密方式，之后的<strong>建立通信交换</strong>报文阶段则使用<strong>共享密钥</strong>加密方式。</p><p>数字证书认证机构（CA，Certificate Authority）和其相关机关颁发的<strong>公开密钥证书</strong>就是认证的可以信赖的公开密钥，服务器会将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行公开密钥加密方式通信。公钥证书也可叫做数字证书或直接称为证书。</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/14/133636-831186.png" alt="image-20200714133015217"></p><h4 id="7-2-1-SSL-速度慢吗"><a href="#7-2-1-SSL-速度慢吗" class="headerlink" title="7.2.1 SSL 速度慢吗"></a>7.2.1 <code>SSL</code> 速度慢吗</h4><p>当使用 <code>SSL</code> 时，它的处理速度会变慢。它慢分两种：</p><ul><li>一种是指<strong>通信慢</strong></li></ul><blockquote><p>还必须进行 <code>SSL</code> 通信,所以慢</p></blockquote><ul><li>另一种是指由于<strong>大量消耗 <code>CPU</code> 及内存等资源</strong>，导致<strong>处理速度变慢</strong>。</li></ul><blockquote><p>服务器和客户端都需要进行加解密处理</p></blockquote><p>针对速度变慢这一问题，并没有根本性的解决方案，一般会使用 <code>SSL</code> 加速器这种（专用服务器）硬件。</p><h4 id="7-2-2-为啥没使用-HTTPS-？"><a href="#7-2-2-为啥没使用-HTTPS-？" class="headerlink" title="7.2.2 为啥没使用 HTTPS ？"></a>7.2.2 为啥没使用 HTTPS ？</h4><ul><li>加密通信会消耗更多的 <code>CPU</code> 及内存资源</li><li>如果是非敏感信息则使用 <code>HTTP</code> 通信，只有在包含个人信息等敏感数据时，才利用 <code>HTTPS</code> 加密通信。可以仅在那些需要信息隐藏时才加密，以<strong>节约资源</strong>。</li><li>节约购买证书的开销</li></ul><h2 id="八、确认访问用户身份的认证"><a href="#八、确认访问用户身份的认证" class="headerlink" title="八、确认访问用户身份的认证"></a>八、确认访问用户身份的认证</h2><p>一些页面只想让特定的人浏览，这就引入了认证功能。</p><p><code>HTTP1.1</code> 常用的认证方式：</p><ol><li><code>BASIC</code> 认证（基本认证）</li><li><code>DIGEST</code> 认证（摘要认证）</li><li><code>SSL</code> 客户端认证</li><li><code>FormBase</code> 认证（基于表单认证）</li></ol><h2 id="九、基于-HTTP-的功能追加协议"><a href="#九、基于-HTTP-的功能追加协议" class="headerlink" title="九、基于 HTTP 的功能追加协议"></a>九、基于 HTTP 的功能追加协议</h2><h3 id="9-1-WebSocket"><a href="#9-1-WebSocket" class="headerlink" title="9.1 WebSocket"></a>9.1 WebSocket</h3><p>连接的发起方仍是客户端，一旦确立 <code>WebSocket</code> 通信连接，<strong>服务器与客户端任意一方都可向对方发送报文</strong>。</p><ol><li><strong>推送功能：</strong> 支持由服务器向客户端推送数据的推送功能。这样，服务器可直接发送数据，而不必等待客户端的请求。</li><li><strong>减少通信量：</strong> 和 <code>HTTP</code> 相比，不但每次连接时的开销减少，且由于<strong>首部信息很小</strong>，通信量也减少了。</li></ol><p>通信的建立：</p><p>1.首先使用 <code>HTTP</code> 的 <code>Upgrade</code> 首部字段，告知服务器通信协议发生改变，进行握手。</p><pre><code>GET /chat HTTP/1.1Host: server.example.comUpgrade: websocketConnection: UpgradeSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==Origin: http://example.comSec-WebSocket-Protocol: chat, superchatSec-WebSocket-Version: 13</code></pre><p><code>Sec-WebSocket-Key</code> 字段内记录着握手过程中必不可少的键值。<code>Sec-WebSocket-Protocol</code> 字段内记录使用的子协议。</p><p>2.之前的请求将会被返回 101 Switching Protocols 响应</p><pre><code>HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=Sec-WebSocket-Protocol: chat</code></pre><p>成功握手建立 <code>WebSocket</code> 连接之后，通信时<strong>不再使用 <code>HTTP</code> 的数据帧</strong>，而<strong>采用 <code>WebSocket</code> 独立的数据帧</strong>。</p><p><img src="https://imgkr.cn-bj.ufileos.com/78827d8a-2ae5-438d-a6cd-618309321d2c.png" alt></p><h3 id="9-2-HTTP-2-0"><a href="#9-2-HTTP-2-0" class="headerlink" title="9.2 HTTP/2.0"></a>9.2 HTTP/2.0</h3><p>HTTP/2.0 的目标是改善用户在使用 Web 时的<strong>速度体验</strong>。特点：</p><ol><li>HTTP/2.0 采用<strong>二进制格式</strong>而非文本格式</li><li>HTTP/2.0 是完全<strong>多路复用</strong>的，而非有序并阻塞的——只需一个连接即可实现并行</li><li>使用<strong>报头压缩</strong>，HTTP/2.0 降低了开销</li><li>HTTP/2.0 让服务器可以将响应<strong>主动“推送”</strong>到客户端缓存中</li></ol><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>『图解 HTTP』</li><li><a href="https://juejin.im/post/5c938812e51d4539fc2d61a5" target="_blank" rel="noopener">《图解 HTTP》 阅读摘要</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图解 HTTP </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> HTTP </tag>
            
            <tag> 阅读笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>午间邂逅 | post 和 get 的兄弟情深</title>
      <link href="/2020/07/10/wu-jian-xie-hou-post-he-get-de-xiong-di-qing-shen/"/>
      <url>/2020/07/10/wu-jian-xie-hou-post-he-get-de-xiong-di-qing-shen/</url>
      
        <content type="html"><![CDATA[<h1 id="午间邂逅-post-和-get-的兄弟情深"><a href="#午间邂逅-post-和-get-的兄弟情深" class="headerlink" title="午间邂逅 | post 和 get 的兄弟情深"></a>午间邂逅 | post 和 get 的兄弟情深</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的 <code>Github</code> 个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的 Github 博客</a></p></blockquote><h2 id="学习导图"><a href="#学习导图" class="headerlink" title="学习导图:"></a>学习导图:</h2><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/10/153454-552296.png" alt="image-20200710142453734"></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/10/143105-625973.png" alt="image-20200710143104928"></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202007/10/152611-197660.png" alt="image-20200710143516991"></p><h2 id="一、面试情景模拟"><a href="#一、面试情景模拟" class="headerlink" title="一、面试情景模拟"></a>一、面试情景模拟</h2><p>面试官：『请你说下 <code>post</code> 和 <code>get</code> 的区别！』</p><p>看到这里，很多人禁不住内心的喜悦，嘴角微微上扬，然后强装镇定，拿出背好的拿手绝活，轻轻松松给出了「标准答案」：</p><ul><li><code>GET</code> 在浏览器回退时是无害的，而 <code>POST</code> 会再次提交请求。</li><li><code>GET</code> 产生的 <code>URL</code> 地址可以被书签收藏，而 <code>POST</code> 不可以。</li><li><code>GET</code> 请求会被浏览器主动 <code>cache</code>，而 <code>POST</code> 不会，除非手动设置。</li><li><code>GET</code> 请求只能进行 <code>url</code> 编码，而 <code>POST</code> 支持多种编码方式。</li><li><code>GET</code> 请求参数会被完整保留在浏览器历史记录里，而 <code>POST</code> 中的参数不会被保留。</li><li><code>GET</code> 请求在 <code>URL</code> 中传送的参数是有长度限制的，而 <code>POST</code> 没有。</li><li>对参数的数据类型，<code>GET</code> 只接受 <code>ASCII</code> 字符，而 <code>POST</code> 没有限制。</li><li><code>GET</code> 比 <code>POST</code> 更不安全，因为参数直接暴露在 <code>URL</code> 上，所以不能用来传递敏感信息。</li><li><code>GET</code> 参数通过 <code>URL</code> 传递，POST 放在 <code>Request body</code> 中</li></ul><p>这时候，面试官邪魅一笑，他说：『GET 和 POST 本质上没有区别。』怎么办有点慌，是不是要回家等消息了。</p><p>别慌，让我们扒下 <code>GET</code> 和 <code>POST</code> 的外衣，坦诚相见吧！</p><p>PS：终于考完试了，摸鱼摸鱼！</p><p><img src="https://s1.ax1x.com/2020/07/10/UK9tfS.jpg" alt></p><h2 id="二、GET-和-POST-是什么？"><a href="#二、GET-和-POST-是什么？" class="headerlink" title="二、GET 和 POST 是什么？"></a>二、GET 和 POST 是什么？</h2><ul><li><strong><code>GET</code> 获取资源：</strong> 用来请求访问<strong>已被 <code>URI</code> 识别的资源</strong>，指定的资源经服务器端解析后返回响应内容</li><li><strong><code>POST</code> 传输实体主体：</strong> 用来传输实体的主体 虽然用 <code>GET</code> 方法也可以<strong>传输实体的主体</strong>，但一般不用 <code>GET</code> 方法进行传输，而是用 <code>POST</code> 方法</li></ul><p>总的来说，他们是「<code>HTTP</code> 协议中的两种发送请求的方法」</p><h2 id="三、HTTP-是啥？"><a href="#三、HTTP-是啥？" class="headerlink" title="三、HTTP 是啥？"></a>三、HTTP 是啥？</h2><p><code>HTTP</code> 是基于 <code>TCP/IP</code> 的关于数据如何在万维网中如何通信的协议。</p><p><code>HTTP</code> 的底层是 <code>TCP/IP</code>。<strong>所以 <code>GET</code> 和 <code>POST</code> 的底层也是 <code>TCP/IP</code></strong>。<code>GET</code> 和 <code>POST</code> 能做的事情是一样一样的。你要给 <code>GET</code> 加上 <code>request</code> body，给 <code>POST</code> 带上 <code>url</code> 参数，技术上是完全行的通的。</p><h2 id="四、你能理清-HTTP，-TCP-IP，GET-POST-三者的关系吗？"><a href="#四、你能理清-HTTP，-TCP-IP，GET-POST-三者的关系吗？" class="headerlink" title="四、你能理清 HTTP， TCP/IP，GET/POST 三者的关系吗？"></a>四、你能理清 HTTP， TCP/IP，GET/POST 三者的关系吗？</h2><p>首先，我们来打几个比方</p><p>TCP——汽车</p><p>HTTP——交通规则</p><p><code>GET, POST</code>等方法——汽车的标签（生活中类比，标记为警车，救护车，消防车）</p><blockquote><ul><li>当执行 <code>GET</code> 请求的时候，要给汽车贴上 <code>GET</code> 的标签（设置 method 为 GET），而且要求把传送的数据放在车顶上（<code>url</code> 中）以方便记录</li><li>如果是 <code>POST</code> 请求，就要在车上贴上 <code>POST</code> 的标签，并把货物放在车厢里</li><li>当然，你也可以在 <code>GET</code> 的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在 <code>POST</code> 的时候在车顶上也放一些数据，让人觉得傻乎乎的。</li></ul></blockquote><p>综上，<code>HTTP</code> 只是个行为准则，而 <code>TCP</code> 才是 <code>GET</code> 和 <code>POST</code> 怎么实现的根本</p><h2 id="五、参数大小的限制从何而来"><a href="#五、参数大小的限制从何而来" class="headerlink" title="五、参数大小的限制从何而来"></a>五、参数大小的限制从何而来</h2><blockquote><p>先说结论——「浏览器 / 服务器的限制」</p></blockquote><p>首先，我们来打几个比方</p><p>不同的浏览器和服务器——运输公司</p><p> 虽然理论上，你可以在车顶上无限的堆货物（url 中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）<strong>浏览器</strong>通常都会限制 url 长度在 <strong>2K</strong> 个字节，而（大多数）<strong>服务器</strong>最多处理 <strong>64K</strong> 大小的 url。超过的部分，恕不处理。如果你用 GET 服务，在 request body 偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然 GET 可以带 request body，也不能保证一定能被接收到哦。</p><h2 id="六、GET-和-POST-的区别从何而来？"><a href="#六、GET-和-POST-的区别从何而来？" class="headerlink" title="六、GET 和 POST 的区别从何而来？"></a>六、GET 和 POST 的区别从何而来？</h2><ul><li><strong><code>HTTP</code> 的规定</strong></li><li><strong>浏览器 / 服务器的限制</strong></li></ul><h2 id="七、GET-和-POST-的重大区别"><a href="#七、GET-和-POST-的重大区别" class="headerlink" title="七、GET 和 POST 的重大区别"></a>七、GET 和 POST 的重大区别</h2><h3 id="7-1-重大区别是什么？"><a href="#7-1-重大区别是什么？" class="headerlink" title="7.1 重大区别是什么？"></a>7.1 重大区别是什么？</h3><p>简单来说：</p><ul><li><code>GET</code> 产生一个 <code>TCP</code> 数据包</li><li><code>POST</code> 产生两个 <code>TCP</code> 数据包</li></ul><p>详细来说：</p><ul><li>对于 <code>GET</code> 方式的请求，浏览器会把 <code>http header 和 data</code> 一并发送出去，服务器响应 <code>200</code>（返回数据）</li><li>对于 <code>POST</code>，浏览器先发送 <code>header</code>，服务器响应 <code>100 continue</code>，浏览器再发送 <code>data</code>，服务器响应 <code>200</code> ok（返回数据）</li></ul><blockquote><p>打个比方：</p><ul><li><p><code>GET</code> 只需要汽车跑一趟就把货送到了</p></li><li><p>而 <code>POST</code> 得跑两趟，第一趟，先去和服务器打个招呼 “嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去</p></li></ul></blockquote><h3 id="7-2-既然-看起来-GET-比-POST-有效，为啥不直接用-GET-来替换-POST-？"><a href="#7-2-既然-看起来-GET-比-POST-有效，为啥不直接用-GET-来替换-POST-？" class="headerlink" title="7.2 既然 看起来 GET 比 POST 有效，为啥不直接用 GET 来替换 POST ？"></a>7.2 既然 看起来 <code>GET</code> 比 <code>POST</code> 有效，为啥不直接用 <code>GET</code> 来替换 <code>POST</code> ？</h3><ul><li><code>GET</code> 与 <code>POST</code> 都有自己的语义，不能随便混用</li><li>在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视</li><li>而在网络环境差的情况下，两次包的 <code>TCP</code> 在验证数据包完整性上，有非常大的优点</li><li>并不是所有浏览器都会在 <code>POST</code> 中发送两次包，<code>Firefox</code> 就只发送一次</li></ul><p><img src="https://s1.ax1x.com/2020/07/10/UKUiw9.png" alt="UKUiw9.png"></p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&mid=100000054&idx=1&sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd" target="_blank" rel="noopener">99%的人都理解错了HTTP中GET与POST的区别</a></li><li>『图解 HTTP』</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应用层 </tag>
            
            <tag> 图解HTTP </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练手项目 | 玩 Android</title>
      <link href="/2020/06/24/wan-android-ruan-jian-she-ji-zong-jie/"/>
      <url>/2020/06/24/wan-android-ruan-jian-she-ji-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="玩-Android-软件设计总结"><a href="#玩-Android-软件设计总结" class="headerlink" title="玩 Android 软件设计总结"></a>玩 Android 软件设计总结</h1><blockquote><p>前言：</p><ul><li>每做一个东西，都要进行总结归纳，以便得以吸收最大的效果，让自己的努力发挥出最大的价值</li><li>总结一个东西，可以锻炼你的思维，增长你对知识的理解，有助于你吃透整个知识体系</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202006/23/110556-928480.png" alt="image-20200623110554472"></p><h2 id="一-完成的功能"><a href="#一-完成的功能" class="headerlink" title="一.完成的功能"></a>一.完成的功能</h2><blockquote><p>项目地址：<a href="https://github.com/LoveLifeEveryday/PlayXAndroid" target="_blank" rel="noopener">PlayXAndroid</a></p></blockquote><ul><li>登陆</li><li>注册</li><li>退出登陆</li><li>扫描二维码</li><li>搜索</li></ul><blockquote><ul><li>历史搜索</li><li>搜索热门</li></ul></blockquote><ul><li>首页文章的展示</li></ul><blockquote><ul><li>下拉刷新</li><li>上拉加载更多</li><li>收藏</li></ul></blockquote><ul><li><p>轮播图</p></li><li><p>问答</p></li><li><p>体系数据的展示</p></li><li><p>导航列表的展示</p></li><li><p>我的界面</p></li></ul><blockquote><ul><li>积分展示 （运用了滚动式的积分数字展示动画）</li><li>积分排行榜</li><li>我的分享</li><li>我的收藏</li><li>开源项目</li><li>关于作者</li><li>系统设置</li></ul></blockquote><h2 id="二-项目的截图"><a href="#二-项目的截图" class="headerlink" title="二.项目的截图"></a>二.项目的截图</h2><blockquote><ul><li><p>项目界面和功能自参考 <a href="https://github.com/goweii/WanAndroid" target="_blank" rel="noopener">goweii/WanAndroid</a> 和 <a href="https://github.com/yechaoa/wanandroid_java" target="_blank" rel="noopener">yechaoa/wanandroid_java</a></p></li><li><p>接口用的是：<a href="https://www.wanandroid.com/blog/show/2" target="_blank" rel="noopener">https://www.wanandroid.com/blog/show/2</a></p></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202006/22/225908-822621.png" alt="image-20200622225906627"></p><p> <img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202006/23/103403-539310.png" alt="image-20200623103300212"></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202006/23/103006-886891.png" alt="image-20200622230125667"></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202006/22/230528-255458.png" alt="image-20200622230525592"></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202006/22/230922-773426.png" alt="image-20200622230918800"></p><h2 id="三-项目的值得学习的地方"><a href="#三-项目的值得学习的地方" class="headerlink" title="三.项目的值得学习的地方"></a>三.项目的值得学习的地方</h2><h3 id="3-1-使用自己开发的-MVP-框架"><a href="#3-1-使用自己开发的-MVP-框架" class="headerlink" title="3.1 使用自己开发的 MVP 框架"></a>3.1 使用自己开发的 <code>MVP</code> 框架</h3><h3 id="3-2-String-类放到-string-xml-中"><a href="#3-2-String-类放到-string-xml-中" class="headerlink" title="3.2 String 类放到 string.xml 中"></a>3.2 <code>String</code> 类放到 <code>string.xml</code> 中</h3><blockquote><p>在工具类中写了一个获取字符串的方法</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-3-BRVAH-的简单使用"><a href="#3-3-BRVAH-的简单使用" class="headerlink" title="3.3 BRVAH 的简单使用"></a>3.3 <code>BRVAH</code> 的简单使用</h3><ul><li>继承的时候需要指定泛型</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenSourceAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseQuickAdapter</span><span class="token operator">&lt;</span>OpenEntity<span class="token punctuation">,</span> BaseViewHolder<span class="token operator">></span>    <span class="token comment" spellcheck="true">//这里的 OpenEntity 是必须特殊指定的</span></code></pre><ul><li><code>setNewData</code> 后不用 <code>notify</code> ，因为 <code>setNewData</code> 内部已经自动 <code>notify</code> 了</li><li>如果有一些需要差异化处理的，可以用 <code>setType</code> 指定</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseQuickAdapter</span><span class="token operator">&lt;</span>Article<span class="token punctuation">.</span>DataDetailBean<span class="token punctuation">,</span> BaseViewHolder<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mTypeIsCollect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> typeIsCollect<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTypeIsCollect <span class="token operator">=</span> typeIsCollect<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> BaseViewHolder helper<span class="token punctuation">,</span> Article<span class="token punctuation">.</span>DataDetailBean item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是收藏列表的话，不会返回 shareUser 字段，因此直接设为匿名</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mTypeIsCollect<span class="token punctuation">)</span> <span class="token punctuation">{</span>                helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_article_author<span class="token punctuation">,</span> XUtil<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>anonymity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_article_author<span class="token punctuation">,</span> item<span class="token punctuation">.</span>shareUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><ul><li>如果实现收藏功能的话，并且没有直接改变 <code>Adapter</code>，只是改变 <code>Adapter</code> 中的 <code>List</code>，记得 <code>noptify</code></li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showCollectSuccess</span><span class="token punctuation">(</span>String successMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mArticleList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mPosition<span class="token punctuation">)</span><span class="token punctuation">.</span>collect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        mArticleAdapter<span class="token punctuation">.</span><span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-4-WebView-的使用"><a href="#3-4-WebView-的使用" class="headerlink" title="3.4 WebView 的使用"></a>3.4 <code>WebView</code> 的使用</h3><ul><li>记得设置 <code>WebViewClient</code> ，以免跳转出浏览器</li><li>记得针对 <code>HTTP</code> 进行特殊化处理，否则不能访问</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-config</span> <span class="token attr-name">cleartextTrafficPermitted</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"> &lt;application        android:name=".app.App"        android:allowBackup="true"        android:icon="@mipmap/ic_launcher"        android:label="@string/app_name"              <span class="token comment" spellcheck="true">&lt;!--这句非常重要，指定访问规则--></span>        android:networkSecurityConfig="@xml/network_security_config"/></code></pre><ul><li>设置加载进度条的 <code>WebView</code> </li></ul><h3 id="3-5-RecyclerView-滑动冲突的处理"><a href="#3-5-RecyclerView-滑动冲突的处理" class="headerlink" title="3.5 RecyclerView 滑动冲突的处理"></a>3.5 <code>RecyclerView</code> 滑动冲突的处理</h3><ul><li><code>RecyclerView</code> ，<code>Banner</code> ，下拉刷新，<code>ScrollView</code> 的冲突处理</li></ul><p>如果是给 <code>RecyclerView</code>  头部添加 <code>Banner</code> 的话，建议使用 <code>addHeader</code> 的形式添加</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到 Banner</span>        View mViewBanner <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_banner<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mBannerHome <span class="token operator">=</span> mViewBanner<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>banner_home<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateView</span><span class="token punctuation">(</span>inflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">{</span>     mArticleAdapter<span class="token punctuation">.</span><span class="token function">addHeaderView</span><span class="token punctuation">(</span>mBannerHome<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>解决 <code>SwipeRefreshLayout</code> 嵌套 <code>banner</code> 滑动冲突方式：自定义下拉刷新控件</p><blockquote><p>其实也有另外一种实现方案，就是用 <code>BRVAN</code> 的方式</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 许朋友爱玩 * @Date 2020/6/3 20:39 * @Github https://github.com/LoveLifeEveryday * @JueJin https://juejin.im/user/5e429bbc5188254967066d1b/posts * @Description 下拉刷新控件，修复了滑动冲突 * 思路： * 1. 因为下拉刷新，只有纵向滑动的时候才有效，只需要判断此时是纵向滑动还是横向滑动就可以了。 * 2. 纵向滑动就拦截事件，横向滑动不拦截。 * 3. 怎么判断是纵向滑动还是横向滑动，只要判断Y轴的移动距离大于X轴的移动距离那么就判定为纵向滑动就行了 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperSwipeRefreshLayout</span> <span class="token keyword">extends</span> <span class="token class-name">SwipeRefreshLayout</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> startX<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> startY<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 记录 viewpager 是否拖拽的标记     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mIsVpDragger<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mTouchSlop<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SuperSwipeRefreshLayout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SuperSwipeRefreshLayout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        mTouchSlop <span class="token operator">=</span> ViewConfiguration<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScaledTouchSlop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> action <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                startX <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                startY <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 初始化标记</span>                mIsVpDragger <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mIsVpDragger<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 获取当前手指位置</span>                <span class="token keyword">float</span> endY <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> endX <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> distanceX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> startX<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> distanceY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> startY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>distanceX <span class="token operator">></span> mTouchSlop <span class="token operator">&amp;&amp;</span> distanceX <span class="token operator">></span> distanceY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mIsVpDragger <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token operator">:</span>                mIsVpDragger <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果是 Y 轴位移大于 X 轴，事件交给 swipeRefreshLayout 处理</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>扩展：</p><ul><li><a href="https://blog.csdn.net/yechaoa/article/details/95056882" target="_blank" rel="noopener">SwipeRefreshLayout 嵌套 RecyclerView滑动冲突</a></li><li><a href="https://blog.csdn.net/yechaoa/article/details/86609380" target="_blank" rel="noopener">SwipeRefreshLayout 嵌套ScrollView 滑动冲突</a></li><li><a href="https://blog.csdn.net/yechaoa/article/details/86529221" target="_blank" rel="noopener">Android ScrollView嵌套RecyclerView滑动卡顿</a></li></ul></blockquote><h3 id="3-6-刷新，加载更多的流程"><a href="#3-6-刷新，加载更多的流程" class="headerlink" title="3.6 刷新，加载更多的流程"></a>3.6 刷新，加载更多的流程</h3><h3 id="3-7-如何改变-Activity-跳转的效果"><a href="#3-7-如何改变-Activity-跳转的效果" class="headerlink" title="3.7 如何改变 Activity 跳转的效果"></a>3.7 如何改变 <code>Activity</code> 跳转的效果</h3><ul><li>先定义好进入和退出 <code>Activity</code> 的方法 </li></ul><blockquote><p>下面的 <code>xml</code> 仅仅是从下向上弹出的效果，如果想要实现其他效果的话，可以网上找下</p></blockquote><pre class=" language-xml"><code class="language-xml">//bottom_in.xml<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>interpolator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:anim/decelerate_interpolator<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shareInterpolator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span>        <span class="token attr-name"><span class="token namespace">android:</span>fromXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0%<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromYDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0%<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toYDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml">//bottom_silent<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alpha</span>        <span class="token attr-name"><span class="token namespace">android:</span>fromAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span>        <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromYDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toYDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span></code></pre><ul><li>在需要跳转到的 <code>Activity</code> 的 <code>onCreate</code> 和 <code>finish</code> 方法中， <code>overridePendingTransition</code> </li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">overridePendingTransition</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>bottom_in<span class="token punctuation">,</span> R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>bottom_silent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">overridePendingTransition</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>bottom_silent<span class="token punctuation">,</span> R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>bottom_out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-8-Fragment-的基本使用"><a href="#3-8-Fragment-的基本使用" class="headerlink" title="3.8 Fragment 的基本使用"></a>3.8 <code>Fragment</code> 的基本使用</h3><ul><li>基本的显示和隐藏</li></ul><pre class=" language-java"><code class="language-java">mFragmentManager <span class="token operator">=</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FragmentTransaction transaction <span class="token operator">=</span> mFragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化搜索历史的 Fragment</span>Fragment searchHistoryFragment <span class="token operator">=</span> mFragmentManager<span class="token punctuation">.</span><span class="token function">findFragmentByTag</span><span class="token punctuation">(</span>SearchHistoryFragment<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>searchHistoryFragment <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mSearchHistoryFragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchHistoryFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fl<span class="token punctuation">,</span> mSearchHistoryFragment<span class="token punctuation">,</span> SearchHistoryFragment<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    mSearchHistoryFragment <span class="token operator">=</span> <span class="token punctuation">(</span>SearchHistoryFragment<span class="token punctuation">)</span> searchHistoryFragment<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 初始化搜索结果的 Fragment</span>Fragment searchResultFragment <span class="token operator">=</span> mFragmentManager<span class="token punctuation">.</span><span class="token function">findFragmentByTag</span><span class="token punctuation">(</span>SearchResultFragment<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>searchResultFragment <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mSearchResultFragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchResultFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fl<span class="token punctuation">,</span> mSearchResultFragment<span class="token punctuation">,</span> SearchResultFragment<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    mSearchResultFragment <span class="token operator">=</span> <span class="token punctuation">(</span>SearchResultFragment<span class="token punctuation">)</span> searchResultFragment<span class="token punctuation">;</span><span class="token punctuation">}</span>transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>mSearchHistoryFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>mSearchResultFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>和 <code>ViewPager</code> 协同使用</li></ul><pre class=" language-java"><code class="language-java">CommonViewPagerAdapter commonViewPagerAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonViewPagerAdapter</span><span class="token punctuation">(</span><span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> titleList<span class="token punctuation">)</span><span class="token punctuation">;</span>commonViewPagerAdapter<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>commonViewPagerAdapter<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegisterFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mVpLogin<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>commonViewPagerAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>和 <code>TabLayout</code> , <code>ViewPager</code> 协同使用</li></ul><pre class=" language-java"><code class="language-java">mTlTreeGrandson<span class="token punctuation">.</span><span class="token function">setupWithViewPager</span><span class="token punctuation">(</span>mVpTreeGrandson<span class="token punctuation">)</span><span class="token punctuation">;</span>CommonViewPagerAdapter commonViewPagerAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonViewPagerAdapter</span><span class="token punctuation">(</span><span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> titles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">or</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>       commonViewPagerAdapter<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span>TreeGrandsonFragment<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>VpTreeGrandson<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>commonViewPagerAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>VpTreeGrandson<span class="token punctuation">.</span><span class="token function">setCurrentItem</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>未完待续……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练手项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你封装自己的『权限管理』框架</title>
      <link href="/2020/04/24/dai-ni-feng-zhuang-zi-ji-de-quan-xian-guan-li-kuang-jia/"/>
      <url>/2020/04/24/dai-ni-feng-zhuang-zi-ji-de-quan-xian-guan-li-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="带你封装自己的『权限管理』框架"><a href="#带你封装自己的『权限管理』框架" class="headerlink" title="带你封装自己的『权限管理』框架"></a>带你封装自己的『权限管理』框架</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的 Github 个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的 Github 博客</a></p></blockquote><h2 id="本篇文章需要已经具备的知识："><a href="#本篇文章需要已经具备的知识：" class="headerlink" title="本篇文章需要已经具备的知识："></a>本篇文章需要已经具备的知识：</h2><ul><li><code>Git</code> 与 <code>Github</code> 的基本使用</li><li><code>Kotlin</code> 语法基础</li><li><code>Android</code> 开发基础</li></ul><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li>如何封装自己的权限框架</li><li>将开源库发布到 <code>JitPack</code> 仓库的一整套流程</li></ul><h2 id="一-为什么要封装这套框架"><a href="#一-为什么要封装这套框架" class="headerlink" title="一.为什么要封装这套框架"></a>一.为什么要封装这套框架</h2><p>我们在日常开发中，经常需要用到申请运行时权限的知识，于是，经常就写了下面的一大串代码</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>    <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//申请 CALL_PHONE 权限</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ContextCompat<span class="token punctuation">.</span><span class="token function">checkSelfPermission</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">,</span>            Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE        <span class="token punctuation">)</span> <span class="token operator">!=</span> PackageManager<span class="token punctuation">.</span>PERMISSION_GRANTED    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        ActivityCompat<span class="token punctuation">.</span><span class="token function">requestPermissions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>    requestCode<span class="token operator">:</span> Int<span class="token punctuation">,</span>    permissions<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> String<span class="token operator">></span><span class="token punctuation">,</span>    grantResults<span class="token operator">:</span> IntArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span>    <span class="token keyword">when</span> <span class="token punctuation">(</span>requestCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token number">1</span> <span class="token operator">-></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>grantResults<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> grantResults<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>PERMISSION_GRANTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"You denied the permission"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>麻鸭，头疼，这么多代码，不仅写着难受，看着更是头疼</p><p><img src="https://s1.ax1x.com/2020/04/24/JD3EDK.gif" alt="头疼"></p><p>这时候，如果这个世界简单点，纯粹点，就好了</p><pre class=" language-kotlin"><code class="language-kotlin">XPermission<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>    <span class="token keyword">this</span><span class="token punctuation">,</span>    Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span> <span class="token punctuation">{</span> allGranted<span class="token punctuation">,</span> deniedList <span class="token operator">-></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allGranted<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"You denied <span class="token interpolation variable">$deniedList</span>"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>是不是感觉世界又友好了很多呢？这段代码比之前的代码量少了很多不说，逻辑更是清晰了很多鸭！</p><p><img src="https://s1.ax1x.com/2020/04/24/JD3OGd.gif" alt="滚来了"></p><p>很显然，上面用到了自己封装的框架，有可能你会一脸不屑：『这算啥？<code>Github</code> 上一堆权限申请框架，他们写的这个简洁又漂亮，功能又多又全，超帅的』</p><p> 我想说：『是的，你说的对，虽然 <code>Github</code> 上有这么多，跑得又快又棒的轮子，但是，别人做的菜总归没有自己的香鸭！我们可以通过自己封装一个简单的权限申请框架开始，<strong>学习发布开源库到 <code>Jitpack</code> / <code>Jcenter</code> 的一整套流程</strong>，从而激发自己的学习兴趣，以后自己也多多造轮子（xia zhe teng）！成为 <code>Android</code> 界的轮子哥』</p><p>先为大佬送上笔者已经封装好的轮子：<a href="https://github.com/LoveLifeEveryday/XPermissions" target="_blank" rel="noopener">https://github.com/LoveLifeEveryday/XPermissions</a></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/26/101245-452552.png" alt="XPermission"></p><p><img src="https://s1.ax1x.com/2020/04/24/JDJaPe.gif" alt="上车"></p><h2 id="二-入坑之路"><a href="#二-入坑之路" class="headerlink" title="二.入坑之路"></a>二.入坑之路</h2><h3 id="2-1-创建-Android-项目"><a href="#2-1-创建-Android-项目" class="headerlink" title="2.1 创建 Android 项目"></a>2.1 创建 <code>Android</code> 项目</h3><p>新建一个空的 <code>Android</code> 项目</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/173259-26480.png" alt="创建项目"></p><h3 id="2-2-创建-Github-项目"><a href="#2-2-创建-Github-项目" class="headerlink" title="2.2 创建 Github 项目"></a>2.2 创建 <code>Github</code> 项目</h3><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/172732-65864.png" alt="建库"></p><blockquote><ul><li><p>然后，把该项目 <code>clone</code> 到一个上面已经创建的 <code>Android</code> 项目的位置</p></li><li><p>将克隆下来的所有文件全部复制到上一层目录（注意：复制的时候不要忘记复制 <code>.git</code> 文件）</p></li><li><p>将克隆的 <code>XPermission</code> 目录删除</p></li><li><p>执行一系列的 <code>git add .</code>   <code>git commit -m &quot;First commit&quot;</code>   <code>git push origin master</code>  操作 </p></li></ul></blockquote><h3 id="2-3-实现-XPermission"><a href="#2-3-实现-XPermission" class="headerlink" title="2.3 实现 XPermission"></a>2.3 实现 <code>XPermission</code></h3><ol><li>对着最顶层的 <code>XPermission</code> ，新建一个 <code>module</code> ，选择 <code>Android Library</code></li></ol><p><img src="https://imgkr.cn-bj.ufileos.com/879dcb72-d4e4-4089-8322-7445edfdc316.png" alt="新建 module"></p><p>看到 <code>library</code> 就行，如下</p><p><img src="https://imgkr.cn-bj.ufileos.com/2072871a-6285-4b68-94af-80cc9d277ad6.png" alt="新建 library 成功"></p><p>然后，我们思考下，运行时权限的实现思路，有以下三种：</p><ul><li>将运行时权限的操作封装到 <code>BaseActivity</code> 中</li><li>提供一个透明的 <code>Activity</code> 来处理</li><li>提供一个隐藏的 <code>Fragment</code> 来处理</li></ul><p>本文，将根据最后一个思路进行实现</p><h4 id="2-3-1-创建-InvisibleFragment"><a href="#2-3-1-创建-InvisibleFragment" class="headerlink" title="2.3.1 创建 InvisibleFragment"></a>2.3.1 创建 <code>InvisibleFragment</code></h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2020/4/23 19:21 * email：913710642@qq.com */</span>typealias PermissionCallback <span class="token operator">=</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token keyword">class</span> InvisibleFragment <span class="token operator">:</span> <span class="token function">Fragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> callback<span class="token operator">:</span> PermissionCallback<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">fun</span> <span class="token function">requestNow</span><span class="token punctuation">(</span>cb<span class="token operator">:</span> PermissionCallback<span class="token punctuation">,</span> vararg permission<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        callback <span class="token operator">=</span> cb        <span class="token function">requestPermissions</span><span class="token punctuation">(</span>permission<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 请求返回结果     * @param requestCode Int 请求码     * @param permissions Array&lt;String> 权限     * @param grantResults IntArray 请求结果     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>        requestCode<span class="token operator">:</span> Int<span class="token punctuation">,</span>        permissions<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span>        grantResults<span class="token operator">:</span> IntArray    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> deniedList <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token keyword">in</span> grantResults<span class="token punctuation">.</span><span class="token function">withIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> PackageManager<span class="token punctuation">.</span>PERMISSION_GRANTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    deniedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>permissions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">val</span> allGranted <span class="token operator">=</span> deniedList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//对申请权限的结果进行回调</span>            callback<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> <span class="token function">it</span><span class="token punctuation">(</span>allGranted<span class="token punctuation">,</span> deniedList<span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>首先，我们定义一个 <code>callback</code> 作为运行时权限申请结果的回调通知方式</li><li>然后，定义一个 <code>requestNow</code> 方法</li><li>最后重写 <code>onRequestPermissionsResult</code> 方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/175734-108221.png" alt="第一大步"></p><h4 id="2-3-2-创建-XPermission"><a href="#2-3-2-创建-XPermission" class="headerlink" title="2.3.2 创建 XPermission"></a>2.3.2 创建 <code>XPermission</code></h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> XPermission <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"InvisibleFragment"</span>    <span class="token keyword">fun</span> <span class="token function">request</span><span class="token punctuation">(</span>        activity<span class="token operator">:</span> FragmentActivity<span class="token punctuation">,</span>        vararg permission<span class="token operator">:</span> String<span class="token punctuation">,</span>        callback<span class="token operator">:</span> PermissionCallback    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> fragmentManager <span class="token operator">=</span> activity<span class="token punctuation">.</span>supportFragmentManager        <span class="token keyword">val</span> existedFragment <span class="token operator">=</span> fragmentManager<span class="token punctuation">.</span><span class="token function">findFragmentByTag</span><span class="token punctuation">(</span>TAG<span class="token punctuation">)</span>        <span class="token keyword">val</span> fragment <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>existedFragment <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            existedFragment <span class="token keyword">as</span> InvisibleFragment        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> invisibleFragment <span class="token operator">=</span> <span class="token function">InvisibleFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            fragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>invisibleFragment<span class="token punctuation">,</span> TAG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            invisibleFragment        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这里在 permission 前面加个星号的意思是：将数组转化为可变长度参数传递过去</span>        fragment<span class="token punctuation">.</span><span class="token function">requestNow</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token operator">*</span>permission<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>相信代码大家都看得懂，所以笔者就不写很多注释了（其实是因为懒..）</p></blockquote><h3 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h3><blockquote><p>在 <code>app\build.gradle</code> 中引入 <code>library</code> </p></blockquote><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    implementation <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    implementation<span class="token string">"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"</span>    implementation <span class="token string">'androidx.appcompat:appcompat:1.1.0'</span>    implementation <span class="token string">'androidx.core:core-ktx:1.2.0'</span>    implementation <span class="token string">'androidx.constraintlayout:constraintlayout:1.1.3'</span>    testImplementation <span class="token string">'junit:junit:4.12'</span>    androidTestImplementation <span class="token string">'androidx.test.ext:junit:1.1.1'</span>    androidTestImplementation <span class="token string">'androidx.test.espresso:espresso-core:3.2.0'</span>    <span class="token comment" spellcheck="true">//添加这行就行</span>    implementation <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':library'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>然后进行你喜欢的权限申请</p></blockquote><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        makeCallBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            XPermission<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span> <span class="token punctuation">{</span> allGranted<span class="token punctuation">,</span> deniedList <span class="token operator">-></span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>allGranted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"You  Denied <span class="token interpolation variable">$deniedList</span>"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_CALL<span class="token punctuation">)</span>        intent<span class="token punctuation">.</span>data <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"tel:10086"</span><span class="token punctuation">)</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果可以的话，恭喜你，你已经成功一大步了</p><h3 id="2-5-发布到-JitPack"><a href="#2-5-发布到-JitPack" class="headerlink" title="2.5 发布到 JitPack"></a>2.5 发布到 <code>JitPack</code></h3><h4 id="2-5-1-JitPack-简介"><a href="#2-5-1-JitPack-简介" class="headerlink" title="2.5.1 JitPack 简介"></a>2.5.1 <code>JitPack</code> 简介</h4><p><a href="https://jitpack.io/" target="_blank" rel="noopener">JitPack </a>是一个网站，它允许你把 <code>git</code> 托管的 <code>java</code> 或 <code>android</code> 项目（貌似目前仅支持<code>github</code>和码云），轻松发布到 <code>jitpack</code> 的 <code>maven</code> 仓库上，它所有内容都通过内容分发网络（<code>CDN</code>）使用加密 <code>https</code> 连接获取</p><h4 id="2-5-2-为什么用-JitPack"><a href="#2-5-2-为什么用-JitPack" class="headerlink" title="2.5.2 为什么用 JitPack"></a>2.5.2 为什么用 <code>JitPack</code></h4><p>优点：打包比较简单，省时间，背靠 <code>Github</code> 这座大山</p><p>缺点：每次导入库的时候，都要先在根的 <code>build.gradle</code> 文件中添加 <code>maven</code></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/181324-665069.png" alt="添加 maven"></p><h4 id="2-5-3-步骤"><a href="#2-5-3-步骤" class="headerlink" title="2.5.3 步骤"></a>2.5.3 步骤</h4><ul><li>在根的 <code>build.gradle</code> 中添加 <code>maven</code> 插件</li></ul><blockquote><p><a href="https://github.com/dcendents/android-maven-gradle-plugin" target="_blank" rel="noopener">点击查看最新版本</a></p></blockquote><pre class=" language-groovy"><code class="language-groovy">buildscript <span class="token punctuation">{</span>    ext<span class="token operator">.</span>kotlin_version <span class="token operator">=</span> <span class="token string">'1.3.71'</span>    repositories <span class="token punctuation">{</span>        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        classpath <span class="token string">'com.android.tools.build:gradle:3.5.3'</span>        classpath <span class="token string">"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"</span>        <span class="token comment" spellcheck="true">//添加 maven 插件</span>        classpath <span class="token string">'com.github.dcendents:android-maven-gradle-plugin:2.1'</span>        <span class="token comment" spellcheck="true">// NOTE: Do not place your application dependencies here; they belong</span>        <span class="token comment" spellcheck="true">// in the individual module build.gradle files</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>在 <code>library</code>目录的 <code>build.gradle</code>下 <code>apply</code> 插件和添加 <code>group</code></li></ul><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'com.android.library'</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'kotlin-android'</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'kotlin-android-extensions'</span><span class="token comment" spellcheck="true">//添加下面两行</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'com.github.dcendents.android-maven'</span><span class="token comment" spellcheck="true">//这里 LoveLifeEveryday 改为你的 github 账号名，我的是：LoveLifeEveryday</span>group<span class="token operator">=</span><span class="token string">'com.github.LoveLifeEveryday'</span>android <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span></code></pre><ul><li>同步一下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/182025-245388.png" alt="同步"></p><ul><li>在命令行中输入 <code>gradlew install</code> ，从而构建你的 <code>library</code> 到你的本地 <code>maven</code> 仓库</li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/10591d8b-bf7f-4ff1-b306-e69985e7e665.png" alt="gradlew install"></p><blockquote><p>等待 <code>BUILD SUCCESSFUL，</code>若 <code>BUILD FAIL</code>，说明构建失败，这时候你就要按照失败提示去排错，排错完后在执行一遍 <code>gradlew install</code> 命令，直到出现 <code>BUILD SUCCESS</code></p></blockquote><ul><li>把代码提交到本地 <code>git</code> 仓库</li></ul><blockquote><p><code>git add .</code> 和<code>git commit -m “XX”</code></p></blockquote><ul><li>在本地 <code>git</code> 仓库打 <code>tag</code></li></ul><pre class=" language-nginx"><code class="language-nginx">git tag <span class="token operator">-</span>a <span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">-</span>m <span class="token string">"第一版"</span>git push origin <span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">0</span></code></pre><ul><li>打开你的 <code>libary</code> 的 <code>github</code> 界面，点击 <code>release</code>，如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/182841-621904.png" alt="release"></p><ul><li>点击 <code>Draft a new release</code>，新建一个 <code>release</code>，如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/183001-207910.png" alt="image-20200424182958983"></p><ul><li>然后填信息，如下：</li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/a9d1e993-bbd6-467b-85b6-2a9ae17a73ad.png" alt="填信息"></p><ul><li>填好信息后，点击<code>publich release</code>，如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/183240-37654.png" alt></p><ul><li>用 <code>GitHub</code> 账号登陆、注册 <a href="https://jitpack.io/" target="_blank" rel="noopener"><code>jitpack</code></a></li><li>登陆后，在地址栏中输入你的 <code>library</code> 的 <code>github</code> 项目地址，然后点击 <code>Look Up</code> ，如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/183622-320775.png" alt></p><ul><li>然后点击 <code>Get it</code>，它会滚到下面去，你要滚回上面去，先等一会，等 <code>jitpack</code> 那里构建完，会出现一个绿色的 <code>log</code>，则构建成功，如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/183801-256881.png" alt></p><blockquote><p>然后你就可以愉快的在项目中<strong>按照它的提示</strong>引用你的开源库</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/183914-906906.png" alt></p><ul><li>点击那个 <code>jitpack</code> ，把它的链接复制到你的 <code>Readme</code> 中去，如下:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/24/184028-195937.png" alt="jitpack"></p><h3 id="2-6-尝试使用你的框架"><a href="#2-6-尝试使用你的框架" class="headerlink" title="2.6 尝试使用你的框架"></a>2.6 尝试使用你的框架</h3><p>当然是在 <code>app\build.gradle</code> 中</p><pre><code>//引用自己的开源库implementation &#39;com.github.LoveLifeEveryday:XPermissions:1.0.0&#39;</code></pre><p>然后尝试使用吧</p><p><img src="https://s1.ax1x.com/2020/04/24/JDg9eO.gif" alt="完成"></p><h3 id="2-7-美化你的项目"><a href="#2-7-美化你的项目" class="headerlink" title="2.7 美化你的项目"></a>2.7 美化你的项目</h3><p>一个优秀的开源项目，<code>readme</code> 一定不会差</p><p>鲁迅说：『虽然这些工作不会让你的项目变得牛逼，但会让你的项目变得漂亮，方便了其他人去了解你这个项目』</p><blockquote><p>详细的美化操作，可以参考这篇文章：<a href="https://juejin.im/post/5d312fb6f265da1b60293c51" target="_blank" rel="noopener">如何让你的 GitHub 项目表面上更专业</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/04/24/JDg1Yj.gif" alt="好看"></p><h2 id="三-我在使用中遇到的问题"><a href="#三-我在使用中遇到的问题" class="headerlink" title="三.我在使用中遇到的问题"></a>三.我在使用中遇到的问题</h2><h3 id="3-1-在模拟器上-Call-权限申请无反应"><a href="#3-1-在模拟器上-Call-权限申请无反应" class="headerlink" title="3.1 在模拟器上 Call 权限申请无反应"></a>3.1 在模拟器上 <code>Call</code> 权限申请无反应</h3><ul><li>发生情景：在<strong>逍遥模拟器</strong>上测试 <code>Call</code> 权限</li></ul><blockquote><p>至于我为什么要使用逍遥模拟器，这又是另一个故事了</p></blockquote><ul><li>解决：真机测试正常申请权限，于是百度了一波，发现很多模拟器没有 <code>Call</code> 这个权限（such as 夜神模拟器），我觉得原装的模拟器应该是可以正常运行的</li><li>结论：模拟器的锅</li></ul><h3 id="3-2-上传到-Jcenter-时-Failed"><a href="#3-2-上传到-Jcenter-时-Failed" class="headerlink" title="3.2 上传到 Jcenter 时 Failed"></a>3.2 上传到 <code>Jcenter</code> 时 <code>Failed</code></h3><ul><li>发生情景：执行上传命令的时候，运行到最后发生错误</li><li>错误：</li></ul><pre><code>* What went wrong:Execution failed for task &#39;:utils:bintrayUpload&#39;.&gt; org.apache.http.NoHttpResponseException: The target server failed to respond</code></pre><ul><li>过程：<code>Google</code>  &amp;&amp; <code>Baidu</code></li><li>结论：网络问题</li><li>结果：尝试了普通网络和 Ke Xue 上网，还是无法解决，转为使用 <code>JitPack</code></li></ul><blockquote><p>如果想了解，怎么上传到 <code>Jcenter</code> 的话，可以看下这篇文章：<a href="https://segmentfault.com/a/1190000012263759" target="_blank" rel="noopener">AS上传Library到JCenter 教程+踩坑记录</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/04/25/JsuluT.gif" alt="bug 退散"></p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>『Android 第一行代码 - 第三版』</li><li><a href="https://segmentfault.com/a/1190000012263759" target="_blank" rel="noopener">AS上传Library到JCenter 教程+踩坑记录</a></li><li><a href="https://juejin.im/post/5d312fb6f265da1b60293c51" target="_blank" rel="noopener">如何让你的 GitHub 项目表面上更专业</a></li><li><a href="https://blog.csdn.net/Rain_9155/article/details/90516026" target="_blank" rel="noopener">快速发布开源库到jitpack</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架系列 </tag>
            
            <tag> 权限管理 </tag>
            
            <tag> jitpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一夜搞懂 | JVM 线程安全与锁优化</title>
      <link href="/2020/04/10/yi-ye-gao-dong-jvm-xian-cheng-an-quan-yu-suo-you-hua/"/>
      <url>/2020/04/10/yi-ye-gao-dong-jvm-xian-cheng-an-quan-yu-suo-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="一夜搞懂-JVM-线程安全与锁优化"><a href="#一夜搞懂-JVM-线程安全与锁优化" class="headerlink" title="一夜搞懂 | JVM 线程安全与锁优化"></a>一夜搞懂 | JVM 线程安全与锁优化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的 Github 个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的 GIthub 博客</a></p></blockquote><h2 id="学习导图"><a href="#学习导图" class="headerlink" title="学习导图"></a>学习导图</h2><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/10/174247-439541.png" alt="学习导图"></p><h2 id="一-为什么要学习内存模型与线程？"><a href="#一-为什么要学习内存模型与线程？" class="headerlink" title="一.为什么要学习内存模型与线程？"></a>一.为什么要学习内存模型与线程？</h2><blockquote><p>之前我们学习了<a href="https://juejin.im/post/5e8e84abf265da47e1593e5d" target="_blank" rel="noopener">内存模型和线程</a>，了解了 <code>JMM</code> 和线程，初步探究了 <code>JVM</code> 怎么实现并发，而本篇文章，我们的关注点是 <code>JVM</code> 如何实现高效</p></blockquote><p>并发编程的目的是为了让程序运行得更快，提高程序的响应速度，虽然我们希望通过多线程执行任务让程序运行得更快，但是同时也会面临非常多的挑战，比如像线程安全问题、线程上下文切换的问题、硬件和软件资源限制等问题，这些都是并发编程给我们带来的难题。</p><p>其中线程安全问题是我们最关心的问题之一，我们接下来主要就围绕着线程安全的问题来展开。</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/10/190603-889264.png" alt></p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-线程安全"><a href="#2-1-线程安全" class="headerlink" title="2.1 线程安全"></a>2.1 线程安全</h3><h4 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h4><p>当多个线程访问一个对象时，如果<strong>不用考虑</strong>这些线程在运行时环境下的<strong>调度和交替执行</strong>，也<strong>不需要进行额外的同步</strong>，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象是线程安全的</p><blockquote><p><strong>要求线程安全的代码都必须具备一个特征</strong>：<br>代码本身<strong>封装了所有必要的正确性保障手段</strong>（如互斥同步等），令调用者无须关心多线程的问题，更无须自己采取任何措施来保证多线程的正确调用。</p></blockquote><h4 id="2-1-2-分类"><a href="#2-1-2-分类" class="headerlink" title="2.1.2 分类"></a>2.1.2 分类</h4><blockquote><p>下面将按照线程安全的程度由强至弱分成五类</p></blockquote><ul><li>不可变：外部的可见状态永远不会改变，在多个线程之中永远是一致的状态</li></ul><blockquote><ul><li><p><strong>一定</strong>是线程安全的</p></li><li><p><strong>如何实现</strong>：</p><p>1.如果共享数据是一个<strong>基本数据类型</strong>，只要在定义时用 <code>final</code> 关键字修饰</p><p>2.如果共享数据是一个<strong>对象</strong>，最简单的方法是把<strong>对象中带有状态的变量</strong>都声明为 <code>final</code>(例如 <code>String</code> 类的实现)</p></li></ul></blockquote><ul><li>绝对线程安全：完全满足之前给出的线程安全的定义，即达到『不管运行时环境如何，调用者都不需要任何额外的同步措施』</li><li>相对线程安全：能保证对该对象<strong>单独的操作是线程安全</strong>的，在调用时无需做额外保障措施，但对于一些特定顺序的连续调用，可能需要在调用端使用额外的同步措施来保证调用的正确性</li></ul><blockquote><ul><li>是<strong>通常意义上所讲的线程安全</strong></li><li>大部分的线程安全类都属于这种类型，如 <code>Vector</code>、<code>HashTable</code>、<code>Collections#synchronizedCollection()</code> 包装的集合等</li></ul></blockquote><ul><li>线程兼容：对象本身非线程安全的，但可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用</li></ul><blockquote><ul><li>是通常意义上所讲的非线程安全</li><li><code>Java API</code> 中大部分类都是属于线程兼容的，如 <code>ArrayList</code> 和 <code>HashMap</code>等</li></ul></blockquote><ul><li>线程对立：无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码</li></ul><blockquote><p>例子：<code>Thread</code> 类的 <code>suspend()</code> 和 <code>resume()</code> ，一个尝试中断线程，一个尝试恢复线程，在并发条件下，有可能会造成<a href="https://www.sxt.cn/Java_jQuery_in_action/eleven-deadlock.html" target="_blank" rel="noopener">死锁</a></p></blockquote><h4 id="2-1-3-实现"><a href="#2-1-3-实现" class="headerlink" title="2.1.3 实现"></a>2.1.3 实现</h4><blockquote><p>可分成两大手段：</p><ul><li>通过代码编写实现线程安全</li><li>通过虚拟机本身实现同步与锁</li></ul><p>本篇重点在虚拟机本身</p></blockquote><h5 id="1-互斥同步"><a href="#1-互斥同步" class="headerlink" title="1.互斥同步"></a>1.互斥同步</h5><ul><li>含义：</li></ul><blockquote><ul><li><p><strong>同步</strong>：在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一个线程使用</p></li><li><p><strong>互斥</strong>：是实现同步的一种<strong>手段</strong>，临界区、互斥量和信号量都是主要的互斥实现方式</p></li><li><p>两者关系：互斥是因，同步是果；互斥是方法，同步是目的</p></li></ul></blockquote><ul><li><p>属于<strong>悲观并发策略</strong>（<strong>悲观锁</strong>），即认为只要不做正确的同步措施就肯定会出现问题，因此无论共享数据是否真的会出现竞争，都要加锁</p></li><li><p>最大的<strong>问题</strong>是进行线程阻塞和唤醒所带来的性能问题，也称为<strong>阻塞同步</strong></p></li><li><p>使用方式：</p><p>A.使用 <code>synchronized</code> 关键字：</p></li></ul><blockquote><ul><li><p>原理：编译后会在同步块的<strong>前后</strong>分别形成 <code>monitorenter</code> 和 <code>monitorexit</code> 这两个字节码指令，并通过一个 <code>reference</code> 类型的参数来指明要锁定和解锁的对象</p><p>注意：</p><p>​    1.若明确指定了对象参数，则取该对象的 <code>reference</code></p><p>​    2.否则，会根据 <code>synchronized</code> 修饰的是实例方法还是类方法去取对应的对象实例或 <code>Class</code> 对象来作为锁对象</p><p><img src="https://imgkr.cn-bj.ufileos.com/2385211e-124f-49cf-8ddd-44e0a1eba0fc.png" alt="synchronized 处理逻辑"></p></li><li><p><strong>过程</strong>：执行 <code>monitorenter</code> 指令时先要尝试获取对象的锁。若该对象没被锁定或者已被当前线程获取，那么锁计数器 <code>+ 1</code>；而在执行 <code>monitorexit</code> 指令时，锁计数器 <code>- 1</code>；当锁计数器 = <code>0</code> 时，锁就被释放；若获取对象锁失败，那当前线程会一直被阻塞等待，直到对象锁被另外一个线程释放为止</p></li><li><p><strong>特别注意</strong>： </p><p>1.<code>synchronized</code> 同步块对同一条线程来说是<strong>可重入</strong>的，不会出现自我锁死的问题</p><p>2.同步块在已进入的线程执行完之前，会<strong>阻塞后面其他线程</strong>的进入</p></li></ul></blockquote><p>​        B.使用重入锁 <code>ReentrantLock</code>：</p><p>​        之前在 <a href="https://juejin.im/post/5e6712356fb9a07cd323e7a2#heading-8" target="_blank" rel="noopener">进阶之路 | 奇妙的 Thread 之旅</a>中也提到过重入锁的使用，相信看过的读者还有一些印象</p><blockquote><ul><li><p>与 <code>synchronized</code> 的相同：用法与 <code>synchronized</code> 很相似，且都可重入</p></li><li><p>与 <code>synchronized</code> 的<strong>不同</strong>：</p><p>1.<strong>等待可中断</strong>：当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情</p><p>2.<strong>公平锁</strong>：多个线程在等待同一个锁时，必须<strong>按照申请锁的时间顺序来依次获得锁</strong>。而 <code>synchronized</code> 是非公平的，即在锁被释放时，任何一个等待锁的线程都有机会获得锁。<code>ReentrantLock</code> 默认情况下也是非公平的，但可以通过带布尔值的构造函数改用公平锁</p><p>3.<strong>锁绑定多个条件</strong>：一个 <code>ReentrantLock</code> 对象可以通过多次调用 <code>newCondition()</code> 同时绑定多个 <code>Condition</code> 对象。而在 <code>synchronized</code> 中，锁对象的 <code>wait()</code> 和 <code>notify()</code> 或 <code>notifyAl()</code> 只能实现一个隐含的条件，若要和多于一个的条件关联不得不额外地添加一个锁</p></li></ul></blockquote><ul><li>选择：在 <code>synchronized</code> 能实现需求的情况下，优先考虑使用它来进行同步。理由如下：</li></ul><blockquote><ul><li><code>synchronized</code> 是 <code>Java</code>语法层面的同步，足够清晰简单</li><li><code>Lock</code> 必须由程序员确保在 <code>finally</code> 块中释放锁，而 <code>synchronized</code> 可以由 <code>JVM</code> 确保锁的自动释放</li></ul></blockquote><h5 id="2-非阻塞同步"><a href="#2-非阻塞同步" class="headerlink" title="2.非阻塞同步"></a>2.非阻塞同步</h5><ul><li>定义：基于冲突检测的<strong>乐观</strong>并发策略（乐观锁），即先进行操作，若无其他线程争用共享数据，操作成功；反之产生了冲突再去采取其他的补偿措施</li><li>为了保证<strong>操作</strong>和<strong>冲突检测</strong>这两步具备原子性，需要用到硬件指令集，比如：</li></ul><blockquote><ul><li><strong>测试并设置</strong></li><li><strong>获取并增加</strong></li><li><strong>交换</strong></li><li><strong>比较并交换</strong>（<code>CAS</code>）</li><li><strong>加载链接 / 条件存储</strong></li></ul></blockquote><h5 id="3-无同步方案"><a href="#3-无同步方案" class="headerlink" title="3.无同步方案"></a>3.无同步方案</h5><ul><li>定义：不用同步的方式保证线程安全，因为有些代码天生就是线程安全的。</li><li>例子：</li></ul><blockquote><p>A.<strong>可重入代码</strong>/ <strong>纯代码</strong></p><ul><li>含义：可在代码执行的<strong>任何时刻中断它去执行另外一段代码</strong>，当控制权返回后原来的程序并不会出现任何错误</li><li>共同特征：<strong>不依赖存储在堆</strong>上的数据和<strong>公用</strong>的系统资源、用到的状态量<strong>都由参数中传入</strong>、不调用非可重入的方法</li><li>判定依据：如果一个方法，它的返回<strong>结果是可预测</strong>的，只要输入相同的数据就都能返回相同的结果，就满足可重入性</li><li>注意：满足可重入性的代码<strong>一定</strong>是线程安全的，反之，满足线程安全的代码<strong>不一定</strong>是可重入的</li></ul><p>B.<strong>线程本地存储</strong></p><ul><li><strong>含义</strong>：把共享数据的可见范围限制在同一个线程之内，无须同步就能保证线程之间不出现数据争用的问题</li><li>想详细了解 <code>ThreadLocal</code> 的读者，可以看下笔者之前写的一篇文章：<a href="https://juejin.im/post/5e61bf2de51d4526ea7f00bd#heading-7" target="_blank" rel="noopener">进阶之路 | 奇妙的 Handler 之旅</a></li></ul></blockquote><h3 id="2-2-锁优化"><a href="#2-2-锁优化" class="headerlink" title="2.2 锁优化"></a>2.2 锁优化</h3><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/10/190338-899827.png" alt="一图带你看遍锁"></p><blockquote><p>解决并发的正确性之后，为了能在线程之间更『高效』地共享数据、解决竞争问题、提高程序的执行效率，下面介绍五种锁优化技术</p></blockquote><h4 id="2-2-1-适应性自旋"><a href="#2-2-1-适应性自旋" class="headerlink" title="2.2.1 适应性自旋"></a>2.2.1 适应性自旋</h4><ul><li>背景：互斥同步在实现阻塞和唤醒时需要<strong>挂起线程和恢复线程的操作，都需要转入内核态</strong>中完成，很<strong>影响系统的并发性能</strong>；同时，在许多应用上共享数据的<strong>锁定状态只是暂时，没必要去挂起和恢复线程</strong></li><li>自旋锁：当物理机器有多个处理器使得多个线程同时并行执行时，先让后请求锁的线程<strong>等待</strong>，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁，这时<strong>只需让线程执行一个忙循环，即自旋</strong></li></ul><blockquote><p><strong>注意</strong>：自旋等待<strong>不能</strong>代替阻塞，它虽然能避免线程切换的开销，但会占用处理器时间，因此<strong>自旋等待的时间必须要有一定的限度</strong>，如果自旋超过了限定的次数(默认<code>10</code>次)仍未成功获锁，就需要挂线程了</p></blockquote><ul><li><strong>自适应自旋锁</strong>：自旋的<strong>时间不再固定</strong>，而是由该锁上的<strong>上次自旋时间及锁的拥有者的状态</strong>共同决定。具体表现是：</li></ul><blockquote><ul><li>如果对于某个锁，自旋等待刚刚成功获得，且持有锁的线程正在运行中，那么虚拟机很可能允许自旋等待的时间更久点</li><li>如果对于某个锁，自旋很少成功获得过，那么很可能以后将省略自旋等待这个锁，避免浪费处理器资源</li></ul></blockquote><h4 id="2-2-2-锁消除"><a href="#2-2-2-锁消除" class="headerlink" title="2.2.2 锁消除"></a>2.2.2 锁消除</h4><ul><li>定义：指虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到<strong>不可能存在共享数据竞争</strong>的锁进行消除</li><li>判定依据：如果一段代码中<strong>堆</strong>上的所有数据都<strong>不会逃逸出去</strong>被其他线程访问到，可把它们当做<strong>栈</strong>上数据对待，即线程私有的，无须同步加锁</li></ul><h4 id="2-2-3-锁粗化"><a href="#2-2-3-锁粗化" class="headerlink" title="2.2.3 锁粗化"></a>2.2.3 锁粗化</h4><ul><li><strong>一般情况下</strong>，会将同步块的作用范围限制到只在共享数据的实际作用域中才进行同步，使得需要同步的操作数量<strong>尽可能变小</strong>，保证就算存在锁竞争，等待锁的线程也能尽快拿到锁</li><li>但如果<strong>反复操作对同一个对象进行加锁和解锁</strong>，即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗，此时，虚拟机将会把加锁同步的范围粗化到整个操作序列的外部，这样只需加一次锁</li></ul><h4 id="2-2-4-轻量级锁"><a href="#2-2-4-轻量级锁" class="headerlink" title="2.2.4 轻量级锁"></a>2.2.4 轻量级锁</h4><ul><li><strong>目的</strong>：在<strong>没有多线程竞争的前提下</strong>，<strong>减少传统的重量级锁使用操作系统互斥量产生的性能消耗</strong>，注意不是用来代替重量级锁的</li></ul><blockquote><p>首先先理解 <code>HotSpot</code> 虚拟机的<a href="https://juejin.im/post/5e7d62f1e51d4546df7375dd#heading-14" target="_blank" rel="noopener">对象头</a>的内存布局：分为两部分</p><ul><li>第一部分用于存储对象自身的<strong>运行时数据</strong>，这部分被称为 <code>Mark Word</code>，是实现轻量级锁和偏向锁的关键。如哈希码、<code>GC</code> 分代年龄等</li><li>另外一部分用于存储指向<strong>方法区对象类型数据的指针</strong>，如果是数组对象还会有一个额外的部分用于存储数组长度</li></ul></blockquote><p><img src="https://imgkr.cn-bj.ufileos.com/9566936c-5da2-4bcb-b1dd-915db2c571a4.png" alt="Mark Word 结构"></p><ul><li><p>加锁过程：</p><p>1.代码进入同步块时，如果同步对象未被锁定（锁标志位为 <code>01</code>），虚拟机会在当前线程的<strong>栈帧中建立一个名为 <code>Lock Record</code> 的空间</strong>，用于存储锁对象 <code>Mark Word</code> 的拷贝。如下图</p></li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/2a5b0dca-305d-4022-b1ea-e9e6f8ebbc57.png" alt></p><p>2.之后虚拟机会尝试用 <code>CAS</code> 操作将对象的 <code>Mark Word</code> 更新为指向 <code>Lock Record</code> 的指针。若更新动作成功，那么当前线程就拥有了该对象的锁，且对象 <code>Mark Word</code> 的锁标志位变为 <code>00</code>，即处于轻量级锁定状态；反之，虚拟机会先检查对象的 <code>Mark Word</code> 是否指向当前线程的栈帧，若是，则当前线程已有该对象的锁，可直接进入同步块继续执行，否则说明改对象已被其他线程抢占。如下图：</p><p><img src="https://imgkr.cn-bj.ufileos.com/a7b39aaa-9c8a-4182-b34f-57951cd60a4f.png" alt="CAS后堆栈与对象的状态"></p><blockquote><p>另外，如果有<strong>两条以上的线程争用同一个锁</strong>，那轻量级锁就不再有效，要<strong>膨胀为重量级锁</strong>，锁标志位变为 <code>10</code>，<code>Mark Word</code> 中存储的就是指向重量级锁的指针，后面等待锁的线程也要进入阻塞状态</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/26/091431-315359.png" alt="加锁流程"></p><ul><li><p><strong>解锁过程</strong>：若对象的 <code>Mark Word</code> 仍指向着线程的 <code>Lock Record</code>，就用 <code>CAS</code> 操作把对象当前的 <code>Mark Word</code> 和线程中复制的 <code>Displaced Mark Word</code> 替换回来。若替换成功，那么就完成了整个同步过程；反之，说明有其他线程尝试获取该锁，那么就要在释放锁的同时唤醒被挂起的线程</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/10/171913-572450.png" alt="解锁过程"></p></li><li><p>优点：因为对于绝大部分的锁，在整个同步周期内都是不存在竞争的，所以轻量级锁通过使用 <code>CAS</code> 操作<strong>消除同步使用的互斥量</strong></p></li><li><p>自旋锁和轻量级锁的关系：</p></li></ul><blockquote><ul><li><strong>自旋锁</strong>是为了<strong>减少线程挂起次数</strong></li><li><strong>轻量级锁</strong>是在加锁的时候，如何使用一种<strong>更高效的方式来加锁</strong></li></ul><p>Q：处于<strong>轻量级锁</strong>状态时，<strong>会不会使用自旋锁</strong>这个竞争机制</p><p>A：线程首先会通过 <code>CAS</code> 获取锁，失败后通过自旋锁来尝试获取锁，再失败锁就膨胀为重量级锁。所以轻量级锁状态下可能会有自旋锁的参与（<code>CAS</code> 将对象头的标记指向锁记录指针失败的时候）</p></blockquote><h4 id="2-2-5-偏向锁"><a href="#2-2-5-偏向锁" class="headerlink" title="2.2.5 偏向锁"></a>2.2.5 偏向锁</h4><ul><li><strong>目的</strong>：消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能</li></ul><blockquote><ul><li><p>如果说<strong>轻量级锁</strong>是在无竞争的情况下使用 <code>CAS</code> 去<strong>消除同步使用的互斥量</strong></p></li><li><p>那<strong>偏向锁</strong>就是在无竞争情况下<strong>把整个同步都消除掉</strong></p></li></ul></blockquote><ul><li><p><strong>含义</strong>：偏向锁会<strong>偏向于第一个获得它的线程</strong>，如果在后面的执行中该锁没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步</p></li><li><p><strong>加锁过程</strong>：启用偏向锁的锁对象在第一次被线程获取时，<code>Mark Word</code> 的锁标志位会被设置为 <code>01</code>，即偏向模式，同时使用 <code>CAS</code> 操作把获取到这个<strong>锁的线程 <code>ID</code></strong> 记录在对象的 <code>Mark Word</code> 中。若操作成功，持有偏向锁的线程以后每次进入这个锁相关的同步块时都可不再进行任何同步操作</p></li><li><p>解锁过程：当有另外的线程去尝试获取这个锁时，根据锁对象目前是否处于被锁定的状态，撤销偏向后恢复到未锁定 <code>01</code> 或轻量级锁定 <code>00</code> 的状态，后续的同步操作就如<strong>轻量级锁执行过程</strong>。如下图：</p><p><img src="https://imgkr.cn-bj.ufileos.com/83f2e210-44f0-46ea-a6e5-44ad76256283.png" alt></p></li><li><p><strong>优点</strong>：可提高带有<strong>同步但无竞争</strong>的程序性能，但若程序中大多数锁总被多个线程访问，此模式就没必要了</p></li></ul><p><img src="https://s1.ax1x.com/2020/04/10/GT28B9.gif" alt="解放啦"></p><h2 id="三-碎碎念"><a href="#三-碎碎念" class="headerlink" title="三.碎碎念"></a>三.碎碎念</h2><blockquote><p>能够写出高性能、高伸缩性的并发程序是一门艺术，而了解并发在底层是如何实现的，则是掌握这门艺术的前提，也是成长为高级程序员的必备知识！</p><p>加油吧！骚年！以梦为马，不负韶华！</p></blockquote><p><img src="https://s1.ax1x.com/2020/04/10/GTs18e.gif" alt="冲鸭"></p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《深入理解Java虚拟机》第3版</li><li><a href="https://juejin.im/post/5e6dec87518825493d6aa78f#heading-0" target="_blank" rel="noopener">一、聊聊并发—线程安全到底在说什么</a></li><li><a href="https://www.jianshu.com/p/ca8801044352" target="_blank" rel="noopener">要点提炼 | 理解 JVM 之线程安全 &amp; 锁优化</a></li><li><a href="https://www.zhihu.com/question/270564693" target="_blank" rel="noopener">自旋锁跟轻量级锁的关系是什么？</a></li><li><a href="https://mp.weixin.qq.com/s/tQ4dgerk9-FR4HIW5rwHpQ" target="_blank" rel="noopener">一图带你看懂Java各种锁，建议保存！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 线程 </tag>
            
            <tag> 线程安全 </tag>
            
            <tag> 锁优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一夜搞懂 | Java 内存模型与线程</title>
      <link href="/2020/04/08/yi-ye-gao-dong-java-nei-cun-mo-xing-yu-xian-cheng/"/>
      <url>/2020/04/08/yi-ye-gao-dong-java-nei-cun-mo-xing-yu-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="一夜搞懂-Java-内存模型与线程"><a href="#一夜搞懂-Java-内存模型与线程" class="headerlink" title="一夜搞懂 | Java 内存模型与线程"></a>一夜搞懂 | Java 内存模型与线程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的 Github 个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的 GIthub 博客</a></p></blockquote><h2 id="学习导图"><a href="#学习导图" class="headerlink" title="学习导图"></a>学习导图</h2><p><img src="https://imgkr.cn-bj.ufileos.com/03cf885d-bda5-4901-86eb-90b9ffd6a472.png" alt="学习导图"></p><h2 id="一-为什么要学习内存模型与线程？"><a href="#一-为什么要学习内存模型与线程？" class="headerlink" title="一.为什么要学习内存模型与线程？"></a>一.为什么要学习内存模型与线程？</h2><blockquote><p>并发处理的广泛应用是 <code>Amdah1</code> 定律代替摩尔定律成为计算机性能发展源动力的根本原因，也是人类压制计算机运算能力的最有力武器</p></blockquote><p>线程通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：<strong>共享内存和消息传递</strong>。</p><p>线程同步是指程序用于控制不同线程之间操作发生相对顺序的机制。</p><p><strong><code>Java</code> 的并发采用的是共享内存模型，<code>Java</code> 线程之间的通信总是隐式进行，整个通信过程对程序员完全透明</strong>。如果你想设计表现良好的并发程序，<strong>理解 <code>Java</code> 内存模型是非常重要的</strong>。<code>Java</code> 内存模型规定了<strong>如何和何时</strong>可以看到由其他线程修改过后的共享变量的值，以及在必须时<strong>如何同步</strong>的访问共享变量。</p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>Q1：<strong>多任务处理的必要性</strong></p><ul><li>充分利用计算机处理器的能力，避免处理器在磁盘 <code>I/O</code>、网络通信或数据库访问时总是处于等待其他资源的状态</li><li>便于一个服务端同时对多个客户端提供服务</li></ul><blockquote><p>通过指标 <code>TPS</code>（<code>Transactions Per Second</code>）可衡量一个服务性能的高低好坏，它表示每秒服务端平均能响应的请求总数，进而体现出程序的并发能力</p></blockquote><p>Q2：<strong>硬件的效率与一致性</strong></p><blockquote><p>为了更好的理解 <code>Java</code> 内存模型，先理解<strong>物理计算机中的并发问题</strong>，两者有很高的可比性</p></blockquote><p>为了平衡内存交互速度与处理器的运算速度之间几个数量级的差距，引入一层<strong>高速缓存</strong>（<code>Cache</code>）来作为内存与处理器之间的缓冲：</p><ul><li>将运算需要使用到的数据复制到缓存中，让运算能快速进行</li><li>当运算结束后再从缓存同步回内存之中，而无须让处理器等待缓慢的内存读写</li></ul><blockquote><ul><li>出现问题：引入高速缓存虽解决了处理器与内存速度之间的矛盾，但是其引入了一个新的问题——<strong>缓存一致性</strong></li><li>解决办法：需要各个处理器访问缓存时都遵循一些协议，在读写时要根据<strong>协议</strong>来进行操作</li></ul></blockquote><p><img src="https://s1.ax1x.com/2020/04/08/G2bDI0.png" alt="缓存与协议的结构图"></p><p><strong>内存模型</strong>可以理解为：在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象</p><h3 id="2-2-Java-内存模型"><a href="#2-2-Java-内存模型" class="headerlink" title="2.2 Java 内存模型"></a>2.2 <code>Java</code> 内存模型</h3><blockquote><p>之前笔者在 <a href="https://juejin.im/post/5e6712356fb9a07cd323e7a2#heading-7" target="_blank" rel="noopener">进阶之路 | 奇妙的Thread之旅</a>中简要介绍过 <code>Java</code> 内存模型，相信看过的读者都有一些印象</p></blockquote><h4 id="2-2-1-设计目的"><a href="#2-2-1-设计目的" class="headerlink" title="2.2.1 设计目的"></a>2.2.1 设计目的</h4><p><strong>屏蔽掉各种硬件和操作系统的内存访问差异</strong>，实现 <code>Java</code> 程序在各种平台下都能达到<strong>一致的内存访问效果</strong></p><h4 id="2-2-2-设计方法"><a href="#2-2-2-设计方法" class="headerlink" title="2.2.2 设计方法"></a>2.2.2 设计方法</h4><p>通过定义程序中各个<strong>变量</strong>的<strong>访问规则</strong>，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节</p><blockquote><p><strong>注意</strong>：这里的变量与 <code>Java</code> 中说的变量不同，而指的是<strong>实例字段、静态字段和构成数组对象的元素</strong>，但<strong>不包括局部变量与方法参数</strong>（其存放于局部变量表中，而局部变量表在 <code>JVM</code> 栈中），因为后者是线程私有的，不会被共享，自然就不会存在竞争问题。</p></blockquote><h4 id="2-2-3-模型结构"><a href="#2-2-3-模型结构" class="headerlink" title="2.2.3 模型结构"></a>2.2.3 模型结构</h4><p><img src="https://imgkr.cn-bj.ufileos.com/d5f3d955-be42-4c64-b766-ed92d08a10ea.png" alt="内存模型"></p><ul><li>主内存：所有变量的存储位置。直接对应于物理硬件的内存</li></ul><blockquote><p>注意：这里的主内存、工作内存与 <a href="https://juejin.im/post/5e7d62f1e51d4546df7375dd#heading-4" target="_blank" rel="noopener">一文洞悉JVM内存管理机制</a> 说的 <code>Java</code> 内存区域中的 <code>Java</code> 堆、栈、方法区等并不是同一个层次的内存划分</p></blockquote><ul><li>工作内存：每条线程还有自己的<strong>工作内存</strong>，用于保存被该线程使用到的变量的<strong>主内存副本拷贝</strong>。为了获取更好的运行速度，虚拟机可能会让<strong>工作内存优先存储于寄存器和高速缓存中</strong></li></ul><blockquote><p>注意：</p><ul><li>线程<strong>对变量的所有操作都必须在工作内存中进行</strong>，而不能直接读写主内存中的变量</li><li>不同的线程之间也无法直接访问对方工作内存中的变量，线程间<strong>变量值的传递必须通过主内存</strong>来完成</li></ul></blockquote><ul><li><p>交互协议：用于规定一个变量<strong>如何从主内存拷贝到工作内存、如何从工作内存同步回主内存</strong>之类的实现细节。</p><p>共有 <code>8</code> 种操作：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/08/170030-938914.png" alt="交互协议"></p><ol><li>作用于<strong>主内存</strong>变量：</li></ol><blockquote><ul><li><strong>锁定</strong> <code>lock</code> ：把变量标识为一条线程独占的状态</li><li><strong>解锁</strong> <code>unlock</code> ：把处于锁定状态的变量释放出来</li><li><strong>写入</strong> <code>write</code> ：把 <code>store</code> 操作从工作内存中得到的变量的值放入主内存的变量中</li><li><strong>读取</strong> <code>read</code> ：把变量的值从主内存传输到线程的工作内存中，以便随后的 <code>load</code> 动作使用</li></ul></blockquote><p>​    2.用于<strong>工作内存</strong>变量：</p><blockquote><ul><li><strong>赋值</strong> <code>assign</code> ：把从执行引擎接收到的值赋给工作内存的变量</li><li><strong>使用</strong> <code>use</code> ：把工作内存中一个变量的值传递给执行引擎</li><li><strong>存储</strong> <code>store</code> ：把工作内存中变量的值传送到主内存中，以便随后的 <code>write</code> 操作使用</li><li><strong>写入</strong> <code>write</code> ：把 <code>store</code> 操作从工作内存中得到的变量的值放入主内存的变量中</li></ul></blockquote><p><strong>结论</strong>：注意是<strong>顺序非连续</strong></p><ul><li>如果要把变量从主内存<strong>复制</strong>到工作内存，那就要<strong>顺序</strong>地执行 <code>read</code> 和 <code>load</code></li><li>如果要把变量从工作内存<strong>同步</strong>回主内存，就要<strong>顺序</strong>地执行 <code>store</code> 和 <code>write</code></li></ul><h4 id="2-2-4-确保并发操作安全的原则"><a href="#2-2-4-确保并发操作安全的原则" class="headerlink" title="2.2.4 确保并发操作安全的原则"></a>2.2.4 确保并发操作安全的原则</h4><p>A1：执行八种基本操作的时候，必须满足如下规则：</p><ul><li>不允许 <code>read</code> 和 <code>load</code>、<code>store</code> 和 <code>write</code> 操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现</li></ul><blockquote><p>可以简单理解为不能拒绝别人给的东西</p></blockquote><ul><li>不允许一个线程丢弃它的最近的 <code>assign</code> 操作，即变量在工作内存中改变了之后必须把该变化同步回主内存</li><li>不允许一个线程无原因地，即没有发生过任何 <code>assign</code> 操作，就把数据从线程的工作内存同步回主内存中</li><li>一个新的变量只能在主内存中『诞生』 ，不允许在工作内存中直接使用一个未被初始化（<code>load</code> 或 <code>assign</code>）的变量，即对一个变量实施 <code>use</code>、<code>store</code> 操作之前必须先执行过了 <code>assign</code> 和 <code>load</code> 操作</li><li>如果对一个变量执行 <code>lock</code> 操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行 <code>load</code> 或 <code>assign</code> 操作初始化变量的值</li></ul><blockquote><p>下文的 <code>volatile</code>底层就是用到了 <code>lock</code> 来实现可见性</p></blockquote><ul><li>如果一个变量事先没有被 <code>lock</code> 操作锁定，那就不允许对它执行 <code>unlock</code> 操作，也不允许去 <code>unlock</code> 一个被其他线程锁定住的变量</li><li>对一个变量执行 <code>unlock</code> 操作之前，必须先把此变量同步回主内存中</li></ul><blockquote><p>可见这么多规则非常繁琐，实践也麻烦，下面再介绍一个等效判断原则 – 『先行发生原则』</p></blockquote><p>A2：先行发生原则：</p><p>是 <code>Java</code> 内存模型中定义的两项操作之间的偏序关系。</p><p>下面例举一些 『天然的』先行发生关系，无须任何同步器协助就已经存在，可以在编码中直接使用</p><blockquote><ul><li><strong>程序次序规则</strong>：在<strong>一个线程内</strong>，按照控制流顺序，书写在前面的操作先行发生于书写在后面的操作</li><li><strong>管程锁定规则</strong>：一个 <code>unlock</code> 操作先行发生于后面对<strong>同一个</strong>锁的 <code>lock</code> 操作</li><li><strong><code>volatile</code> 变量规则</strong>：对一个 <code>volatile</code> 变量的<strong>写</strong>操作先行发生于后面对这个变量的<strong>读</strong>操作</li><li><strong>线程启动规则</strong>：<code>Thread</code> 的 <code>start()</code> 先行发生于此线程的每一个动作</li><li><strong>线程终止规则</strong>：线程中的所有操作都先行发生于对此线程的终止检测。可通过 <code>Thread.join()</code> 结束、<code>Thread.isAlive()</code> 的返回值等手段检测到线程已经终止执行</li><li><strong>线程中断规则</strong>：对线程 <code>interrupt()</code> 的调用先行发生于被中断线程的代码检测到中断事件的发生。可通过 <code>Thread.isInterrupted()</code> 检测到是否有中断发生</li><li><strong>对象终结规则</strong>：一个对象的初始化完成先行发生于它的 <code>finalize()</code> 的开始</li><li><strong>传递性</strong>：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 一定先行发生于操作 C</li></ul></blockquote><h4 id="2-2-5-保证原子性、可见性和有序性的措施"><a href="#2-2-5-保证原子性、可见性和有序性的措施" class="headerlink" title="2.2.5 保证原子性、可见性和有序性的措施"></a>2.2.5 保证原子性、可见性和有序性的措施</h4><ul><li><strong>原子性</strong>：一个操作要么都执行要么都不执行</li></ul><blockquote><ul><li><p>可直接保证的原子性变量操作有：<code>read</code>、<code>load</code>、<code>assign</code>、<code>use</code>、<code>store</code> 和 <code>write</code>，因此可认为<strong>基本数据类型的访问读写具备原子性的特征</strong></p></li><li><p>若需要保证更大范围的原子性，可通过更高层次的字节码指令 <code>monitorenter</code> 和 <code>monitorexit</code> 来隐式地使用 <code>lock</code> 和 <code>unlock</code> 这两个操作，反映到 <code>Java</code> 代码中就是同步代码块 <code>synchronized</code> 关键字</p></li></ul></blockquote><ul><li><strong>可见性</strong>：当一个线程修改了共享变量的值，其他线程能够立即得知这个修改</li></ul><blockquote><ul><li>通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现</li><li>提供三个关键字保证可见性：<ol><li><code>volatile</code> 能保证新值能<strong>立即</strong>同步到主内存，且<strong>每次使用前立即从主内存刷新</strong></li><li><code>synchronized</code> 对一个变量执行 <code>unlock</code> 操作<strong>之前可以先把此变量同步回主内存中</strong></li><li>被 <code>final</code> 修饰的字段在构造器中一旦初始化完成且构造器没有把 <code>this</code> 的引用传递出去，就可以在其他线程中就能看见 <code>final</code> 字段的值</li></ol></li></ul></blockquote><ul><li><strong>有序性</strong>：程序代码按照指令顺序执行</li></ul><blockquote><ul><li>如果在<strong>本线程内观察，所有的操作都是有序的</strong>，指 “线程内表现为串行的语义”；</li><li>如果在<strong>一个线程中观察另一个线程，所有的操作都是无序的</strong>，指 “指令重排序” 现象和 “工作内存与主内存同步延迟” 现象</li><li>提供两个关键字保证有序性：<ol><li><code>volatile</code> 本身就包含了禁止指令重排序的语义</li><li><code>synchronized</code> 保证一个变量在同一个时刻只允许一条线程对其进行 <code>lock</code> 操作，使得持有同一个锁的两个同步块只能串行地进入</li></ol></li></ul></blockquote><p>想详细了解 <code>volatile</code> 的读者，可以看下笔者之前写的文章：<a href="https://juejin.im/post/5e6712356fb9a07cd323e7a2#heading-7" target="_blank" rel="noopener">进阶之路 | 奇妙的 Thread 之旅</a></p><h3 id="2-3-Java-与线程"><a href="#2-3-Java-与线程" class="headerlink" title="2.3  Java 与线程"></a>2.3  <code>Java</code> 与线程</h3><h4 id="2-3-1-线程实现的三种方式"><a href="#2-3-1-线程实现的三种方式" class="headerlink" title="2.3.1 线程实现的三种方式"></a>2.3.1 线程实现的三种方式</h4><h5 id="1-使用内核线程"><a href="#1-使用内核线程" class="headerlink" title="1.使用内核线程"></a>1.使用内核线程</h5><blockquote><p>英文： <code>Kernel-Level Thread</code> ，简称：<code>KLT</code></p></blockquote><ul><li>定义：由操作系统内核支持的线程</li><li>原理：由内核来完成线程切换，内核通过操纵调度器（<code>Scheduler</code>）对线程进行调度，并负责将线程的任务映射到各个处理器上。每个内核线程可以视为内核的一个分身， 这样操作系统就有能力同时处理多件事情</li><li>多线程内核：支持多线程的内核</li><li><strong>轻量级进程</strong>（<code>Light Weight Process</code>,简称：<code>LWP</code>）：内核线程的一种高级接口</li></ul><blockquote><ul><li>优点：每个轻量级进程都由一个内核线程支持，因此每个都成为一个独立的调度单元，即使有一个轻量级进程在系统调用中阻塞，也不会影响整个进程继续工作</li><li>缺点：<ol><li>由于基于内核线程实现，所以各种线程操作（创建、析构及同步）都需要进行系统调用，代价相对较高，需要在<strong>用户态</strong>和<strong>内核态</strong>中来回切换</li><li>一个系统支持轻量级进程的数量是有限的</li></ol></li><li>一对一线程模型：轻量级进程与内核线程之间 <code>1：1</code> 的关系，如图所示</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/08/180651-884555.png" alt="内核线程模型"></p><h5 id="2-使用用户线程"><a href="#2-使用用户线程" class="headerlink" title="2.使用用户线程"></a>2.使用用户线程</h5><blockquote><p>英文： <code>User Thread</code> ，简称：<code>UT</code></p></blockquote><ul><li>定义：</li></ul><blockquote><ul><li><strong>广义</strong>上认为一个线程<strong>不是内核线程就是用户线程</strong></li><li><strong>狭义</strong>上认为用户线程指的是完全建立在<strong>用户空间的线程库</strong>上，而系统内核<strong>不能感知线程存在</strong>的实现</li></ul></blockquote><ul><li>优点：由于用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核的帮助，甚至可以不需要切换到内核态，所以<strong>操作非常快速且低消耗的，且可以支持规模更大的线程数量</strong></li><li><strong>缺点</strong>：由于没有系统内核的支援，所有的线程操作都需要用户程序自己处理，线程的创建、切换和调度都是需要考虑的问题，实现较复杂</li><li><strong>一对多的线程模型进程</strong>：进程与用户线程之间 <code>1：N</code> 的关系，如图所示</li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/4c7c9d76-201d-4b2b-b669-e348614cfe73.png" alt="用户线程模型"></p><h5 id="3-混合"><a href="#3-混合" class="headerlink" title="3.混合"></a>3.混合</h5><ul><li><p>定义：既存在用户线程，也存在轻量级进程</p></li><li><p>优点：</p></li></ul><blockquote><ul><li>用户线程完全建立在用户空间中，因此用户线程的创建、切换、析构等<strong>操作依然廉价</strong>，并且可以支持大规模的用户线程并发</li><li>操作系统提供支持的轻量级进程作为用户线程和内核线程之间的桥梁，可以使用内核提供的线程调度功能及处理器映射，且用户线程的系统调用要通过轻量级线程来完成，大大<strong>降低了整个进程被完全阻塞的风险</strong></li></ul></blockquote><ul><li>多对多的线程模型：用户线程与轻量级进程的数量比不定，即用户线程与轻量级进程之间 <code>N：M</code> 的关系，如图所示</li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/2c1cd163-317e-4b23-ad3b-bd8b83db3a46.png" alt="混合模型"></p><blockquote><p>Q： <code>Java</code> 线程的实现是选择哪一种呢？</p><p>A：答案是<strong>不确定</strong>的。操作系统支持怎样的线程模型，在很大程度上决定了 <code>JVM</code> 的线程是怎样映射的。线程模型只对线程的并发规模和操作成本产生影响，而对 <code>Java</code> 程序的编码和运行过程来说，这些差异都是透明的。</p></blockquote><h4 id="2-3-2-线程调度的两种方式"><a href="#2-3-2-线程调度的两种方式" class="headerlink" title="2.3.2 线程调度的两种方式"></a>2.3.2 线程调度的两种方式</h4><blockquote><p>线程调度：指系统为线程分配处理器使用权的过程</p></blockquote><h5 id="1-协同式线程调度"><a href="#1-协同式线程调度" class="headerlink" title="1.协同式线程调度"></a>1.协同式线程调度</h5><ul><li><p>由<strong>线程本身</strong>来控制线程的执行时间。线程把自己的工作执行完后，要主动通知系统切换到另外一个线程上</p></li><li><p>好处：</p><blockquote><ul><li>实现简单</li><li>切换操作自己可知，不存在线程同步的问题</li></ul></blockquote></li><li><p>坏处：线程<strong>执行时间不可控</strong>，假如一个线程编写有问题一直不告知系统进行线程切换，那么程序就会一直被阻塞</p></li></ul><h5 id="2-抢占式线程调度"><a href="#2-抢占式线程调度" class="headerlink" title="2.抢占式线程调度"></a>2.抢占式线程调度</h5><ul><li>由<strong>系统</strong>来分配每个线程的执行时间</li><li><strong>好处</strong>：线程<strong>执行时间是系统可控</strong>的，不存在一个线程导致整个进程阻塞的问题</li><li>可以通过设置线程<strong>优先级</strong>，优先级越高的线程越容易被系统选择执行</li></ul><blockquote><p>但是线程优先级并不是太靠谱，一方面因为 <code>Java</code> 的线程是通过<strong>映射</strong>到系统的<strong>原生线程</strong>上来实现的，所以线程调度<strong>最终还是取决于操作系统</strong>，在一些平台上不同的优先级实际会变得相同；另一方面<strong>优先级可能会被系统自行改变。</strong></p></blockquote><h4 id="2-3-3-线程的六种状态"><a href="#2-3-3-线程的六种状态" class="headerlink" title="2.3.3 线程的六种状态"></a>2.3.3 线程的六种状态</h4><p><img src="https://imgkr.cn-bj.ufileos.com/1691c2f2-0b33-4445-ae59-e2da06ae1505.png" alt="线程状态"></p><p>在任意一个时间点，一个线程只能有且只有其中的一种状态：</p><ul><li><p><strong>新建</strong> <code>New</code> ：线程创建后尚未启动</p></li><li><p><strong>运行</strong> <code>Runable</code>：包括正在执行（<code>Running</code>）和等待着 CPU 为它分配执行时间（<code>Ready</code>）两种</p></li><li><p><strong>无限期等待</strong> <code>Waiting</code>：该线程不会被分配 <code>CPU</code> 执行时间，要等待被其他线程显式地唤醒。</p><p>以下方法会让线程陷入<strong>无限期等待</strong>状态：</p></li></ul><blockquote><ul><li><p>没有设置 <code>Timeout</code> 参数的 <code>Object.wait()</code></p></li><li><p>没有设置 <code>Timeout</code> 参数的 <code>Thread.join()</code></p></li><li><p><code>LockSupport.park()</code> </p><p>(PS：想详细了解它的可以看下这篇文章：<a href="https://juejin.im/post/5e771bdd51882549575fb2fb" target="_blank" rel="noopener">Java 多线程学习（7）聊聊 LockSupport.park () 和 LockSupport.unpark ()</a>)</p></li></ul></blockquote><ul><li><strong>限期等待</strong> <code>Timed Waiting</code>：该线程不会被分配 <code>CPU</code> 执行时间，但在一定时间后会被系统自动唤醒。以下方法会让线程进入限期等待状态：</li></ul><blockquote><ul><li><code>Thread.sleep()</code></li><li>设置了 <code>Timeout</code> 参数的 <code>Object.wait()</code></li><li>设置了 <code>Timeout</code> 参数的 <code>Thread.join()</code></li><li><code>LockSupport.parkNanos()</code></li><li><code>LockSupport.parkUntil()</code></li></ul></blockquote><ul><li><strong>阻塞</strong> <code>Blocked</code>：线程被阻塞</li></ul><blockquote><p>注意区别阻塞和等待：</p><ul><li>阻塞状态：在等待获取到一个<strong>排他锁</strong>，在另外一个线程放弃这个锁的时候发生；</li><li>等待状态：在等待一段<strong>时间</strong>或者<strong>唤醒动作</strong>的发生，在程序等待进入同步区域的时候发生。</li></ul></blockquote><ul><li><strong>结束</strong> <code>Terminated</code>：线程已经结束执行</li></ul><h2 id="三-碎碎念"><a href="#三-碎碎念" class="headerlink" title="三.碎碎念"></a>三.碎碎念</h2><blockquote><p>恭喜你！已经看完了前面的文章，相信你对 <code>Java</code> 内存模型与线程已经有一定深度的了解！你可以稍微放松奖励自己一下，可以睡一个美美的觉，明天起来继续冲冲冲！！！</p><p>PS：原本《深入理解Java虚拟机》第3版中还提及了协程，但是我还没学过协程的基本用法，这时候给大家讲解感觉有点打肿脸充胖子的感觉 hhh，明天《第一行代码-第三版》也要到了，待我看完《第一行代码》再补充协程的内容吧 hhhh</p></blockquote><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《深入理解Java虚拟机》第3版</li><li><a href="https://juejin.im/post/5bf2977751882505d840321d#heading-18" target="_blank" rel="noopener">理解Java内存模型</a></li><li><a href="https://juejin.im/post/5e771bdd51882549575fb2fb" target="_blank" rel="noopener">Java 多线程学习（7）聊聊 LockSupport.park () 和 LockSupport.unpark ()</a></li><li><a href="https://www.jianshu.com/p/90a036212cb4" target="_blank" rel="noopener">要点提炼 | 理解 JVM 之内存模型 &amp; 线程</a></li><li><a href="https://juejin.im/post/5b87ad31e51d4538e41066e9#comment" target="_blank" rel="noopener">啃碎并发（九）：内存模型之基础概述</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 内存模型 </tag>
            
            <tag> 线程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一夜搞懂 | JVM 字节码执行引擎</title>
      <link href="/2020/04/05/yi-ye-gao-dong-jvm-zi-jie-ma-zhi-xing-yin-qing/"/>
      <url>/2020/04/05/yi-ye-gao-dong-jvm-zi-jie-ma-zhi-xing-yin-qing/</url>
      
        <content type="html"><![CDATA[<h1 id="一夜搞懂-JVM-字节码执行引擎"><a href="#一夜搞懂-JVM-字节码执行引擎" class="headerlink" title="一夜搞懂 | JVM 字节码执行引擎"></a>一夜搞懂 | JVM 字节码执行引擎</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的 Github 个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的 GIthub 博客</a></p></blockquote><h2 id="学习导图"><a href="#学习导图" class="headerlink" title="学习导图"></a>学习导图</h2><p><img src="https://s1.ax1x.com/2020/04/05/GrUwee.png" alt="学习导图"></p><h2 id="一-为什么要学习字节码执行引擎？"><a href="#一-为什么要学习字节码执行引擎？" class="headerlink" title="一.为什么要学习字节码执行引擎？"></a>一.为什么要学习字节码执行引擎？</h2><blockquote><p>代码编译的结果从本地机器码转变为字节码，是存储格式发展的一小步，却是编程语言发展的一大步</p></blockquote><p>首先，抛出灵魂三问：</p><ul><li>虚拟机在执行代码的时候，如何找到正确的方法呢？</li><li>如何执行方法内的字节码呢？</li><li>执行代码时涉及的内存结构有哪些呢？</li></ul><p>如果你对上述问题理解得还不是特别透彻的话，可以看下这篇文章；如果理解了，你可以关闭网页，打开游戏放松了hhh</p><p>下面，笔者将带你探究 <code>JVM</code> 核心的组成部分之一——执行引擎。</p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>Q1：<strong>虚拟机与物理机的异同</strong></p><ul><li>相同点：都有<strong>代码执行能力</strong></li><li>不同点：</li></ul><blockquote><ul><li><strong>物理机</strong>的执行引擎是直接建立在<strong>处理器、硬件、指令集和操作系统</strong>层面上的</li><li><strong>虚拟机</strong>的执行引擎是由<strong>自定义</strong>的，可自行制定指令集与执行引擎的结构体系，且<strong>能够执行不被硬件直接支持的指令集格式</strong></li></ul></blockquote><p>Q2：<strong>有关 <code>JVM</code> 字节码执行引擎的概念模型</strong></p><ul><li>外观上：所有 <code>JVM</code> 的执行引擎都是一致的。输入的是字节码文件，处理的是字节码解析的等效过程，输出的是执行结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/05/174930-306988.png" alt="执行引擎的外观"></p><ul><li>从实现上，执行引擎有多种执行 <code>Java</code> 代码的选择</li></ul><blockquote><ul><li>解释执行：通过解释器执行</li><li>编译执行：通过即时编译器产生本地代码执行</li><li>两者兼备，甚至还会包含几个不同级别的编译器执行引擎</li></ul></blockquote><h3 id="2-2-运行时栈帧结构"><a href="#2-2-运行时栈帧结构" class="headerlink" title="2.2 运行时栈帧结构"></a>2.2 运行时栈帧结构</h3><h4 id="2-2-1-基本概念"><a href="#2-2-1-基本概念" class="headerlink" title="2.2.1 基本概念"></a>2.2.1 基本概念</h4><blockquote><p>笔者之前在 <a href="https://juejin.im/post/5e7d62f1e51d4546df7375dd#heading-6" target="_blank" rel="noopener">一文洞悉 JVM 内存管理机制</a> 中就谈到过虚拟机栈，相信看过的读者都有印象</p></blockquote><ul><li>栈帧：用于支持虚拟机进行<strong>方法调用和方法执行</strong>的数据结构，是虚拟机栈的栈元素</li><li>存储内容：方法的局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息</li><li>每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程</li><li>一个栈帧需要分配多少内存在程序<strong>编译期就已确定</strong>，而<strong>不会受到程序运行期变量数据的影响</strong></li><li>对于执行引擎来说，只有位于栈顶的栈帧（<strong>当前栈帧</strong>）才是有效的，即所有字节码指令只对当前栈帧进行操作，与当前栈帧相关联的方法称为<strong>当前方法</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/05/180329-345374.png" alt="栈帧结构"></p><h4 id="2-2-2-局部变量表"><a href="#2-2-2-局部变量表" class="headerlink" title="2.2.2 局部变量表"></a>2.2.2 局部变量表</h4><ul><li>定义：局部变量表是一组变量值存储空间</li><li>作用：存放方法<strong>参数</strong>和方法内部定义的<strong>局部变量</strong></li><li>分配时期：<code>Java</code> 程序<strong>编译</strong>为 <code>Class</code> 文件时，会在方法的 <code>Code</code> 属性的 <code>max_locals</code> 数据项中确定了该方法所需要分配的局部变量表的最大容量</li><li>最小单位：变量槽</li></ul><blockquote><ul><li>大小：虚拟机规范中没有明确指明一个变量槽占用的内存空间大小，允许变量槽长度随着处理器、操作系统或虚拟机的不同而发生变化<ol><li>对于 <strong><code>32</code> 位以内</strong>的数据类型（<code>boolean</code>、<code>byte</code>、<code>char</code>、<code>short</code>、<code>int</code>、<code>float</code>、<code>reference</code>、<code>returnAddress</code> ），虚拟机会为其分配一个变量槽空间</li><li>对于 <code>64</code> 位的数据类型（<code>long</code>、<code>double</code> ），虚拟机会以高位对齐的方式为其分配两个连续的变量槽空间</li></ol></li><li>特点：可重用。为了<strong>尽可能节省栈帧空间</strong>，若当前字节码 <code>PC</code> 计数器的值<strong>已超出了某个变量的作用域</strong>，则该变量对应的变量槽可<strong>交给其他变量使用</strong></li></ul></blockquote><ul><li><p>访问方式：通过索引定位。索引值的范围是从 0 开始至局部变量表最大的变量槽数量</p></li><li><p>局部变量表第一项是名为 <code>this</code> 的一个当前类引用，它指向堆中当前对象的引用（由反编译得到的局部变量表可知）</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/05/183416-531956.png" alt="局部变量表"></p></li></ul><h4 id="2-2-3-操作数栈"><a href="#2-2-3-操作数栈" class="headerlink" title="2.2.3 操作数栈"></a>2.2.3 操作数栈</h4><ul><li><p>操作数栈是一个后入先出栈</p></li><li><p>作用：在方法<strong>执行过程</strong>中，写入（进栈）和提取（出栈）各种<strong>字节码指令</strong></p></li><li><p>分配时期：同上，在编译时会在方法的 <code>Code</code> 属性的 <code>max_stacks</code> 数据项中确定操作数栈的最大深度</p></li><li><p>栈容量：操作数栈的每一个元素可以是任意的 <code>Java</code> 数据类型 ——<code>32</code> 位数据类型所占的栈容量为 <code>1</code>，<code>64</code> 位数据类型所占的栈容量为 <code>2</code></p></li><li><p>注意：操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，在<strong>编译时</strong>编译器需要<strong>验证</strong>一次、在<strong>类校验</strong>阶段的数据流分析中还要再次<strong>验证</strong></p></li></ul><h4 id="2-2-4-动态连接"><a href="#2-2-4-动态连接" class="headerlink" title="2.2.4 动态连接"></a>2.2.4 动态连接</h4><ul><li>定义：每个栈帧都包含一个指向运行时常量池中该<strong>栈帧所属方法的引用</strong>，持有这个引用是为了<strong>支持方法调用过程中的动态连接</strong></li><li>静态解析和动态连接区别：</li></ul><blockquote><p><code>Class</code> 文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用作为参数，这些符号引用：</p><ul><li>一部分会在<strong>类加载</strong>阶段或者<strong>第一次使用</strong>的时候就转化为直接引用（<strong>静态解析</strong>）</li><li>另一部分会在每一次<strong>运行期</strong>间转化为直接引用（<strong>动态连接</strong>）</li></ul></blockquote><h4 id="2-2-5-方法返回地址"><a href="#2-2-5-方法返回地址" class="headerlink" title="2.2.5 方法返回地址"></a>2.2.5 方法返回地址</h4><ul><li>方法退出的两种方式：</li></ul><blockquote><ul><li>正常退出：执行中遇到任意一个方法返回的字节码指令</li><li>异常退出：执行中遇到异常、且在本方法的异常表中没有搜索到匹配的异常处理器区处理</li></ul></blockquote><ul><li>作用：在方法返回时都可能在栈帧中保存一些信息，用于<strong>恢复</strong>上层方法调用者的<strong>执行状态</strong></li></ul><blockquote><ul><li>正常退出时，调用者的 <code>PC</code> 计数器的值可以作为返回地址</li><li>异常退出时，通过异常处理器表来确定返回地址</li></ul></blockquote><ul><li>方法退出的执行操作：</li></ul><blockquote><ul><li>恢复上层方法的局部变量表和操作数栈</li><li>若有返回值把它压入调用者栈帧的操作数栈中</li><li>调整 <code>PC</code> 计数器的值以指向方法调用指令后面的一条指令等</li></ul></blockquote><p>在实际开发中，一般会把动态连接、方法返回地址与其他附加信息全部一起称为<strong>栈帧信息</strong></p><h3 id="2-3-方法调用"><a href="#2-3-方法调用" class="headerlink" title="2.3 方法调用"></a>2.3 方法调用</h3><ul><li>方法调用是最普遍且频繁的操作</li><li>任务：确定被调用方法的版本，即<strong>调用哪一个方法</strong>，不涉及方法内部的具体运行过程</li></ul><blockquote><p>下面笔者将为大家详细讲解方法调用的类型</p></blockquote><h4 id="2-3-1-解析调用"><a href="#2-3-1-解析调用" class="headerlink" title="2.3.1 解析调用"></a>2.3.1 解析调用</h4><blockquote><p>笔者之前在 <a href="https://juejin.im/post/5e86a5b86fb9a03c451bbdd5#heading-9" target="_blank" rel="noopener">一夜搞懂 | JVM 类加载机制</a>中就谈到过解析，感觉有点混淆的，可以回去看下</p></blockquote><ul><li>特点：<ol><li>是静态过程</li><li>在编译期间就完全确定，在<strong>类装载</strong>的<strong>解析</strong>阶段就会把涉及的<strong>符号引用全部转变为可确定的直接引用</strong>，而不会延迟到运行期再去完成，即<strong>编译期可知、运行期不变</strong></li></ol></li><li>适用对象：<code>private</code> 修饰的私有方法，类<strong>静态方法</strong>，类<strong>实例构造器</strong>，<strong>父类方法</strong></li></ul><h4 id="2-3-2-分派调用"><a href="#2-3-2-分派调用" class="headerlink" title="2.3.2 分派调用"></a>2.3.2 分派调用</h4><p>Q1：<strong>什么是静态类型？什么是实际类型？</strong></p><p>A1：这个用代码来说比较简便， Talk is cheap ! Show me the code !</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里的 Human 是静态类型，Man 是实际类型</span>        Human man<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="1-静态分派"><a href="#1-静态分派" class="headerlink" title="1.静态分派"></a>1.静态分派</h5><blockquote><ul><li>依赖<strong>静态类型</strong>来定位方法的执行版本</li><li>典型应用是<strong>方法重载</strong></li><li>发生在编译阶段，不由 <code>JVM</code> 来执行</li></ul><p>单纯说未免有些许抽象，所以特地用下面的 <code>DEMO</code> 来帮助了解</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Daughter</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Father father<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello , i am the father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Daughter daughter<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello i am the daughter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Son son<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello i am the son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Father son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Father daughter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Daughter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Hello hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span>    hello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>daughter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果如下：</p><blockquote><p>hello , i am the father</p><p>hello , i am the father</p></blockquote><p>我们的编译器在生成字节码指令的时候会根据变量的<strong>静态类型</strong>选择调用合适的方法。就我们上述的例子而言：</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/05/213526-351046.png" alt="字节码指令调用情况"></p><h5 id="2-动态分派"><a href="#2-动态分派" class="headerlink" title="2.动态分派"></a>2.动态分派</h5><blockquote><ul><li><p>依赖动态类型来定位方法的执行版本</p></li><li><p>典型应用是<strong>方法重写</strong></p></li><li><p>发生在运行阶段，由 <code>JVM</code> 来执行</p><p>单纯说未免有些许抽象，所以特地用下面的 <code>DEMO</code> 来帮助了解</p></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world ---- father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//继承 + 方法重写</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world ---- son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Father son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    son<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果如下：</p><blockquote><p>hello world —- son</p></blockquote><p>我们接着来看一下字节码指令调用情况</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/05/213631-847608.png" alt="字节码指令"></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/05/213707-361719.png" alt="字节码指令"></p><blockquote><p>疑惑来了，我们可以看到，<code>JVM</code> 选择调用的是静态类型的对应方法，但是为什么最终的结果却调用了是实际类型的对应方法呢？</p></blockquote><p>当我们将要调用某个类型实例的具体方法时，会首先将当前实例压入操作数栈，然后我们的 <code>invokevirtual</code> 指令需要完成以下几个步骤才能实现对一个方法的调用：</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/05/214835-315188.png" alt></p><p>因此，疑惑释然</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/13/001626-835502.png" alt="正解"></p><h5 id="3-单分派"><a href="#3-单分派" class="headerlink" title="3.单分派"></a>3.单分派</h5><ul><li>含义：根据一个宗量对目标方法进行选择（方法的<strong>接受者</strong>与方法的<strong>参数</strong>统称为方法的宗量）</li></ul><h5 id="4-多分派"><a href="#4-多分派" class="headerlink" title="4.多分派"></a>4.多分派</h5><ul><li>含义：根据多于一个宗量对目标方法进行选择</li></ul><blockquote><p>想了解 <strong>静态多分派，动态单分派</strong> 的可以看下这篇文章：<a href="https://blog.csdn.net/p10010/article/details/50456276" target="_blank" rel="noopener">Java 中的静态单多分派与动态单分派</a></p></blockquote><h2 id="三-碎碎念"><a href="#三-碎碎念" class="headerlink" title="三.碎碎念"></a>三.碎碎念</h2><blockquote><p>恭喜你！已经看完了前面的文章，相信你对<code>JVM</code>字节码执行引擎已经有一定深度的了解！你可以稍微放松奖励自己一下，可以睡一个美美的觉，明天起来继续冲冲冲！！！</p></blockquote><p><img src="https://s1.ax1x.com/2020/04/13/GXPkO1.gif" alt="睡觉不香吗"></p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《深入理解Java虚拟机》第3版</li><li><a href="https://blog.csdn.net/p10010/article/details/50456276" target="_blank" rel="noopener">Java 中的静态单多分派与动态单分派</a></li><li><a href="https://www.jianshu.com/p/8be235393021" target="_blank" rel="noopener">要点提炼 | 理解 JVM 之字节码执行引擎</a></li><li><a href="https://juejin.im/post/5abc97ff518825556a727e66#heading-3" target="_blank" rel="noopener">虚拟机字节码执行引擎</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 双亲委派 </tag>
            
            <tag> 字节码执行引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一夜搞懂 | JVM 类加载机制</title>
      <link href="/2020/04/03/yi-ye-gao-dong-jvm-lei-jia-zai-ji-zhi/"/>
      <url>/2020/04/03/yi-ye-gao-dong-jvm-lei-jia-zai-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="一夜搞懂-JVM-类加载机制"><a href="#一夜搞懂-JVM-类加载机制" class="headerlink" title="一夜搞懂 | JVM 类加载机制"></a>一夜搞懂 | JVM 类加载机制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习导图"><a href="#学习导图" class="headerlink" title="学习导图"></a>学习导图</h2><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/03/105402-274667.png" alt="学习导图"></p><h2 id="一-为什么要学习类加载机制？"><a href="#一-为什么要学习类加载机制？" class="headerlink" title="一.为什么要学习类加载机制？"></a>一.为什么要学习类加载机制？</h2><p>今天想跟大家唠嗑唠嗑<code>Java</code>的类加载机制，这是<code>Java</code>的一个很重要的创新点，曾经也是<code>Java</code>流行的重要原因之一。</p><p><code>Oracle</code>当初引入这个机制是为了满足<code>Java Applet</code>开发的需求，<code>JVM</code>咬咬牙引入了<code>Java</code>类加载机制，后来的基于<code>Jvm</code>的动态部署，插件化开发包括大家热议的热修复，总之很多后来的技术都源于在<code>JVM</code>中引入了类加载器。</p><p>如今，类加载机制也在各个领域大放异彩，在面试中，由类加载机制所衍生出来各类面试题也层出不穷。</p><p>所以，我们要了解下类加载机制，为工作中或者是面试中实际的需要打好良好的基础。</p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>Q1:<strong><code>JVM</code>类加载机制定义</strong>：</p><p>虚拟机把描述类的数据从<code>Class</code>文件<strong>加载</strong>到内存，并对数据进行<strong>校验</strong>、<strong>转换解析</strong>和<strong>初始化</strong>，最终形成可被<strong>虚拟机</strong>直接使用的<code>Java</code>类型的过程</p><p><img src="https://imgkr.cn-bj.ufileos.com/ecbc8c95-cd33-44bd-a295-8aa7a80f2756.png" alt="类加载流程"></p><blockquote><p>类加载过程在 <code>Java</code> 执行流程中的位置如下(红框的部分是类加载过程)</p></blockquote><p><img src="https://imgkr.cn-bj.ufileos.com/d741179b-4c68-41c2-9bff-b578036bbc77.png" alt="Java 执行流程"></p><p>Q2：<strong>特性</strong></p><p>运行期类加载。即在<code>Java</code>语言里面，类型的加载、连接和初始化过程都是在程序<strong>运行期</strong>完成的，从而通过牺牲一些性能开销来换取<code>Java</code>程序的高度灵活性</p><blockquote><p>什么是运行期，什么是编译期？</p><ul><li><strong>编译期</strong>是指编译器将<strong>源代码翻译</strong>为<strong>机器能识别的代码</strong>，<code>Java</code>被编译为<code>JVM</code>认识的<strong>字节码文件</strong></li><li><strong>运行期</strong>则是指<code>Java</code>代码的<strong>运行</strong>过程</li></ul></blockquote><p><code>JVM</code>运行期动态加载+动态连接-&gt;<code>Java</code>的动态扩展特性</p><h3 id="2-2-类加载的过程"><a href="#2-2-类加载的过程" class="headerlink" title="2.2 类加载的过程"></a>2.2 类加载的过程</h3><p>类从被加载到虚拟机内存中开始、到卸载出内存为止，整个生命周期包括七个阶段：</p><ul><li><p><strong>加载</strong></p></li><li><p><strong>验证</strong></p></li><li><p><strong>准备</strong></p></li><li><p><strong>解析</strong></p></li><li><p><strong>初始化</strong></p></li><li><p><strong>使用</strong></p></li><li><p><strong>卸载</strong></p></li></ul><p>其中，验证、准备、解析这三个部分统称为<strong>连接</strong>，流程如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/02/185624-434838.png" alt="类加载过程"></p><p>  注意：</p><blockquote><ul><li>『加载』-&gt;『验证』-&gt;『准备』-&gt;『初始化』-&gt;『卸载』这五个阶段的顺序是确定的，而『解析』可能为了支持<code>Java</code>的动态绑定会在『初始化』后才开始</li><li>上述阶段通常都是互相交叉地混合式进行的，比如会在一个阶段执行的过程中调用、激活另外一个阶段</li></ul></blockquote><p>想要了解<code>Java</code>动态绑定和静态绑定区别的话，可以看下这篇文章：<a href="https://juejin.im/post/5d8d2c6251882509155069e4#heading-0" target="_blank" rel="noopener">理解静态绑定与动态绑定</a></p><h4 id="2-2-1-加载"><a href="#2-2-1-加载" class="headerlink" title="2.2.1 加载"></a>2.2.1 加载</h4><p>Q1：<strong>任务</strong></p><ul><li>通过类的全限定名来获取定义此类的<strong>二进制字节流</strong>。如从<code>ZIP</code>包读取、从网络中获取、通过运行时计算生成、由其他文件生成、从数据库中读取等等途径……</li></ul><blockquote><p>想要详细了解类的全限定名的知识，可以看下这篇文章：<a href="https://mingshan.fun/2018/09/18/fully-qualified-name-simple-name-descriptor/" target="_blank" rel="noopener">全限定名、简单名称和描述符是什么东西？</a></p></blockquote><ul><li>将该二进制字节流所代表的<strong>静态存储结构</strong>转化为<strong>方法区</strong>的<strong>运行时数据结构</strong>，该数据存储数据结构由虚拟机实现自行定义</li><li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，它将作为程序访问方法区中的这些类型数据的外部接口</li></ul><h4 id="2-2-2-验证"><a href="#2-2-2-验证" class="headerlink" title="2.2.2 验证"></a>2.2.2 验证</h4><ul><li>是<strong>连接</strong>阶段的<strong>第一步</strong>，且工作量在<code>JVM</code>类加载子系统中占了相当大的一部分</li><li>目的：为了<strong>确保</strong><code>Class</code>文件的字节流中包含的信息<strong>符合</strong>当前<strong>虚拟机的要求</strong>，并且<strong>不会危害虚拟机自身的安全</strong></li></ul><blockquote><p>由此可见，它能直接决定<code>JVM</code>能否承受恶意代码的攻击，因此验证阶段<strong>很重要</strong>，但由于它对程序运行期没有影响，并<strong>不一定必要</strong>，可以考虑使用<code>-Xverify：none</code>参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p></blockquote><ul><li><p>检验过程包括下面四个阶段：</p><p>A.文件格式验证：</p><blockquote><ul><li><p>内容：验证<strong>字节流是否符合<code>Class</code>文件格式的规范</strong>、以及是否能被<strong>当前版本的虚拟机处理</strong></p></li><li><p>目的：保证输入的<strong>字节流</strong>能正确地解析并存储于<strong>方法区</strong>之内，且格式上符合描述一个<code>Java</code>类型信息的要求。只有保证二进制字节流通过了该验证后，它才会进入内存的方法区中进行存储，所以<strong>后续三个验证阶段全部是基于方法区</strong>而不是字节流了</p></li><li><p>例子：</p><ol><li><p>是否以魔数<code>0xCAFEBABE</code>开头</p></li><li><p>主次版本号是否在<code>JVM</code>接受范围内</p></li><li><p>索引值是否有指向不存在/不符合类型的常量</p><p>……</p></li></ol></li></ul></blockquote><p>  B.元数据验证：</p><blockquote><ul><li><p>内容：对字节码描述的信息进行<strong>语义</strong>分析，以保证其描述的信息符合<code>Java</code>语言规范的要求</p></li><li><p>目的：对类的<strong>元数据信息</strong>进行语义校验，保证不存在不符合<code>Java</code>语言规范的元数据信息</p></li><li><p>例子：</p><ol><li><p>类是否有父类（除了<code>java.lang.Object</code>之外，所有类都应有父类）</p></li><li><p>父类是否继承了不允许被继承的类（<code>final</code>修饰的类）</p></li><li><p>如果该类不是抽象类，是否实现了其父类或接口中要求实现的所有方法</p><p>……</p></li></ol></li></ul></blockquote><p>​    C.字节码验证：</p><blockquote><ul><li><p>是验证过程中<strong>最复杂</strong>的一个阶段</p></li><li><p>内容：对类的<strong>方法体</strong>进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件</p></li><li><p>目的：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的</p></li><li><p>例子：</p><ol><li><p>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现“在操作数栈的数据类型中放置了<code>int</code>类型的数据，使用时却按<code>long</code>类型来载入本地变量表中”</p></li><li><p>保证任何跳转指令都不会跳转到方法体外的字节码指令上</p><p>……</p></li></ol></li></ul></blockquote><p>​    D.符号引用验证：</p><blockquote><ul><li>内容：对<strong>类自身以外（如常量池中的各种符号引用）的信息</strong>进行匹配性校验</li><li>目的：确保解析<strong>动作能正常执行</strong>，如果无法通过符号引用验证，那么将会抛出一个<code>java.lang.IncompatibleClassChangeError</code>异常的子类</li><li>注意：该验证发生在虚拟机将<strong>符号引用</strong>转化为<strong>直接引用</strong>的时候，即『<strong>解析</strong>』阶段</li></ul></blockquote></li></ul><h4 id="2-2-3-准备"><a href="#2-2-3-准备" class="headerlink" title="2.2.3 准备"></a>2.2.3 准备</h4><p>Q1：<strong>任务</strong></p><ul><li>为类变量（静态变量）<strong>分配内存</strong>：<strong>因为这里的变量是由方法区分配内存</strong>的，所以<strong>仅包括类变量</strong>而不包括实例变量，后者将会在对象实例化时随着对象一起分配在<code>Java</code>堆中</li><li>设置类变量<strong>初始值</strong>：通常情况下零值</li></ul><h4 id="2-2-4-解析"><a href="#2-2-4-解析" class="headerlink" title="2.2.4 解析"></a>2.2.4 解析</h4><blockquote><p>之前提过，解析阶段就是虚拟机将<strong>常量池</strong>内的<strong>符号引用替换为直接引用</strong>的过程</p></blockquote><ul><li>符号引用：以一组符号来描述所引用的目标</li></ul><blockquote><ul><li>可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可</li><li>与虚拟机实现的内存布局无关，因为符号引用的字面量形式明确定义在<code>Java</code>虚拟机规范的<code>Class</code>文件格式中，所以即使各种虚拟机实现的内存布局不同，但是能接受符号引用都是一致的</li></ul></blockquote><ul><li>直接引用：</li></ul><blockquote><ul><li>可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄</li><li>与虚拟机实现的内存布局相关，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不同</li></ul></blockquote><ul><li>发生时间：<code>JVM</code>会根据需要来判断，是在类被加载器<strong>加载时</strong>就对常量池中的符号引用进行解析，还是等到一个符号引用将要被<strong>使用前</strong>才去解析</li><li>解析动作：有七类符号及其对应在常量池的七种常量类型</li></ul><blockquote><ul><li><strong>类或接口</strong>(<code>CONSTANT_Class_info</code>)</li><li><strong>字段</strong>(<code>CONSTANT_Fieldref_info</code>)</li><li><strong>类方法</strong>(<code>CONSTANT_Methodref_info</code>)</li><li><strong>接口方法</strong>(<code>CONSTANT_InterfaceMethodref_info</code>)</li><li><strong>方法类型</strong>(<code>CONSTANT_MethodType_info</code>)</li><li><strong>方法句柄</strong>(<code>CONSTANT_MethodHandle_info</code>)</li><li><strong>调用点限定符</strong>(<code>CONSTANT_InvokeDynamic_info</code>)</li></ul></blockquote><p>举个例子，设当前代码所处的为类<code>D</code>，把一个从未解析过的<strong>符号引用<code>N</code></strong>解析为一个<strong>类或接口<code>C</code>的直接引用</strong>，解析过程分三步：</p><blockquote><ul><li>若<code>C</code>不是数组类型：<code>JVM</code>将会把代表<code>N</code>的全限定名传递给<code>D</code>类加载器去加载这个类<code>C</code>。在加载过程中，由于<strong>元数据验证</strong>、<strong>字节码验证</strong>的需要，又可能触发其他相关类的加载动作。一旦这个加载过程出现了任何异常，解析过程就宣告失败。</li><li>若<code>C</code>是数组类型且数组元素类型为对象：<code>JVM</code>也会按照上述规则加载数组元素类型</li><li>若上述步骤无任何异常：此时<code>C</code>在<code>JVM</code>中已成为一个有效的类或接口，但在解析完成前还需进行<strong>符号引用验证</strong>，来确认<code>D</code>是否具备对<code>C</code>的访问权限。如果发现不具备访问权限，将抛出<code>java.lang.IllegalAccessError</code>异常</li></ul></blockquote><p>Q1:<strong>字段（成员变量/域）和属性有什么区别？</strong></p><blockquote><ul><li>属性，是指对象的属性，对于<code>JavaBean</code>来说，是<code>getXXX</code>方法定义的</li><li>字段，是成员变量</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String mingzi<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//mingzi是字段，一般来说字段和属性是相同的，但是这个例子是特例</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//name是属性</span>        <span class="token keyword">return</span> mingzi<span class="token operator">:</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mingzi<span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-5-初始化"><a href="#2-2-5-初始化" class="headerlink" title="2.2.5 初始化"></a>2.2.5 初始化</h4><ul><li>是类加载过程的最后一步，会开始真正执行类中定义的<code>Java</code>代码。而之前的类加载过程中，除了在『<strong>加载</strong>』阶段用户应用程序可通过<strong>自定义类加载器</strong>参与之外，<strong>其余阶段均由虚拟机主导和控制</strong></li><li>与『准备』阶段的<strong>区分</strong>：</li></ul><blockquote><ul><li>准备阶段：变量赋初始零值</li><li>初始化阶段：根据 <code>Java</code> 程序的设定去初始化类变量和其他资源，或者说是执行类构造器<code>clinit</code>的过程</li></ul></blockquote><p><code>clinit</code>：由编译器自动收集类中的所有<strong>类变量（静态变量）的赋值动作</strong>和静态语句块<code>static{}</code>中的语句合并产生</p><blockquote><ul><li>是<strong>线程安全</strong>的，在多线程环境中被正确地加锁、同步</li><li>对于类或接口来说是<strong>非</strong>必需的，如果一个类中<strong>没有静态语句块</strong>，也没有对变量的赋值操作，那么编译器可以不为这个类生成 <code>clinit</code></li><li><strong>接口与类不同的是</strong>，执行接口的 <code>clinit</code><strong>不需要先执行父接口</strong>的 <code>clinit</code>，只有当父接口中定义的变量使用时，父接口才会初始化。另外，<strong>接口的实现类在初始化时</strong>也一样不会执行接口的<code>clinit</code></li></ul></blockquote><p>想详细了解<code>clinit</code>以及其与<code>init</code>的区别的读者，可以看下这篇文章：<a href="https://blog.csdn.net/u013309870/article/details/72975536" target="_blank" rel="noopener">深入理解jvm–Java中init和clinit区别完全解析</a></p><ul><li>在虚拟机规范中，规定了有且只有五种情况<strong>必须立即</strong>对类进行『<strong>初始化</strong>』：</li></ul><blockquote><ul><li>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>或<code>invokestatic</code>这4条字节码指令时</li><li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用的时候</li><li>当初始化一个类的时候，若发现其父类还未进行初始化，需先触发其父类的初始化</li><li>在虚拟机启动时，需指定一个要执行的<strong>主类</strong>，虚拟机会先初始化它</li><li>当使用<code>JDK1.7</code>的动态语言支持时，若一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果为<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>的方法句柄，且这个方法句柄所对应的类未进行初始化，需先触发其初始化。</li></ul></blockquote><h3 id="2-3-类加载器-amp-双亲委派模型"><a href="#2-3-类加载器-amp-双亲委派模型" class="headerlink" title="2.3 类加载器&amp;双亲委派模型"></a>2.3 类加载器&amp;双亲委派模型</h3><blockquote><p>每个类加载器，都拥有一个独立的命名空间，它不仅用于加载类，还和这个类本身一起作为在<code>JVM</code>中的唯一标识。所以比较两个类是否相等，只要看它们是否由同一个<strong>类加载器</strong>加载，即使它们来源于同一个<code>Class</code>文件且被同一个<code>JVM</code>加载，只要加载它们的<strong>类加载器不同，这两个类就必定不相等</strong></p></blockquote><h4 id="2-3-1-类加载器"><a href="#2-3-1-类加载器" class="headerlink" title="2.3.1 类加载器"></a>2.3.1 类加载器</h4><p>从<code>JVM</code>的角度，可将类加载器分为两种：</p><ul><li>启动类加载器</li></ul><blockquote><ul><li>由<code>C++</code>语言实现，是虚拟机自身的一部分</li><li>负责加载存放在<code>＜JAVA_HOME＞\lib</code>目录中、或被<code>-Xbootclasspath</code>参数所指定路径中的、且可被虚拟机识别的类库</li><li>无法被<code>Java</code>程序直接引用，如果自定义类加载器想要把加载请求委派给引导类加载器的话，可直接用<code>null</code>代替</li></ul></blockquote><ul><li>其他类加载器：由<code>Java</code>语言实现，独立于虚拟机外部，并且全都继承自抽象类<code>java.lang.ClassLoader</code>，可被<code>Java</code>程序直接引用。常见几种：</li></ul><blockquote><ul><li><p><strong>扩展类加载器</strong></p><p>A.由<code>sun.misc.Launcher$ExtClassLoader</code>实现</p><p>B.负责加载<code>＜JAVA_HOME＞\lib\ext</code>目录中的、或者被<code>java.ext.dirs</code>系统变量所指定的路径中的所有类库</p></li><li><p><strong>应用程序类加载器</strong></p><p>A.是<strong>默认</strong>的类加载器，是<code>ClassLoader#getSystemClassLoader()</code>的返回值，故又称为<strong>系统类加载器</strong></p><p>B.由<code>sun.misc.Launcher$App-ClassLoader</code>实现</p><p>C.负责加载用户类路径上所指定的类库</p></li><li><p><strong>自定义类加载器</strong>：如果以上类加载起不能满足需求，可自定义</p></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/02/232509-203592.png" alt="类加载器的关系"></p><blockquote><p>需要注意的是：虽然<strong>数组类</strong>不通过类加载器创建而是由<code>JVM</code>直接创建的，但仍与类加载器有密切关系，因为<strong>数组类的元素类型最终还要靠类加载器去创建</strong></p></blockquote><h4 id="2-3-2-双亲委派模型"><a href="#2-3-2-双亲委派模型" class="headerlink" title="2.3.2 双亲委派模型"></a>2.3.2 双亲委派模型</h4><ul><li><p>定义：表示类加载器之间的层次关系</p></li><li><p><strong>前提</strong>：除了顶层启动类加载器外，<strong>其余类加载器都应当有自己的父类加载器</strong>，且它们之间关系一般不会以<strong>继承</strong>关系来实现，而是通过<strong>组合</strong>关系来复用父加载器的代码</p></li><li><p><strong>工作过程</strong>：若一个类加载器收到了类加载的请求，它先会把这个请求<strong>委派</strong>给父类加载器，并向上传递，最终请求都传送到顶层的启动类加载器中。只有当父加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载</p></li><li><p><strong>注意</strong>：不是一个强制性的约束模型，而是<code>Java</code>设计者推荐给开发者的一种类加载器实现方式</p></li><li><p><strong>优点</strong>：</p><ol><li><p>类会随着它的类加载器一起具备带有<strong>优先级</strong>的层次关系，可保证<code>Java</code>程序的稳定运作</p></li><li><p>实现简单，所有实现代码都集中在<code>java.lang.ClassLoader的loadClass()</code>中</p></li></ol></li></ul><blockquote><ul><li>比如，某些类加载器要加载<code>java.lang.Object</code>类，最终都会委派给最顶端的启动类加载器去加载，这样<code>Object</code>类在程序的各种类加载器环境中都是同一个类</li></ul><ul><li>相反，系统中将会出现多个不同的<code>Object</code>类，<code>Java</code>类型体系中最基础的行为也就无法保证，应用程序也将会变得一片混乱</li></ul></blockquote><h2 id="三-课堂小测试"><a href="#三-课堂小测试" class="headerlink" title="三.课堂小测试"></a>三.课堂小测试</h2><blockquote><p>恭喜你！已经看完了前面的文章，相信你对<code>JVM</code>类加载机制已经有一定深度的了解，下面，进行一下课堂小测试，验证一下自己的学习成果吧！</p></blockquote><p>Q1：类加载的全过程是怎样的？</p><p>Q2：什么是双亲委派模型？</p><p>Q3：<code>String</code>类如何被加载的</p><blockquote><p>上面问题的答案，在前文都提到过，如果还不能回答出来的话，建议回顾下前文</p></blockquote><p>Q4：请你谈谈类加载过程，以<code>Person a = new Person()；</code>为例进行说明</p><blockquote><p>这道题是在牛客的暑假实习<code>Tencent</code>一面的面筋上找的，附上标准答案：<a href="https://zhuanlan.zhihu.com/p/31898635" target="_blank" rel="noopener">类的加载过程，Person person = new Person();为例进行说明</a></p></blockquote><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《深入理解Java虚拟机》第3版</li><li><a href="https://juejin.im/post/5d8d2c6251882509155069e4#heading-0" target="_blank" rel="noopener">理解静态绑定与动态绑定</a></li><li><a href="https://mingshan.fun/2018/09/18/fully-qualified-name-simple-name-descriptor/" target="_blank" rel="noopener">全限定名、简单名称和描述符是什么东西？</a></li><li><a href="https://www.jianshu.com/p/9ea809edebb6" target="_blank" rel="noopener">要点提炼| 理解JVM之类加载机制</a></li><li><a href="https://blog.csdn.net/u013309870/article/details/72975536" target="_blank" rel="noopener">深入理解jvm–Java中init和clinit区别完全解析</a></li><li><a href="https://www.jianshu.com/p/168e52336b53" target="_blank" rel="noopener">2019校招Android面试题解1.0（下篇）</a></li><li><a href="https://zhuanlan.zhihu.com/p/31898635" target="_blank" rel="noopener">类的加载过程，Person person = new Person();为例进行说明</a></li><li><a href="https://www.jianshu.com/p/bcb00756b1eb" target="_blank" rel="noopener">编译器和运行期</a></li><li><a href="https://www.nowcoder.com/discuss/392527" target="_blank" rel="noopener">腾讯 暑期实习 安卓 一面二面三面 面经分享</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 类加载 </tag>
            
            <tag> 双亲委派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一夜搞懂 | JVM GC&amp;内存分配</title>
      <link href="/2020/03/29/yi-ye-gao-dong-jvm-gc-nei-cun-fen-pei/"/>
      <url>/2020/03/29/yi-ye-gao-dong-jvm-gc-nei-cun-fen-pei/</url>
      
        <content type="html"><![CDATA[<h1 id="一夜搞懂-JVM-GC-amp-内存分配"><a href="#一夜搞懂-JVM-GC-amp-内存分配" class="headerlink" title="一夜搞懂 | JVM GC&amp;内存分配"></a>一夜搞懂 | JVM GC&amp;内存分配</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习导图"><a href="#学习导图" class="headerlink" title="学习导图"></a>学习导图</h2><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/29/220825-78346.png" alt="学习导图"></p><h2 id="一-为什么要学习GC-amp-内存分配？"><a href="#一-为什么要学习GC-amp-内存分配？" class="headerlink" title="一.为什么要学习GC&amp;内存分配？"></a>一.为什么要学习<code>GC</code>&amp;内存分配？</h2><p>时代发展到现在，如今的内存动态分配与内存回收技术已经相当成熟，一切看似进入了“自动化”时代，不免发出疑问：”为啥我们还要了解垃圾收集和内存分配？”</p><p>答案很简单，当需要排查各种内存溢出/泄漏问题的时候，当垃圾收集成为系统达到更高并发量的瓶颈的时候，我们必须对”自动化”技术进行必要的监控和调节。</p><p>所以，我们要了解下<code>GC</code>&amp;内存分配，为工作中或者是面试中实际的需要打好基础。</p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-对象存活判定算法"><a href="#2-1-对象存活判定算法" class="headerlink" title="2.1 对象存活判定算法"></a>2.1 对象存活判定算法</h3><blockquote><p>在了解对象存活的判定之前，我们先来了解下四种引用类型</p></blockquote><ul><li>强引用<code>StrongReference</code></li></ul><blockquote><ul><li>具有强引用的对象不会被<code>GC</code></li><li>即便内存空间不足，<code>JVM</code>宁愿抛出<code>OutOfMemoryError</code>使程序异常终止，也不会随意回收具有强引用的对象</li></ul></blockquote><ul><li>软引用<code>SoftReference</code></li></ul><blockquote><ul><li>只具有软引用的对象，会在<strong>内存空间不足</strong>的时候被<code>GC</code>，如果<strong>回收之后内存仍不足，才会抛出<code>OOM</code>异常</strong></li><li>软引用常用于描述<strong>有用但并非必需</strong>的对象，比如实现内存敏感的高速<strong>缓存</strong></li></ul></blockquote><ul><li>弱引用<code>WeakReference</code></li></ul><blockquote><ul><li>只被弱引用关联的对象，<strong>无论当前内存是否足够都会被<code>GC</code></strong></li><li>强度比软引用更弱，常用于描述<strong>非必需</strong>对象</li></ul></blockquote><ul><li>虚引用<code>PhantomReference</code></li></ul><blockquote><ul><li><p>仅持有虚引用的对象，在任何时候都可能被<code>GC</code>（和弱引用一样）</p></li><li><p>主要作用是为了垃圾收集器回收时收到一个系统通知(<code>PhantomRefernece</code>类实现虚引用)</p></li><li><p>与弱引用的区别：</p><p>a.<code>get</code>方法：若弱引用 <code>get</code> 方法能正常返回对象，而虚引用只能返回 <code>null</code></p><p>b.<code>ReferenceQueue</code>的必要性：<strong>弱引用可以</strong>配合 <code>ReferenceQueue</code> 使用,<strong>虚引用必须</strong>配合 <code>ReferenceQueue</code> 使用</p></li><li><p>必须和<strong>引用队列</strong> （<code>ReferenceQueue</code>）联合使用，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用<strong>加入到与之关联的引用队列</strong>中</p><p>（想要了解<strong>虚引用详细用法</strong>的读者，可以看下这篇文章：<a href="https://juejin.im/post/5e65b8096fb9a07cbb6e4a43#heading-5" target="_blank" rel="noopener">强软弱虚引用，只有体会过了，才能记住</a>）</p></li></ul></blockquote><h4 id="2-1-1-引用计数算法"><a href="#2-1-1-引用计数算法" class="headerlink" title="2.1.1 引用计数算法"></a>2.1.1 引用计数算法</h4><p>定义：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的</p><blockquote><p>然而在主流的 <code>JVM</code> 里未选用引用计数算法来管理内存，主要原因是它难以解决对象之间<strong>相互循环引用</strong>的问题，所以出现了另一种对象存活判定算法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//相互循环引用的DEMO</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  这个成员属性的意义是占点内存，以便在GC日志中看清楚是否有回收过     */</span>     <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReferenceCountingGC objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ReferenceCountingGC objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objA<span class="token punctuation">.</span>instance <span class="token operator">=</span> objB<span class="token punctuation">;</span>        objB<span class="token punctuation">.</span>instance <span class="token operator">=</span> objA<span class="token punctuation">;</span>        objA <span class="token operator">=</span> null<span class="token punctuation">;</span>        objB <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-2-可达性分析法"><a href="#2-1-2-可达性分析法" class="headerlink" title="2.1.2 可达性分析法"></a>2.1.2 可达性分析法</h4><p>定义：通过一系列被称为『<code>GC Roots</code>』的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为<strong>引用链</strong>，当一个对象到<code>GC Roots</code>没有任何引用链相连时，则证明此对象是不可用的</p><blockquote><p>可作为 <code>GC Roots</code> 的对象：</p><ul><li>虚拟机栈中引用的对象，主要是指栈帧中的<strong>本地变量表</strong></li><li>本地方法栈中<code>Native</code>方法引用的对象</li><li>方法区中<strong>类静态属性</strong>引用的对象</li><li>方法区中<strong>常量</strong>引用的对象</li><li><code>JVM</code>内部的引用(基本数据类型对应的<code>Class</code>对象)</li><li>所有被同步锁(<code>synchronized</code>关键字)持有的对象</li><li>反映<code>JVM</code>内部情况的<code>JMXBean</code>、<code>JVMTI</code>中的注册的回调、本地代码缓存等</li></ul></blockquote><p><img src="https://s1.ax1x.com/2020/03/29/GVU32q.png" alt="可达性分析法"></p><p>Q：可达性分析算法中被判定不可达的对象真的被判『死刑』了吗？</p><p>A：在可达性分析算法中被判定不可达的对象还未真的判『死刑』，一共至少要经历两次标记过程：</p><ul><li>第一次标记：当第一次可达性分析后没有与<code>GC Roots</code>相连接的引用链，被第一次标记</li><li>第二次标记：</li></ul><p>判断对象是否有必要执行<code>finalize()</code>方法；若被判定为有必要执行<code>finalize()</code>方法，之后还会对对象再进行一次筛选，如果对象能在<code>finalize()</code>中重新与引用链上的任何一个对象建立关联，将被移除出“即将回收”的集合。</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/29/162614-891750.png" alt="是否要回收的判断"></p><blockquote><p>引申：有关<strong>方法区</strong>的<code>GC</code>，可分成两部分</p><ul><li><p><strong>废弃常量</strong>与回收<code>Java</code>堆中的对象的<code>GC</code>很类似，即在任何地方都未被引用的常量会被<code>GC</code>。</p></li><li><p><strong>无用的类</strong></p><p>需满足以下三个条件才会被<code>GC</code>：</p><p>A.该类所有的实例都已被回收，即<code>Java</code>堆中不存在该类的任何实例；</p><p>B.加载该类的<code>ClassLoader</code>已经被回收；</p><p>C.该类对应的<code>java.lang.Class</code>对象没在任何地方被引用，即无法在任何地方通过<strong>反射</strong>访问该类的方法。</p></li></ul></blockquote><h3 id="2-2-垃圾收集算法"><a href="#2-2-垃圾收集算法" class="headerlink" title="2.2 垃圾收集算法"></a>2.2 垃圾收集算法</h3><blockquote><p>前文讲了<code>JVM</code>会回收哪些对象，下文笔者将探究<code>JVM</code>如何回收这些对象</p></blockquote><h4 id="2-2-1-分代收集理论"><a href="#2-2-1-分代收集理论" class="headerlink" title="2.2.1 分代收集理论"></a>2.2.1 分代收集理论</h4><p>Q1：<strong>三个假说是什么？</strong></p><ul><li>弱分代假说：绝大多数对象都是<strong>朝生夕灭</strong>的</li><li>强分代假说：熬过越多次垃圾收集过程的对象就<strong>难以消亡</strong></li><li>跨代引用假说：跨代引用相对于同代来说<strong>仅占极少数</strong>（存在引用关系的对象应该倾向于同时生存或者同时消亡的，例如某个新生代被老年代所引用，该引用会使新生代对象在收集时同样存活，进而进入老年代）</li></ul><blockquote><p>在新生代上建立一个全局的数据结构(<strong>记忆集</strong>)，将老年代划<strong>分成若干小块</strong>，标识出老年代哪一块内存存在跨代引用，<code>Minor GC</code>时，在跨代引用的内存里的对象才会加入到<code>GC Roots</code>进行扫描</p></blockquote><p>Q2：<strong>垃圾收集器一致的设计原则</strong></p><ul><li>收集器应将<code>Java</code>堆划分出不同的区域，然后将回收对象依据其年龄（年龄是对象熬过垃圾收集过程的次数）分配到不同的区域之中储存</li><li>如果一个区域中大多数对象都是朝生夕灭，将他们集中到一起，每次回收时只关注少量存活，能以较低代价回收到大量的空间</li><li>如果是难以消亡的对象，把他们集中放在一起，虚拟机用较低频率来回收这个区域，同时兼顾垃圾收集的时间开销和内存的空间</li></ul><p>Q3：如何根据各个年代的特点选择算法呢？</p><ul><li>新生代：大批对象死去，只有少量存活。使用『复制算法』，只需复制少量存活对象即可</li><li>老年代：对象存活率高。使用『标记—清理算法』或者『标记—整理算法』，只需标记较少的回收对象即可</li></ul><blockquote><p>这三种算法，笔者将在下文为您详细解析</p></blockquote><h4 id="2-2-2-复制算法"><a href="#2-2-2-复制算法" class="headerlink" title="2.2.2 复制算法"></a>2.2.2 复制算法</h4><ul><li>定义：把可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用尽后，把还存活着的对象『复制』到另外一块上面，再将这一块内存空间一次清理掉</li><li>优点：每次都是对整个半区进行内存回收，<strong>无需考虑内存碎片</strong>等复杂情况，只要移动堆顶指针，按顺序分配内存即可，<strong>实现简单，运行高效</strong></li><li>缺点：每次可使用的内存缩小为原来的一半，<strong>内存使用率低</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/29/164419-336620.png" alt="复制算法"></p><ul><li><code>Appel</code>式回收</li></ul><p>分为一块较大的<code>Eden</code>空间和两块较小的<code>Survivor</code>空间，在<code>HotSpot</code>虚拟机中默认比例为8:1:1。每次使用<code>Eden</code>和一块<code>Survivor</code>，回收时将这两块中存活着的对象一次性地复制到另外一块<code>Survivor</code>上，再做清理。可见只有<code>10%</code>的内存会被“浪费”，倘若<code>Survivor</code>空间不足还需要依赖其他内存（老年代）进行分配担保</p><h4 id="2-2-3-标记-清除算法"><a href="#2-2-3-标记-清除算法" class="headerlink" title="2.2.3 标记-清除算法"></a>2.2.3 标记-清除算法</h4><ul><li>首先『标记』出所有需要回收的对象，然后统一『清除』所有被标记的对象</li><li>是最基础的收集算法</li><li>缺点：</li></ul><blockquote><ul><li>『标记』和『清除』过程的效率不高</li><li>空间碎片太多。『标记』『清除』之后会产生大量<strong>不连续的内存碎片</strong>，可能会导致后续需要分配较大对象时，因无法找到足够的连续内存而提前触发另一次<code>GC</code>，影响系统性能</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/29/165211-25230.png" alt="标记-清除算法"></p><h4 id="2-2-4-标记-整理算法"><a href="#2-2-4-标记-整理算法" class="headerlink" title="2.2.4 标记-整理算法"></a>2.2.4 标记-整理算法</h4><ul><li>首先『标记』出所有需要回收的对象，然后进行『整理』，使得存活的对象都向一端移动，最后直接清理掉端边界以外的内存</li><li>优点：即没有浪费50%的空间，又不存在空间碎片问题，性价比较高</li><li>缺点：<strong>移动</strong>在老年代每次回收都存在大量对象存活区域，必须<strong>暂停用户应用程序才能进行</strong>（<code>Stop The World</code>）</li><li>一般情况下，老年代会选择标记-整理算法。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/29/165651-315190.png" alt="标记-整理算法"></p><h4 id="2-2-5-和稀泥式"><a href="#2-2-5-和稀泥式" class="headerlink" title="2.2.5 和稀泥式"></a>2.2.5 和稀泥式</h4><p>解决方法：大部分时间使用标记-清除算法，当内存空间的碎片程度影响到内存分配，再使用标记-整理算法进行收集</p><h3 id="2-3-HotSpot算法实现-amp-垃圾回收器"><a href="#2-3-HotSpot算法实现-amp-垃圾回收器" class="headerlink" title="2.3 HotSpot算法实现&amp;垃圾回收器"></a>2.3 <code>HotSpot</code>算法实现&amp;垃圾回收器</h3><blockquote><p>接下来介绍如何在<code>HotSpot</code>虚拟机上实现对象存活判定算法和垃圾收集算法，并保证虚拟机高效运行</p></blockquote><h4 id="2-3-1-枚举根节点"><a href="#2-3-1-枚举根节点" class="headerlink" title="2.3.1 枚举根节点"></a>2.3.1 枚举根节点</h4><p>主流<code>JVM</code>使用的都是<strong>准确式<code>GC</code></strong>，在执行系统停顿之后无需检查所有执行上下文和全局的引用位置，而是通过一些办法直接<strong>获取到存放对象引用的地方</strong>，在<code>HotSpot</code>中是通过一组称为<code>OopMap</code>的数据结构来实现的，完成类加载后会计算出对象某偏移量上某类型数据、<code>JIT</code>编译时会在<strong>特定的位置</strong>记录栈和寄存器中是引用的位置。这样<code>GC</code>在扫描时就可直接得知这些信息，并快速准确地完成<code>GC Roots</code>的枚举</p><h4 id="2-3-2-安全点"><a href="#2-3-2-安全点" class="headerlink" title="2.3.2 安全点"></a>2.3.2 安全点</h4><p>上述『特定的位置』被称为安全点，即程序执行时并非在所有地方都停顿执行<code>GC</code>，只在到达安全点时才暂停，降低<code>GC</code>的空间成本</p><ul><li><p>安全点的选定标准：可让程序<strong>长时间执行</strong>的地方，如方法调用、循环跳转、异常跳转等具有指令序列复用的特征</p></li><li><p>使所有线程在<strong>最近的安全点上再停顿</strong>的方案：</p></li></ul><blockquote><ul><li>抢先式中断：无需代码主动配合，在<code>GC</code>发生时把所有线程全部中断，若线程中断处不在安全点上就恢复线程，让它“跑”到安全点上。现在<strong>几乎没有虚拟机实现采用抢先式中断</strong>来暂停线程从而响应<code>GC</code>事件</li><li>主动式中断：在<code>GC</code>要中断线程时不直接对线程操作，而是设置一个中断标志，让各个线程在执行时主动轮询它，当中断标志为真时就自己中断挂起</li></ul></blockquote><h4 id="2-3-3-安全区域"><a href="#2-3-3-安全区域" class="headerlink" title="2.3.3 安全区域"></a>2.3.3 安全区域</h4><blockquote><p>安全点机制只能保证程序执行时，在不太长的时间内遇到可进入<code>GC</code>的安全点，但在程序不执行时（如线程处于<code>Sleep</code>或<code>Blocked</code>状态）线程无法响应<code>JVM</code>的中断请求，此时就需要安全区域来解决</p></blockquote><ul><li><p>安全区域：<strong>引用关系不会发生变化的一段代码片段</strong>，在安全区域中的任意地方开始<code>GC</code>都是安全的（因为引用关系不变），可看做是扩展的安全点</p></li><li><p>执行过程：</p></li></ul><blockquote><ul><li>当线程执行到安全区域中的代码时就标识一下，如果这时<code>JVM</code>要发起<code>GC</code>就不用管被标识的线程</li><li>在线程要离开安全区域时检查系统是否已经完成了根节点枚举 /  <code>GC</code>，若完成则线程可以继续执行，否则等待直到收到可以安全离开安全区域的信号为止</li></ul></blockquote><h4 id="2-3-4-JVM中七种回收器"><a href="#2-3-4-JVM中七种回收器" class="headerlink" title="2.3.4 JVM中七种回收器"></a>2.3.4 <code>JVM</code>中七种回收器</h4><p><img src="https://s1.ax1x.com/2020/03/29/GVbHC4.png" alt="垃圾回收器"></p><table><thead><tr><th>序号</th><th>收集器</th><th>收集范围</th><th>算法</th><th>执行类型</th></tr></thead><tbody><tr><td>1</td><td><code>Serial</code></td><td>新生代</td><td>复制</td><td>单线程</td></tr><tr><td>2</td><td><code>ParNew</code></td><td>新生代</td><td>复制</td><td>多线程并行</td></tr><tr><td>3</td><td><code>Parallel</code></td><td>新生代</td><td>复制</td><td>多线程并行</td></tr><tr><td>4</td><td><code>Serial Old</code></td><td>老年代</td><td>标记整理</td><td>单线程</td></tr><tr><td>5</td><td><code>CMS</code></td><td>老年代</td><td>标记清除</td><td>多线程并发</td></tr><tr><td>6</td><td><code>Parallel Old</code></td><td>老年代</td><td>标记整理</td><td>多线程</td></tr><tr><td>7</td><td><code>G1</code></td><td>全部</td><td>复制算法，标记-整理</td><td>多线程</td></tr></tbody></table><blockquote><p>注意并发和并行的概念：</p><p>在<code>GC</code>中：</p><ul><li><strong>并行：</strong> <strong>多条垃圾收集线程并行工作</strong>，而用户线程仍处于等待状态</li><li><strong>并发</strong>：<strong>垃圾收集线程与用户线程</strong>一段时间内同时工作(交替执行)</li></ul><p>在普通情景中：</p><ul><li>并行：<strong>多个程序在多个<code>CPU</code></strong>上同时运行，任意一个时刻可以有很多个程序同时运行，互不干扰</li><li>并发：<strong>多个程序在一个<code>CPU</code></strong>上运行，<code>CPU</code>在多个程序之间快速切换，微观上不是同时运行，任意一个时刻只有一个程序在运行，但宏观上看起来就像多个程序同时运行一样，因为<code>CPU</code>切换速度非常快，时间片是<code>64ms</code>（每<code>64ms</code>切换一次，不同的操作系统有不同的时间），人类的反应速度是<code>100ms</code>，你还没反应过来，<code>CPU</code>已经切换了好几个程序了</li></ul></blockquote><h3 id="2-4-内存分配和回收策略"><a href="#2-4-内存分配和回收策略" class="headerlink" title="2.4 内存分配和回收策略"></a>2.4 内存分配和回收策略</h3><blockquote><p>对象的内存分配广义上是指在堆上分配，主要是在<strong>新生代</strong>的<code>Eden</code>区上，如果启动了<code>TLAB</code>，将按线程优先在<code>TLAB</code>上分配，少数情况下也可能会分配在老年代中。分配细节还是取决于所使用的<code>GC</code>收集器组合以及虚拟机中与内存相关的参数的设置。以下介绍几条普遍的内存分配规则</p></blockquote><ul><li><strong>对象优先在<code>Eden</code>分配</strong>：大多数情况下对象在新生代<code>Eden</code>区中分配，当<code>Eden</code>区没有足够空间进行分配时虚拟机将发起一次<code>Minor GC</code></li></ul><blockquote><ul><li>新生代 <code>GC</code> (<code>Minor GC</code>)：发生在新生代的垃圾收集动作。较频繁、回收速度也较快</li><li>老年代 <code>GC</code>（<code>Major GC/Full GC</code>）：发生在老年代的垃圾收集动作。出现<code>Major GC</code>经常会伴随至少一次的<code>Minor GC</code>。速度一般比 <code>Minor GC</code> 慢10倍以上</li></ul></blockquote><ul><li><p><strong>大对象直接进入老年代</strong>：对于需要大量连续内存空间的 <code>Java</code> 对象（如很长的字符串以及数组），如果大于虚拟机设定的 <code>-XX：PretenureSizeThreshold</code> 参数值将直接在老年代分配。这样做的目的是避免在 <code>Eden</code> 区及两个 <code>Survivor</code> 区之间发生大量的内存复制</p></li><li><p><strong>长期存活的对象将进入老年代</strong>：虚拟机会给每个对象定义一个年龄计数器，当对象在<code>Eden</code>出生并经过第一次<code>Minor</code> <code>GC</code>后仍存活且能被<code>Survivor</code>容纳的话，将被移动到<code>Survivor</code>空间中并将对象年龄设为1；当对象在<code>Survivor</code>区中每“熬过”一次<code>Minor GC</code>年龄就+1，直至增加到一定程度（默认为<code>15岁</code>，可通过<code>-XX： MaxTenuringThreshold</code>设置）就会被晋升到老年代中</p></li><li><p><strong>动态对象年龄判定</strong>：为了能更好地适应不同程序的内存状况，虚拟机并不要求一定要达到<code>-XX： MaxTenuringThreshold</code>设置值才能晋升到老年代，当<code>Survivor</code>空间中<strong>相同年龄所有对象大小的总和大于<code>Survivor</code>空间的一半</strong>，那么年龄大于或等于该年龄的对象可以直接进入老年代</p></li><li><p><strong>空间分配担保</strong>：在发生<code>Minor GC</code>之前虚拟机会先检查<strong>老年代最大可用的连续空间是否大于新生代所有对象总空间</strong>，若是，说明可确保<code>Minor GC</code>是安全的，反之虚拟机会查看<code>-XX：HandlePromotionFailure</code>设置值是否允许担保失败；若允许，会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小；若大于，将尝试进行一次<code>Minor GC</code>，若小于或者不允许担保失败，将改为进行一次<code>Full GC</code></p></li></ul><blockquote><p>解释：当大量对象在<code>MinorGC</code>后仍然存活的情况时，需要借助老年代进行分配担保，把<code>Survivor</code>无法容纳的对象直接进入老年代，但前提是老年代本身还有容纳这些对象的剩余空间，由于在完成内存回收之前无法预知实际存活对象，只好取之前每次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，从而决定是否进行<code>Full GC</code>来让老年代腾出更多空间</p></blockquote><h2 id="三-课堂小测试"><a href="#三-课堂小测试" class="headerlink" title="三.课堂小测试"></a>三.课堂小测试</h2><blockquote><p>恭喜你！已经看完了前面的文章，相信你对<code>JVM GC</code>&amp;内存分配已经有一定深度的了解，下面，进行一下课堂小测试，验证一下自己的学习成果吧！</p></blockquote><p>Q1：垃圾回收算法你了解几种？请你简要分析一下，并说明其优缺点？</p><p>Q2：<code>Java</code>的引用机制有几种？请简要分析下，并说明其在<code>Android</code>中的应用场景有哪些？</p><p>Q3：安全点你了解过吗？安全区呢？请你介绍下安全区相对安全点的优势在哪里？</p><p>Q4：怎么判断对象是否存活呢？有几种方法？</p><blockquote><p>上面问题的答案，在前文都提到过，如果还不能回答出来的话，建议回顾下前文</p></blockquote><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《深入理解Java虚拟机》第3版</li><li><a href="https://juejin.im/post/5bf94ae9e51d4523ec265619#heading-5" target="_blank" rel="noopener">JVM面试知识点梳理</a></li><li><a href="https://juejin.im/post/5e65b8096fb9a07cbb6e4a43#heading-5" target="_blank" rel="noopener">强软弱虚引用，只有体会过了，才能记住</a></li><li><a href="https://blog.csdn.net/dd864140130/article/details/49885811" target="_blank" rel="noopener">深入JVM对象引用</a></li><li><a href="https://www.jianshu.com/p/a62697f00b85" target="_blank" rel="noopener">要点提炼| 理解JVM之GC&amp;内存分配</a></li><li><a href="https://www.jianshu.com/p/b4a03b5de0d9" target="_blank" rel="noopener">JVM（HotSpot） 垃圾收集器</a></li><li><a href="https://juejin.im/post/5e6cb3a051882549016083d1#heading-0" target="_blank" rel="noopener">垃圾收集器与内存分配策略</a></li><li><a href="https://www.jianshu.com/p/2116fff869b6" target="_blank" rel="noopener">深入理解并发/并行，阻塞/非阻塞，同步/异步</a></li><li><a href="https://www.jianshu.com/p/825cca41d962" target="_blank" rel="noopener">软引用、弱引用、虚引用-他们的特点及应用场景</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
            <tag> 内存分配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文洞悉JVM内存管理机制</title>
      <link href="/2020/03/26/yi-wen-dong-xi-jvm-nei-cun-guan-li-ji-zhi/"/>
      <url>/2020/03/26/yi-wen-dong-xi-jvm-nei-cun-guan-li-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="一文洞悉JVM内存管理机制"><a href="#一文洞悉JVM内存管理机制" class="headerlink" title="一文洞悉JVM内存管理机制"></a>一文洞悉JVM内存管理机制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习导图："><a href="#学习导图：" class="headerlink" title="学习导图："></a>学习导图：</h2><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/26/190034-681270.png" alt="学习导图"></p><h2 id="一-为什么要学习内存管理？"><a href="#一-为什么要学习内存管理？" class="headerlink" title="一.为什么要学习内存管理？"></a>一.为什么要学习内存管理？</h2><blockquote><p><code>Java</code>与<code>C++</code>之间有一堵由<strong>内存动态分配</strong>和<strong>垃圾回收机制</strong>所围成的高墙，墙外面的人想进去，墙里面的人出不来</p></blockquote><p>对于<code>Java</code>程序员来说，<code>JVM</code>给我们提供了自动内存管理机制，不需要既当“皇帝”，又当“人民”，不需要人为地给每一个<code>new</code>操作写配对的<code>delete/free</code>代码，不容易出现内存泄漏和内存溢出问题。然而一旦出现内存泄漏和溢出方面的问题，如果不清楚<code>JVM</code>内存的内存管理机制，那么将很难定位与解决问题。而且，<code>JVM</code>的内存管理机制在面试中也是非常重要的考点之一。</p><p>综上，想要更加深入了解<code>JVM</code>的奥秘，探究<code>JVM</code>内存管理机制是必不可少的！！！</p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-JVM运行时数据区域"><a href="#2-1-JVM运行时数据区域" class="headerlink" title="2.1 JVM运行时数据区域"></a>2.1 <code>JVM</code>运行时数据区域</h3><blockquote><p><code>JVM</code> 执行 <code>Java</code> 程序的过程：<code>Java</code> 源代码文件 (<code>.java</code>) 会被 <code>Java</code> 编译器编译为字节码文件(<code>.class</code>)，然后由 <code>JVM</code> 中的类加载器加载各个类的字节码文件，加载完毕之后，交由 <code>JVM</code> 执行引擎执行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/26/152323-495153.png" alt="执行Java程序的过程"></p><p>在上述过程中，<code>JVM</code>会用一段空间来<strong>存储执行程序</strong>期间需要用到的<strong>数据和相关信息</strong>，这段空间就是运行时数据区，也就是常说的<code>JVM</code><strong>内存</strong></p><p><code>JVM</code>会将它所管理的内存划分为若干个不同的数据区域，划分结果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/26/151354-661702.png" alt="JVM运行时数据区"></p><p>可见，运行时数据区被分为<strong>线程私有数据区</strong>和<strong>线程共享数据区</strong>两大类：</p><ul><li>线程私有数据区包含：程序计数器、虚拟机栈、本地方法栈</li><li>线程共享数据区包含：<code>Java</code>堆、方法区（内部包含<strong>运行时常量池</strong>）</li></ul><p>下面将为您详细介绍各个数据区的内容</p><h4 id="2-1-1-程序计数器"><a href="#2-1-1-程序计数器" class="headerlink" title="2.1.1 程序计数器"></a>2.1.1 程序计数器</h4><ul><li>定义：<strong>当前线程</strong>所执行的<strong>字节码的行号指示器</strong></li></ul><blockquote><ul><li>如果线程正在执行的是一个 <code>Java</code> 方法，那么计数器记录的是正在执行的虚拟机字节码指令的<strong>地址</strong></li><li>如果线程正在执行的是一个 <code>Native</code> 方法，那么计数器的值则为<strong>空</strong></li></ul></blockquote><p>字节码解释器工作时，就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><ul><li>为什么必须是私有：<strong>为了线程切换后能恢复到正确的执行位置</strong>，每条线程都需要有一个<strong>独立</strong>的程序计数器，各条线程之间计数器互不影响，独立存储，因此它是线程<strong>私有</strong>的内存</li><li>在《 <code>Java</code> 虚拟机规范》中，是<strong>唯一一个没有</strong>规定任何 <code>OutOfMemoryError</code> 情况的区域</li></ul><h4 id="2-1-2-Java-虚拟机栈"><a href="#2-1-2-Java-虚拟机栈" class="headerlink" title="2.1.2 Java 虚拟机栈"></a>2.1.2 <code>Java</code> 虚拟机栈</h4><blockquote><p>想更加详细了解 <code>JVM</code> 栈的读者，可以看下笔者写的这篇文章：<a href="https://juejin.im/post/5e8aaabd6fb9a03c546c2dab#heading-5" target="_blank" rel="noopener">运行时栈帧结构</a></p></blockquote><ul><li>定义： <code>Java</code> <strong>方法执行的内存模型</strong></li></ul><blockquote><ul><li><p>每个方法在执行的同时都会创建一个栈帧，用于存储<strong>局部变量表</strong>、操作数栈、动态链接、方法出口等方法信息</p></li><li><p>每个方法从调用直至执行完成的过程，就对应着一个栈帧在<strong>虚拟机栈中入栈到出栈</strong>的过程</p></li></ul></blockquote><p>局部变量表存放了编译期可知的各种基本数据类型、对象引用类型和 <code>returnAddress</code> 类型，它所需的内存空间在<strong>编译</strong>期间完成分配</p><ul><li>线程私有的内存，与线程生命周期相同</li><li>一般把 <code>Java</code> 内存区分为堆内存（<code>Heap</code>）和栈内存（<code>Stack</code>），其中『栈』指的是虚拟机栈，『堆』指的是 <code>Java</code> 堆</li><li>在 <code>Java</code> 虚拟机规范中，对这个区域规定了两种异常状况：</li></ul><blockquote><ul><li>如果线程请求的栈深度<strong>大于</strong>虚拟机所允许的深度，将抛出 <code>StackOverflowError</code> 异常</li><li>如果虚拟机栈可动态扩展且扩展时<strong>无法</strong>申请到足够的内存，将抛出 <code>OutOfMemoryError</code> 异常</li></ul></blockquote><h4 id="2-1-3-本地方法栈"><a href="#2-1-3-本地方法栈" class="headerlink" title="2.1.3 本地方法栈"></a>2.1.3 本地方法栈</h4><ul><li>定义：虚拟机使用到的 <code>Native</code> 方法服务</li></ul><blockquote><p>想要了解<code>Native</code>方法的读者，可以看下这篇文章：<a href="https://blog.csdn.net/wy11933/article/details/80214609" target="_blank" rel="noopener">Java中native方法</a></p></blockquote><ul><li>在虚拟机规范中，对这个区域无强制规定，由具体的虚拟机自由实现。与虚拟机栈一样，本地方法栈区域也会抛出 <code>StackOverflowError</code> 和 <code>OutOfMemoryError</code> 异常</li></ul><h4 id="2-1-4-Java堆"><a href="#2-1-4-Java堆" class="headerlink" title="2.1.4 Java堆"></a>2.1.4 Java堆</h4><ul><li>定义：被所有线程共享的一块内存区域，在虚拟机启动时创建</li><li>作用：用于存放几乎所有的<strong>对象实例和数组</strong></li></ul><blockquote><p>在 <code>Java</code> 堆中，可能划分出多个<strong>线程私有</strong>的分配缓冲区（<code>Thread Local Allocation Buffer，TLAB</code>），但无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是<strong>为了更好地回收内存，或者更快地分配内存</strong></p></blockquote><ul><li>是垃圾收集器管理的主要区域，也被称做 “ <code>GC 堆</code>”(可别叫做垃圾堆orz)</li><li>是  <code>JVM</code> 所管理的内存中最大的一块</li><li>可处于物理上不连续的内存空间中，只要逻辑上是连续的即可</li><li>在  <code>Java</code> 虚拟机规范中，如果在堆中没有内存完成实例分配，且堆也无法再扩展时，将会抛出 <code>OutOfMemoryError</code> 异常</li></ul><h4 id="2-1-5-方法区"><a href="#2-1-5-方法区" class="headerlink" title="2.1.5 方法区"></a>2.1.5 方法区</h4><blockquote><p>注意：方法区必须和虚拟机栈区分开，<strong>方法区不存方法</strong>，虚拟机栈存 <code>Java</code> 方法 </p></blockquote><ul><li><p>定义：与 <code>Java</code> 堆一样，是各个线程共享的内存区域</p></li><li><p>作用：用于存储已被虚拟机加载的<strong>类信息、常量、静态变量</strong>、即时编译器编译后的代码等数据</p></li></ul><p><img src="https://s1.ax1x.com/2020/03/26/Gp32Kf.png" alt="方法区装了啥"></p><ul><li><p>人们更愿意把这个区域称为 <strong>“永久代”</strong>，它还有个别名叫做 <code>Non-Heap</code>（非堆）</p><p>在 <code>JDK7</code> 的 <code>HotSpot</code> 中，已经把原本放在永久代的<strong>字符串常量池</strong>，<strong>静态变量</strong>移出；</p><p>在<code>JDK8</code>中，废弃永久代的概念，改用<strong>元空间</strong>；</p></li><li><p>对用元空间替换永久代的原因感兴趣的话，可以看下这篇文章：<a href="https://juejin.im/post/5df5fde36fb9a0162c486c71#heading-3" target="_blank" rel="noopener">一文读懂 - 元空间和永久代</a></p></li></ul><blockquote><p><code>永久代/元空间</code> 和方法区的区别：</p><ul><li><code>永久代/元空间</code>  可看作是方法区的实现</li></ul></blockquote><ul><li>和 <code>Java</code> 堆一样不需要连续的内存和可以选择固定大小或可扩展外，还可选择不实现 <code>GC</code></li><li>在 <code>Java</code> 虚拟机规范中，当方法区无法满足内存分配需求时，将抛出 <code>OutOfMemoryError</code> 异常</li></ul><h4 id="2-1-6-运行时常量池"><a href="#2-1-6-运行时常量池" class="headerlink" title="2.1.6 运行时常量池"></a>2.1.6 运行时常量池</h4><blockquote><p><code>Class</code> 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是<strong>常量池表</strong>，用于存放编译期生成的各种<strong>字面量和符号引用</strong>，这部分内容将在类加载后进入方法区的运行时常量池中存放</p></blockquote><p>Q1：<strong>字面量是什么</strong></p><p>可以理解为字面意思的常量。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//变量</span><span class="token keyword">const</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//b为常量，10为字面量</span>string str <span class="token operator">=</span> “hello world！”<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// str 为变量，hello world！为字面量</span></code></pre><p>由上述代码可知，字面量就是如此朴实无华</p><p>Q2：<strong>符号引用是什么</strong></p><p>可以是任意类型的字面量。只要能无歧义的定位到目标。在编译期间由于暂时不知道类的直接引用，因此先使用符号引用代替。最终还是会转换为直接引用访问目标</p><p>比如：<code>java/lang/StringBuilder</code></p><p>Q3：<strong>运行时常量池是什么</strong></p><ul><li>相对于 <code>Class</code> 文件常量池的一个重要特征是具备<strong>动态性</strong>，体现在<strong>并非只有预置入 <code>Class</code> 文件中常量池的内容</strong>才能进入方法区运行时常量池，<strong>运行期间也可能</strong>将新的常量放入池中</li><li>是<strong>方法区</strong>的一部分，会受到方法区内存的限制</li><li>在 <code>Java</code> 虚拟机规范中，当常量池无法再申请到内存时会抛出 <code>OutOfMemoryError</code> 异常</li></ul><h4 id="2-1-7-直接内存"><a href="#2-1-7-直接内存" class="headerlink" title="2.1.7 直接内存"></a>2.1.7 直接内存</h4><ul><li>它并<strong>不是虚拟机运行时数据区的一部分</strong>，也不是《<code>Java</code>虚拟机规范》中定义的内存区域，但是这部分内存也被频繁地调用</li><li>作用：<strong>避免了在<code>JAVA</code>堆和<code>Native</code>堆中来回复制数据</strong>，因此在一些场景下能显著提高性能</li></ul><blockquote><p><code>JDK1.4</code>中新加入了<code>NIO</code>类，引入了基于通道与缓冲区的<code>IO</code>方式，可以使用<code>Native</code>函数库直接分配<strong>直接内存（堆外内存）</strong>，然后通过<code>DirectByteBuffer</code>作为这块内存的引用进行操作</p></blockquote><h3 id="2-2-HotSpot-虚拟机内存对象探秘"><a href="#2-2-HotSpot-虚拟机内存对象探秘" class="headerlink" title="2.2 HotSpot 虚拟机内存对象探秘"></a>2.2 <code>HotSpot</code> 虚拟机内存对象探秘</h3><blockquote><p>在熟悉虚拟机内存划分及其具体内容之后，为详细了解虚拟机内存中数据的其他细节，以常用的虚拟机 <code>HotSpot</code> 和常用的内存区域 <code>Java</code> 堆为例，探讨 <code>HotSpot</code> 虚拟机在 <code>Java</code> 堆中对象分配、布局和访问的全过程</p></blockquote><h4 id="2-2-1-对象的创建"><a href="#2-2-1-对象的创建" class="headerlink" title="2.2.1 对象的创建"></a>2.2.1 对象的创建</h4><blockquote><p>遇到一个 <code>new</code> 指令后创建过程分三步</p></blockquote><p>1.<strong>类加载检查</strong></p><p>检查 <code>new</code> 指令的参数<strong>是否</strong>能在常量池中<strong>定位到一个类的符号引用</strong>且该符号引用代表的类<strong>是否已被加载、解析和初始化</strong>，若没有则需先执行相应的类加载，反之下一步</p><blockquote><p>想详细了解类加载的知识的话，可以看下笔者的一篇文章：<a href="https://juejin.im/post/5e86a5b86fb9a03c451bbdd5" target="_blank" rel="noopener">一夜搞懂 | JVM 类加载机制</a></p></blockquote><p>2.<strong>分配内存</strong></p><blockquote><ul><li>由 <strong><code>Java</code> 堆中的内存</strong>是否<strong>规整</strong>决定如何给新生对象分配可用空间</li><li>由堆所采用的<strong>垃圾收集器是否带有空间压缩整理的能力</strong>决定<code>Java</code> 堆中的内存是否规整</li></ul><p>PS：想详细了解<code>GC</code>或者内存分配的话，可以看下笔者的这篇文章：<a href="https://juejin.im/post/5e815d2451882573c66ceec8" target="_blank" rel="noopener">一夜搞懂 | JVM GC&amp;内存分配</a></p></blockquote><ul><li>若规整，采用 “指针碰撞” 分配方式：</li></ul><blockquote><ul><li>过程：将用过和空闲的内存放在两边，中间以一个指针作为分界指示器。当分配内存时，就把指针向空闲一边挪动与对象大小相等的距离即可</li><li>应用：<code>Serial</code>、<code>ParNew</code> 等带 压缩过程的收集器</li></ul></blockquote><ul><li>若非规整，采用 “空闲列表” 分配方式：</li></ul><blockquote><ul><li>过程：维护一个记录可用内存块的列表。当分配内存时，就从列表中找到一块足够大的空间划分给对象实例并更新记录</li><li>应用：基于 <code>Mark-Sweep</code> 算法的 <code>CMS</code> 收集器</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/26/181214-774543.png" alt="分配内存"></p><blockquote><p>保证内存分配是线程安全的解决方案：</p><ul><li>对内存分配的动作进行同步处理</li><li>每个线程在 <code>Java</code> 堆中预先分配一块内存（本地线程分配缓冲 <code>TLAB</code>），在本线程的 <code>TLAB</code> 上进行分配，当 <code>TLAB</code> 用完需要分配新的 <code>TLAB</code> 时再同步锁定</li></ul></blockquote><p>3.<strong>设置对象头</strong></p><p>将对象的所属类、找到类的<a href="http://www.ruanyifeng.com/blog/2007/03/metadata.html" target="_blank" rel="noopener">元数据</a>信息的方式、对象的哈希码、对象的 <code>GC</code> 分代年龄等信息存放在对象的对象头中</p><h4 id="2-2-2-对象的内存分布"><a href="#2-2-2-对象的内存分布" class="headerlink" title="2.2.2 对象的内存分布"></a>2.2.2 对象的内存分布</h4><blockquote><p>分为三块区域</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/26/182453-60808.png" alt="对象的内存分布"></p><ul><li>对象头：包括两部分信息</li></ul><blockquote><ul><li><code>Mark Word</code>：用于存储对象自身的<strong>运行时数据</strong>，如哈希码、<code>GC</code> 分代年龄、锁状态标志、线程持有的锁、偏向线程 <code>ID</code>、偏向时间戳等</li><li>类型指针：用于确定这个对象的<strong>所属类</strong></li></ul></blockquote><ul><li>实例数据：存储真正的有效信息，是程序代码中定义的各种类型的字段内容。存储顺序会受虚拟机分配策略参数和字段在 <code>Java</code> 源码中定义顺序这两个因素影响。</li><li>对齐填充：占位符，帮助补全未对齐的对象实例数据部分（保证是 8 字节的倍数），非必需</li></ul><h4 id="2-2-3-对象的访问定位"><a href="#2-2-3-对象的访问定位" class="headerlink" title="2.2.3 对象的访问定位"></a>2.2.3 对象的访问定位</h4><blockquote><p>两种主流的访问方式</p></blockquote><ul><li><p>通过句柄访问对象</p><p>在 <code>Java</code> <strong>堆</strong>中划分出一块内存来作为<strong>句柄池</strong>，<code>reference</code> 存储的是对象的句柄地址，在句柄中包含了对象实例数据与类型数据（方法区中的类信息）各自的具体地址信息</p><p>好处：<code>reference</code> 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 <code>reference</code> 本身不需要修改</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/26/182731-866743.png" alt="通过句柄访问对象"></p></li><li><p>通过直接指针访问对象</p><p>在 <code>Java</code> 堆对象的布局中考虑如何放置访问类型数据的相关信息，<code>reference</code> 存储的直接就是对象地址</p><p>好处：速度更快，节省了一次指针定位的时间开销</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/26/182859-780064.png" alt="通过直接指针访问对象"></p></li></ul><h3 id="2-3-实战：OutOfMemoryError-异常"><a href="#2-3-实战：OutOfMemoryError-异常" class="headerlink" title="2.3 实战：OutOfMemoryError 异常"></a>2.3 实战：<code>OutOfMemoryError</code> 异常</h3><blockquote><p>这部分的内容可以看下这篇文章：<a href="https://www.jianshu.com/p/2a2a5ec2af00" target="_blank" rel="noopener">JVM内存溢出详解（栈溢出，堆溢出，持久代溢出、无法创建本地线程）</a></p></blockquote><h2 id="三-课堂小测试"><a href="#三-课堂小测试" class="headerlink" title="三.课堂小测试"></a>三.课堂小测试</h2><blockquote><p>恭喜你！已经看完了前面的文章，相信你对<code>JVM</code>内存管理机制已经有一定深度的了解，下面，进行一下课堂小测试，验证一下自己的学习成果吧！</p></blockquote><p>Q1:<strong>在<code>JVM</code>中，为什么要把堆与栈分离？栈不是也可以存储数据吗？</strong></p><ul><li><p>从<strong>软件设计</strong>的角度看，<strong>栈代表了处理逻辑</strong>，而<strong>堆代表了数据</strong>，分工明确，处理逻辑更为清晰体现了“<strong>分而治之”以及“隔离”的思想。</strong></p></li><li><p>堆与栈的分离，使得<strong>堆中的内容可以被多个栈共享</strong>（也可以理解为<strong>多个线程访问同一个对象</strong>）。这样共享的方式有很多收益：提供了一种有效的数据交互方式(如：<strong>共享内存</strong>)；堆中的共享常量和缓存可以被所有栈访问，节省了空间。</p></li><li><p>栈因为运行时的需要，比如保存系统运行的上下文，需要进行地址段的划分。由于栈只能向上增长，因此就会限制住栈存储内容的能力。而堆不同，堆中的对象是可以根据需要动态增长的，因此栈和堆的拆分，使得动态增长成为可能，相应栈中只需记录堆中的一个地址即可。</p></li><li><p>堆和栈的结合完美<strong>体现了面向对象的设计</strong>。当我们将对象拆开，你会发现，<strong>对象的属性即是数据，存放在堆中</strong>；而对象的<strong>行为（方法）即是运行逻辑，放在栈中</strong>。因此编写对象的时候，其实即编写了数据结构，也编写的处理数据的逻辑。</p></li></ul><p>Q2:<strong>为啥说堆和<code>JVM</code>栈是程序运行的关键</strong></p><ul><li><strong>栈是运行时的单位</strong>（解决程序的运行问题，即程序如何执行，或者说如何处理数据），<strong>而堆是存储的单位</strong>（解决的是数据存储的问题，即数据怎么放、放在哪儿）</li><li>堆存储的是对象。栈存储的是基本数据类型和堆中对象的引用；（参数传递的值传递和引用传递）</li></ul><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《深入理解Java虚拟机》第3版</li><li><a href="https://blog.csdn.net/wy11933/article/details/80214609" target="_blank" rel="noopener">Java中native方法</a></li><li><a href="https://juejin.im/post/5df5fde36fb9a0162c486c71" target="_blank" rel="noopener">一文读懂 - 元空间和永久代</a></li><li><a href="https://www.jianshu.com/p/2a2a5ec2af00" target="_blank" rel="noopener">JVM内存溢出详解（栈溢出，堆溢出，持久代溢出、无法创建本地线程）</a></li><li><a href="https://www.jianshu.com/p/cd93567ed868" target="_blank" rel="noopener">要点提炼| 理解JVM之内存管理机制</a></li><li><a href="https://www.jianshu.com/p/0f2816805da6" target="_blank" rel="noopener">字面量，常量和变量之间的区别？</a></li><li><a href="http://www.ruanyifeng.com/blog/2007/03/metadata.html" target="_blank" rel="noopener">元数据（MetaData）</a></li><li><a href="https://juejin.im/post/5c78ae3ff265da2dcc800838" target="_blank" rel="noopener">JVM 符号引用和直接引用</a></li><li><a href="https://juejin.im/post/5d200b54f265da1bac40384a#heading-1" target="_blank" rel="noopener">一文理解JVM虚拟机</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自顶向下 | 带你遨游网络层</title>
      <link href="/2020/03/19/zi-ding-xiang-xia-dai-ni-ao-you-wang-luo-ceng/"/>
      <url>/2020/03/19/zi-ding-xiang-xia-dai-ni-ao-you-wang-luo-ceng/</url>
      
        <content type="html"><![CDATA[<h1 id="自顶向下-带你遨游网络层"><a href="#自顶向下-带你遨游网络层" class="headerlink" title="自顶向下 | 带你遨游网络层"></a>自顶向下 | 带你遨游网络层</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><ul><li>网络层的知识点非常繁多，本文仅是基于《计算机网络 自顶向下》而总结的一些<strong>重点知识点</strong>，如果想要详细了解网络层的知识，可以看下《自顶向下》</li><li>本文已经收录到我的<code>Github</code>个人博客，欢迎大佬们光临寒舍：<a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></li></ul></blockquote><h2 id="学习导图："><a href="#学习导图：" class="headerlink" title="学习导图："></a>学习导图：</h2><p><img src="https://s1.ax1x.com/2020/03/20/8ci74O.png" alt="学习导图"></p><p>对于互联网的网络层来说，其提供的服务非常简单，包括：</p><ul><li>转发</li><li>路由选择</li></ul><h2 id="网络层可能提供的服务"><a href="#网络层可能提供的服务" class="headerlink" title="网络层可能提供的服务"></a>网络层可能提供的服务</h2><p>网络服务模型：</p><ul><li>确保交付</li><li>保证延迟的确保交付</li><li>有序交付</li><li>确保最小带宽</li><li>确保最大时延抖动</li><li>安全性服务</li></ul><p>那么 <code>IP</code> 协议提供以上哪些服务呢？</p><p>答案就是：<strong>一个也不提供</strong></p><ul><li><strong>不</strong> 确保交付</li><li><strong>不</strong> 保证延迟的确保交付</li><li><strong>不</strong> 有序交付</li><li><strong>不</strong> 确保最小带宽</li><li><strong>不</strong> 确保最大时延抖动</li><li><strong>没有</strong> 安全性服务</li></ul><h2 id="数据报网络"><a href="#数据报网络" class="headerlink" title="数据报网络"></a>数据报网络</h2><p><code>IP</code> 协议构建的网络就属于<strong>数据报</strong>网络</p><p>特点：</p><ul><li><strong>无需建立连接</strong>，维持状态信息</li><li>使用<strong>转发表</strong>决定分组输出端口</li><li>通过<strong>最长前缀匹配原则</strong>进行查询转发表</li></ul><h2 id="路由器工作原理"><a href="#路由器工作原理" class="headerlink" title="路由器工作原理"></a>路由器工作原理</h2><ul><li><strong>输入</strong>端口 ：从物理层接收数据，拆封分组、查看相应协议层头部，查询转发表放进发送队列</li><li><strong>交换结构</strong> ： 负责发送队列到输出队列的运输</li><li><strong>输出</strong>端口 ：拿到输出队列的数据，然后封上相应协议层的头部，送给物理层</li><li><strong>路由选择处理器</strong> ： 负责执行路由选择，更新转发表，以及一些控制功能</li></ul><h2 id="网络层的三个主要组件"><a href="#网络层的三个主要组件" class="headerlink" title="网络层的三个主要组件"></a>网络层的三个主要组件</h2><h3 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a><code>IP</code> 协议</h3><h4 id="IPV4-数据报格式"><a href="#IPV4-数据报格式" class="headerlink" title="IPV4 数据报格式"></a><code>IPV4</code> 数据报格式</h4><p><img src="https://s1.ax1x.com/2020/03/19/8yYKXt.jpg" alt="IPV4数据报"></p><ul><li>版本：规定了 <code>IP</code> 协议版本</li><li>首部长度</li><li>服务类型：区分不同类型的 <code>IP</code> 数据报</li><li>数据报长度</li><li>标识、标志、片偏移：用于 <code>IP</code> 数据报分片</li><li>寿命：一个数据报可以被路由处理的次数</li><li>协议：用于 <code>IP</code> 的多路复用和分解，即应将数据交付给上层的哪个协议，<code>TCP</code> 还是 <code>UDP</code></li><li>首部检验和</li><li>源和目的 <code>IP</code> 地址</li><li>选项：用于扩展 <code>IP</code> 首部</li><li>数据</li></ul><h4 id="IPV4-编址"><a href="#IPV4-编址" class="headerlink" title="IPV4 编址"></a><code>IPV4</code> 编址</h4><ul><li><p>总长度为 <code>32</code> 位</p></li><li><p>一般以 <code>8</code> 位一组</p></li><li><p>子网：具有相同的前半部分地址的一组 <code>IP</code> 地址构成的网络</p></li><li><p>编址方案：</p></li></ul><blockquote><ul><li>无类别域间路由选择</li><li>分类编址</li></ul></blockquote><h4 id="IPv4-和-IPv6-的区别"><a href="#IPv4-和-IPv6-的区别" class="headerlink" title="IPv4 和 IPv6 的区别"></a><code>IPv4</code> 和 <code>IPv6</code> 的区别</h4><p><strong>1. 扩展了寻址能力。</strong><br> <code>V6</code> 有 <code>128</code>位地址，<code>v4</code>只有<code>32</code>位。相当于扩展了<strong>4倍</strong>。<br> <strong>2. 报头格式简化</strong><br> <code>V6</code> 相对于 <code>V4</code>来说，报头简化了很多<br> <strong>3. 对可选项更大的支持</strong><br> <code>V6</code> 在 <code>V4</code> 的基础上，支持更多可选项操作，比如 对 <code>IP</code>层安全支持，对<code>IP</code>层漫游支持等功能。<br> <strong>4. 支持自动配置</strong><br> <code>IPv6</code>节点通过 地址自动配置 来获得 <code>V6</code>地址 和网关地址，<br> <strong>5. 身份验证和保密</strong><br> <code>v6</code>中加入了身份验证、数据一致性等保密性内容<br> <strong>6. 允许继续扩充协议</strong><br> 新的应用扩展也是在 <code>V6</code> 中支持的。</p><h4 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a><code>DHCP</code></h4><p>是一种用于自动分配 <code>IP</code> 地址且即插即用的协议，使用 <code>UDP</code> 作为运输层服务</p><p>对于一个新加入网络的电脑：</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/19/204632-375824.png" alt="DHCP连接流程"></p><ol><li><code>DHCP</code> 服务器发现。通过设置源 <code>IP</code> 地址为 <code>0.0.0.0</code>，且目的 <code>IP</code> 地址为 <code>255.255.255.255</code> 的 <code>UDP</code> 分组，在网络中广播</li><li><code>DHCP</code> 服务器提供。<code>DHCP</code> 监听到广播，使用一个 <code>DHCP</code> 提供报文 向客户作出响应 (继续以广播的形式发出，因为此时客户依旧没有自己的 <code>IP</code> 地址)</li><li><code>DHCP</code> 请求。客户得到响应后，发送一个 <code>DHCP</code> 请求报文，回显响应的配置参数</li><li><code>DHCP ACK</code>。服务器回应一个 <code>DHCP ACK</code> 报文，响应客户的请求报文</li></ol><h4 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a><code>NAT</code></h4><p>从目的来说，<code>NAT</code> 技术使得多台电脑可以通过一个公共 <code>IP</code> 上网，且不发生冲突。</p><p>其行文的核心在于，从路由器 (具备公共 <code>IP</code> 的设备) 拦截所有的分组，修改其 <code>IP</code> 地址和端口，并记录这种修改产生相应的映射，发送修改后的分组，接收时执行相反的步骤。</p><h3 id="路由选择算法"><a href="#路由选择算法" class="headerlink" title="路由选择算法"></a>路由选择算法</h3><p>分类</p><p>全局还是分散：</p><ul><li>全局式路由选择算法 (链路状态算法)<ul><li>需要事先知道网络总体的分布图</li></ul></li><li>分散式路由选择算法 (距离向量算法)：<ul><li>无需知道网络总体的分布图</li></ul></li></ul><p>动态还是静态：</p><ul><li>静态路由选择</li><li>动态路由选择</li></ul><p>是否负载敏感：</p><ul><li>负载敏感算法</li><li>负载迟钝算法</li></ul><h3 id="因特网控制报文协议-ICMP"><a href="#因特网控制报文协议-ICMP" class="headerlink" title="因特网控制报文协议 (ICMP)"></a>因特网控制报文协议 (<code>ICMP</code>)</h3><ul><li>用于主机和路由器彼此沟通信息</li><li>最典型的用途是差错报告</li><li>构建于 <code>IP</code> 协议之上 (因为其报文位于为 <code>IP</code> 数据报的数据字段)</li></ul><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li><p>《计算机网络-自顶向下方法》</p></li><li><p><a href="https://www.jianshu.com/p/63811682efb6" target="_blank" rel="noopener">《计算机网络-自顶向下方法》重点笔记</a></p></li><li><p><a href="https://juejin.im/post/5cf7b8835188254a6c23dadd#heading-0" target="_blank" rel="noopener">第四章-网络层-IP协议</a></p></li><li><p><a href="https://blog.n0texpecterr0r.cn/2019/12/15/%e3%80%90%e7%bd%91%e7%bb%9c%e3%80%91%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e7%ac%94%e8%ae%b0-%e7%bd%91%e7%bb%9c%e5%b1%82%e7%ae%80%e8%a6%81%e7%ac%94%e8%ae%b0/" target="_blank" rel="noopener">计算机网络笔记——网络层简要笔记</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自顶向下 </tag>
            
            <tag> 网络层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自顶向下 | 带你遨游运输层</title>
      <link href="/2020/03/18/zi-ding-xiang-xia-dai-ni-ao-you-yun-shu-ceng/"/>
      <url>/2020/03/18/zi-ding-xiang-xia-dai-ni-ao-you-yun-shu-ceng/</url>
      
        <content type="html"><![CDATA[<h1 id="自顶向下-带你遨游运输层"><a href="#自顶向下-带你遨游运输层" class="headerlink" title="自顶向下 | 带你遨游运输层"></a>自顶向下 | 带你遨游运输层</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的<code>Github</code>个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习导图："><a href="#学习导图：" class="headerlink" title="学习导图："></a>学习导图：</h2><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/24/210948-419777.png" alt="学习导图"></p><h2 id="一-运输层概述"><a href="#一-运输层概述" class="headerlink" title="一.运输层概述"></a>一.运输层概述</h2><blockquote><p>我们知道运输层位于网络层之上，网络层提供了主机之间的逻辑通信。</p><p>Q1：那既然已经把一个数据包从一个主机发到另一个主机上面了,为什么还需要运输层呢？</p><p>A1：这是因为运输层提供了应用进程之间的端-端连接。</p><p>Q2：我们知道一个电脑可能有多个进程同时在使用网络连接，那么网络包到达主机之后，怎么区分自己属于那个进程？</p><p>So,如果你对运输层感兴趣的话，可以跟笔者一起来简要了解下运输层，了解下<code>UDP</code>和<code>TCP</code>两大面试常客</p></blockquote><ul><li>运输层为运行在<strong>不同主机</strong>上的应用程序之间提供逻辑通信</li><li>应用报文加上<strong>运输层</strong>首部形成运输层<strong>报文段</strong>，报文段通过网络层被封装成<strong>网络层</strong>分组（<strong>数据报</strong>）向目的地发送</li></ul><p>Q1：<strong>运输层和网络层的关系</strong></p><ul><li>运输层：运行在<strong>不同主机</strong>上的<strong>应用程序</strong>之间提供逻辑通信</li><li>网络层：提供<strong>主机之间</strong>的通信</li></ul><p>举个例子来说明两者关系：</p><blockquote><p>有两个家庭，一家位于广州，一家位于北京，每家有 3个孩子。这两个家庭的孩子们喜欢彼此通信，每封信都用单独的信封通过传统的邮政服务发送。每个家庭有一个孩子<strong>负责收发邮件</strong>，北京家庭是 阿京，而广州家庭是 阿州。每周阿京去她所有的<strong>兄弟姐妹那里收集邮件</strong>，并将这些邮件交到邮递员处上。当信件到达北京家庭时，阿京也负责将信件发到她的兄弟姐妹手上，广州家庭中 阿州也负责类似工作</p></blockquote><ul><li>网络层——邮递员</li><li>运输层——阿京和阿州</li><li>应用程序——兄弟姐妹</li><li>主机——两个家庭</li></ul><blockquote><p>通过运输层协议，两台电脑仿佛直接相连一样。应用<strong>无需知道底层内部实现的原理</strong>和细节，比如怎么把远隔世界两地电脑上的数据进行相互传输</p></blockquote><p>Q2:<strong>注意点</strong></p><ul><li>运输层协议仅仅实现在网络的边缘处，例如主机，电脑，手机等。如路由器，交换机这些网络核心设备，是没有实现运输层协议的</li><li>每一层协议仅仅检查分组相应的协议层字段</li><li>最常用的两种输入层协议，<code>TCP</code>和 <code>UDP</code></li><li>运输层的下面是网络层，网络层的目的在于为不同的主机提供逻辑通信，而非主机上的进程</li><li>网络层常用协议是 <code>IP</code>，其提供的是一种不可靠的数据传输服务</li><li>为了做到<strong>为不同主机 (<code>host</code>) 上的应用或者说进程提供逻辑通信</strong>这一目的，运输层协议必须能分辨出数据的来源和去向。为此，运输层存在着两种行为，多路复用和多路分解</li></ul><h2 id="二-多路复用与多路分解"><a href="#二-多路复用与多路分解" class="headerlink" title="二.多路复用与多路分解"></a>二.多路复用与多路分解</h2><ul><li>多路复用：当运输层收到来自上方应用层的数据时，运输层会为数据<strong>封上一些头部信息</strong>，根据所有协议不同，封上的信息也不一样</li></ul><blockquote><p>用上面的两个家庭的例子进行形象化地阐述就是：多路复用就是阿州和阿京将兄弟姐妹的信一起交给邮递员</p></blockquote><ul><li>多路分解：当运输层收到下方网络层传输来的数据时，运输层会<strong>检查</strong>多路复用时<strong>封上的信息</strong>，从而正确的把数据<strong>定向到相应的进程</strong></li></ul><p>Q1：如何使用运输层的协议？</p><p>操作系统提供了被称为 <code>Socket</code> 的接口 <code>API</code> 供编程人员调用，对 <code>Socket</code> 的形象理解是其是一种抽象，将复杂的实现 (<code>TCP/UDP</code>) 协议的各种行为抽形成简单的几个函数给开发人员使用。就像浏览器将发送请求报文这一 <code>Http</code> 协议规定的行为，抽象成我们只需要输入 <code>Url</code> 然后回车即可</p><p>这里需要注意的一点是：</p><ul><li>在一般情况下，一个计算机端口只能被一个进程占用</li><li>一个进程可以创建多个 <code>Socket</code>，多个 <code>TCP</code> <code>Socket</code> 可以监听同一个端口，并保证接受的数据依旧是正确的</li><li>多个 <code>UDP Socket</code> 就无法监听同一端口，这其中的差异源于 <code>TCP</code> 和 <code>UDP</code> 协议的不同<blockquote><ul><li><code>TCP</code> 是面向连接的，其有<strong>足够状态</strong>的信息来分辨数据来源，后定向到正确的 <code>Socket</code></li><li><code>UDP</code> 不需要维持连接，仅仅通过<strong>端口号</strong>来决定数据的去向，所以会导致冲突</li></ul></blockquote></li></ul><h2 id="三-UDP-和TCP的多路复用和分解"><a href="#三-UDP-和TCP的多路复用和分解" class="headerlink" title="三.UDP 和TCP的多路复用和分解"></a>三.<code>UDP</code> 和<code>TCP</code>的多路复用和分解</h2><p>Q1：<code>UDP</code>的多路复用和分解</p><p>一个 <code>UDP Socket</code> 通过一个二元组 (目的 <strong><code>IP</code> 地址</strong>，目的<strong>端口号</strong>) 来标识，当输入层收到数据时，通过检查这个二元组，来定向数据该去往哪一个  <code>UDP Socket</code>。这也是多个 <code>UDP Socket</code> 无法监听同一个端口的原因</p><p>Q2：<strong><code>TCP</code> 的多路复用分解</strong></p><p>一个 <code>TCP Socket</code> 通过一个四元组 (源 <code>IP</code>，源端口，目的 <code>IP</code>，目的端口号) 来标识，这也解释为什么多个 <code>TCP Socket</code> 可以监听同一个端口，尽管目的 <code>IP</code>和目的端口号是一样的，但是源 <code>IP</code>和源端口的组合总是不同的</p><p><img src="https://s1.ax1x.com/2020/03/18/8095RK.png" alt="TCP UDP Socket对比"></p><h2 id="四-UDP"><a href="#四-UDP" class="headerlink" title="四.UDP"></a>四.<code>UDP</code></h2><h3 id="4-1-UDP基本概念"><a href="#4-1-UDP基本概念" class="headerlink" title="4.1 UDP基本概念"></a>4.1 <code>UDP</code>基本概念</h3><p>相比于 <code>TCP</code>来讲，<code>UDP</code>是一个简单的协议，就是把网络层 <code>IP</code> 提供的服务封装了下，实现了多路复用和分解，提供了端到端进程间的通信和错误检验服务</p><p>相对于 <code>TCP</code> 来说：</p><p>缺点：</p><ul><li><code>UDP</code> 是不可靠的传输服务</li><li>没有流量和拥塞控制</li></ul><p>优点：</p><ul><li>能够精细地控制数据的发送时间和速率</li><li>无需事先建立连接</li><li>无连接状态</li><li>分组首部开销小</li></ul><p><strong><code>UDP</code>报文端结构：</strong></p><p><img src="https://s1.ax1x.com/2020/03/18/80CQeJ.jpg" alt="UDP 报文段结构"></p><ul><li>源端口号：发送方的端口号</li><li>目的端口号：接收方端口号</li><li>长度：包括首部在内的报文长度</li><li>检验和：用来<strong>差错检验</strong>。只发现错误不纠正，<strong>错了就扔</strong>。然后<strong>重发</strong></li></ul><h3 id="4-2-可靠数据传输原理"><a href="#4-2-可靠数据传输原理" class="headerlink" title="4.2 可靠数据传输原理"></a>4.2 可靠数据传输原理</h3><blockquote><p>虽然<code>UDP</code>并不可靠，但是我们要分析其为啥不可靠，从而引出可靠数据传输原理，有利于理解下文对<code>TCP</code>协议的可靠数据传输的机制</p></blockquote><p>Q1:<strong>数据传输可能遇到的问题:</strong></p><ul><li>传输中数据被损坏</li><li>数据丢失</li><li>数据可能乱序到达</li></ul><p>Q2:<strong>解决方法：</strong></p><ul><li>检验和</li><li>序号</li><li>定时器</li><li>肯定和否定反馈分组</li><li>重传</li></ul><p>Q3:<strong>如何在保证可靠性的前提下，提高其性能？</strong></p><p>A.通过引入流水线 (<code>pipelining</code>) 技术</p><p>引入流水线导致了：</p><ul><li>序号范围需要增加</li><li>收发双方可能需要缓存乱序到达的分组</li><li>以上两个的具体实现取决于传输协议<strong>如何处理分组丢失、损坏的问题</strong> (是选择回退 <code>N</code> 步，还是选择重传)</li></ul><p>B.通过缓存处理</p><blockquote><p>读者如果对详细的缓存机制感兴趣的话，可以看下这篇文章：<a href="https://juejin.im/post/5a1d4e546fb9a0450f21af23#heading-0" target="_blank" rel="noopener">HTTP—-HTTP缓存机制</a></p></blockquote><ul><li>缓存处理的规则：分为强制缓存和协商缓存</li><li>缓存的优点：</li></ul><blockquote><ul><li>减少了冗余的数据传递，节省宽带流量</li><li>减少了服务器的负担，大大提高了网站性能</li><li>加快了客户端加载网页的速度 这也正是<code>HTTP</code>缓存属于客户端缓存的原因</li></ul></blockquote><p>Q4:<strong>如何处理分组丢失、损坏的问题</strong></p><p>A.回退 <code>N</code> 步</p><ul><li><p>其核心在于，发送方会维持一个窗口，发送方能发送的数据量<strong>取决于窗口长度</strong>，并且当丢失时会重送<strong>所有</strong>未确认的分组</p></li><li><p>接收方会<strong>丢弃乱序</strong>到达的缓存</p></li><li><p>特点：</p><p>1.<strong>累计</strong>性 <code>ACK</code></p><p>2.单一定时器</p></li></ul><p>B.选择重传</p><ul><li><p>核心在于，收发双方都会维持一个窗口，并且尽力保证窗口的状态是同步的，因此当分包丢失时，发送方<strong>只会重送丢失的分组</strong></p></li><li><p>接收方会缓存乱序到达的分组</p></li><li><p>特点：</p><p>1.<strong>独立</strong>性 <code>ACK</code></p><p>2.多个定时器</p></li></ul><h2 id="五-TCP"><a href="#五-TCP" class="headerlink" title="五.TCP"></a>五.<code>TCP</code></h2><h3 id="5-1-TCP基本概念"><a href="#5-1-TCP基本概念" class="headerlink" title="5.1 TCP基本概念"></a>5.1 <code>TCP</code>基本概念</h3><p>A.特点：</p><ul><li><strong>面向连接</strong></li><li><strong>全双工</strong>的</li><li><strong>点对点</strong>，不存在一次发送将数据传递给多个接收方、</li><li>在合适的时候发送 <strong>发送缓存</strong> 里的数据</li><li>为每个数据封上一个 <code>TCP</code> 头部</li><li><code>TCP</code> 连接的每一端都具有<strong>发送缓存和接受缓存</strong></li></ul><p>B.报文段结构</p><p><img src="https://s1.ax1x.com/2020/03/18/80PoHH.png" alt="TCP报文段结构"></p><p>部分参数解释:</p><ul><li><p>序号 (<code>seq</code>) ：所带数据的第一个比特的序号，同时也是接收方期待的序号，等于接收方回复报文中的 <code>ACK</code>(n) 中的 n</p></li><li><p>确认号 (<code>ack</code>) ： 对于一个 <code>ACK</code>(n) 来说，告诉对方 n-1 前的数据已经收到，下一次期待的序列号为 n</p></li><li><p><code>ACK</code> ：指示，用于指示报文中确认号字段的值是有效的</p></li><li><p><code>PSH</code> ：指示，立即发送_发送缓存_里的数据</p></li><li><p><code>RST</code> ：指示，用于强制关闭连接</p></li><li><p><code>SYN</code> ： 指示，用于握手阶段也就是建立连接的阶段</p></li><li><p><code>FIN</code> ：指示，用于正常关闭连接</p></li><li><p>接受窗口 ：用于 <code>TCP</code> 的流量控制功能</p></li></ul><h3 id="5-2-可靠数据传输"><a href="#5-2-可靠数据传输" class="headerlink" title="5.2 可靠数据传输"></a>5.2 可靠数据传输</h3><ul><li><p><code>TCP</code> 协议为数据的每一 <code>Byte</code> 都编号，而非针对报文段</p></li><li><p>总是维持最老未经确认的 1 <code>Byte</code> 的计时器</p></li><li><p>每一次<strong>超时重置</strong>的<strong>计时器时间会加倍</strong></p></li><li><p>其<strong>错误恢复机制</strong>是<strong>回退 N 步和选择重传的混合体</strong></p></li></ul><blockquote><ul><li>不会丢弃乱序到达的分组，而是缓存起来（选择重传的特性）</li><li>采用累计性 <code>ACK</code>（回退<code>N</code>步的特性）</li><li>只会重传丢失报文段中的数据（选择重传的特性）</li></ul></blockquote><ul><li>快速重传：当接收到连续的三个重复<strong>冗余</strong><code>ACK</code>（其实是收到四个同样的<code>ACK</code>，第一个是正常的，后三个才是冗余的），会触发快速重传，立即重发分组</li></ul><blockquote><ul><li><p>为什么是三个重复<strong>冗余</strong><code>ACK</code>呢？</p></li><li><p>答案：把三次冗余<code>ACK</code>作为判定丢失的准则其本身就是概率估计值所得出的（换句话说，出现三次冗余<code>ACK</code>大概率是分组丢失）</p></li><li><p>对详细的探究过程感兴趣的读者，可以看下这篇文章：<a href="https://www.jianshu.com/p/62940de97ca5" target="_blank" rel="noopener">TCP的快速重传机制</a></p></li></ul></blockquote><h3 id="5-3-流量控制"><a href="#5-3-流量控制" class="headerlink" title="5.3 流量控制"></a>5.3 流量控制</h3><ul><li>为了防止过高数据流量导致接收者的接受缓存爆掉，接收者会在其 <code>TCP</code>报文中通过 <strong>接受窗口</strong> 指示发送者还能发送多少数据</li></ul><p>接受窗口 (<code>rwnd</code>) 公式:</p><ul><li><code>rwnd = RcvBuffer - [LastByteRead - LastbyteRead]</code></li><li>且：<code>LastByteSent - LastByteAcked &lt;= rwnd</code></li></ul><h3 id="5-4-TCP-连接管理"><a href="#5-4-TCP-连接管理" class="headerlink" title="5.4 TCP 连接管理"></a>5.4 <code>TCP</code> 连接管理</h3><p>Q1：<strong>建立连接（三次握手）</strong></p><blockquote><p>注意：<code>Server</code>端的<code>ack</code>和<code>data</code>是一起发送的</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/18/160201-36438.gif" alt="三次握手"></p><ol><li>客户端发送 <code>SYN</code> 位置 1 的报文段</li><li>服务端返回 <code>SYN</code> 为 1，<code>ACK</code> 为 1 的报文段</li><li>客户端发送 <code>ACK</code> 为 1，且附带数据的报文段</li></ol><blockquote><p>形象化地理解：</p><p><code>TCP 三次握手</code>就好比两个人在街上隔着50米看见了对方，但是因为雾霾等原因不能100%确认，所以要通过招手的方式相互确定对方是否认识自己。</p><p>张三首先向李四招手(<code>syn</code>)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑(<code>ack</code>)。张三看到李四微笑后确认了李四成功辨认出了自己(进入<code>estalished</code>状态)</p><p>但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手(<code>syn</code>)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑(<code>ack</code>)，李四看到对方的微笑后确认了张三就是在向自己打招呼(进入<code>established</code>状态)。</p><p>于是两人加快步伐，走到了一起，相互拥抱</p></blockquote><p><img src="https://s1.ax1x.com/2020/03/18/801Sqs.png" alt="张三李四"></p><p>Q2：<strong>断开连接（四次挥手）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/18/163309-569310.gif" alt="四次挥手"></p><ol><li>客户发送 <code>FIN</code> 为 1 的报文段</li><li>服务端返回 <code>ACK</code> 为 1 的报文段</li><li>服务端发送 <code>FIN</code> 为 1 的报文段</li><li>客户端返回 <code>ACK</code> 为 1 的报文段</li><li>客户端在一段时间后，关闭连接</li></ol><blockquote><p>形象化地理解：</p><p>张三挥手(<code>fin</code>)——李四伤感地微笑(<code>ack</code>)——李四挥手(<code>fin</code>)——张三伤感地微笑</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/20/101355-226299.png" alt="张三李四分手"></p><h2 id="六-拥塞控制"><a href="#六-拥塞控制" class="headerlink" title="六.拥塞控制"></a>六.拥塞控制</h2><p>Q1：<strong>拥塞的代价</strong></p><ul><li>导致<strong>分组过长的排队时延</strong></li><li>需要<strong>重传</strong>因<strong>缓存溢出丢失</strong>的分组</li><li>高延时导致重送分组</li><li>丢包导致运输相关分组的分组交换器所作的工作全部白费</li></ul><p>Q2：<strong><code>TCP</code> 的拥塞控制</strong></p><ul><li><p><code>TCP</code> 采用端到端的拥塞控制</p></li><li><p>三个主要问题：</p></li></ul><ol><li>一个 <code>TCP</code> 的发送方如何限制自己的发送流量的速率？</li></ol><p>通过设置一个<strong>拥塞窗口</strong> (<code>cwnd</code>), 并且保证：<code>LastByteSent - LastByteAcked &lt;= min{cwnd, rwnd}</code></p><ol start="2"><li>如何感知其发送路径拥塞了？</li></ol><ul><li><code>timeout</code></li><li>收到一次正常 <code>ACK</code> 后连续收到三次冗余 <code>ACK</code> </li></ul><ol start="3"><li>感到拥塞时，采用什么样的算法改变发送速率？</li></ol><ul><li>慢启动</li></ul><blockquote><p><code>cwnd</code> 的值从 1 <code>MSS</code> 开始，并且对每一个 <code>ACK</code>，<code>cwnd</code> 值变为原来的 2 倍，直到超过阈值 (<code>ssthresh</code>)，转为拥塞避免模式</p></blockquote><ul><li>拥塞避免</li></ul><blockquote><p>在每一个 <code>RRT</code> 时间，<code>cwnd</code> 的值增加一个 <code>MSS</code></p></blockquote><ul><li>快速恢复</li></ul><blockquote><p><code>cwnd</code> 的值降为一半加上重复收到的重复 <code>ACK</code> 的数量，并且每一个 <code>ACK</code>，<code>cwnd</code> 的值增加一个 <code>MSS</code></p><p>在实践中，一旦 <code>timeout</code> 就会会到慢启动的状态，多次重复 <code>ACK</code> 则会进入快速恢复状态</p></blockquote><p>Q3：<code>TCP</code> 公平</p><p><code>TCP</code> 的公平性在于保证每个连接的吞吐量是平均的，而不是应用或进程间</p><h2 id="七-再谈握手和挥手"><a href="#七-再谈握手和挥手" class="headerlink" title="七.再谈握手和挥手"></a>七.再谈握手和挥手</h2><h3 id="7-1-为啥一定要三次握手，两次不行吗？"><a href="#7-1-为啥一定要三次握手，两次不行吗？" class="headerlink" title="7.1 为啥一定要三次握手，两次不行吗？"></a>7.1 为啥一定要三次握手，两次不行吗？</h3><p>弄清这个问题，我们需要先弄明白三次握手的目的是什么，能不能只用两次握手来达到同样的目的。</p><ul><li>第一次握手：客户端发送网络包，服务端收到了。 这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</li><li>第二次握手：服务端发包，客户端收到了。 这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。</li><li>第三次握手：客户端发包，服务端收到了。 这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</li></ul><p>因此，需要三次握手才能<strong>双方</strong>确认<strong>双方的接收与发送能力</strong>是否正常</p><blockquote><p>如果将发送比喻为挥手，接收比喻为视力正常的话，就有下面的例子</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/20/102551-338348.png" alt="张三李四"></p><p>试想如果是用两次握手，可能会出现下面这种情况：</p><blockquote><p>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再<strong>重传</strong>一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在<strong>某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端</strong>，此时服务端<strong>误认为客户端又发出一次新的连接请求</strong>，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一直等待客户端发送数据，浪费资源</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/20/103218-797629.png" alt="两次握手弊端"></p><h3 id="7-2-为啥挥手要四次？"><a href="#7-2-为啥挥手要四次？" class="headerlink" title="7.2 为啥挥手要四次？"></a>7.2 为啥挥手要四次？</h3><p>这是因为服务端在<code>LISTEN</code>状态下，收到建立连接请求的<code>SYN</code>报文后，把<code>ACK</code>和<code>SYN</code>放在一个报文里发送给客户端。而关闭连接时，当收到对方的<code>FIN</code>报文时，<strong>仅仅表示对方不再发送数据了但是还能接收数据</strong>，所以服务端可以立即<code>close</code>，也可以发送一些数据给客户端后，再发送<code>FIN</code>报文给客户端来表示同意现在关闭连接，因此，服务端<code>ACK</code>和<code>FIN</code>一般都会分开发送。</p><h2 id="八-碎碎念"><a href="#八-碎碎念" class="headerlink" title="八.碎碎念"></a>八.碎碎念</h2><p>恭喜你，成功看到了这里，现在的你，想必已经对运输层有自己的体会了；其实，运输层的知识点远不止这些，限于篇幅，把所有运输层的知识全部塞进这篇文章中，也不是特别现实；我们可以尝试看多几本相关的书籍，从而丰富自己的知识体系，从而得到更深的见解。</p><p>笔者也会不断学习，不断丰富自己，到时候（待老师讲解到这里了/看了别的书）如果有比较好的观点，本文也会持续改进更新，感谢您的支持。</p><p>最后笔者夹带一下私货，附上比较完整的计网面试题：<a href="https://juejin.im/post/5d896cccf265da03bd055c87#comment" target="_blank" rel="noopener">计算机网络太难？了解这一篇就够了</a></p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《计算机网络-自顶向下方法》</li><li><a href="https://juejin.im/post/5d9c284b518825095879e7a5#heading-7" target="_blank" rel="noopener">面试官，不要再问我三次握手和四次挥手</a></li><li><a href="https://juejin.im/post/5a0444d45188255ea95b66bc#heading-5" target="_blank" rel="noopener">TCP的三次握手四次挥手</a></li><li><a href="https://juejin.im/post/5b29d2c4e51d4558b80b1d8c#heading-2" target="_blank" rel="noopener">跟着动画来学习TCP三次握手和四次挥手</a></li><li><a href="https://juejin.im/post/5cf51edfe51d45598611b920#heading-8" target="_blank" rel="noopener">第三章-运输层-阅读笔记</a></li><li><a href="https://zhuanlan.zhihu.com/p/36030269" target="_blank" rel="noopener">第三章：运输层 |《计算机网络：自顶向下方法》</a></li><li><a href="https://www.jianshu.com/p/62940de97ca5" target="_blank" rel="noopener">TCP的快速重传机制</a></li><li><a href="https://juejin.im/post/5a1d4e546fb9a0450f21af23#heading-0" target="_blank" rel="noopener">HTTP—-HTTP缓存机制</a></li><li><a href="https://juejin.im/post/5d896cccf265da03bd055c87#comment" target="_blank" rel="noopener">计算机网络太难？了解这一篇就够了</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自顶向下 </tag>
            
            <tag> 运输层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自顶向下 | 带你遨游应用层</title>
      <link href="/2020/03/15/zi-ding-xiang-xia-dai-ni-ao-you-ying-yong-ceng/"/>
      <url>/2020/03/15/zi-ding-xiang-xia-dai-ni-ao-you-ying-yong-ceng/</url>
      
        <content type="html"><![CDATA[<h1 id="自顶向下-带你遨游应用层"><a href="#自顶向下-带你遨游应用层" class="headerlink" title="自顶向下 | 带你遨游应用层"></a>自顶向下 | 带你遨游应用层</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的<code>Github</code>个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习导图："><a href="#学习导图：" class="headerlink" title="学习导图："></a>学习导图：</h2><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/23/093657-745724.png" alt="学习导图"></p><h2 id="一、应用层协议原理"><a href="#一、应用层协议原理" class="headerlink" title="一、应用层协议原理"></a><strong>一、应用层协议原理</strong></h2><p>Q1:网络应用程序体系结构</p><ul><li>客户 - 服务器体系结构（<code>C/S</code>）：<code>Web</code></li></ul><ul><li>点对点结构（<code>P2P</code>）：迅雷</li></ul><ul><li>混合结构：<code>Napster</code></li></ul><p>Q2：进程通信</p><ul><li>客户和服务器进程</li></ul><ul><li>进程与计算机网络之间的接口：进程通过套接字（<code>socket</code>）软件接口向网络发送报文和从网络接收报文。</li></ul><ul><li>进程寻址：主机的地址由 <code>IP</code>地址标识，进程的位置由<strong>端口号</strong>标识。</li></ul><p>Q3：可供应用使用的运输服务</p><p>运输服务的衡量标准：</p><ul><li>可靠数据传输</li><li>吞吐量</li><li>定时</li><li>安全性</li></ul><p>Q4:因特网提供的运输服务</p><ul><li><p><code>TCP</code>服务：特点是面向<strong>连接</strong>和<strong>可靠</strong>的数据传送</p></li><li><p><code>UDP</code>服务：特点是<strong>无连接</strong>的最小服务（非可靠）</p></li></ul><p>Q5:应用层协议</p><p>应用层协议 (<code>application layer protocol</code>) 定义了运行在不同端系统上的应用程序进程如何相互传递报文</p><p>(1) 交换的<strong>报文类型</strong>，如请求报文和响应报文；</p><p>(2) 各种报文类型的<strong>语法</strong>，如报文中的各个字段公共详细描述;</p><p>(3) 字段的<strong>语义</strong>，即包含在字段中信息的含义；</p><p>(4) 进程何时、如何发送报文及对报文进行响应。</p><h2 id="二、Web-和-HTTP"><a href="#二、Web-和-HTTP" class="headerlink" title="二、Web 和 HTTP"></a><strong>二、Web 和 HTTP</strong></h2><p>Q1:<code>HTTP</code></p><ul><li><code>HTTP</code>名为超文本传输协议， 规定了<strong>客户端和服务器之间</strong>进行报文交换的方法</li><li><code>HTTP</code> 用 <code>TCP</code> 作为他的<strong>传输层</strong>协议。<code>HTTP</code> 客户首先发起一个与服务器的 <code>TCP</code> 连接</li><li>服务器响应的时候，不存储客户端的状态信息，因此 <code>HTTP</code> 也被称为 <strong>无状态协议</strong></li></ul><p>Q2:非持续连接和持续连接</p><ul><li><p>持续链接：只采用一个 <code>TCP</code>连接完成</p></li><li><p>非持续连接：采用独立的<code>TCP</code>连接完成</p></li><li><p>由服务器端决定，<code>TCP</code>协议的请求，是采用一个 <code>TCP</code>连接完成，还是独立<code>TCP</code>连接完成</p></li><li><p><strong>默认</strong>情况下使用<strong>持续连接</strong></p></li><li><p>非持续连接<code>HTTP</code>：每个<code>TCP</code>连接 只传送一个请求报文和响应报文</p></li></ul><blockquote><p>这里书上提到了一个概念，<code>RTT</code>（<code>Round-Trip Time</code>）往返时延，报文从 <code>C-&gt;S-&gt;C</code> 的时间。由于有三次握手的存在，前两次握手已经用了 2个 <code>RTT</code>，所以真正的响应时间应该是 2<code>RTT</code> + 传输<code>HTML</code>对象</p></blockquote><p><img src="https://s1.ax1x.com/2020/03/15/83jekq.png" alt></p><ul><li>持续连接 <code>HTTP</code>：持续连接可以提高传输效率</li></ul><blockquote><p>上面说过，每个对象都要握手，经过2个<code>RTT</code> 才可以传输。而持续连接，则是用系统资源来换取效率。</p></blockquote><p>Q3:<code>HTTP</code> 报文格式</p><ol><li>请求报文的格式：</li></ol><ul><li><strong>请求行</strong>：方法字段、<code>URL</code>字段、<code>HTTP</code>版本</li><li><strong>请求头（首部行）</strong>：服务器要使用的附加信息</li><li><strong>空行</strong>：请求头后面必有空行</li><li><strong>请求数据</strong>：请求数据的主题。<br> <code>Get</code>方法是没有的，放在了 <code>URL</code>的参数中，<code>POST</code> 方法放在表单中</li></ul><pre class=" language-go"><code class="language-go">GET <span class="token operator">/</span>somedir<span class="token operator">/</span>page<span class="token punctuation">.</span>html HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> www<span class="token punctuation">.</span>someschool<span class="token punctuation">.</span>eduConnection<span class="token punctuation">:</span> <span class="token builtin">close</span>                 <span class="token comment" spellcheck="true">//浏览器告诉服务器不要用持续链接，要求服务器在发送完请求对象后就关闭连接</span>User<span class="token operator">-</span>agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span>             <span class="token comment" spellcheck="true">//指明用户代理</span>Accept<span class="token operator">-</span>language<span class="token punctuation">:</span> fr                <span class="token comment" spellcheck="true">//指明用户得到对象的语言版本</span></code></pre><p><img src="https://s1.ax1x.com/2020/03/15/83vTMD.png" alt="请求报文格式"></p><p>2.响应报文的格式：</p><ul><li><strong>状态行</strong>：<code>HTTP</code>版本、状态</li><li><strong>响应头（首部行）</strong>：发送日期，服务器相关信息等</li><li><strong>空行</strong>：</li><li><strong>响应正文</strong>：响应的数据正文</li></ul><p><img src="https://s1.ax1x.com/2020/03/15/83xaOe.png" alt="响应报文格式"></p><pre class=" language-kotlin"><code class="language-kotlin">HTTP<span class="token operator">/</span><span class="token number">1.1</span>  <span class="token number">200</span>  OKConnection<span class="token operator">:</span> closeDate<span class="token operator">:</span> Tue<span class="token punctuation">,</span> <span class="token number">09</span> Aug <span class="token number">2011</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">04</span> GMTServer<span class="token operator">:</span> Apache<span class="token operator">/</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token function">3</span> <span class="token punctuation">(</span>CentOS<span class="token punctuation">)</span>Last<span class="token operator">-</span>Modified<span class="token operator">:</span> Tue<span class="token punctuation">,</span> <span class="token number">09</span> Aug <span class="token number">2011</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">03</span> GMTContent<span class="token operator">-</span>Length<span class="token operator">:</span> <span class="token number">6821</span>Content<span class="token operator">-</span>Type<span class="token operator">:</span> text<span class="token operator">/</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token keyword">data</span> <span class="token keyword">data</span> <span class="token keyword">data</span> <span class="token keyword">data</span> <span class="token keyword">data</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>常见状态码：</strong></p><ul><li><p><code>200</code>:请求成功</p></li><li><p><code>301</code>：请求的对象被转移了，重定向的 <code>URL</code>在响应报文中</p></li><li><p><code>400</code>：非法请求，丢弃</p></li><li><p><code>404</code>：<code>Not Found</code>，被请求的文档不在服务器上</p></li><li><p><code>505</code>：服务器不支持请求报文使用的 <code>http</code> 版本</p></li></ul></blockquote><p>3.<code>HTTP1.0</code> 、<code>HTTP1.1</code>、<code>HTTP2.0</code> 之间的比较：</p><p>a.<code>HTTP/1.0</code>：</p><ul><li>支持：<code>GET</code>、<code>POST</code>、<code>HEAD</code>三种请求方法</li><li>无状态</li><li>非持续连接</li><li>串行发送：前一个请求的响应到达，后一个请求才可以发送</li></ul><p>b. <code>HTTP/1.1</code>:</p><blockquote><p>当前正在广泛使用的版本</p></blockquote><ul><li>新增了：<code>OPTIONS</code>、<code>PUT</code>、<code>DELETE</code>、<code>TRACE</code>、<code>CONNECT</code>五种<code>HTTP</code>请求方法</li><li>持续性连接（持久连接）</li><li>请求管道化（由于<code>TCP</code>长连接的存在，所以可以管道化）</li><li>增加缓存处理</li><li>支持断点传输、增加<code>Host</code>字段</li></ul><blockquote><p>最重要的是 <strong>长连接</strong></p></blockquote><p>c.<code>HTTP/2.0</code>：</p><ul><li>二进制分帧</li><li>多路复用（并行传输）</li><li>头部压缩</li><li>服务器推送</li></ul><blockquote><p>重点是可以并行传输</p></blockquote><p>Q4:用户和服务器的交互：<code>cookie</code></p><p>之前说过，<code>HTTP</code> 是无状态协议。但是 <code>Web</code> 站点为了 <strong>识别用户身份</strong> ，使用了 <code>Cookie</code> 技术。<br><code>Cookie</code> 技术包含 4 个组件：</p><ul><li><code>HTTP</code> 请求报文里增加一个关于 <code>Cookie</code> 的首部行</li><li><code>HTTP</code> 响应报文里增加一个关于 <code>Cookie</code> 的首部行</li><li>客户端系统 保留一个 <code>Cookie</code> 文件，由浏览器保存维护</li><li><code>Web</code> 站点建立 <code>Cookie</code> 和 用户身份的关联</li></ul><blockquote><p>很好理解，自然是请求报文和相应报文都携带 <code>Cookie</code>，客户端和服务器端都存有 <code>Cookie</code> 文件。即 <strong>本地保存，访问携带</strong></p></blockquote><p><strong><code>Cookie</code> 和 <code>Session</code> 的区别</strong>  </p><ul><li>简单来说，二者都是为了 <code>Web</code> 站点 <strong>识别用户身份</strong></li><li><code>Session</code> 译为 会话，就是保存每一次客户端和服务器端会话中的 用户信息和用户操作，是<strong>有时间限制</strong>的。 </li><li><code>Session</code> 会在<strong>服务器端</strong>有一个 类似 <code>HashTable</code> 的数据来存放用户数据，浏览器第一次请求，生成一个 <code>HashTable</code> 和对应的<code>SessionID</code> （用于标识这个 <code>HashTable</code>）。这个 <code>SessionID</code> 一般在 30 分钟后会自动销毁</li></ul><p>区别：</p><ul><li><code>Cookie</code> 在<strong>客户端</strong>和<strong>服务端</strong>，会被篡改，不安全。<code>Session</code> 只在<strong>服务器端</strong></li><li><code>Cookie</code> 只能存 <code>String</code> 类型对象，且容量小。 <code>Session</code> 可以存 <code>java</code> 对象，容量大</li></ul><p>Q5:<code>Web</code> 缓存器（代理服务器）</p><p>1.使用 <code>Web</code> 缓存器的 2 个主要原因：</p><ul><li><strong>降低延迟：</strong>缓存离客户端更近，因此，从缓存请求内容比从源服务器所用时间更少，呈现速度更快，网站就显得更灵敏</li><li><strong>降低网络传输：</strong>副本被重复使用，大大<strong>降低了用户的带宽使用</strong>，其实也是一种变相的省钱（如果流量要付费的话），同时保证了带宽请求在一个低水平上，更容易维护了</li></ul><p>2.工作过程</p><p><img src="https://s1.ax1x.com/2020/03/15/88eBJU.jpg" alt="Web 缓存器有缓存"></p><p><img src="https://s1.ax1x.com/2020/03/15/88eqeI.jpg" alt="Web 缓存器无缓存"></p><p>Q6:条件 <code>get</code> 方法</p><ul><li><p>上述实现方式还有一个问题就是<strong>无法保证</strong>本地存储器内的<strong>内容是最新</strong>的，所以需要采用一种方式（<strong>条件性 <code>GET</code> 方法</strong>）来保证数据是最新版本。</p></li><li><p>基本思想：是本地代理服务器向 <code>URL</code> 目标服务器发送一个 <code>GET</code> 请求消息，这个消息里面包括了本地存储资源的更新时间，在 <code>URL</code> 目标服务器中，会用这个时间与最新版本的时间进行比对，<strong>如果时间一致就返回 <code>304 Not Modified</code> , 否则就返回 <code>200 OK</code> 和最新版本的资源。</strong>代理服务器接收到返回信息后会判断这个返回码，如果是 <code>304</code>，就直接返回给客户给本地代理服务器存储的资源；如果是 <code>200</code> 就把新接收到的资源返回给用户，同时更新代理服务器存储的内容。</p></li></ul><h2 id="三、文件传输协议-FTP"><a href="#三、文件传输协议-FTP" class="headerlink" title="三、文件传输协议 FTP"></a><strong>三、文件传输协议 <code>FTP</code></strong></h2><ul><li><code>FTP</code> 的特点：同 <code>HTTP</code> 一样，也是运行在 <code>TCP</code> 上的协议，但它采用了两个<strong>并行</strong>的 <code>TCP</code> 连接来传输文件:</li></ul><blockquote><ul><li>一个用于<strong>控制连接</strong></li><li>一个用于<strong>数据连接</strong></li></ul></blockquote><ul><li>所以我们称其为带外（<code>out-of-band</code>）传输。另外，控制链接和持续整个过程，而每传输一个新文件，都需要新开一条数据连接</li></ul><h2 id="四、因特网中的电子邮件-SMTP"><a href="#四、因特网中的电子邮件-SMTP" class="headerlink" title="*四、因特网中的电子邮件 *SMTP"></a>*<em>四、因特网中的电子邮件 *</em><code>SMTP</code></h2><p>电子邮件的组成部分：</p><ul><li>用户代理</li><li>邮件服务器</li><li>简单邮件传输协议<code>SMTP</code></li></ul><p><img src="https://s1.ax1x.com/2020/03/15/88mSSg.jpg" alt></p><ul><li><p><strong>用户代理</strong>允许用户阅读、回复、转发、保存和撰写报文</p></li><li><p><strong>邮件服务器</strong>组成了电子邮件体系结构的核心</p></li></ul><blockquote><ul><li><p>每个接收方在其中的某个服务器上有一个<strong>邮箱</strong></p></li><li><p><strong>邮箱</strong>包含用户的<strong>到达报文</strong>、离开 (<strong>将发送</strong>) 邮件报文的<strong>报文队列</strong></p></li><li><p>在发送电子邮件报文的<strong>邮件服务器之间</strong>采用 <code>SMTP</code> 协议</p></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/18/000251-683746.png" alt="邮件服务器结构"></p><p><code>SMTP</code> 是因特网电子邮件中主要的应用层协议。它使用 <code>TCP</code> 可靠数据传输服务，从发送方的邮件服务器向接收方的邮件服务器发送邮件。</p><p>1、<code>SMTP</code></p><ul><li>使用 <code>TCP</code> 从客户机到服务器可靠地传输电子邮件报文，用<strong>端口 <code>25</code></strong></li></ul><ul><li><p><strong>直接传输</strong>：发送服务器到接收服务器</p></li><li><p>传输的三个阶段：握手 (欢迎)、报文的传输、关闭</p></li></ul><ul><li><strong>报文必须以 7 比特 <code>ASCII</code> 格式</strong></li></ul><p>为了描述 <code>SMTP</code> 的基本操作，下面来模拟一下 <code>Alice</code> 给 <code>Bob</code> 发送一封简单的 <code>ASCII</code> 报文的过程：</p><p><img src="https://s1.ax1x.com/2020/03/15/88mkT0.jpg" alt></p><p>1) <code>Alice</code> 使用用户代理写作报文并向 <a href="mailto:bob@someschool.edu" target="_blank" rel="noopener">bob@someschool.edu</a> 发送</p><p>2) <code>Alice</code> 的 <strong>用户代理</strong> 向其<strong>邮件服务器</strong>发送报文；报文放置在<strong>报文队列</strong>中</p><p>3) <code>SMTP</code> 的客户机侧打开与 <code>Bob</code> 的邮件服务器的 <code>TCP</code> 连接</p><p>4) <code>SMTP</code> 通过 <code>TCP</code> 连接发送 <code>Alice</code> 的报文</p><p>5) <code>Bob</code> 的邮件服务器将该报文放入 <code>Bob</code> 的邮箱</p><p>6) <code>Bob</code> 调用其用户代理(通过<code>POP</code>/<code>POP3</code>)来读报文</p><p>2、<strong><code>SMTP</code> 与 <code>HTTP</code> 的对比</strong></p><table><thead><tr><th></th><th><code>HTTP</code></th><th><code>SMTP</code></th></tr></thead><tbody><tr><td>方向</td><td>拉协议</td><td>推协议</td></tr><tr><td>传输格式要求</td><td>无此要求</td><td>要求全部 <code>7</code> 位 <code>ASCII</code> 码格式传输</td></tr><tr><td>报文放置</td><td><strong>每个对象</strong>封装在<strong>自己的响应</strong>报文</td><td>所有报文对象放在<strong>一个报文</strong>中</td></tr></tbody></table><p>3、<strong>邮件访问协议</strong></p><ul><li>注意到 <code>Bob</code> 的用户代理不能使用 <code>SMTP</code> 来取回邮件，因为<strong>取邮件是一个拉操作</strong>，而 <code>SMTP</code> 是一个<strong>推协议</strong>。因此我们要引入邮件访问协议：</li></ul><p><code>POP</code></p><blockquote><ul><li><code>POP</code> 协议支持 “离线” 邮件存储转发处理：客户端程序连接服务器，下载所有未阅读的电子邮件</li><li>一旦将邮件从邮件服务器端送到客户端上，邮件服务器上的邮件将会被删除</li></ul></blockquote><p><code>POP3</code></p><blockquote><ul><li><code>POP3</code> 协议允许电子邮件客户端下载服务器上的邮件</li><li>但是在客户端的操作（如移动邮件、标记已读等），<strong>不会反馈到服务器上</strong>，比如通过客户端收取了邮箱中的 3 封邮件并移动到其他文件夹，邮箱服务器上的这些邮件是没有同时被移动的 </li></ul></blockquote><p><code>IMAP</code>的介绍，以及和 <code>POP3</code> 的区别</p><ul><li><p><code>IMAP</code> 像 <code>POP3</code> 那样提供了方便的邮件下载服务，让用户能进行离线阅读</p></li><li><p><code>IMAP</code> 和 <code>POP3</code> 是邮件访问最为普遍的 <code>Internet</code> 标准协议。不同的是：</p></li></ul><ul><li><strong><code>IMAP</code> 提供 <code>Webmail</code> 与电子邮件客户端之间的双向通信</strong>，客户端收取的邮件仍然保留在服务器上，同时<strong>在客户端上的操作都会反馈到服务器上</strong>（如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。所以无论从浏览器登录邮箱或者客户端软件登录邮箱，看到的邮件以及状态都是一致的）。而 <strong><code>POP3</code> 在客户端的操作不会反馈到服务器上。</strong></li><li><strong><code>IMAP</code> 更好地支持了从多个不同设备中随时访问新邮件</strong></li><li><strong><code>IMAP</code> 提供的摘要浏览功能</strong>：可以让你在阅读完所有的邮件到达时间、主题、发件人、大小等信息后才作出是否下载的决定。</li><li><code>POP3</code> 需要下载未阅读的邮件，<code>IMAP</code> 可以不用把所有的邮件全部下载，而是通过客户端直接对服务器上的邮件进行操作。所有<strong>通过 <code>IMAP</code> 传输的数据都会被加密，从而保证通信的安全性。</strong></li><li><strong><code>IMAP</code> 整体上为用户带来更为便捷和可靠的体验。<code>POP3</code> 更易丢失邮件或多次下载相同的邮件。</strong></li></ul><h2 id="五、DNS：因特网的目录服务"><a href="#五、DNS：因特网的目录服务" class="headerlink" title="五、DNS：因特网的目录服务"></a><strong>五、<code>DNS</code>：因特网的目录服务</strong></h2><ul><li><p><code>DNS</code> 提供的服务主要为<strong>主机名到 <code>IP</code> 地址的转换</strong></p></li><li><p><code>DNS</code> 采用的是 <code>UDP</code>  </p></li></ul><p><strong>Q1：<code>DNS</code> 提供的其他服务：</strong></p><ul><li><p><strong>主机别名</strong></p><blockquote><p>有着复杂主机名的主机可以拥有一个或多个别名。原复杂主机名也叫规范主机名。主机别名（如果有的话）比主机规范名更容易记忆。应用程序可以调用 <code>DNS</code> 来获得主机别名对应的规范主机名以及主机的 <code>IP</code> 地址</p></blockquote></li><li><p><strong>邮件服务器别名</strong></p><blockquote><p>同主机别名类似，电子邮件应用程序调用 <code>DNS</code>，对提供的邮件服务器别名进行解析，以获得该主机的规范主机名以及其 <code>IP</code> 地址。<strong><code>MX</code>（<code>Mail Exchanger</code>，邮件交换）记录允许一个公司的邮件服务器和 <code>Web</code> 服务器用相同的（别名化的）主机名</strong></p></blockquote></li></ul><ul><li><strong>负载分配</strong></li></ul><blockquote><p><code>DNS</code> 也用于在冗余的服务器（如冗余的 <code>Web</code> 服务器等）之间进行负载分配。对于这些冗余的 <code>Web</code> 服务器，一个 <code>IP</code> 地址集合对应于同一个规范主机名。<code>DNS</code> 数据库中存储着这些 <code>IP</code> 地址集合。当客户机为映射到这个 <code>IP</code> 地址集合的名字发出一个 <code>DNS</code> 请求时，该服务器用包含全部这些地址的报文回答，但在每个回答中旋转这些地址排放顺序。因为客户机通常总是向 <code>IP</code> 地址排在最前面的服务器发送 <code>HTTP</code> 请求报文，所以 <strong><code>DNS</code> 就在所有这些冗余的 <code>Web</code> 服务器之间旋转分配负载。<code>DNS</code> 旋转同样适用于邮件服务器，因此，多个邮件服务器可以具有相同的别名。</strong></p></blockquote><p><strong>2、<code>DNS</code> 的工作原理</strong></p><p><code>DNS</code> 采用<strong>分布式</strong>的设计方案</p><p>下面是 <code>DNS</code> 服务器的部分层次结构（由上到下，每层分别是<strong>根</strong>服务器、<strong>顶级域</strong><code>TLD</code> 服务器、<strong>权威</strong>服务器）</p><p><img src="https://s1.ax1x.com/2020/03/15/88mtpD.jpg" alt></p><p>1）分布式、层次数据库</p><p>大致来说，有 3 种类型的 <code>DNS</code> 服务器：<strong>根 <code>DNS</code> 服务器</strong>、<strong>顶级域（<code>Top9 Level Domain，TLD</code>）<code>DNS</code> 服务器</strong>和<strong>权威 DNS 服务器</strong>。</p><p>下面来详细介绍一下这三种类型的 <code>DNS</code> 服务器：</p><ul><li><strong>根 <code>DNS</code> 服务器</strong></li></ul><p><img src="https://s1.ax1x.com/2020/03/15/88mrAP.jpg" alt></p><ul><li><strong>顶级域<code>TLD</code>服务器</strong></li></ul><blockquote><p>负责 <code>com</code>, <code>org</code>, <code>net</code>, <code>edu</code> 等，以及所有顶级国家域 <code>uk</code>, <code>fr</code>, <code>ca</code>, <code>jp</code>,<code>cn</code></p></blockquote><ul><li><strong>权威 <code>DNS</code>服务器</strong></li></ul><blockquote><p>组织的 <code>DNS</code> 服务器为组织的服务器 (如 <code>Web</code> 和电子邮件) 提供对<code>IP</code>映射的权威主机名。 能够由组织或服务提供商维护。</p></blockquote><ul><li><strong>本地 <code>DNS</code> 服务器</strong></li></ul><blockquote><p>本地 <code>DNS</code> 服务器严格来说并不属于 <code>DNS</code> 服务器的层次结构，但它对 <code>DNS</code> 层次结构是很重要的。</p></blockquote><p><img src="https://s1.ax1x.com/2020/03/15/88mfns.jpg" alt="迭代查询"></p><p><img src="https://s1.ax1x.com/2020/03/15/88moNV.jpg" alt="图 2、递归查询"></p><p>在图 1 的例子中用到了<strong>递归查询</strong>和<strong>迭代查询</strong></p><p>从理论上，所有的 <code>DNS</code> 查询既可以是迭代的也可以是递归的。例如，图 2 显示了一条 <code>DNS</code> 查询链，其中所有查询都是递归的</p><p>实际中，查询通常遵循图 1 中的模式：<strong>从请求主机到本地 <code>DNS</code> 服务器的查询是递归的，其余查询是迭代的</strong></p><p>2）<code>DNS</code> 缓存</p><ul><li>为了改善时延性能并减少在因特网上到处传输的 <code>DNS</code> 报文数量，<code>DNS</code> 广泛使用缓存技术</li></ul><ul><li>原理：当一个 <code>DNS</code> 服务器接收一个 <code>DNS</code> 回答（例如，包含主机名到 <code>IP</code> 地址的映射）时，<code>DNS</code> 服务器能将回答中的信息缓存在本地存储器。由于主机与主机名的 <code>IP</code> 地址映射决不是永久的，所以 <code>DNS</code> 服务器在一段时间后（通常设置为两天）将丢弃缓存的信息</li></ul><p>3）域名解析过程</p><p><img src="https://s1.ax1x.com/2020/03/15/88np4K.jpg" alt></p><h2 id="六、P2P-应用"><a href="#六、P2P-应用" class="headerlink" title="六、P2P 应用"></a><strong>六、<code>P2P</code> 应用</strong></h2><p><strong>问题 : 从一个服务器向 N 个节点分发一个文件需要多长时间?</strong></p><p>(1)客户机 / 服务器：服务器串行地发送 N 个副本</p><ul><li>时间： <code>NF/us</code></li><li>客户机 i 需要 F/di 时间下载</li></ul><p>（2）<code>P2P</code>：服务器必须发送一个副本</p><ul><li>时间： <code>F/us</code></li><li>客户机 i 需要 <code>F/di</code> 时间下载</li><li>总共需要下载 <code>NF</code> 比特</li><li>最快的可能上传速率： <code>us + ∑ui</code></li></ul><p><img src="https://s1.ax1x.com/2020/03/16/88qlAx.jpg" alt="P2P需要的时间"></p><p><img src="https://s1.ax1x.com/2020/03/15/88neEt.jpg" alt="C/S需要的时间"></p><p><img src="https://s1.ax1x.com/2020/03/15/88uMIx.jpg" alt="C/S 模式和 P2P 模式对比"></p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《计算机网络-自顶向下方法》</li><li><a href="https://zhuanlan.zhihu.com/p/35987293" target="_blank" rel="noopener">应用层 |《计算机网络：自顶向下方法》</a></li><li><a href="https://www.jianshu.com/p/b8a6901d6999" target="_blank" rel="noopener">《计算机网络-自顶向下方法》第二章-应用层 要点</a></li><li><a href="https://www.jianshu.com/p/63811682efb6" target="_blank" rel="noopener">《计算机网络-自顶向下方法》重点笔记</a>ke</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自顶向下 </tag>
            
            <tag> 应用层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自顶向下 | 计网和英特网</title>
      <link href="/2020/03/13/zi-ding-xiang-xia-ji-wang-he-ying-te-wang/"/>
      <url>/2020/03/13/zi-ding-xiang-xia-ji-wang-he-ying-te-wang/</url>
      
        <content type="html"><![CDATA[<h1 id="自顶向下-计网和英特网"><a href="#自顶向下-计网和英特网" class="headerlink" title="自顶向下 | 计网和英特网"></a>自顶向下 | 计网和英特网</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的<code>Github</code>个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习导图："><a href="#学习导图：" class="headerlink" title="学习导图："></a>学习导图：</h2><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202004/14/184444-124279.png" alt="学习导图"></p><h2 id="一、什么是因特网"><a href="#一、什么是因特网" class="headerlink" title="一、什么是因特网"></a>一、什么是因特网</h2><p><img src="https://s1.ax1x.com/2020/03/13/8Ko7rD.jpg" alt="因特网是什么"></p><p>Q1：<strong>因特网由什么组成？</strong></p><ul><li>主机 / 端系统</li><li>通信链路</li><li>分组交换机</li><li>因特网服务提供商等</li></ul><p>Q2：<strong>因特网提供什么服务？</strong></p><ul><li><p>因特网是为应用程序提供网络服务的基础设施</p></li><li><p>为网络应用提供应用程序接口</p></li><li><p>除了硬件，因特网的组成还需要协议。<strong>协议是通信计算机双方必须共同遵从的一组约定。如怎么样建立连接、怎么样互相识别等。只有遵守这个约定，计算机之间才能相互通信交流。它的三要素是：语法、语义、时序</strong></p></li></ul><h2 id="二、网络边缘"><a href="#二、网络边缘" class="headerlink" title="二、网络边缘"></a><strong>二、网络边缘</strong></h2><p>Q1：<strong>网络边缘的端系统是如何接入互联网的？</strong></p><ul><li><p>数字用户电路（<code>DSL</code>，利用电话线，使用频分复用技术）</p></li><li><p>电缆因特网接入，又称混合光纤同轴（利用有线电视线路，一个重要特点是共享广播媒体）</p></li><li><p>光纤到户：包括主动光纤网络（<code>AON</code>）和被动光纤网络（<code>PON</code>）</p></li><li><p>以太网和 <code>WI-FI</code></p></li><li><p><code>3G</code> 和 <code>LTE</code></p></li></ul><p>Q2：<strong>接入互联网需要的物理媒体</strong></p><ul><li><p>双绞铜线</p></li><li><p>同轴电缆</p></li><li><p>光纤</p></li><li><p>陆地无线电信道</p></li><li><p>卫星无线电信道</p></li></ul><h2 id="三、网络核心"><a href="#三、网络核心" class="headerlink" title="三、网络核心"></a><strong>三、网络核心</strong></h2><p>Q1：分组交换以及相关概念</p><ul><li>分组交换：通信双方以分组为单位、使用存储 - 转发机制实现数据交互的通信方式，被称为分组交换</li></ul><ul><li>存储 - 转发机制：指交换机在能够开始向输出链路传输分组的第一个比特之前，必须接受到整个分组</li></ul><ul><li><p>排队时延：</p><p>在队列中，当分组在链路上等待传输时，它经受排队时延。一个特定分组的排队时延将取决于先期到达的、正在排队等待向链路传输的分组的数量。如果该队列是空的，并且当前没有其他分组在传输，则该分组的排队时延为 0。另一方面，如果流量很大，并且许多其他分组也在等待传输，该排队时延将很大。到达组的分组数量是到达该队列的流量强度和性质的函数。实际的排队时延通常在毫秒到微秒级</p></li><li><p>分组丢失：当队列缓存满了时，到达的分组会被丢弃</p></li></ul><ul><li>转发表：路由器用于将目的地址映射成为输出链路</li></ul><ul><li>路由选择协议：为路由器提供他们建立通过网状网络最佳路径所需要的相互共享的路由信息</li></ul><p>Q2：电路交换</p><ul><li>电路交换：本过程可分为连接建立、信息传送和连接拆除三个阶段。特点是独占资源。</li></ul><ul><li>电路交换的复用方式有：频分复用，时分复用。</li></ul><ul><li>其他的复用方式还有：波分复用（光的频分复用），码分复用</li></ul><h2 id="四、分组交换中的网络时延、丢包和吞吐量"><a href="#四、分组交换中的网络时延、丢包和吞吐量" class="headerlink" title="四、分组交换中的网络时延、丢包和吞吐量"></a><strong>四、分组交换中的网络时延、丢包和吞吐量</strong></h2><p>Q1：<strong>各种网络时延</strong></p><ul><li><p><strong>节点处理时延：</strong><br>检查<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%2588%2586%25E7%25BB%2584" target="_blank" rel="noopener">分组</a>首部和决定将该<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%2588%2586%25E7%25BB%2584" target="_blank" rel="noopener">分组</a>导向何处所需要的时间是节点处理时延的一部分。处理时延也包括其他因素，如检查比特级差错所需要的时间，该差错出现在这些<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%2588%2586%25E7%25BB%2584" target="_blank" rel="noopener">分组</a>比特从上游节点向<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E8%25B7%25AF%25E7%2594%25B1%25E5%2599%25A8" target="_blank" rel="noopener">路由器</a> A 传输的过程中。高速路由器的处理时延通常是微秒或更低的数量级。在这种节点处理之后，路由器将该分组引向通往路由器 B 链路之前的队列。</p></li><li><p><strong>排队时延：</strong><br>在队列中，当分组在链路上等待传输时，它经受排队时延。一个特定分组的排队时延将取决于先期到达的、正在排队等待向链路传输的分组的数量。如果该队列是空的，并且当前没有其他分组在传输，则该分组的排队时延为 0。另一方面，如果流量很大，并且许多其他分组也在等待传输，该排队时延将很大。到达组的分组数量是到达该队列的流量强度和性质的函数。实际的排队时延通常在毫秒到微秒级。  </p></li><li><p><strong>传输时延：</strong><br>假定分组以先到先服务的方式传输——这在分组交换网络中是常见的方式，仅当所有已经到达的分组被传输后，才能传输我们的分组。用 <code>L</code> 比特表示<strong>分组的长度</strong>，用 <code>R bps</code> 表示从路由器 <code>A</code> 到路由器 <code>B</code> 的链路传输速率。传输时延是 <code>L/R</code>。这是将所有分组比特推向链路所需要的时间。实际的传输时延通常在毫秒到微秒级</p></li></ul><blockquote><p>为了避免和传播时延混淆，我们也将传输时延叫做“<strong>发送时延</strong>”</p></blockquote><ul><li><p><strong>传播时延：</strong><br>一旦一个比特被推向链路，该比特需要向路由器 B 传播，从该链路的起点到路由器 B 的传播所需要的时间是传播时延。该比特以该链路的传播速率传播，该传播速率取决于该链路的物理媒介，其速率范围是 2∗108−3∗108m/s，这等于或略小于光速。传播时延等于两台路由器之间的距离除以传播速率，即传播时延是 d/s，其中 d 是两台路由器之间的距离，s 是该链路的传播速率。传播时延在毫秒级</p></li><li><p>传输时延和传播时延的比较：传播时延是车在高速公路上的行驶速度，传输时延是收费站的处理速度</p></li></ul><ul><li>流量强度：<code>La/R</code> = 分组大小 * 分组到达速率 / 传输速率 &lt; 1，否则传输时延将会接近无穷大</li></ul><ul><li>丢包：即分组丢失</li></ul><ul><li>端到端时延：源主机和目的地主机之间假设有 N-1 个路由器，那么端到端时延 = N * 以上四种时延之和，由于一般网络是不拥塞的，排队时延常可忽略</li></ul><ul><li>瞬时和平均吞吐量：文件大小 / 传送时间</li></ul><ul><li>瓶颈链路：路由器接收速率为 <code>Rc</code>，发送速率为 <code>Rs</code>，瓶颈链路为 <code>min(Rc,Rs)</code></li></ul><h2 id="五、协议层次及其服务模型"><a href="#五、协议层次及其服务模型" class="headerlink" title="五、协议层次及其服务模型"></a><strong>五、协议层次及其服务模型</strong></h2><p><strong>五层因特网协议栈：</strong></p><ul><li><a href="http://xcynice.xyz/2020/03/15/zi-ding-xiang-xia-dai-ni-ao-you-ying-yong-ceng/" target="_blank" rel="noopener">应用层</a></li></ul><blockquote><ul><li>解读传输层的数据</li><li>主要协议有<code>HTTP</code>、<code>FTP</code>、<code>Telnet</code>、<code>SMTP</code>、<code>POP3</code>等</li></ul></blockquote><ul><li><a href="https://juejin.im/post/5e742c4b51882549746817a2" target="_blank" rel="noopener">传输层</a></li></ul><blockquote><ul><li>为运行在<strong>不同主机</strong>上的应用程序（<strong>进程</strong>）提供逻辑通信</li><li>有两个传输协议：<code>TCP</code>（传输控制协议）和<code>UDP</code>（用户数据报协议）</li></ul></blockquote><ul><li><a href="http://xcynice.xyz/2020/03/19/zi-ding-xiang-xia-dai-ni-ao-you-wang-luo-ceng/" target="_blank" rel="noopener">网络层</a></li></ul><blockquote><ul><li>是建立<strong>主机到主机</strong>的通信，决定如何将数据从发送方路由到接收方</li></ul></blockquote><ul><li><a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%2593%25BE%25E8%25B7%25AF%25E5%25B1%2582/10624635" target="_blank" rel="noopener">链路层</a></li></ul><blockquote><ul><li>主要功能是如何在不可靠的物理线路上进行数据的可靠传递。将网络层的数据分割为<strong>帧</strong>供物理层传输</li><li>帧是用来<strong>移动数据的结构包</strong>，它不仅包括<strong>原始数据</strong>，还包括发送方和接收方的<strong>物理地址</strong>以及<strong>纠错和控制</strong>信息</li></ul></blockquote><ul><li><a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%2589%25A9%25E7%2590%2586%25E5%25B1%2582/4329158" target="_blank" rel="noopener">物理层</a></li></ul><blockquote><ul><li>把计算机连接起来的物理手段</li></ul></blockquote><p><img src="https://i.bmp.ovh/imgs/2019/11/f8dd96e3e95a60c7.png" alt="五层因特网协议栈"></p><p><code>OSI</code>7层模型：</p><ul><li><p><a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%2589%25A9%25E7%2590%2586%25E5%25B1%2582" target="_blank" rel="noopener">物理层</a>: 将数据转换为可通过物理介质传送的<a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%2594%25B5%25E5%25AD%2590%25E4%25BF%25A1%25E5%258F%25B7" target="_blank" rel="noopener">电子信号</a> 相当于邮局中的搬运工人</p></li><li><p><a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%2595%25B0%25E6%258D%25AE%25E9%2593%25BE%25E8%25B7%25AF%25E5%25B1%2582" target="_blank" rel="noopener">数据链路层</a>: 决定访问网络介质的方式在此层将数据分帧，并处理流控制。本层 指定<a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%258B%2593%25E6%2589%2591%25E7%25BB%2593%25E6%259E%2584" target="_blank" rel="noopener">拓扑结构</a>并提供硬件寻 址。相当于邮局中的装拆箱工人</p></li><li><p><a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%25BD%2591%25E7%25BB%259C%25E5%25B1%2582/4329439" target="_blank" rel="noopener">网络层</a>: 使用权数据路由经过大型网络 相当于邮局中的排序工人</p></li><li><p><a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E4%25BC%25A0%25E8%25BE%2593%25E5%25B1%2582" target="_blank" rel="noopener">传输层</a>: 提供终端到终端的可靠连接 相当于公司中跑邮局的送信职员</p></li><li><p><a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E4%25BC%259A%25E8%25AF%259D%25E5%25B1%2582" target="_blank" rel="noopener">会话层</a>: 允许用户使用简单易记的名称建立连接 相当于公司中收寄信、写信封与拆信封的秘书</p></li><li><p><a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E8%25A1%25A8%25E7%25A4%25BA%25E5%25B1%2582" target="_blank" rel="noopener">表示层</a>: 协商数据交换格式 相当公司中简报老板、替老板写信的助理</p></li><li><p><a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25BA%2594%25E7%2594%25A8%25E5%25B1%2582/4329788" target="_blank" rel="noopener">应用层</a>: 用户的应用程序和网络之间的接口老板</p></li></ul><h2 id="六、面对攻击的网络"><a href="#六、面对攻击的网络" class="headerlink" title="六、面对攻击的网络"></a><strong>六、面对攻击的网络</strong></h2><ul><li>僵尸网络：受害主机构成集合</li></ul><ul><li>病毒：需要某种形式的用户交互来感染用户设备的恶意软件。</li></ul><ul><li>蠕虫：无需某种形式的用户交互来感染用户设备的恶意软件。</li></ul><ul><li>拒绝服务攻击（<code>DoS</code>）：使目标电脑的<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E7%25B6%25B2%25E9%259A%259B%25E7%25B6%25B2%25E8%25B7%25AF" target="_blank" rel="noopener">网络</a>或<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E7%25B3%25BB%25E7%25B5%25B1" target="_blank" rel="noopener">系统</a>资源耗尽，使网络、主机或其他基础设施部分不能由合法用户使用</li></ul><ul><li>分布式 <code>DoS</code>（<code>DDoS</code>）：控制<strong>多源</strong>向目标猛烈发送流量。</li></ul><ul><li>分组嗅探器： 监视网络数据流以识别和分析感兴趣的分组的功能单元，用于网络分析</li></ul><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《Android 进阶之光》</li><li>《计算机网络-自顶向下方法》</li><li><a href="https://zhuanlan.zhihu.com/p/35984900" target="_blank" rel="noopener">第一章：计算机和因特网</a>ke</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自顶向下 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路 | 奇妙的Thread之旅</title>
      <link href="/2020/03/09/jin-jie-zhi-lu-qi-miao-de-thread-zhi-lu/"/>
      <url>/2020/03/09/jin-jie-zhi-lu-qi-miao-de-thread-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="进阶之路-奇妙的Thread之旅"><a href="#进阶之路-奇妙的Thread之旅" class="headerlink" title="进阶之路 | 奇妙的Thread之旅"></a>进阶之路 | 奇妙的Thread之旅</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="需要已经具备的知识："><a href="#需要已经具备的知识：" class="headerlink" title="需要已经具备的知识："></a>需要已经具备的知识：</h2><ul><li><code>Thread</code>的基本概念及使用</li><li><code>AsyncTask</code>的基本概念及使用</li></ul><h2 id="学习导图："><a href="#学习导图：" class="headerlink" title="学习导图："></a>学习导图：</h2><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/22/210648-769954.png" alt="学习导图"></p><h2 id="一-为什么要学习Thread"><a href="#一-为什么要学习Thread" class="headerlink" title="一.为什么要学习Thread?"></a>一.为什么要学习<code>Thread</code>?</h2><p>在<code>Android</code>中，几乎完全沿用了<code>Java</code>中的线程机制。线程是最小的调度单位，在很多情况下为了使<code>APP</code>更加流程地运行，我们不可能将很多事情都放在主线程上执行，这样会造成严重卡顿（<code>ANR</code>），那么这些事情应该交给子线程去做，但对于一个系统而言，创建、销毁、调度线程的过程是需要开销的，所以我们并不能无限量地开启线程，那么对线程的了解就变得尤为重要了。</p><p>因此，本篇文章将带领大家由浅入深，从<strong>线程的基础</strong>，谈到<strong>同步机制</strong>，再讲到<strong>阻塞队列</strong>，接着提及<strong><code>Android</code>中的线程形态</strong>，最终一览<strong>线程池机制</strong>。</p><p>话不多说，赶紧跟随笔者开始奇妙的<code>Thread</code>之旅吧！</p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-线程概述"><a href="#2-1-线程概述" class="headerlink" title="2.1 线程概述"></a>2.1 线程概述</h3><p>Q1：<strong>含义</strong></p><p>线程是<code>CPU</code>调度的最小单位</p><blockquote><p>注意与进程相区分</p></blockquote><p>Q2：<strong>特点</strong></p><p>线程是一种<strong>受限</strong>的系统资源。即线程不可无限制的产生且线程的创建和销毁都有一定的开销</p><blockquote><ul><li><strong>Q</strong>：如何避免频繁创建和销毁线程所带来的系统开销？</li><li><strong>A</strong>：采用<strong>线程池</strong>，池中会缓存一定数量的线程，进而达到效果（PS：下文将为您详细讲解）</li></ul></blockquote><p>Q3:<strong>分类</strong></p><ul><li>按用途分为两类：</li></ul><blockquote><ul><li><p><strong>主线程</strong>:一般一个进程只有一个主线程，主要处理<strong>界面交互</strong>相关的逻辑</p></li><li><p><strong>子线程</strong>：除主线程之外都是子线程，主要用于执行<strong>耗时操作</strong></p></li></ul></blockquote><ul><li>按形态可分为三类：</li></ul><blockquote><ul><li><code>AsyncTask</code>：底层封装了线程池和<code>Handler</code>，便于执行后台任务以及在主线程中进行<code>UI</code>操作</li><li><code>HandlerThread</code>：一种具有<strong>消息循环</strong>的线程，其内部可使用<code>Handler</code></li><li><code>IntentService</code>:一种<strong>异步、会自动停止</strong>的服务，内部采用<code>HandlerThread</code>和<code>Handler</code></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/09/191501-976047.png" alt="关系图"></p><blockquote><p>想详细了解<code>Handler</code>机制的读者，推荐一篇笔者的文章：<a href="https://juejin.im/post/5e61bf2de51d4526ea7f00bd" target="_blank" rel="noopener">进阶之路 | 奇妙的Handler之旅</a></p></blockquote><p>Q4：<strong>如何安全地终止线程？</strong></p><blockquote><p>对于有多线程开发经验的开发者，应该大多数在开发过程中都遇到过这样的需求，就是在某种情况下，希望立即停止一个线程</p><p>比如：做<code>Android</code>开发，当打开一个界面时，需要开启线程请求网络获取界面的数据，但有时候由于网络特别慢，用户没有耐心等待数据获取完成就将界面关闭，此时就应该立即停止线程任务，不然一般会内存泄露，造成系统资源浪费，如果用户不断地打开又关闭界面，内存泄露会累积，最终导致内存溢出，<code>APP</code>闪退</p><p>所以，笔者希望能和大家探究下：如何安全地终止线程？</p></blockquote><p>A1：<strong>为啥不使用<code>stop</code>?</strong></p><blockquote><p><code>Java</code>官方早已将它废弃，不推荐使用</p></blockquote><ul><li><code>stop</code>是通过立即抛出<code>ThreadDeath</code>异常，来达到停止线程的目的，此异常抛出<strong>有可能发生在任何一时间点</strong>，包括在<code>catch</code>、<code>finally</code>等语句块中，但是此<strong>异常并不会引起程序退出</strong></li><li>异常抛出，导致线程会<strong>释放</strong>全部所持有的<strong>锁</strong>，极可能引起<strong>线程安全</strong>问题</li></ul><p>A2：<strong>提供单独的取消方法来终止线程</strong></p><p>示例<code>DEMO</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoonRunner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意的是这里的变量是用volatile修饰</span>    <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> on <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>on<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sTop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置一个取消的方法</span>    <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        on <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：这里的变量是用<code>volatile</code>修饰，以保证<strong>可见性</strong>，关于<code>volatile</code>的知识，笔者将在下文为您详细解析</p></blockquote><p>A3：<strong>采用<code>interrupt</code>来终止线程</strong></p><p><code>Thread</code>类定义了如下关于中断的方法：</p><p><img src="https://s2.ax1x.com/2020/03/08/3xQq4s.png" alt="中断的方法"></p><p>原理：</p><ul><li><p>调用<code>Thread</code>对象的<code>interrupt</code>函数并不是立即中断线程，只是将线程<strong>中断</strong>状态<strong>标志</strong>设置为<code>true</code></p></li><li><p>当线程运行中有调用其阻塞的函数时，阻塞函数调用之后，会不断地轮询检测中断状态标志是否为<code>true</code>，如果为<code>true</code>，则<strong>停止阻塞并抛出<code>InterruptedException</code>异常，同时还会重置中断状态标志</strong>，<strong>因此需要在<code>catch</code>代码块中需调用<code>interrupt</code>函数，</strong>使线程再次处于中断状态</p></li><li><p>如果中断状态标志为<code>false</code>，则继续阻塞，直到阻塞正常结束</p></li></ul><blockquote><p>具体的<code>interrupt</code>的使用方式可以参考这篇文章：<a href="https://www.jianshu.com/p/264d4e1b76af" target="_blank" rel="noopener">Java线程中断的正确姿势</a></p></blockquote><h3 id="2-2-同步机制"><a href="#2-2-同步机制" class="headerlink" title="2.2 同步机制"></a>2.2 同步机制</h3><h4 id="2-2-1-volatile"><a href="#2-2-1-volatile" class="headerlink" title="2.2.1 volatile"></a>2.2.1 <code>volatile</code></h4><blockquote><ul><li>有时候仅仅为了读写一个或者两个实例就使用同步<code>synchronized</code>的话，显得开销过大</li><li>而<code>volatile</code>为实例域的同步访问提供了免锁的机制</li></ul></blockquote><p>Q1：<strong>先从<code>Java</code>内存模型聊起</strong></p><ul><li><code>Java</code> 内存模型定义了<strong>本地内存和主存</strong>之间的抽象关系</li></ul><blockquote><ul><li>线程之间的<strong>共享变量</strong>存储在<strong>主存</strong>中</li><li>每个线程都有一个<strong>私有的本地内存</strong>（工作内存），本地内存中存储了该线程共享变量的<strong>副本</strong>。</li></ul></blockquote><p><img src="https://i.bmp.ovh/imgs/2019/11/9c5f1de764bb8c47.png" alt="内存关系"></p><ul><li>线程之间通信的步骤</li></ul><blockquote><ul><li>线程<strong>A</strong>将其<strong>本地内存</strong>中<strong>更新过的共享变量刷新到主存</strong>中去</li><li>线程<strong>B</strong>到<strong>主存</strong>中去<strong>读取</strong>线程A之前已<strong>更新过的共享变量</strong></li></ul></blockquote><p>Q2：<strong><code>原子性、可见性和有序性</code>了解多少</strong></p><p>a1：<strong>原子性<code>Atomicity</code></strong>：</p><ul><li>定义：原子性操作就是指这些操作是不可中断的，要做一定做完，要么就没有执行</li><li>对基本数据类型变量的<strong>读取和赋值</strong>操作是原子性操作</li></ul><blockquote><p>注意：这里的<strong>赋值</strong>操作是指<strong>将数字赋值给某个变量</strong></p></blockquote><p>下面由<code>DEMO</code>解释更加通俗易懂</p><pre class=" language-java"><code class="language-java">x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//原子性操作</span>y<span class="token operator">=</span>x<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//非原子性操作  原因：包括2个操作：先读取x的值，再将x的值写入工作内存</span>x<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//非原子性操作  原因：包括3个操作：读取x的值、对x的值进行加1、向工作内存写入新值</span></code></pre><ul><li><code>volatile</code>不支持原子性（想探究原因的，笔者推荐一篇文章：<a href="https://juejin.im/post/5a2b53b7f265da432a7b821c#heading-4" target="_blank" rel="noopener">面试官最爱的volatile关键字</a>）</li><li>保证整块代码原子性（例如<code>i++</code>）的方法：借助于<code>synchronized</code>和<code>Lock</code>，以及并发包下的<code>atomic</code>的原子操作类</li></ul><p>a2：<strong>可见性<code>Visibility</code></strong></p><ul><li><p>定义：一个线程修改的结果，另一个线程马上就能看到</p></li><li><p><code>Java</code>就是利用<code>volatile</code>来提供可见性的</p></li></ul><blockquote><p>原因：当一个变量被<code>volatile</code>修饰时，那么对它的修改会<strong>立刻刷新到主存</strong>，同时使<strong>其它线程的工作内存</strong>中对此变量的<strong>缓存行失效</strong>，因此需要读取该变量时，会去内存中读取新值</p></blockquote><ul><li>其实通过<code>synchronized</code>和<code>Lock</code>也能够保证可见性，但是<code>synchronized</code>和<code>Lock</code>的开销都更大</li></ul><p>a3：<strong>有序性<code>Ordering</code></strong></p><ul><li><strong>指令重排序</strong>的定义：大多数现代微处理器都会采用将指令乱序执行的方法, 在条件允许的情况下, 直接运行当前有能力立即执行的后续指令, 避开获取下一条指令所需数据时造成的等待</li><li>什么时候不进行<strong>指令重排序</strong>：</li></ul><blockquote><ul><li>符合数据依赖性：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//x对a有依赖</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">=</span> a<span class="token punctuation">;</span></code></pre><ul><li><code>as-if-serial</code>语义：不管怎么重排序, 单线程程序的执行结果不能被改变</li><li>程序顺序原则</li></ul><ol><li>如果A <code>happens-before</code> B</li><li>如果B <code>happens-before</code> C </li><li>那么A <code>happens-before</code> C</li></ol><p>这就是<code>happens-before</code>传递性</p></blockquote><ul><li><code>volatile</code>通过<strong>禁止指令重排序</strong>的方式来保证有序性</li></ul><p>Q3：<strong>应用场景有哪些？</strong></p><ul><li>状态量标记</li></ul><blockquote><p>线程的终止的时候的状态控制,示例<code>DEMO</code>如前文</p></blockquote><ul><li><code>DCL</code></li></ul><blockquote><p>避免指令重排序：</p><p>假定创建一个对象需要:</p><ol><li>申请内存</li><li>初始化</li><li><code>instance</code>指向分配的那块内存</li></ol><p>上面的2和3操作是有可能重排序的, 如果3重排序到2的前面, 这时候2操作还没有执行, <code>instance！=null</code>, 当然不是安全的</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Q4：原理：</p><ul><li>如果把加入<code>volatile</code>关键字的代码和未加入<code>volatile</code>关键字的代码都生成汇编代码，会发现加入<code>volatile</code>关键字的代码会多出一个<code>lock</code>前缀指令</li><li><code>lock</code>前缀指令实际相当于一个<strong>内存屏障</strong>，内存屏障提供了以下功能：</li></ul><blockquote><ul><li>重排序时不能把后面的指令重排序到内存屏障之前的位置</li><li>使得本<code>CPU</code>的<code>Cache</code>写入内存</li><li>写入动作也会引起别的<code>CPU</code>或者别的内核无效化其<code>Cache</code>，相当于让新写入的值对别的线程可见</li></ul></blockquote><h4 id="2-2-2-重入锁与条件对象"><a href="#2-2-2-重入锁与条件对象" class="headerlink" title="2.2.2 重入锁与条件对象"></a>2.2.2 重入锁与条件对象</h4><blockquote><p><code>synchronized</code> 关键字自动为我们提供了锁以及相关的条件，大多数需要显式锁的时候，使用<code>synchronized</code> 非常方便，但是当我们了解了重入锁和条件对象时，能更好地理解<code>synchronized</code> 和阻塞队列</p></blockquote><p>Q1：<strong>重入锁的定义</strong></p><ul><li>可重入锁指的是可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生<a href="https://www.sxt.cn/Java_jQuery_in_action/eleven-deadlock.html" target="_blank" rel="noopener">死锁</a>，这样的锁就叫做可重入锁</li><li><code>ReentrantLock</code>和<code>synchronized</code>都是可重入锁</li></ul><blockquote><p>重复调用锁的<code>DEMO</code>如下：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantTest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReentrantTest rt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Q2：什么是条件对象<code>Condition</code>？</p><ul><li>条件对象来管理那些已经<strong>获得了一个锁</strong>但是却<strong>不能做有用工作</strong>的线程，条件对象又被称作条件变量</li><li>一般要配合<code>ReentrantLock</code>使用，用<code>Condition.await()</code>可以<strong>阻塞当前线程</strong>，并<strong>放弃锁</strong></li></ul><p>Q3：下面说明重入锁与条件对象如何协同使用</p><blockquote><ul><li>用<strong>支付宝转账</strong>的例子(支付宝打钱，狗头.jpg)</li><li>场景是这样的：</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//转账的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//alipay是ReentrantLock的实例</span>    alipay<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当要转给别人的钱大于你所拥有的钱的时候，调用Condition的await可以阻塞当前线程，并放弃锁</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>accounts<span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">&lt;</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>            condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//一系列转账的操作</span>            <span class="token comment" spellcheck="true">//阻塞状态解除,进入可运行状态</span>        condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span><span class="token punctuation">{</span>        alipay<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>想要更深一步了解重入锁的读者，可以看下这篇文章：<a href="https://blog.csdn.net/rickiyeat/article/details/78314451" target="_blank" rel="noopener">究竟什么是可重入锁？</a></p></blockquote><h4 id="2-2-3-synchronized"><a href="#2-2-3-synchronized" class="headerlink" title="2.2.3 synchronized"></a>2.2.3 <code>synchronized</code></h4><p>Q1：<code>synchronized</code>有哪几种实现方式？</p><ul><li>同步代码块</li><li>同步方法</li></ul><p>Q2:<code>synchronized</code>与<code>ReentrantLock</code>的关系</p><ul><li>两者都是重入锁</li><li>两者有些方法互相对应</li></ul><blockquote><ul><li><code>wait</code>等价于<code>condition.await()</code></li><li><code>notifyAll</code>等价于<code>condition.signalAll()</code></li></ul></blockquote><p>Q3：使用场景对比</p><table><thead><tr><th>类型</th><th>使用场景</th></tr></thead><tbody><tr><td>阻塞队列</td><td>一般实现同步的时候使用</td></tr><tr><td>同步方法</td><td>如果同步方法适合你的程序</td></tr><tr><td>同步代码块</td><td>不太建议使用，因为操作起来容易出错</td></tr><tr><td><code>Lock/Condition</code></td><td>需要使用<code>Lock/Condition</code>的独有特性时</td></tr></tbody></table><h3 id="2-3-阻塞队列"><a href="#2-3-阻塞队列" class="headerlink" title="2.3 阻塞队列"></a>2.3 阻塞队列</h3><blockquote><p>为了更好地理解线程池的知识，我们需要了解下阻塞队列</p></blockquote><p>Q1:<strong>定义</strong></p><ul><li>阻塞队列<code>BlockingQueue</code>是一个支持两个附加操作的队列。这两个附加的操作是：</li></ul><blockquote><ul><li>在队列为空时，获取元素的线程会阻塞，直到队列变为非空</li><li>当队列满时，存储元素的线程会阻塞，直到队列变为非满</li></ul></blockquote><p>Q2:<strong>使用场景</strong>：</p><p>阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p><p>Q3:<strong>核心方法</strong></p><table><thead><tr><th align="left">方法\处理方式</th><th align="left">抛出异常</th><th align="left">返回特殊值</th><th align="left">一直阻塞</th><th align="left">超时退出</th></tr></thead><tbody><tr><td align="left">插入方法</td><td align="left"><code>add(e)</code></td><td align="left"><code>offer(e)</code></td><td align="left"><code>put(e)</code></td><td align="left"><code>offer(e,time,unit)</code></td></tr><tr><td align="left">移除方法</td><td align="left"><code>remove()</code></td><td align="left"><code>poll()</code></td><td align="left"><code>take()</code></td><td align="left"><code>poll(time,unit)</code></td></tr><tr><td align="left">检查方法</td><td align="left"><code>element()</code></td><td align="left"><code>peek()</code></td><td align="left">不可用</td><td align="left">不可用</td></tr></tbody></table><p>Q4：<strong><code>JAVA</code>中的阻塞队列</strong></p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td><code>ArrayBlockingQueue</code></td><td>由<strong>数组</strong>结构组成的<strong>有界</strong>阻塞队列（最常用）</td></tr><tr><td><code>LinkedBlockingQueue</code></td><td>由<strong>链表</strong>结构组成的<strong>有界</strong>阻塞队列（最常用）注意：一定要指定大小</td></tr><tr><td><code>PriorityBlockingQueue</code></td><td>支持<strong>优先级排序</strong>的<strong>无界</strong>阻塞队列。默认自然升序<strong>排列</strong></td></tr><tr><td><code>DelayQueue</code></td><td>支持<strong>延时</strong>获取元素的无界阻塞队列。</td></tr><tr><td><code>SynchronousQueue</code></td><td><strong>不存储</strong>元素的阻塞队列（可以看成是一个传球手，负责把生产者线程处理的数据直接传递给消费者线程）</td></tr><tr><td><code>LinkedTransferQueue</code></td><td>由<strong>链表</strong>结构组成的<strong>无界</strong>阻塞队列</td></tr><tr><td><code>LinkedBlockingDeque</code></td><td>由<strong>链表</strong>结构组成的<strong>双向阻塞</strong>队列（双向队列指的是可以从队列的两端插入和移出元素）</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/08/202856-871463.png" alt="JAVA中的阻塞队列"></p><p>Q5：<strong>实现原理：</strong></p><ul><li>底层利用了<code>ReentrantLock</code>&amp;<code>Condition</code>来实现自动加锁和解锁的功能</li><li>如果想详细了解阻塞队列实现原理的源码，笔者推荐一篇文章：<a href="https://juejin.im/post/5b21ded3e51d4506bb3a84b6#heading-2" target="_blank" rel="noopener">Android并发学习之阻塞队列</a></li></ul><h3 id="2-4-Android中的线程形态"><a href="#2-4-Android中的线程形态" class="headerlink" title="2.4 Android中的线程形态"></a>2.4 <code>Android</code>中的线程形态</h3><h4 id="2-4-1-AsyncTask"><a href="#2-4-1-AsyncTask" class="headerlink" title="2.4.1 AsyncTask"></a>2.4.1 <code>AsyncTask</code></h4><p>Q1：<strong>定义</strong>：一种轻量级的<strong>异步</strong>任务类</p><blockquote><p>在<code>Android</code>中实现异步任务机制有两种方式：<a href="https://juejin.im/post/5e61bf2de51d4526ea7f00bd" target="_blank" rel="noopener">Handler</a>和<code>AsyncTask</code></p><ul><li><code>Handler</code>机制存在的<strong>问题</strong>：代码相对臃肿；多任务同时执行时不易精确控制线程。</li><li>引入<code>AsyncTask</code>的<strong>好处</strong>：创建异步任务更简单，直接继承它可方便实现后台异步任务的执行和进度的回调更新<code>UI</code>，而无需编写任务线程和<code>Handler</code>实例就能完成相同的任务。</li></ul></blockquote><p>Q2:<strong>五个核心方法：</strong></p><table><thead><tr><th>方法</th><th>运行线程</th><th>调用时刻</th><th>作用</th></tr></thead><tbody><tr><td><code>onPreExecute()</code></td><td>主线程</td><td>在异步任务执行之前被调用</td><td>可用于进行一些界面上的<strong>初始化</strong>操作</td></tr><tr><td><code>doInBackground()</code></td><td>子线程</td><td>异步任务执行时</td><td>可用于处理所有的<strong>耗时任务</strong>。若需要更新<code>UI</code>需调用 <code>publishProgress()</code></td></tr><tr><td><code>onProgressUpdate()</code></td><td>主线程</td><td>调用<code>publishProgress()</code>之后</td><td>可利用方法中携带的参数如<code>Progress</code>来对<code>UI</code>进行相应地更新</td></tr><tr><td><code>onPostExecute()</code></td><td>主线程</td><td>在异步任务执行完毕并通过<code>return</code>语句返回时被调用</td><td>可利用方法中返回的数据来进行一些<code>UI</code>操作</td></tr><tr><td><code>onCancelled()</code></td><td>主线程</td><td>当异步任务被取消时被调用</td><td>可用于做<strong>界面取消</strong>的更新</td></tr></tbody></table><blockquote><p>注意：</p><ul><li>不要直接调用上述方法</li><li><code>AsyncTask</code>对象必须在<strong>主线程</strong>创建</li></ul></blockquote><p>Q3：<strong>开始和结束异步任务的方法</strong></p><ul><li><code>execute()</code></li></ul><blockquote><ul><li>必须在<strong>主线程</strong>中调用</li><li>作用：表示开始一个异步任务</li><li>注意：一个异步对象只能调用一次<code>execute()</code>方法</li></ul></blockquote><ul><li><code>cancel()</code></li></ul><blockquote><ul><li>必须在<strong>主线程</strong>中调用</li><li>作用：表示停止一个异步任务</li></ul></blockquote><p>Q4:工作原理：</p><ul><li>内部有一个静态的<code>Handler</code>对象即<code>InternalHandler</code></li></ul><blockquote><ul><li><p>作用：将执行环境从线程池切换到主线程；通过它来发送任务执行的进度以及执行结束等消息</p></li><li><p>注意：必须在主线程中创建</p></li></ul></blockquote><ul><li>内部有两个线程池：</li></ul><blockquote><ul><li><code>SerialExecutor</code>：用于任务的排队，默认是<strong>串行</strong>的线程池</li><li><code>THREAD_POOL_EXECUTOR</code>：用于真正执行任务</li></ul></blockquote><ul><li>排队执行过程：</li></ul><blockquote><ul><li>把参数<code>Params</code>封装为<code>FutureTask</code>对象，相当于<code>Runnable</code></li><li>调用<code>SerialExecutor.execute()</code>将<code>FutureTask</code>插入到任务队列<code>tasks</code></li><li>若没有正在活动的<code>AsyncTask</code>任务，则就会执行下一个<code>AsyncTask</code>任务。执行完毕后会继续执行其他任务直到所有任务都完成。即默认使用<strong>串行</strong>方式执行任务。</li></ul></blockquote><p>执行流程图：</p><p><img src="https://s2.ax1x.com/2020/03/08/3zgr8A.png" alt="AsyncTask工作原理"></p><p><strong>注意</strong>：<code>AsyncTask</code>不适用于进行特别耗时的后台任务，而是建议用线程池</p><blockquote><p>如果想要了解具体源码的读者，笔者推荐一篇文章：<a href="https://blog.csdn.net/guolin_blog/article/details/11711405" target="_blank" rel="noopener">Android AsyncTask完全解析，带你从源码的角度彻底理解</a></p></blockquote><h4 id="2-4-2-HandlerThread"><a href="#2-4-2-HandlerThread" class="headerlink" title="2.4.2 HandlerThread"></a>2.4.2 <code>HandlerThread</code></h4><p>Q1：定义：</p><ul><li><code>HandlerThread</code>是一个线程类，它继承自<code>Thread</code></li><li>与普通<code>Thread</code>的区别：具有<strong>消息循环</strong>的效果。原理：</li></ul><blockquote><ul><li>内部<code>HandlerThread.run()</code>方法中有<code>Looper</code>，通过<code>Looper.prepare()</code>来创建消息队列，并通过<code>Looper.loop()</code>来开启消息循环</li></ul></blockquote><p>Q2：实现方法</p><ul><li>实例化一个<code>HandlerThread</code>对象，参数是该线程的名称</li><li>通过 <code>HandlerThread.start()</code>开启线程</li><li>实例化一个<code>Handler</code>并传入<code>HandlerThread</code>中的<code>Looper</code>对象，使得与<code>HandlerThread</code>绑定</li><li>利用<code>Handler</code>即可执行异步任务</li><li>当不需要<code>HandlerThread</code>时，通过<code>HandlerThread.quit()</code>/<code>quitSafely()</code>方法来终止线程的执行</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> HandlerThread myHandlerThread <span class="token punctuation">;</span>  <span class="token keyword">private</span> Handler handler <span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//实例化HandlerThread</span>   myHandlerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerThread</span><span class="token punctuation">(</span><span class="token string">"myHandler"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//开启HandlerThread</span>   myHandlerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//将Handler对象与HandlerThread线程绑定</span>   handler <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>myHandlerThread<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>          publicvoid <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 这里接收Handler发来的消息，运行在handler_thread线程中  </span>            <span class="token comment" spellcheck="true">//TODO...  </span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//在主线程给Handler发送消息  </span>   handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>          publicvoid <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//在子线程给Handler发送数据  </span>           handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//终止HandlerThread运行</span>   myHandlerThread<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </code></pre><p>Q3：<strong>用途</strong></p><ul><li>进行<strong>串行</strong>异步通信</li><li>构造<code>IntentService</code></li><li>方便实现在子线程与子线程直接的通信</li></ul><p>Q4：原理：</p><ul><li>实际就是<code>HandlerThread.run()</code>里面封装了<code>Looper.prepare()</code>和<code>Looper.loop()</code>，以便能在子线程中使用<code>Handler</code></li><li>同时，<code>HandlerThread.getLooper()</code>中使用了<code>wait()</code>和<code>synchronized代码块</code>，当<code>Looper==NULL</code>的时候，锁住了当前的对象，那什么时候唤醒等待呢？当然是在初始化完该线程关联<code>Looper</code>对象的地方，也就是<code>run()</code></li></ul><blockquote><p>想了解源码的话，笔者推荐一篇文章：<a href="https://blog.csdn.net/ta893115871/article/details/55272187" target="_blank" rel="noopener">浅析HandlerThread</a></p></blockquote><h4 id="2-4-3-IntentService"><a href="#2-4-3-IntentService" class="headerlink" title="2.4.3 IntentService"></a>2.4.3 <code>IntentService</code></h4><p>Q1:定义：</p><p><code>IntentService</code>是一个继承自<code>Service</code>的抽象类</p><p>Q2：优点：</p><ul><li>相比于线程：由于是服务，优先级比线程高，更不容易被系统杀死。因此较适合执行一些<strong>高优先级</strong>的后台任务</li><li>相比于普通<code>Service</code>：可<strong>自动创建</strong>子线程来执行任务，且任务执行完毕后<strong>自动退出</strong></li></ul><p>Q3：使用方法</p><ul><li>新建类并继承<code>IntentService</code>，重写<code>onHandleIntent()</code>，该方法：</li></ul><blockquote><ul><li>运行在子线程，因此可以进行一些耗时操作</li><li>作用：从<code>Intent</code>参数中区分具体的任务并执行这些任务</li></ul></blockquote><ul><li>在配置文件中进行注册</li><li>在活动中利用<code>Intent</code>实现<code>IntentService</code>的启动：</li></ul><pre class=" language-java"><code class="language-java">Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">startService</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动服务</span></code></pre><blockquote><p>注意：无需手动停止服务，<code>onHandleIntent()</code>执行结束之后，<code>IntentService</code>会自动停止。</p></blockquote><p>Q4:工作原理</p><ul><li>在<code>IntentService.onCreate()</code>里创建一个<code>Thread</code>对象即<code>HandlerThread</code>，利用其内部的<code>Looper</code>会实例化一个<code>ServiceHandler</code></li><li>任务请求的<code>Intent</code>会被封装到<code>Message</code>并通过<code>ServiceHandler</code>发送给<code>Looper</code>的<code>MessageQueue</code>，最终在<code>HandlerThread</code>中执行</li><li>在<code>ServiceHandler.handleMessage()</code>中会调用<code>IntentService.onHandleIntent()</code>，可在该方法中处理后台任务的逻辑,执行完毕后会调用<code>stopSelf()</code>，以实现自动停止</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/09/130332-40654.png" alt="总体流程图"></p><p>下面继续来研究下：将<code>Intent</code> 传递给服务 &amp; 依次插入到工作队列中的流程</p><p><img src="https://s2.ax1x.com/2020/03/09/8Szv4g.png" alt="Intent传递流程"></p><blockquote><p>如果对<code>IntentService</code>的具体源码感兴趣的话，笔者推荐一篇文章：<a href="https://blog.csdn.net/carson_ho/article/details/53407806" target="_blank" rel="noopener">Android多线程：IntentService用法&amp;源码分析</a></p></blockquote><h3 id="2-5-线程池"><a href="#2-5-线程池" class="headerlink" title="2.5 线程池"></a>2.5 线程池</h3><p>Q1：<strong>优点</strong></p><ul><li><strong>重用</strong>线程池中的线程，避免线程的创建和销毁带来的性能消耗</li><li>有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致阻塞现象</li><li>进行<strong>线程管理</strong>，提供定时/循环间隔执行等功能</li></ul><p>Q2：<strong>构造方法分析</strong></p><blockquote><ul><li>线程池的概念来源：Java中的<code>Executor</code>，它是一个接口</li><li>线程池的真正实现：<code>ThreadPoolExecutor</code>，提供一系列参数来配置线程池</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造参数</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><ul><li><code>corePoolSize</code>：核心线程数</li></ul><blockquote><ul><li><p>默认情况下，核心线程会在线程中一直存活</p></li><li><p>当设置<code>ThreadPoolExecutor</code>的<code>allowCoreThreadTimeOut</code>属性为</p><p>A.<code>true</code>：表示核心线程闲置超过超时时长，会被回收</p><p>B.<code>false</code>: 表示核心线程不会被回收，会在线程池中一直存活</p></li></ul></blockquote><ul><li><code>maximumPoolSize</code>:最大线程数</li></ul><blockquote><p>当活动线程数达到这个数值后，后续的任务将会被阻塞</p></blockquote><ul><li><code>keepAliveTime</code>:非核心线程超时时间</li></ul><blockquote><ul><li>超过这个时长，闲置的非核心线程就会被回收</li><li>当设置<code>ThreadPoolExecutor</code>的<code>allowCoreThreadTimeTout</code>属性为<code>true</code>时，<code>keepAliveTime</code>对核心线程同样有效</li></ul></blockquote><ul><li><code>unit</code>：用于指定<code>keepAliveTime</code>参数的时间单位</li></ul><blockquote><p>单位有：<code>TimeUnit.MILLISECONDS</code>、<code>TimeUnit.SECONDS</code>、<code>TimeUnit.MINUTES</code>等；</p></blockquote><ul><li><code>workQueue</code>：任务队列</li></ul><blockquote><p>通过线程池的<code>execute()</code>方法提交的<code>Runnable</code>对象会存储在这个参数中</p></blockquote><ul><li><code>threadFactory</code>：线程工厂，可创建新线程</li></ul><blockquote><p>一个接口，只有一个方法<code>Thread newThread(Runnable r)</code></p></blockquote><ul><li><code>handler</code>：在线程池无法执行新任务时进行调度</li></ul><p>Q3：<strong><code>ThreadPoolExecutor</code>的默认工作策略</strong></p><p><img src="https://i.bmp.ovh/imgs/2019/11/c61f6297cfff9f18.png" alt="处理流程"></p><p>​    Q4：<strong>线程池的分类</strong></p><table><thead><tr><th>名称</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td><code>FixThreadPool</code></td><td>线程数量固定的线程池，所有线程都是<strong>核心线程</strong>，当线程空闲时<strong>不会</strong>被回收</td><td>能<strong>快速</strong>响应外界请求</td></tr><tr><td><code>CachedThreadPool</code></td><td>线程数量不定的线程池（最大线程数为<strong>Integer.MAX_VALUE</strong>），只有<strong>非核心线程</strong>，空闲线程有超时机制，超时回收</td><td>适合于执行大量的<strong>耗时较少</strong>的任务</td></tr><tr><td><code>ScheduledThreadPool</code></td><td>核心线程数量<strong>固定</strong>，非核心线程数量<strong>不定</strong></td><td><strong>定时</strong>任务和<strong>固定</strong>周期的任务</td></tr><tr><td><code>SingleThreadExecutor</code></td><td>只有<strong>一个核心线程</strong>，可确保所有的任务都在同一个线程中<strong>按顺序</strong>执行</td><td>无需处理<strong>线程同步</strong>问题</td></tr></tbody></table><h2 id="三-再聊聊AsyTask的不足"><a href="#三-再聊聊AsyTask的不足" class="headerlink" title="三.再聊聊AsyTask的不足"></a>三.再聊聊<code>AsyTask</code>的不足</h2><blockquote><p><code>AsyncTask</code> 看似十分美好，但实际上存在着非常多的<strong>不足</strong>，这些不足使得它逐渐退出了历史舞台，因此如今已经被 <code>RxJava</code>、<code>协程</code>等新兴框架所取代（PS:有机会希望能和大家一起探究下<code>RxJava</code>的源码）</p></blockquote><ul><li>生命周期</li></ul><blockquote><p><code>AsyncTask</code> 没有与 <code>Activity</code>、<code>Fragment</code> 的生命周期绑定，即使 <code>Activity</code> 被销毁，它的 <code>doInBackground</code> 任务仍然会继续执行</p></blockquote><ul><li>取消任务</li></ul><blockquote><p><code>AsyncTask</code> 的 <code>cancel</code> 方法的参数 <code>mayInterruptIfRunning</code> 存在的意义不大，并且它无法保证任务一定能取消，只能尽快让任务取消（比如如果正在进行一些无法打断的操作时，任务就仍然会运行）</p></blockquote><ul><li>内存泄漏</li></ul><blockquote><ul><li>由于它没有与 <code>Activity</code> 等生命周期进行绑定，因此它的生命周期仍然可能比 <code>Activity</code> 长</li><li>如果将它作为 <code>Activity</code> 的非 <code>static</code> 内部类，则它会持有 <code>Activity</code> 的引用，导致 <code>Activity</code> 的内存无法释放。（PS:与 <code>Handler</code>的内存泄漏问题类似，参考文章：<a href="https://juejin.im/post/5e61bf2de51d4526ea7f00bd" target="_blank" rel="noopener">进阶之路 | 奇妙的Handler之旅</a>）</li></ul></blockquote><ul><li>并行/串行</li></ul><blockquote><p>由于 <code>AsyncTask</code> 的串行和并行执行在多个版本上都进行了修改，所以当多个 <code>AsyncTask</code> 依次执行时，它究竟是串行还是并行执行取决于用户手机的版本。具体修改如下：</p><p>A.<code>Android 1.6</code> 之前：各个 <code>AsyncTask</code> 按串行的顺序进行执行</p><p>B.<code>Android 1.6</code>–<code>Android 3.0</code> ：由于设计者认为串行执行效率太低，因此改为了并行执行，最多五个 <code>AsyncTask</code> 同时执行</p><p>C.<code>Android 3.0</code> 之后：由于之前的改动，很多应用出现了并发问题，因此引入 <code>SerialExecutor</code> 改回了串行执行，但对并行执行进行了支持</p></blockquote><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《Android 开发艺术探索》</li><li>《Android 进阶之光》</li><li><a href="https://juejin.im/post/5e61bf2de51d4526ea7f00bd" target="_blank" rel="noopener">进阶之路 | 奇妙的Handler之旅</a></li><li><a href="https://www.jianshu.com/p/264d4e1b76af" target="_blank" rel="noopener">Java线程中断的正确姿势</a></li><li><a href="https://juejin.im/post/5a2b53b7f265da432a7b821c#heading-2" target="_blank" rel="noopener">面试官最爱的volatile关键字</a></li><li><a href="https://blog.csdn.net/rickiyeat/article/details/78314451" target="_blank" rel="noopener">究竟什么是可重入锁？</a></li><li><a href="https://juejin.im/post/5b21ded3e51d4506bb3a84b6" target="_blank" rel="noopener">Android并发学习之阻塞队列</a></li><li><a href="https://blog.csdn.net/guolin_blog/article/details/11711405" target="_blank" rel="noopener">Android AsyncTask完全解析，带你从源码的角度彻底理解</a></li><li><a href="https://blog.csdn.net/ta893115871/article/details/55272187" target="_blank" rel="noopener">浅析HandlerThread</a></li><li><a href="https://blog.csdn.net/carson_ho/article/details/53407806" target="_blank" rel="noopener">Android多线程：IntentService用法&amp;源码分析</a></li><li><a href="https://www.jianshu.com/p/ab77a2e83c52" target="_blank" rel="noopener">要点提炼|开发艺术之线程</a></li><li><a href="https://juejin.im/post/5e0dcae06fb9a047ef326bf1#heading-5" target="_blank" rel="noopener">AsyncTask 源码解析：Android 自带的异步任务工具</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发艺术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路 | 奇妙的Handler之旅</title>
      <link href="/2020/03/06/jin-jie-zhi-lu-qi-miao-de-handler-zhi-lu/"/>
      <url>/2020/03/06/jin-jie-zhi-lu-qi-miao-de-handler-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="进阶之路-奇妙的Handler之旅"><a href="#进阶之路-奇妙的Handler之旅" class="headerlink" title="进阶之路 | 奇妙的Handler之旅"></a>进阶之路 | 奇妙的Handler之旅</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p><p>本文已授权公众号<code>顾林海</code>发布：<a href="https://mp.weixin.qq.com/s/HatMCXW-ErkPb4GWkMoBvA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/HatMCXW-ErkPb4GWkMoBvA</a></p></blockquote><h2 id="需要已经具备的知识："><a href="#需要已经具备的知识：" class="headerlink" title="需要已经具备的知识："></a>需要已经具备的知识：</h2><ul><li><code>Handler</code>的基本概念及使用</li></ul><h2 id="学习导图："><a href="#学习导图：" class="headerlink" title="学习导图："></a>学习导图：</h2><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/06/000802-69705.png" alt="学习导图"></p><h2 id="一-为什么要学习Handler"><a href="#一-为什么要学习Handler" class="headerlink" title="一.为什么要学习Handler?"></a>一.为什么要学习<code>Handler</code>?</h2><p>在<code>Android</code>平台上，主要用到的通信机制有两种：<code>Handler</code>和<code>Binder</code>，前者用于进程内部的通信，后者主要用于跨进程通信。</p><p>在多线程的应用场景中，<code>Handler</code><strong>将工作线程中需更新<code>UI</code>的操作信息 传递到 <code>UI</code>主线程</strong>，从而实现工作线程对<code>UI</code>的更新处理，最终实现异步消息的处理。</p><p>作为一个<code>Android</code>程序猿，<strong>知其然而必须知其所以然</strong>，理解其源码能更好地了解<code>Handler</code>机制的原理。下面，我就从消息机制入手，带大家畅游在<code>Handler</code>的世界中，体会<code>Google</code>工程师的智慧之光。</p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-消息机制概述"><a href="#2-1-消息机制概述" class="headerlink" title="2.1 消息机制概述"></a>2.1 消息机制概述</h3><p>A.作用：<strong>跨线程通信</strong></p><p>B.常用场景：当子线程中进行耗时操作后需要更新<code>UI</code>时，通过<code>Handler</code>将有关<code>UI</code>的操作切换到主线程中执行</p><blockquote><ul><li><p>系统不建议在子线程访问<code>UI</code>的原因：<code>UI</code>控件<strong>非线程安全</strong>，在多线程中<strong>并发</strong>访问可能会导致<code>UI</code>控件处于不可预期的状态</p></li><li><p>而不对<code>UI</code>控件的访问加上<strong>锁</strong>机制的原因有：</p><p>1.上锁会让UI控件变得复杂和低效</p><p>2.上锁后会阻塞某些进程的执行</p></li></ul></blockquote><p>C.四要素:</p><ul><li><code>Message</code>：需要被传递的消息，其中包含了消息<code>ID</code>，消息处理对象以及处理的数据等，由<code>MessageQueue</code>统一列队，最终由<code>Handler</code>处理</li><li><code>MessageQueue</code>：用来存放<code>Handler</code>发送过来的消息，内部通过<strong>单链表</strong>的数据结构来维护消息列表，等待<code>Looper</code>的抽取。</li><li><code>Handler</code>:负责<code>Message</code>的发送及处理</li></ul><blockquote><ul><li><code>Handler.sendMessage()</code>：向消息队列<strong>发送</strong>各种消息事件</li><li><code>Handler.handleMessage()</code>：<strong>处理</strong>相应的消息事件</li></ul></blockquote><ul><li><code>Looper</code>：通过<code>Looper.loop()</code>不断地从<code>MessageQueue</code>中抽取<code>Message</code>，按分发机制将消息分发给目标处理者，可以看成是<strong>消息泵</strong></li></ul><blockquote><p><code>Thread</code>：负责调度整个消息循环，即消息循环的执行场所</p><p>存在关系：</p><ul><li>一个<code>Thread</code>只能有<strong>一</strong>个<code>Looper</code>，可以有<strong>多</strong>个<code>Handler</code></li><li><code>Looper</code>有<strong>一</strong>个<code>MessageQueue</code>，可以处理来自<strong>多</strong>个<code>Handler</code>的<code>Message</code></li><li><code>MessageQueue</code>有一组待处理的<code>Message</code>，这些<code>Message</code>可来自不同的<code>Handler</code></li><li><code>Message</code>中记录了负责发送和处理消息的<code>Handler</code></li><li><code>Handler</code>中有<code>Looper</code>和<code>MessageQueue</code></li></ul></blockquote><p><img src="https://s2.ax1x.com/2020/03/05/37FxUI.png" alt="关系图"></p><p><img src="https://s2.ax1x.com/2020/03/05/37ke5q.png" alt="数量关系"></p><p>D.使用方法：</p><ul><li>在<code>ActivityThread</code>主线程实例化一个全局的<code>Handler</code>对象</li><li>在需要执行<code>UI</code>操作的子线程里实例化一个<code>Message</code>并填充必要数据，调用<code>Handler.sendMessage(Message)</code>方法发送出去</li><li>重写<code>handleMessage()</code>方法，对不同<code>Message</code>执行相关操作</li></ul><p>E.总体工作流程：</p><blockquote><p>这里先总体地说明一下<code>Android</code>消息机制的工作流程，具体的<code>ThreadLocal</code>,<code>MessageQueue</code>,<code>Looper</code>,<code>Handler</code>的工作原理会在下文详细解析</p></blockquote><ul><li><code>Handler.sendMessage()</code>发送消息时，会通过<code>MessageQueue.enqueueMessage()</code>向<code>MessageQueue</code>中添加一条消息</li><li>通过<code>Looper.loop()</code>开启循环后，不断轮询调用<code>MessageQueue.next()</code></li><li>调用目标<code>Handler.dispatchMessage()</code>去传递消息，目标<code>Handler</code>收到消息后调用<code>Handler.handleMessage()</code>处理消息</li></ul><blockquote><p>简单来看，即<code>Handler</code>将<code>Message</code>发送到<code>Looper</code>的成员变量<code>MessageQueue</code>中，之后<code>Looper</code>不断循环遍历<code>MessageQueue</code>从中读取<code>Message</code>，最终回调给<code>Handler</code>处理。如图：</p></blockquote><p><img src="https://s2.ax1x.com/2020/03/05/37kLWV.png" alt="总体工作流程"></p><h3 id="2-2-消息机制分析"><a href="#2-2-消息机制分析" class="headerlink" title="2.2 消息机制分析"></a>2.2 消息机制分析</h3><h4 id="2-2-1-ThreadLocal"><a href="#2-2-1-ThreadLocal" class="headerlink" title="2.2.1 ThreadLocal"></a>2.2.1 <code>ThreadLocal</code></h4><blockquote><p>了解<code>ThreadLocal</code>,有助于我们后面对<code>Looper</code>的探究</p></blockquote><p>Q1：<code>ThreadLocal</code><strong>是什么</strong></p><p>首先我们来看一下官方源码（<code>Android 9.0</code>）</p><blockquote><p>This class provides thread-local variables.  These variables differ from their normal counterparts in that each thread that accesses one (via its {@code get} or {@code set} method) has its own, independently initialized copy of the variable.  {@code ThreadLocal} instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID).</p></blockquote><p>大致意思：</p><blockquote><p><code>ThreadLocal</code>是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，只有在<strong>指定线程</strong>中才能获取到存储的数据（也就是说，每个线程的一个变量，有自己的值）</p></blockquote><p>Q2：<code>ThreadLocal</code>的<strong>使用场景</strong>：</p><ul><li>当某些数据是以线程为作用域且每个<strong>线程</strong>有<strong>特有</strong>的<strong>数据副本</strong></li></ul><blockquote><ul><li><p><code>Android</code>中具体的使用场景：<code>Looper</code>,<code>ActivityThread</code>,<code>AMS</code></p></li><li><p>如果不采用<code>ThreadLocal</code>的话，需要采取的措施：提供一个全局哈希表</p></li></ul></blockquote><ul><li>复杂逻辑下的对象传递，比如：监听器的传递</li></ul><blockquote><ul><li><p>采用<code>ThreadLocal</code>让监听器作为线程中的全局对象，线程内部只有通过<code>get</code>方法即可得到监听器</p></li><li><p>如果不采用<code>ThreadLocal</code>的方案：</p><p>a.将监听器作为参数传递</p><p>缺点：当调用栈很深的时候，程序设计看起来不美观</p><p>b.将监听器作为静态变量</p><p>缺点：状态不具有可扩充性</p></li></ul></blockquote><p>Q3：<strong><code>ThreadLocal</code>和<code>synchronized</code>的区别：</strong></p><blockquote><ul><li>对于多线程资源共享的问题，<code>synchronized</code>机制采用了“<strong>以时间换空间</strong>”的方式</li><li>而<code>ThreadLocal</code>采用了<strong>“以空间换时间”</strong>的方式</li><li>前者仅提供一份变量，让不同的线程排队访问，而后者为每一个线程都提供了一份变量，因此可以同时访问而互不影响，所以<code>ThreadLocal</code>和<code>synchronized</code>都能保证线程安全，但是应用场景却大不一样。</li></ul></blockquote><p>Q4:原理</p><blockquote><p><code>ThreadLocal</code>主要操作为<code>set</code>,<code>get</code>操作，下面分别介绍流程</p></blockquote><p>A1：<code>set</code>的原理</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/05/155410-152067.png" alt="set流程图"></p><p>A2：<code>get</code>的原理</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/05/155653-993515.png" alt="get流程图"></p><p>综上所述，<code>ThreadLocal</code>之所以有这么奇妙的效果，是因为：</p><ul><li>不同线程访问同一个<code>ThreadLocal.get()</code>，其内部会从各种线程中取出对应线程的<code>table</code>数组，然后根据当前<code>ThreadLocal</code>的索引查找出对应的<code>values</code>值</li></ul><blockquote><p>想要了解<code>ThreadLocal</code>具体源码的读者，推荐一篇文章：<a href="https://www.jianshu.com/p/411c40b09a81" target="_blank" rel="noopener">ThreadLocal详解</a></p></blockquote><h4 id="2-2-2-MessageQueue"><a href="#2-2-2-MessageQueue" class="headerlink" title="2.2.2 MessageQueue"></a>2.2.2 <code>MessageQueue</code></h4><ul><li><p>数据结构：<code>MessageQueue</code>的数据结构是单链表</p></li><li><p>操作：</p><p>A.<code>enqueueMessage</code></p><p>主要操作是单链表的插入操作</p><p>B.<code>next</code></p><p>是一个无限循环的方法，如果没有消息，会一直阻塞；当有消息的时候，<code>next</code>会返回消息并将其从单链表中移出</p></li></ul><h4 id="2-2-3-Looper"><a href="#2-2-3-Looper" class="headerlink" title="2.2.3 Looper"></a>2.2.3 <code>Looper</code></h4><p>Q1：<strong><code>Looper</code>的作用</strong></p><blockquote><ul><li>作为消息循环的角色</li><li>它会不停地从<code>MessageQueue</code>中查看是否有新消息，若有新消息则立即处理，否则一直阻塞（不是<code>ANR</code>）</li><li><code>Handler</code>需要<code>Looper</code>，否则将报错</li><li><code>Handler</code>内部通过<code>ThreadLocal</code>获取到当前线程的<code>Looper</code></li></ul></blockquote><p>Q2：<strong><code>Looper</code>的使用</strong></p><p>a1：开启：</p><blockquote><p><code>UI</code>线程会自动创建<code>Looper</code>，子线程需自行创建</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//子线程中需要自己创建一个Looper</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为子线程创建Looper   </span>                Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启消息轮询</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><ul><li>除了<code>prepare()</code>,还提供<code>prepareMainLooper()</code>，本质也是通过<code>prepare()</code></li><li><code>getMainLooper()</code>   作用：获取主线程的<code>Looper</code></li></ul></blockquote><p>a2：关闭:</p><ul><li><code>quit</code>：直接退出</li><li><code>quitSafely</code>:设定退出标记，待<code>MessageQueue</code>中处理完所有消息再退出</li></ul><blockquote><p>退出<code>Looper</code>的话，子线程会立刻终止；因此：建议在不需要的时候终止<code>Looper</code></p></blockquote><p>Q3：原理：</p><p><img src="https://s2.ax1x.com/2020/03/06/3bcKLn.png" alt="Looper原理"></p><h4 id="2-2-4-Handler"><a href="#2-2-4-Handler" class="headerlink" title="2.2.4 Handler"></a>2.2.4 <code>Handler</code></h4><p>Q1:<strong><code>Handler</code>的两种使用方式：</strong></p><blockquote><p><strong>注意</strong>：创建<code>Handler</code>实例之前必须先创建<code>Looper</code>实例，否则会抛<code>RuntimeException</code>(<code>UI</code>线程自动创建<code>Looper</code>)</p></blockquote><ul><li><code>send</code>方式</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一种:send方式的Handler创建</span>Handler mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如UI操作</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//send</span>mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>post</code>方式</li></ul><blockquote><p>最终是通过一系列<code>send</code>方法来实现</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实例化Handler</span><span class="token keyword">private</span> Handler mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里调用了post方法，和sendMessage一样达到了更新UI的目的</span>     mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mTextView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>new_str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Q2：<strong><code>Handler</code>处理消息过程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/05/203806-192172.png" alt="Handler发送消息流程"></p><p><img src="https://s2.ax1x.com/2020/03/05/3HGKI0.png" alt="一张图总结Handler"></p><h3 id="2-3-Handler-的延伸"><a href="#2-3-Handler-的延伸" class="headerlink" title="2.3 Handler 的延伸"></a>2.3 <code>Handler</code> 的延伸</h3><h4 id="2-3-1-内存泄露"><a href="#2-3-1-内存泄露" class="headerlink" title="2.3.1 内存泄露"></a>2.3.1 内存泄露</h4><blockquote><p>在初学<code>Handler</code>的时候，往往会发现<code>AS</code>亮起一大块黄色，以警告可能会发生内存泄漏</p></blockquote><p><img src="https://s2.ax1x.com/2020/03/05/3HYfxS.png" alt="Handler警告"></p><ul><li>发生场景：<code>Handler</code> 允许我们发送<strong>延时消息</strong>，如果在延时期间用户关闭了<code>Activity</code>，那么该<code>Activity</code>会泄露</li><li>原因：这个泄露是因为因为 <strong><code>Java</code> 的特性，内部类会持有外部类</strong>，<code>Activity</code> 被 <code>Handler</code> 持有引用，<code>Handler</code>被<code>Message</code>持有引用，而<code>Message</code>被<code>MessageQueue</code>持有引用，而<code>MessageQueue</code>是属于<code>TLS（ThreadLocalStorage）</code>线程，是与Activity不同的生命周期。所以当<code>Activity</code>的生命周期结束后，而<code>MessageQueue</code>中还存在未处理的消息，那么上面一连串的引用链就不允许<code>Activity</code>的对象被回收，就造成了内存泄漏</li></ul><blockquote><p>即两个关键条件：</p><ul><li>存在<code>Activity</code>–&gt;<code>Handler</code>–&gt;<code>Message</code>–&gt;<code>MessageQueue</code>的一连串引用链</li><li><code>Handler</code>的生命周期 &gt; 外部类的生命周期</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/10/154241-273934.png" alt="引用链"></p><ul><li><p>解决方式：</p><p>A.<code>Activity</code>销毁时，清空<code>Handler</code>中未执行或正在执行的<code>Callback</code>以及<code>Message</code></p></li></ul><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 清空消息队列，移除对外部类的引用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​    B.<strong>静态内部类+弱引用</strong></p><blockquote><ul><li>为了保证不再持有当前<code>Activity</code>的引用，我们采用<code>静态内部类</code>的方式</li><li>为了让<code>Handler</code>在处理消息时调用外部类<code>Activity</code>的方法，且能在<code>GC</code>时回收其内存（换句话说：有短暂的生命周期），所以我们这里采用<code>弱引用</code>的方式</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AppHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//弱引用，在垃圾回收时，被回收</span>    WeakReference<span class="token operator">&lt;</span>Activity<span class="token operator">></span> mActivityReference<span class="token punctuation">;</span>    <span class="token function">AppHandler</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span><span class="token punctuation">{</span>        mActivityReference<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>Activity<span class="token operator">></span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>what<span class="token punctuation">)</span><span class="token punctuation">{</span>             HandlerActivity activity<span class="token operator">=</span>mActivityReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>activity<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//执行业务逻辑</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://s2.ax1x.com/2020/03/05/3H09de.png" alt="Java各种引用"></p><h4 id="2-3-2-Handler里藏着的Callback"><a href="#2-3-2-Handler里藏着的Callback" class="headerlink" title="2.3.2 Handler里藏着的Callback"></a>2.3.2 <code>Handler</code>里藏着的<code>Callback</code></h4><p>首先看下<code>Handler.dispatchMessage(msg)</code> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里的 callback 是 Runnable</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果 callback 处理了该 msg 并且返回 true， 就不会再回调 handleMessage</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到 <code>Handler.Callback</code> 有<strong>优先处理消息的权利</strong> </p><ul><li>当一条消息被 <code>Callback</code> 处理<strong>并拦截（返回 <code>true</code>）</strong>，那么 <code>Handler.handleMessage(Msg)</code> 方法就不会被调用了</li><li>如果<code>Callback</code>处理了消息，但是并没有拦截，那么就意味着<strong>一个消息可以同时被<code>Callback</code>以及 <code>Handler</code> 处理</strong></li></ul><p>这个就很有意思了，这有什么作用呢？</p><p><strong>我们可以利用 <code>Callback</code> 这个拦截机制来拦截 <code>Handler</code> 的消息！</strong></p><p>场景：<code>Hook</code> <a href="http://activitythread.mh/" target="_blank" rel="noopener">ActivityThread.mH</a> ，笔者在<a href="https://juejin.im/post/5e5c74c1e51d4526dc7be184" target="_blank" rel="noopener">进阶之路 | 奇妙的四大组件之旅</a>介绍过<code>ActivityThread</code>，在 <code>ActivityThread</code>中有个成员变量 <code>mH</code> ，它是个 <code>Handler</code>，又是个极其重要的类，几乎所有的<strong>插件化</strong>框架都使用了这个方法</p><blockquote><p>限于当前知识水平，笔者尚未研究过插件化的知识，以后有机会的话希望能给大家介绍！</p></blockquote><h4 id="2-3-3-创建-Message-的最佳方式"><a href="#2-3-3-创建-Message-的最佳方式" class="headerlink" title="2.3.3 创建 Message 的最佳方式"></a>2.3.3 创建 <code>Message</code> 的最佳方式</h4><blockquote><p>为了节省开销,尽量复用 <code>Message</code> ，减少内存消耗</p></blockquote><p>法一：<code>Message msg=Message.obtain();</code></p><p>法二：<code>Message msg=handler.obtainMessage();</code></p><h4 id="2-3-4-妙用-Looper-机制"><a href="#2-3-4-妙用-Looper-机制" class="headerlink" title="2.3.4 妙用 Looper 机制"></a>2.3.4 妙用 <code>Looper</code> 机制</h4><p>我们可以利用<code>Looper</code>的机制来帮助我们做一些事情：</p><ul><li>将 <code>Runnable</code> <code>post</code> 到主线程执行</li><li>利用 <code>Looper</code> 判断当前线程是否是主线程</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MainThread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">MainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Handler HANDLER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将 Runnable post 到主线程执行</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Runnable runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            HANDLER<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断当前线程是否是主线程</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isMainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-5-Android中为什么主线程不会因Looper-loop-的死循环卡死？"><a href="#2-3-5-Android中为什么主线程不会因Looper-loop-的死循环卡死？" class="headerlink" title="2.3.5 Android中为什么主线程不会因Looper.loop()的死循环卡死？"></a>2.3.5 <code>Android</code>中为什么主线程不会因<code>Looper.loop()</code>的死循环卡死？</h4><blockquote><p>这个是老生常谈的问题了，记得当初被学长问到这个问题的时候，一脸懵逼，然后胡说一通，实属羞愧</p><p>要弄清这个问题，我们可以通过几个问题来逐层深入剖析</p></blockquote><p>Q1：<strong>什么是线程？</strong></p><p>线程是一段可执行的代码，当可执行代码执行完成后，线程生命周期便该终止了，线程退出</p><p>Q2：<strong>进入死循环是不是说明一定会阻塞</strong>？</p><p>前面也说到了线程既然是一段可执行的代码，当可执行代码执行完成后，线程生命周期便该终止了，线程退出。而对于主线程，我们是绝不希望会被运行一段时间，自己就退出，那么如何保证能一直存活呢？<strong>简单做法就是可执行代码是能一直执行下去的，死循环便能保证不会被退出</strong></p><p>想到这就理解，主线程也是一个线程，它也要维持自己的周期，所以也是需要一个死循环的。所以死循环并不是那么让人担心。</p><p>Q3:<strong>什么是<code>Looper</code>的阻塞？</strong></p><ul><li><code>Looper</code>的阻塞，前提是没有输入事件，此时<code>MessageQueue</code>是空的，<code>Looper</code>进入空闲，线程进入阻塞，释放<code>CPU</code>，等待输入事件的唤醒</li><li><code>Looper</code>阻塞的时候，主线程大多数时候都是处于休眠状态，并不会消耗大量<code>CPU</code>资源</li></ul><blockquote><p><code>Looper</code>的阻塞涉及到<code>Linux pipe/epoll</code>机制，想了解的读者可自行<code>Google</code></p></blockquote><p>Q4：<strong>聊聊<code>ANR</code></strong></p><ul><li>其实初学者很容易将<code>ANR</code>和<code>Looper的阻塞</code>二者相混淆</li><li><code>UI</code>耗时导致卡死，前提是要有输入事件，此时<code>MessageQueue</code>不是空的，<code>Looper</code>正常轮询，线程并没有阻塞，但是该事件执行时间过长（一般5秒），而且与此期间其他的事件（按键按下，屏幕点击..也是通过<code>Looper</code>处理的）都没办法处理（卡死），然后就<code>ANR</code>异常了</li></ul><p>Q5：<strong>卡死的真正原因：</strong></p><ul><li>真正卡死的原因是：在回调方法<code>onCreate</code>/<code>onStart</code>/<code>onResume</code>等操作时间过长</li></ul><h2 id="三-课堂小测试"><a href="#三-课堂小测试" class="headerlink" title="三.课堂小测试"></a>三.课堂小测试</h2><blockquote><p>恭喜你！已经看完了前面的文章，相信你对<code>Handler</code>已经有一定深度的了解，下面，进行一下课堂小测试，验证一下自己的学习成果吧！PS：限于篇幅，笔者就不提供答案了，不过答案一搜就有了</p></blockquote><p>Q1：如何将一个<code>Thread</code>线程变成<code>Looper</code>线程？<code>Looper</code>线程有哪些特点</p><p>Q2：简述下<code>Handler</code>、<code>Message</code>、<code>Looper</code>的作用，以及他们之间的关系</p><p>Q3: 简述消息机制的回调处理过程，怎么保证消息处理机制的唯一性</p><p>Q4：为什么发送消息在子线程，而处理消息就变成主线程了，在哪儿跳转的</p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《Android 开发艺术探索》</li><li><a href="https://www.jianshu.com/p/411c40b09a81" target="_blank" rel="noopener">ThreadLocal详解</a></li><li><a href="https://juejin.im/post/5e5c74c1e51d4526dc7be184" target="_blank" rel="noopener">进阶之路 | 奇妙的四大组件之旅</a></li><li><a href="https://blog.csdn.net/fightingXia/article/details/70494818" target="_blank" rel="noopener">Handler运行机制中必须明白的几个问题</a></li><li><a href="https://juejin.im/post/5c74b64a6fb9a049be5e22fc#heading-18" target="_blank" rel="noopener">Handler 都没搞懂，拿什么去跳槽啊？</a></li><li><a href="https://www.zhihu.com/question/34652589/answer/90344494" target="_blank" rel="noopener">Android中为什么主线程不会因为Looper.loop()里的死循环卡死？</a></li><li><a href="http://wossoneri.github.io/2019/05/10/[Android]why-Looper-loop-will-not-block-main-thread/" target="_blank" rel="noopener">为什么主线程不会因为Looper.loop()方法造成阻塞</a></li><li><a href="https://www.jianshu.com/p/1c79fb5296b6" target="_blank" rel="noopener">要点提炼|开发艺术之消息机制</a></li><li><a href="https://blog.csdn.net/Mr_dsw/article/details/51074329" target="_blank" rel="noopener">Android消息机制浅析——面试总结</a></li><li><a href="https://www.jianshu.com/p/43d6cd7b06f1" target="_blank" rel="noopener">Handler的sendMessage和post的区别</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发艺术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路 | 奇妙的四大组件之旅</title>
      <link href="/2020/03/01/jin-jie-zhi-lu-qi-miao-de-si-da-zu-jian-zhi-lu/"/>
      <url>/2020/03/01/jin-jie-zhi-lu-qi-miao-de-si-da-zu-jian-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="进阶之路-奇妙的四大组件之旅"><a href="#进阶之路-奇妙的四大组件之旅" class="headerlink" title="进阶之路 | 奇妙的四大组件之旅"></a>进阶之路 | 奇妙的四大组件之旅</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的<code>Github</code>个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li><code>Activity</code>的工作过程</li><li><code>Service</code>的工作过程</li></ul><blockquote><ul><li><code>Service</code>的启动过程</li><li><code>Service</code>的绑定过程</li></ul></blockquote><ul><li><code>BroadcastReceiver</code>的工作过程</li></ul><blockquote><ul><li><code>BroadcastReceiver</code>的注册过程</li><li><code>BroadcastReceiver</code>的发送和接收过程</li></ul></blockquote><ul><li><code>ContentProvider</code>的工作过程</li></ul><h2 id="一-为什么要学习四大组件"><a href="#一-为什么要学习四大组件" class="headerlink" title="一.为什么要学习四大组件?"></a>一.为什么要学习四大组件?</h2><p>何为“四大”：</p><ul><li><code>Activity</code></li><li><code>Service</code></li><li><code>BroadcastReceiver</code></li><li><code>ContentProvider</code></li></ul><p>谈到四大组件，相信在座各位都再熟悉不过了，光闻其名，未见其声，“四大”二字一出，足见其在安卓系统中的地位，可谓是安卓界的<code>F4</code>。</p><p>其地位之崇高，在某种程度上也可以体现他的重要性，所以说，光会使用四大组件还是不能体现我们对他的重视（ai hu）的，我们还要分析其工作过程，能够更好地理解系统内部的运行机制，从而加深对<code>Android</code>体系结构的认识；同时，四大组件还是面试必问的知识点之一。</p><p>综上，掌握好四大组件相关的知识，对于一个<code>Android</code>开发者来说是非常重要的！</p><p>以下内容紧张赤鸡，请系好保险带，我们要开车（hu you）了。<strong>— No picture,say a J8!</strong></p><p><img src="https://s2.ax1x.com/2020/03/01/3c5KAA.gif" alt="老司机开车"></p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><h4 id="2-1-1-Activity"><a href="#2-1-1-Activity" class="headerlink" title="2.1.1 Activity"></a>2.1.1 <code>Activity</code></h4><ul><li><p>类型：<strong>展示型</strong>组件</p></li><li><p>作用：展示一个界面并和用户交互</p></li><li><p>使用：</p><p>A.需要在<code>AndroidManifest</code>中注册</p><p>B.需要借助<code>Intent</code>启动，两种方式：</p></li></ul><blockquote><ul><li><p>显示<code>Intent</code>:</p><p><code>Intent intent=new Intent(xxx.this,xxx.class); startActivity(intent);</code></p></li><li><p>隐式<code>Intent</code>:</p><p><code>Intent intent=new Intent(); intent.setAction(xxx); intent.addCategory(xxx); startActivity(intent);</code></p></li></ul></blockquote><ul><li>四种启动模式：</li></ul><blockquote><ul><li><code>standard</code>：标准模式</li><li><code>singleTop</code>：栈顶复用模式</li><li><code>singleTask</code>：栈内复用模式</li><li><code>singleInstance</code>：单实例模式</li></ul><p>想了解<strong>启动模式</strong>的读者，可以看下笔者写的一篇文章：<a href="https://juejin.im/post/5e5209cef265da572549c074" target="_blank" rel="noopener">进阶之路 | 奇妙的Activity之旅</a>中的<code>2.2</code>部分</p></blockquote><ul><li>通过<code>finish()</code>结束一个<code>Activity</code></li></ul><h4 id="2-1-2-Service"><a href="#2-1-2-Service" class="headerlink" title="2.1.2 Service"></a>2.1.2 <code>Service</code></h4><ul><li><p>类型：<strong>计算型</strong>组件</p></li><li><p>作用：在后台执行一系列计算任务，耗时的后台计算建议在单独的线程中执行</p></li><li><p>使用：</p><p>A.需要在<code>AndroidManifest</code>中注册</p><p>B.需要借助<code>Intent</code>启动：<code>Intent intent = new Intent(xxx.this, xxx.class); startService(intent);</code></p><p>C.两种运行状态：</p></li></ul><blockquote><ul><li>启动状态：通过<code>startService()</code></li><li>绑定状态：通过<code>bindService()</code></li></ul></blockquote><p>​        D.停止方式：<code>unBindService()；stopService()；</code></p><h4 id="2-1-3-BroadcastReceiver"><a href="#2-1-3-BroadcastReceiver" class="headerlink" title="2.1.3 BroadcastReceiver"></a>2.1.3 <code>BroadcastReceiver</code></h4><ul><li>类型：<strong>消息型</strong>组件</li><li>作用：在不同的组件乃至不同的应用之间传递消息</li><li>使用：</li></ul><blockquote><ul><li><p>两种注册方式：</p><p>A.<strong>动态</strong>注册：通过<code>Context.registerReceiver()</code>&amp; <code>Context.unRegisterReceiver()</code>，必须要<strong>启动应用</strong>才能注册并接收广播。</p><p>B.<strong>静态</strong>注册：在<code>AndroidManifest</code>文件中注册，<strong>不需要启动应用</strong>即可接收广播。</p></li><li><p>需要借助<code>Intent</code>发送广播：<code>Intent intent = new Intent(&quot;xxx&quot;); sendBroadcast(intent);</code></p></li><li><p>四种广播类型：</p><p>A.普通广播</p><p>B.有序广播</p><p>C.本地广播</p><p>D.粘性广播</p></li></ul></blockquote><ul><li><strong>没有停止</strong>概念</li></ul><h4 id="2-1-4-ContentProvider"><a href="#2-1-4-ContentProvider" class="headerlink" title="2.1.4 ContentProvider"></a>2.1.4 <code>ContentProvider</code></h4><ul><li>类型：<strong>共享型</strong>组件</li><li>作用：向其他组件乃至其他应用共享数据(安卓<code>IPC</code>的一种方式)</li><li>使用：</li></ul><blockquote><ul><li><p>需要在<code>AndroidManifest</code>中注册</p></li><li><p><strong>无需</strong>借助<code>Intent</code>启动</p></li><li><p>四种操作：注意需要处理好<strong>线程同步</strong>（因为这些操作运行在<code>Binder</code>线程）</p><p>A.<code>insert()</code>：添加数据</p><p>B.<code>update()</code>：更新数据</p><p>C.<code>delete()</code>：删除数据</p><p>D.<code>query()</code>：查询数据</p></li></ul></blockquote><ul><li>无需手动停止</li></ul><blockquote><p>想详细了解<code>IPC</code>机制的读者，可以看下笔者写的一篇文章：<a href="https://juejin.im/post/5e520b5651882549194967c0#heading-23" target="_blank" rel="noopener">进阶之路 | 奇妙的 IPC 之旅</a></p></blockquote><h3 id="2-2-工作过程"><a href="#2-2-工作过程" class="headerlink" title="2.2 工作过程"></a>2.2 工作过程</h3><blockquote><p>差不多该进入今天的主题了，为了逼格，为了高薪，大伙往前冲！</p></blockquote><p><img src="https://s2.ax1x.com/2020/03/01/3cjckT.gif" alt></p><h4 id="2-2-1-Activity"><a href="#2-2-1-Activity" class="headerlink" title="2.2.1 Activity"></a>2.2.1 <code>Activity</code></h4><p><code>Activity</code>启动过程流程图：</p><blockquote><p>一眼看上去有点晕晕的，墙裂建议配合源码一起服用，效果极佳，笔者推荐一篇文章：<a href="https://juejin.im/post/596c0d5ff265da6c2211b748#heading-0" target="_blank" rel="noopener">图解Activity启动流程，进阶高级</a></p></blockquote><p><img src="https://s2.ax1x.com/2020/03/01/3cxlZt.jpg" alt="`Activity`启动过程"></p><p><strong>Q1：结论：</strong></p><ul><li><code>ActivityManagerService</code>、<code>ApplicationThread</code>都是<code>Binder</code></li><li><code>Application</code>的创建也是通过<code>Instrumentation</code>来完成的，这个过程和<code>Activity</code>对象一样，都是通过类加载器来实现的</li><li><code>Activity</code>的启动过程最终回到<code>ApplicationThread</code>中，通过<code>ApplicationThread.scheduleLaunchActivity()</code> 将启动<code>Activity</code>的消息发送并交由<code>Handler H</code>处理。</li><li><code>Handler H</code>对消息的处理会调用<code>handleLaunchActivity()</code>-&gt;<code>performLaunchActivity()</code>得以最终完成Activity的创建和启动。</li></ul><p><strong>Q2：重点类</strong>：</p><ul><li><code>Instrumentation</code>：</li></ul><blockquote><p><code>instrumentation</code>是<code>Android</code>系统里面的一套控制方法或者”钩子“。 这些钩子可以在正常的生命周期（正常是由操作系统控制的)之外控制<code>Android</code>控件的运行；它们同时可以控制<code>Android</code>如何加载应用程序。</p></blockquote><ul><li><code>ActivityManagerService「AMS」</code>：</li></ul><blockquote><p><code>AMS</code>是系统的引导服务，应用进程的启动、切换和调度、四大组件的启动和管理都需要<code>AMS</code>的支持。</p></blockquote><ul><li><code>ActivityStackSupervisor</code>:</li></ul><blockquote><ul><li><p><code>ActivityStackSupervisor</code>在<code>AMS</code>中的构造方法中被创建。</p></li><li><p><code>AMS</code> 通过操作<code>ActivityStackSupervisor</code>来管理<code>Activity</code></p></li></ul></blockquote><ul><li><code>ActivityStack</code>:</li></ul><blockquote><ul><li><code>ActivityStack</code>从名称来看是跟栈相关的类，其实它是一个<strong>管理类</strong>，用来管理系统所有<code>Activity</code>的各种状态</li><li>它由<code>ActivityStackSupervisor</code>来进行管理的</li></ul></blockquote><ul><li><code>ApplicationThread</code>:</li></ul><blockquote><ul><li><code>ActivityThread</code>的私有内部类，也是一个<code>Binder</code>对象</li><li>在此处它是作为<code>IApplicationThread</code>对象的<code>Server</code>端，等待<code>Client</code>端的请求然后进行处理，最大的<code>Client</code>就是<code>AMS</code></li></ul></blockquote><h4 id="2-2-2-Service"><a href="#2-2-2-Service" class="headerlink" title="2.2.2 Service"></a>2.2.2 <code>Service</code></h4><blockquote><p>源码流程分析：<a href="https://blog.csdn.net/jly0612/article/details/51249960" target="_blank" rel="noopener">Service的工作过程</a></p></blockquote><h5 id="1-启动过程："><a href="#1-启动过程：" class="headerlink" title="1.启动过程："></a>1.启动过程：</h5><p><img src="https://s2.ax1x.com/2020/03/01/3gCaVA.jpg" alt="Service启动过程"></p><h5 id="2-绑定过程："><a href="#2-绑定过程：" class="headerlink" title="2.绑定过程："></a>2.绑定过程：</h5><p><img src="https://s2.ax1x.com/2020/03/01/3gCr28.jpg" alt="Service绑定过程"></p><p><strong>结论：</strong></p><ul><li><code>ContextImpl</code>是<code>Context</code>的具体实现，通过<code>Activity.attach()</code>和<code>Activity</code>建立关联。<code>Activity.attach()</code>中还会完成<code>Window</code>的创建并和<code>Activity&amp;Window</code>的关联，由此事件可传递给<code>Window</code>。</li><li><code>ActivityServices</code>是一个辅助<code>ActivityManagerService</code>(<strong>AMS</strong>)进行<code>Service</code>管理的类，包括<code>Service</code>的启动、绑定和停止。</li><li>和<code>Activity</code>类似的，<code>Service</code>的启动/绑定过程最终回到<code>ApplicationThread</code>中，通过<code>ActivityThread.handleCreateService()</code>/<code>ActivityThread.handleBindService</code>完成Service的启动/绑定，注意绑定Service的后续还必须告知客户端已经成功连接<code>Service</code>的这一流程，由<code>ActivityManagerService.publishService()</code>去完成。</li></ul><h4 id="2-2-3-BroadcastReceiver"><a href="#2-2-3-BroadcastReceiver" class="headerlink" title="2.2.3 BroadcastReceiver"></a>2.2.3 <code>BroadcastReceiver</code></h4><blockquote><p>源码流程分析：<a href="https://www.open-open.com/lib/view/open1475654927659.html" target="_blank" rel="noopener">BroadcastReceiver 的工作过程分析</a></p></blockquote><h5 id="1-注册"><a href="#1-注册" class="headerlink" title="1.注册"></a>1.注册</h5><blockquote><p>四大组件的<strong>静态注册</strong>都是在应用安装时由<code>PackageManagerService（PMS）</code>解析注册，当<strong>动态注册</strong><code>BroadcastReceiver</code>时流程为：</p></blockquote><p><img src="https://s2.ax1x.com/2020/03/01/3gPvwj.jpg" alt="BroadcastReceiver动态注册"></p><h5 id="2-发送和接收"><a href="#2-发送和接收" class="headerlink" title="2.发送和接收"></a>2.发送和接收</h5><p><img src="https://s2.ax1x.com/2020/03/01/3giufx.jpg" alt="发送和接收流程"></p><p>结论：</p><ul><li>动态注册广播最终会跨进程交给<code>AMS</code>，并把远程<code>Receiver</code>( 实际上传的是<code>IIntentReceiver</code>，是个<code>Binder</code> 对象)和远程<code>IntentFilter</code>保存起来，完成注册任务</li><li>发送广播时，系统为intent添加了两个标记位：</li></ul><blockquote><ul><li><code>FLAG_EXCLUDE_STOPPED_PACKAGES</code> ：广播不会发送给已经停止的<code>APP</code>（系统为所有广播<strong>默认添加</strong>该标记）</li><li><code>FLAG_INCLUDE_STOPPED_PACKAGES</code> ：广播也会发送到已经停止的<code>APP</code>（两个标记共存时，<strong>以该标记为准</strong>）</li></ul></blockquote><ul><li>最终在<code>ReceiverDispatcher .performReceive ()</code>里回调了<code>Receiver</code> 的<code>onReceive()</code>，使得广播得以接收并处理</li></ul><p>Q2:实现原理：</p><blockquote><p>从实现原理看上，广播使用了观察者模式，基于消息的发布/订阅事件模型</p><p>具体实现流程要点粗略概括如下：</p></blockquote><ul><li>广播接收者<code>BroadcastReceiver</code>通过<code>Binder</code>机制向<code>AMS</code>进行注册</li><li>广播发送者通过<code>Binder</code>机制向<code>AMS</code>发送广播</li><li><code>AMS</code>查找符合相应条件（<code>IntentFilter</code>/<code>Permission</code>等）的<code>BroadcastReceiver</code>，将广播发送到<code>BroadcastReceiver</code>（一般情况下是<code>Activity</code>）相应的消息循环队列中</li><li>消息循环执行拿到此广播，回调<code>BroadcastReceiver</code>中的<code>onReceive()</code>方法</li></ul><h4 id="2-2-4-ContentProvider"><a href="#2-2-4-ContentProvider" class="headerlink" title="2.2.4 ContentProvider"></a>2.2.4 <code>ContentProvider</code></h4><h5 id="1-启动流程总概"><a href="#1-启动流程总概" class="headerlink" title="1.启动流程总概"></a>1.启动流程总概</h5><p><img src="https://s2.ax1x.com/2020/03/01/3gAPpt.png" alt="ContentProvider启动流程总概"></p><ul><li>启动的入口为<code>ActivityThread.main()</code>：创建<code>ActivityThread</code>实例并创建主线程<strong>消息队列</strong></li><li><code>ActivityThread.attach()</code>：远程调用<code>AMS.attachApplication()</code>并提供<code>ApplicationThread</code>用于和<code>AMS</code>的通信</li><li><code>AMS.attachApplication()</code>：通过<code>ActivityThread.bindApplication()</code>方法和<code>Handler H</code>来调回<code>ActivityThread.handleBindApplication()</code></li><li><code>ActivityThread.handleBindApplication()</code>：先创建<code>Application</code>、再加载<code>ContentProvider</code>、最后回调<code>Application.onCreate()</code></li></ul><h5 id="2-Query过程流程"><a href="#2-Query过程流程" class="headerlink" title="2.Query过程流程"></a>2.<code>Query</code>过程流程</h5><blockquote><p><code>insert()</code>、<code>delete()</code>和<code>update()</code>的实现原理和<code>query()</code>类似，限于篇幅，这里不展开,感兴趣的读者可以主动去探究</p><p>源码流程分析：<a href="https://blog.csdn.net/EthanCo/article/details/55224723" target="_blank" rel="noopener">ContentProvider的工作过程</a></p></blockquote><p><img src="https://s2.ax1x.com/2020/03/01/3gYU1K.jpg" alt="3gYU1K.jpg"></p><p><strong>结论：</strong></p><ul><li><p><code>ContentProvider</code>的<code>multiprocess</code>属性：<code>ContentProvider</code>是否是单例，一般用单例</p></li><li><p>访问<code>ContentProvider</code>需要<code>ContentResolver</code>，其真正实现类是<code>ApplicationContentResolver</code>。当<code>ContentProvider</code>所在进程未启动时，第一次访问它会触发<code>ContentProvider</code>的创建以及进程启动</p></li><li><p>当<code>ContentProvider</code>所在的进程启动时，会同时被启动并被发布到<code>AMS</code>中</p></li></ul><blockquote><p>注意：<code>ContentProvider.onCreate()</code>要<strong>先</strong>于<code>Application.onCreate()</code>执行</p></blockquote><ul><li>同样的，最终通过<code>ActivityThread.handleBindApplication()</code>完成<code>ContentProvider</code>的创建。</li></ul><h2 id="三-课堂小测试"><a href="#三-课堂小测试" class="headerlink" title="三.课堂小测试"></a>三.课堂小测试</h2><blockquote><p>恭喜你！已经看完了前面的文章，相信你对<code>四大组件</code>已经有一定深度的了解，下面，进行一下课堂小测试，验证一下自己的学习成果吧！</p></blockquote><p>Q1：<strong>为什么要使用<code>ContentProvider</code>?它和<code>SQL</code>在实现上有什么区别?</strong></p><ul><li><code>ContentProvider</code> <strong>屏蔽了</strong>数据<strong>存储的细节</strong>,内部实现<strong>透明化</strong>,用户<strong>只需关心<code>URI</code>即可</strong>(是否匹配)</li><li><code>ContentProvider</code>能实现<strong>不同<code>APP</code>的数据共享</strong>,<code>SQL</code><strong>只能是自己</strong>程序才能访问</li><li><code>ContentProvider</code>还能<strong>增删本地的文件</strong>,<code>XML</code>等信息</li></ul><p>Q2：<strong><code>Android</code>引入四大组件的用意</strong></p><blockquote><p>这个问题在笔者刚开始学习<code>Android</code>的时候就一直困惑，直到看了一篇<a href="https://www.facebook.com/people/Dianne-Hackborn/100012452853318" target="_blank" rel="noopener">Google Android 团队：Dianne Hackborn</a>发表在<code>Google+</code>上的一篇<code>post</code>的<a href="https://www.jianshu.com/p/07b87084337f" target="_blank" rel="noopener">译文</a></p></blockquote><p>见解：<code>Google Android Framework</code>团队决定，不要让一个明确的<code>Main</code>方法作为<code>APP</code>的入口，因为需要让系统对<code>APP</code>怎样运行有更多的控制权，在该系统中，用户永远不需要考虑开启和停止一个<code>APP</code>，而把这些事交给系统去管理。所以他们设计了四大组件以作为<code>APP</code>功能的<strong>载体和入口</strong>：</p><ul><li><code>Activity</code> <blockquote><p>一个<code>APP</code>与用户交互的入口</p></blockquote></li><li><code>BroadcastReceiver</code></li></ul><blockquote><ul><li>一种让系统在正常的用户流（<code>user flow</code>）之外，传递事件给<code>APP</code>的机制。</li><li>最重要的是，因为这是另一个被精心定义的<code>APP</code>的入口，即使<code>APP</code>当前并不在运行，系统也可以将<code>Broadcasts</code>传递给<code>APP</code>。</li></ul></blockquote><ul><li><code>Service</code></li></ul><blockquote><p>当<code>APP</code>由于各种各样的原因需要在后台运行时，<code>Service</code>就是一个这样的入口</p></blockquote><ul><li><code>ContentProvider</code></li></ul><blockquote><ul><li>人们通常会将它当作对数据库的抽象，因为有许多的<code>API</code>和支持库就是这样使用<code>ContentProvider</code>的</li><li>但是从系统设计的角度，这并不是<code>ContentProvider</code>的初衷。对于系统来说，<code>ContentProvider</code>实际上是一个入口，用于获取一个<code>APP</code>内部的公开的被命名的数据项（<code>data items</code>），每个数据项都被一个<code>URI scheme</code>所标识。</li></ul></blockquote><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《Android 开发艺术探索》</li><li><a href="https://juejin.im/post/5e5209cef265da572549c074" target="_blank" rel="noopener">进阶之路 | 奇妙的Activity之旅</a></li><li><a href="https://juejin.im/post/5e520b5651882549194967c0#heading-23" target="_blank" rel="noopener">进阶之路 | 奇妙的 IPC 之旅</a></li><li><a href="https://juejin.im/post/596c0d5ff265da6c2211b748#heading-0" target="_blank" rel="noopener">图解Activity启动流程，进阶高级</a></li><li><a href="https://blog.csdn.net/jly0612/article/details/51249960" target="_blank" rel="noopener">Service的工作过程</a></li><li><a href="https://www.open-open.com/lib/view/open1475654927659.html" target="_blank" rel="noopener">BroadcastReceiver 的工作过程分析</a></li><li><a href="https://blog.csdn.net/EthanCo/article/details/55224723" target="_blank" rel="noopener">ContentProvider的工作过程</a></li><li><a href="https://www.jianshu.com/p/07b87084337f" target="_blank" rel="noopener">关于Android四大组件最权威最深刻最准确的解读</a></li><li><a href="https://blog.csdn.net/amurocrash/article/details/48858353" target="_blank" rel="noopener">Android开发艺术探索读书笔记（三）</a></li><li><a href="https://www.jianshu.com/p/37f366064b98" target="_blank" rel="noopener">要点提炼|开发艺术之四大组件</a></li><li><a href="https://juejin.im/post/5db12d926fb9a0205e766cc2#heading-16" target="_blank" rel="noopener">「Android」四大组件，你真的都掌握了？</a></li><li><a href="https://blog.csdn.net/nzfxx/article/details/51842482" target="_blank" rel="noopener">“ContentProvider和数据库”的区别和联系专题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发艺术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路 | 奇妙的Window之旅</title>
      <link href="/2020/02/26/jin-jie-zhi-lu-qi-miao-de-window-zhi-lu/"/>
      <url>/2020/02/26/jin-jie-zhi-lu-qi-miao-de-window-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="进阶之路-奇妙的Window之旅"><a href="#进阶之路-奇妙的Window之旅" class="headerlink" title="进阶之路 | 奇妙的Window之旅"></a>进阶之路 | 奇妙的Window之旅</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p><p>本文已授权公众号<a href="https://mp.weixin.qq.com/s/gl5qaHrbXKrvz257QJmQnw" target="_blank" rel="noopener">郭霖</a>，<a href="https://mp.weixin.qq.com/s/ToXyFsImBYzzmHU9bm7rLg" target="_blank" rel="noopener">秦子帅</a></p></blockquote><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li><p><code>Window</code>&amp;<code>WindowManagerService</code></p></li><li><p><code>Window</code>&amp;<code>WindowManager</code></p></li><li><p><code>Window</code>&amp;<code>PhoneWindow</code></p></li><li><p><code>Window</code>&amp;<code>Activity</code></p></li><li><p><code>Window</code>&amp;<code>View</code></p></li><li><p><code>Window</code>内部机制</p></li><li><p><code>Window</code>创建过程</p></li></ul><h2 id="一-为什么要学习Window"><a href="#一-为什么要学习Window" class="headerlink" title="一.为什么要学习Window?"></a>一.为什么要学习<code>Window</code>?</h2><p><code>Android</code>手机上所有的视图都是通过<code>Window</code>来呈现的，像常用的<code>Activity</code>，<code>Dialog</code>，<code>PopupWindow</code>，<code>Toast</code>，他们的视图都是附加在<code>Window</code>上的，所以可以这么说 ——「<strong>Window是View的直接管理者</strong>」。</p><p><code>Window</code>是一个顶层窗口查看和行为的一个<strong>抽象</strong>基类，这个类的实例作为一个顶级<code>View</code>添加到<code>Window Manager</code>。它提供了一套标准的UI方法，比如添加背景，标题等等。</p><p><code>Window</code>本身很抽象，深入了解<code>Window</code>，不仅有助于你了解<code>Android</code>系统中各个层级之间的关系，还可以对<code>Toast</code>的内部机制、自定义等等方面会有更加深入的体会。</p><p><img src="https://cdn.jsdelivr.net/gh/LoveLifeEveryday/FigureBed@master/typora202003/06/183555-745024.png" alt="Window"></p><blockquote><p>注意:<code>StatusBar</code>也包含在<code>DecorView</code>之内</p></blockquote><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-Window关系解析"><a href="#2-1-Window关系解析" class="headerlink" title="2.1 Window关系解析"></a>2.1 <code>Window</code>关系解析</h3><blockquote><p>看到下面这张大图，是不是感觉有点乱乱的，别急，别急，心急吃不了热豆腐，笔者将向您娓娓道来</p></blockquote><p><img src="https://s2.ax1x.com/2020/02/26/3UAsTe.png" alt="Window整体关系图"></p><h4 id="2-1-1-Window-amp-PhoneWindow"><a href="#2-1-1-Window-amp-PhoneWindow" class="headerlink" title="2.1.1 Window&amp;PhoneWindow"></a>2.1.1 <code>Window</code>&amp;<code>PhoneWindow</code></h4><blockquote><p>笔者之前在<a href="https://juejin.im/post/5e520bd1518825496e784bde#heading-20" target="_blank" rel="noopener">进阶之路 | 奇妙的View之旅</a>中，提及<code>setContentView</code>的时候简单说到了<code>Window</code>和<code>PhoneWindow</code>，相信看过的读者已经对此有一个简单的印象。</p></blockquote><p><code>Window</code>是一个抽象类，它定义了顶级窗体样式和行为。其<strong>唯一的实现类</strong>是<code>PhoneWindow</code>。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/bda68cabafb44473.png" alt="Activity的构成"></p><h4 id="2-1-2-Window-amp-View"><a href="#2-1-2-Window-amp-View" class="headerlink" title="2.1.2 Window&amp;View"></a>2.1.2 <code>Window</code>&amp;<code>View</code></h4><blockquote><p>笔者之前在<a href="https://juejin.im/post/5e520bd1518825496e784bde#heading-20" target="_blank" rel="noopener">进阶之路 | 奇妙的View之旅</a>中，提及<code>View工作流程</code>的时候简单说到了<code>ViewRootImpl</code>，相信看过的读者已经对此有一个简单的印象。</p></blockquote><p>每个<code>Window</code>都对应一个<code>View</code>和一个<code>ViewRootImpl</code>，<code>Window</code>和<code>View</code>通过<code>ViewRootImpl</code>来建立联系。<code>Window</code>并<strong>不可见</strong>，它实际以<code>View</code>的形式存在，它是<code>View</code>的直接<strong>管理者</strong>。</p><h4 id="2-1-3-Window-amp-WindowManagerService"><a href="#2-1-3-Window-amp-WindowManagerService" class="headerlink" title="2.1.3 Window&amp;WindowManagerService"></a>2.1.3 <code>Window</code>&amp;<code>WindowManagerService</code></h4><blockquote><p>想了解<code>IPC</code>的读者，可以看下笔者写的一篇博客： <a href="https://juejin.im/post/5e520b5651882549194967c0" target="_blank" rel="noopener">进阶之路 | 奇妙的 IPC 之旅</a></p></blockquote><p><code>Window</code>的<strong>具体实现</strong>位于<code>WindowManagerService</code>中。<code>WindowManager</code>和<code>WindowManagerService</code>的交互是一个<code>IPC</code>（跨进程通信）过程。</p><h4 id="2-1-4-Window-amp-WindowManager"><a href="#2-1-4-Window-amp-WindowManager" class="headerlink" title="2.1.4 Window&amp;WindowManager"></a>2.1.4 <code>Window</code>&amp;<code>WindowManager</code></h4><p>实际使用中无法访问<code>Window</code>，对<code>Window</code>的访问必须通过<code>WindowManager</code>（换句话说，<code>WindowManager</code>是外界访问<code>Window</code>的入口），对<code>Window</code>的操作通过它完成。</p><ul><li>例如：通过<code>WindowManager</code>添加<code>Window</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将一个Button添加到屏幕为（100,300）的位置</span>mFloatingButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mFloatingButton<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"test button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mLayoutParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">(</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">,</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>PixelFormat<span class="token punctuation">.</span>TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三个参数代表flags，第四个参数代表type</span>mLayoutParams<span class="token punctuation">.</span>flags <span class="token operator">=</span> LayoutParams<span class="token punctuation">.</span>FLAG_NOT_TOUCH_MODAL        <span class="token operator">|</span> LayoutParams<span class="token punctuation">.</span>FLAG_NOT_FOCUSABLE        <span class="token operator">|</span> LayoutParams<span class="token punctuation">.</span>FLAG_SHOW_WHEN_LOCKED<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置flags</span>mLayoutParams<span class="token punctuation">.</span>type <span class="token operator">=</span> LayoutParams<span class="token punctuation">.</span>TYPE_SYSTEM_ERROR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置type</span>mLayoutParams<span class="token punctuation">.</span>gravity <span class="token operator">=</span> Gravity<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> Gravity<span class="token punctuation">.</span>TOP<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置gravity</span>mLayoutParams<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相对于gravity</span>mLayoutParams<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相对于gravity</span>mFloatingButton<span class="token punctuation">.</span><span class="token function">setOnTouchListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mWindowManager<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>mFloatingButton<span class="token punctuation">,</span> mLayoutParams<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>下面依次介绍<code>WindowManager</code>的三个重要参数：</p><ul><li><code>flags</code>：表示<code>Window</code>的属性。主要的可选值含义：</li></ul><blockquote><ul><li><code>FLAG_NOT_FOCUSABLE</code>：表示<code>Window</code><strong>不需要获取焦点</strong>，也不需要接收各种输入事件，此标记会同时启动<code>FLAG_NOT_TOUCH_MODEL</code>，最终事件会传递给下层的具有焦点的<code>Window</code></li><li><code>FLAG_NOT_TOUCH_MODAL</code>：表示系统会将当前<code>Window</code>区域<strong>以外</strong>的单击事件<strong>传递给底层的<code>Window</code></strong>，而区域<strong>以内</strong>的单击事件则<strong>自己处理</strong>。一般都<strong>需要开启</strong>此标记，否则其他<code>Window</code>将无法收到单击事件</li><li><code>FLAG_SHOW_WHEN_LOCKED</code>：表示<code>Window</code>可显示在锁屏界面</li></ul></blockquote><ul><li><p><code>type</code>：表示<code>Window</code>的类型。</p><p><code>Window</code>有三种类型：</p><p>A.应用类<code>Window</code>:对应一个<code>Activity</code>或者<code>Dialog</code></p><p>B.<strong>子<code>Window</code></strong>：不能单独存在，需附属特定的父<code>Window</code>。如<code>PopupWindow</code>,<code>ContextMenu</code>,<code>OptionMenu</code></p><blockquote><p>注意：<code>ContextMenu</code>,<code>OptionMenu</code>是<code>Dialog</code>的子类，它们修改了自身的窗口类型</p></blockquote><p>C.<strong>系统<code>Window</code></strong>： 需声明权限才能创建。如<code>Toast</code></p><ul><li><p>系统权限有很多值，一般选用：<code>TYPE_SYSTEM_OVERLAY</code>/<code>TYPE_SYSTEM_ERROR</code></p></li><li><p>记得声明权限：<code>&lt; uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;</code>,<code>Android</code>6.0以下直接声明权限即可，<code>Android6.0</code>以上还需要用户打开软件设置页手动打开，才能授权。</p></li></ul></li></ul><blockquote><ul><li><code>Window</code>是分层的，见下表</li><li>层级大的会<strong>覆盖</strong>在层级小的<code>Window</code>上面。</li><li>对应<code>WindowManager.LayoutParams</code>的<code>type</code>参数。</li></ul></blockquote><table><thead><tr><th><code>Window</code></th><th>层级</th></tr></thead><tbody><tr><td>应用<code>Window</code></td><td>1-99</td></tr><tr><td>子<code>Window</code></td><td>1000-1999</td></tr><tr><td>系统<code>Window</code></td><td>2000-2999</td></tr></tbody></table><ul><li><code>gravity</code>：表示<code>Window</code>的位置。</li></ul><blockquote><ul><li>默认是屏幕中间</li><li><strong>x</strong>、<strong>y</strong>值相对于<code>gravity</code></li></ul></blockquote><h3 id="2-2-Window的内部机制"><a href="#2-2-Window的内部机制" class="headerlink" title="2.2 Window的内部机制"></a>2.2 <code>Window</code>的内部机制</h3><ul><li><p><code>WindowManager</code>对<code>Window</code>主要有三大操作：<strong>添加、更新和删除</strong>。</p><p>这三个方法主要是定义在<code>ViewManager</code>接口中：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ViewManager</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加过程</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateViewLayout</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新过程</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeView</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除过程</span><span class="token punctuation">}</span></code></pre><ul><li><code>WindowManager</code>也是一个接口，它继承了<code>ViewManager</code>接口：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WindowManager</span> <span class="token keyword">extends</span> <span class="token class-name">ViewManager</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li><code>WindowManager</code>的具体实现类是<code>WindowManagerImpl</code>：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">WindowManagerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">WindowManager</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">)</span><span class="token punctuation">{</span>            mGlobal<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">,</span> mDisplay<span class="token punctuation">,</span> mParentWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateViewLayout</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">)</span><span class="token punctuation">{</span>            mGlobal<span class="token punctuation">.</span><span class="token function">updateViewLayout</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeView</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>            mGlobal<span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>由以上代码可见，<code>WindowManagerImpl</code>并没有<strong>直接</strong>实现<code>Window</code>的三大操作，而是交给了<code>WindowManagerGlobal</code>。<code>WindowManagerGlobal</code>以<strong>单例模式</strong>向外提供自己的实例：</li></ul><blockquote><p><code>WindowManagerImpl</code>这种工作模式是典型的<a href="https://www.jianshu.com/p/5bb60f943827" target="_blank" rel="noopener">桥接模式</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> WindowManagerGlobal mGlobal <span class="token operator">=</span> WindowManagerGlobal<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一幅图说明这几个类的关系：</p><p><img src="https://s2.ax1x.com/2020/02/26/3Uf7VJ.png" alt="类的关系"></p><blockquote><p>因此，通过<code>WindowManagerGlobal</code>的<code>addView()</code>、<code>updateViewLayout()</code>、<code>removeView()</code>实现<code>WindowManager</code>对<code>Window</code>的添加、删除和修改。</p></blockquote><h4 id="2-2-1-Window的添加"><a href="#2-2-1-Window的添加" class="headerlink" title="2.2.1 Window的添加"></a>2.2.1 <code>Window</code>的添加</h4><p><img src="https://s2.ax1x.com/2020/02/26/3UownK.png" alt="Window添加流程"></p><h4 id="2-2-2-Window的删除"><a href="#2-2-2-Window的删除" class="headerlink" title="2.2.2 Window的删除"></a>2.2.2 <code>Window</code>的删除</h4><p><img src="https://s2.ax1x.com/2020/02/27/3d44Ag.png" alt="Window删除流程"></p><h4 id="2-2-3-Window的更新"><a href="#2-2-3-Window的更新" class="headerlink" title="2.2.3 Window的更新"></a>2.2.3 <code>Window</code>的更新</h4><p><img src="https://s2.ax1x.com/2020/02/27/3dISZ8.png" alt="Window的更新流程"></p><blockquote><p>不难发现，以上验证了之前的总结：</p><ul><li><code>Window</code>的三大操作最终都会通过一个<a href="https://juejin.im/post/5e520b5651882549194967c0" target="_blank" rel="noopener">IPC</a>过程移交给<code>WindowManagerService</code>。</li><li><code>Window</code>和<code>View</code>通过<code>ViewRootImpl</code>来联系，<code>ViewRootImpl</code>可控制<code>View</code>的测量、布局和重绘。</li></ul></blockquote><p>限于篇幅，笔者这里暂未贴上源码，如果想了解的话，推荐一篇文章：<a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fhzw19920329%2Farticle%2Fdetails%2F52423771" target="_blank" rel="noopener">我眼中的Window创建/添加/删除/更新过程</a></p><h3 id="2-3-Window的创建过程"><a href="#2-3-Window的创建过程" class="headerlink" title="2.3 Window的创建过程"></a>2.3 <code>Window</code>的创建过程</h3><blockquote><p>由于<code>View</code>必须依附<code>Window</code>才能呈现出来，因此有<code>View</code>的地方必有<code>Window</code>。在<code>Android</code>中可以提供<code>View</code>的地方有<code>Activity</code>、<code>Dialog</code>和<code>Toast</code>，<code>PopupWindow</code>,<code>菜单</code>，下面分别来看<code>Activity</code>、<code>Dialog</code>和<code>Toast</code>三种<code>Window</code>的大致创建过程</p></blockquote><h4 id="2-3-1-Activity的Window创建过程"><a href="#2-3-1-Activity的Window创建过程" class="headerlink" title="2.3.1 Activity的Window创建过程"></a>2.3.1 <code>Activity</code>的<code>Window</code>创建过程</h4><blockquote><p>想详细了解<code>Activity</code>的启动流程的，推荐一篇笔者写的文章：<a href="https://juejin.im/post/5e5c74c1e51d4526dc7be184#heading-10" target="_blank" rel="noopener">进阶之路 | 奇妙的四大组件之旅</a></p></blockquote><p><img src="https://s2.ax1x.com/2020/02/26/3UOigH.png" alt="Activity的Window创建过程"></p><blockquote><p>想了解<code>Activity</code>的<code>Window</code>创建过程的源码的读者，笔者推荐一篇文章： <a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2FLuoshengyang%2Farticle%2Fdetails%2F8223770" target="_blank" rel="noopener">Activity的Window创建过程分析</a></p></blockquote><h4 id="2-3-2-Dialog的Window创建过程"><a href="#2-3-2-Dialog的Window创建过程" class="headerlink" title="2.3.2 Dialog的Window创建过程"></a>2.3.2 <code>Dialog</code>的<code>Window</code>创建过程</h4><p><img src="https://s2.ax1x.com/2020/02/26/3UzjDH.png" alt="Dialog的Window创建过程"></p><ul><li><code>Dialog.show()</code>：完成<code>DecorView</code>的显示</li><li><code>WindowManager.remoteViewImmediate()</code>方法：当<code>Dialog</code>被<code>dismiss</code>时移除<code>DecorView</code></li></ul><h4 id="2-3-3-Toast的Window创建过程"><a href="#2-3-3-Toast的Window创建过程" class="headerlink" title="2.3.3 Toast的Window创建过程"></a>2.3.3 <code>Toast</code>的<code>Window</code>创建过程</h4><p>Q1：<code>Toast</code>的内部的视图由两种方式指定：</p><ul><li>系统默认的样式</li><li>通过<code>setView()</code>指定一个自定义<code>View</code></li></ul><p>Q2：<code>Toast</code>具有定时取消功能，故系统采用<code>Handler</code>做定时处理</p><p>Q3：在<code>Toast</code>内部有两类<a href="https://juejin.im/post/5e520b5651882549194967c0" target="_blank" rel="noopener">IPC</a>过程：</p><ul><li><code>Toast</code>访问<code>NotificationManagerService</code>(<code>NotificationManagerService</code>运行在系统的进程)；</li><li><code>NotificationManagerService</code>回调<code>Toast</code>里的<code>TN</code>接口（运行在<code>Binder</code>线程池）。</li></ul><p>Q4：<code>Toast</code>提供方法<code>show()</code>和<code>cancel()</code>分别用于显示和隐藏<code>Toast</code>。</p><ul><li><code>Toast</code>的显示和隐藏都需要通过<code>NMS</code>来实现，由于<code>NMS</code>运行在<strong>系统进程</strong>中，故需通过<strong>远程调用</strong>的方式来进行显示和隐藏Toast。</li><li><code>NMS</code>处理<code>Toast</code>的显示和隐藏请求时会跨进程回调<code>TN</code>中的方法，但是由于<code>TN</code>运行在<strong><code>Binder</code>线程池</strong>中，故需通过<code>Handler</code>将其切换到当前线程（发送<code>Toast</code>请求的线程）。</li></ul><blockquote><ul><li><code>NMS</code>只是起到了<strong>管理</strong><code>Toast</code><strong>队列</strong>及其<strong>延时</strong>的效果</li><li><code>Toast</code> 的显示和隐藏实际是通过<code>TN</code>来实现的。</li></ul></blockquote><p><img src="https://s2.ax1x.com/2020/02/26/3anvqI.png" alt="Toast的Window创建流程"></p><blockquote><p>想了解<code>Toast</code>的<code>Window</code>创建过程的源码的读者，笔者推荐一篇文章：<a href="https://blog.csdn.net/feiduclear_up/article/details/49080587" target="_blank" rel="noopener">Android对话框Dialog，PopupWindow，Toast的实现机制</a></p></blockquote><h2 id="三-课堂小测试"><a href="#三-课堂小测试" class="headerlink" title="三.课堂小测试"></a>三.课堂小测试</h2><blockquote><p>恭喜你！已经看完了前面的文章，相信你对<code>Window</code>已经有一定深度的了解，下面，进行一下课堂小测试，验证一下自己的学习成果吧！</p></blockquote><p>Q1:<strong>一个应用中有多少个<code>Window</code></strong>?</p><p>答案：无限个。原因：任何一个<code>View</code>都是依附在<code>Window</code>上面，一个应用可以有无限个<code>View</code>，自然<code>Window</code>也是无限个。</p><p>Q2：<strong><code>Window</code>对象有存在的必要吗</strong>？</p><ul><li>疑惑点：<code>Window</code>能做的事情，<code>View</code>对象基本都能做：像触摸事件、管理各个子<code>View</code>等等。</li><li>可能有人会说：“<code>Window</code>是<code>View</code>的管理者。” </li><li>追问：我们知道，<code>WindowManager</code>是<code>Window</code>的管理者，那为什么不直接用<code>WindowManager</code>管理<code>View</code>呢？</li><li>答案：站在系统的角度上看，系统是“不知道”有<code>View</code>对象这个说法的！作为系统，我有自己的骄傲，不去管你<code>Window</code>如何搬砖、如何砌墙，只给你地皮。而这时，<code>Window</code>为了绘制出用户想要的组件（按钮、文字、输入框等等），系统又不给我！没事，那我自己定义，于是就定义了<code>View</code>机制，给每个<code>View</code>提供<code>Canvas</code>，让不同的<code>View</code>自己绘制具有自己特色的组件。同时，为了更好的管理<code>View</code>，通过定义<code>ViewGroup</code>，等等。</li></ul><p>Q3：<strong><code>Activity</code>有存在的必要吗？</strong></p><ul><li>疑惑点：<code>Window</code>已经是系统管理的窗口界面。那么为什么还需要<code>Activity</code>呢？我们把<code>Activity</code>所做的事情，全部封装到<code>Window</code>不就好了？悬浮窗口<code>Dialog</code>中不就是没有使用<code>Activity</code>来显示一个悬浮窗吗？</li><li>答案：<code>Android</code>中的应用中，里面对各个窗口的管理相当复杂（任务栈、状态等等）。但是如果让用户自己去管理这些<code>Window</code>，先不说工作量，光让用户自己去实现任务栈这点，就很难了。为了让大家能简单、快速的开发应用，<code>Android</code>让<code>Activity</code>帮我们管理好，我们只需简单的去重写几个回调函数，无需直接与<code>Window</code>对象接触。</li></ul><blockquote><p>任何事物都有规律，语言再难，也是人发明的，一样具有社会性，其实这几个的关系就像是国家的中央系统的官员分配一样，从古至今，一层对一层负责，这样各司其职，又相互一层层联系着，达到效率最大化，突然发现，古人的智慧还是很厉害的，你让皇帝（系统）去管辖所有的官员（<code>view</code>），岂不是要累死？所以才出现了中间这些官员（<code>window</code>）</p></blockquote><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《Android 开发艺术探索》</li><li><a href="https://www.jianshu.com/p/5bb60f943827" target="_blank" rel="noopener">桥接模式</a></li><li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fhzw19920329%2Farticle%2Fdetails%2F52423771" target="_blank" rel="noopener">我眼中的Window创建/添加/删除/更新过程</a></li><li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2FLuoshengyang%2Farticle%2Fdetails%2F8223770" target="_blank" rel="noopener">Activity的Window创建过程分析</a></li><li><a href="https://blog.csdn.net/feiduclear_up/article/details/49080587" target="_blank" rel="noopener">Android对话框Dialog，PopupWindow，Toast的实现机制</a></li><li><a href="https://www.jianshu.com/p/c9496c8bed4c" target="_blank" rel="noopener">学习笔记|AS入门（番外） 技能篇</a></li><li><a href="https://www.jianshu.com/p/ed03aed9a4db" target="_blank" rel="noopener">要点提炼|开发艺术之Window</a></li><li><a href="https://blog.csdn.net/qian520ao/article/details/78555397" target="_blank" rel="noopener">Android Window 机制探索</a></li><li><a href="https://blog.csdn.net/huachao1001/article/details/51866287" target="_blank" rel="noopener">理清Activity、View及Window之间关系</a></li><li><a href="https://blog.csdn.net/chenlove1/article/details/52047105" target="_blank" rel="noopener">android 6.0之后 android.permission.SYSTEM_ALERT_WINDOW使用方法变动</a></li><li><a href="https://segmentfault.com/q/1010000011842138" target="_blank" rel="noopener">一个app有多少个window？</a></li><li><a href="https://cloud.tencent.com/developer/article/1070984" target="_blank" rel="noopener">浅析 Android 的窗口</a></li><li><a href="https://www.jianshu.com/p/720c07154559" target="_blank" rel="noopener">DecorView 包含Status Bar么?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发艺术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路 | 奇妙的Animation之旅</title>
      <link href="/2020/02/24/jin-jie-zhi-lu-qi-miao-de-animation-zhi-lu/"/>
      <url>/2020/02/24/jin-jie-zhi-lu-qi-miao-de-animation-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="进阶之路-奇妙的Animation之旅"><a href="#进阶之路-奇妙的Animation之旅" class="headerlink" title="进阶之路 | 奇妙的Animation之旅"></a>进阶之路 | 奇妙的Animation之旅</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li>动画的种类</li><li>自定义View动画</li><li>View动画的特殊使用场景</li><li>属性动画</li><li>使用动画的注意事项</li></ul><h2 id="一-为什么要学习Animation？"><a href="#一-为什么要学习Animation？" class="headerlink" title="一.为什么要学习Animation？"></a>一.为什么要学习Animation？</h2><p>笔者在之前<a href="https://www.jianshu.com/p/2a37cd70d9fa" target="_blank" rel="noopener">进阶之路 | 奇妙的View之旅</a>中，提及<code>View滑动的七种方式</code>的时候简单说到<code>Animation</code>,想必看过的读者们已经对<code>Animation</code>有一个简单的印象。</p><p>动画，对于一个APP来说非常重要，现在市面上使用的用户比较多的APP，无一不是采用了各种丰富多彩的动画效果；在应用中善于使用动画，不仅让APP的体验更上一层楼，还能牢牢抓住用户的心！</p><p>而作为开发者的我们，一定要对动画有一定深度的了解，在日常的学习或者工作中多多尝试动画，以提高应用程序的美观度和易用性！</p><p>什么，你不信动画很重要….反手甩你一个对比视频：<a href="https://www.bilibili.com/video/av81143719/" target="_blank" rel="noopener">过渡动画有多重要？</a></p><p><img src="https://s2.ax1x.com/2020/02/18/3FopE6.png" alt="动画的分类"></p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-View动画"><a href="#2-1-View动画" class="headerlink" title="2.1 View动画"></a>2.1 View动画</h3><blockquote><p><code>View</code>动画（视图动画）分为两部分：</p><ul><li>补间动画</li><li>帧动画</li></ul></blockquote><h4 id="2-1-1-补间动画"><a href="#2-1-1-补间动画" class="headerlink" title="2.1.1 补间动画"></a>2.1.1 补间动画</h4><h5 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1 基础知识"></a>1 基础知识</h5><p>Q1：<strong>主要的变换效果</strong></p><table><thead><tr><th>名称</th><th>标签</th><th>子类</th><th>效果</th></tr></thead><tbody><tr><td>平移动画</td><td><code>translate</code></td><td><code>TranslateAnimation</code></td><td>移动View</td></tr><tr><td>缩放动画</td><td><code>scale</code></td><td><code>ScaleAnimation</code></td><td>放大或缩小View</td></tr><tr><td>旋转动画</td><td><code>rotate</code></td><td><code>RotateAnimation</code></td><td>旋转View</td></tr><tr><td>透明度动画</td><td><code>alpha</code></td><td><code>AlphaAnimation</code></td><td>改变View的透明度</td></tr></tbody></table><blockquote><p><strong>注意</strong>：View动画的View移动<strong>只是视觉效果</strong>，并不能真正的改变view的位置。</p></blockquote><p>Q2:<strong>动画的创建</strong></p><blockquote><p>对于View动画建议采用<code>XML</code>来定义,因为<code>XML</code>可读性更好</p></blockquote><p>创建方法一：<strong>通过<code>XML</code>定义</strong>：</p><ul><li>该<code>XML</code>文件创建在<code>res/anim/</code> 下</li><li>根节点<code>set</code>，子节点<code>translate</code>、<code>scale</code>、<code>rotate</code>、<code>alpha</code>，分别对应四种View动画：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shareInterpolator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>fillAfter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span>        <span class="token attr-name"><span class="token namespace">android:</span>fromXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromYDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toYDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scale</span>        <span class="token attr-name"><span class="token namespace">android:</span>fromXScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toXScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromYScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toYScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>pivotX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>pivotY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rotate</span>        <span class="token attr-name"><span class="token namespace">android:</span>fromDegrees</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toDegrees</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>pivotY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>pivotX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alpha</span>         <span class="token attr-name"><span class="token namespace">android:</span>fromAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span></code></pre><p>接下来分别解释各个节点下属性含义：</p><p>A.<code>set</code>:表示动画集合，对应<code>AnimationSet</code>类</p><ul><li><code>interpolator</code>:表示动画集合所采用的插值器，影响动画的速度。可以不指定，默认是<code>accelerate_decelerate_interpolate</code>(加速减速插值器)。下文<code>属性动画</code>会详细介绍插值器的相关知识。</li><li><code>shareInterpolator</code>:表示集合中的动画是否和<strong>集合</strong>共享一个插值器。如果集合不指定插值器, 那么子动画就需要单独制定所需的插值器或者使用默认值。</li><li><code>fillAfter</code>：表示动画结束时是否保持动画结束时的状态 </li></ul><p> B.<code>translate</code>：表示平移动画，对应<code>TranslateAnimation</code>类</p><ul><li><code>android:fromXDelta</code>：动画起始时X坐标上的位置。</li><li><code>android:toXDelta</code>：动画结束时X坐标上的位置。</li><li><code>android:fromYDelta</code>：动画起始时Y坐标上的位置。</li><li><code>android:toYDelta</code>：动画结束时Y坐标上的位置。</li></ul><blockquote><p><strong>注意</strong>：以上四个属性以及后面几个类似属性的取值可能是数值、百分数、百分数p，各自含义是：</p><ul><li><strong>50</strong>：以View左上角为原点沿坐标轴正方向偏移50px。</li><li><strong>50%</strong>：以View左上角为原点沿坐标轴正方向偏移<strong>View</strong>宽/高度的50%。</li><li><strong>50%p</strong>：以View左上角为原点沿坐标轴正方向偏移父（<strong>parent</strong>）控件宽/高度的50%。区别如图：</li></ul></blockquote><p> <img src="https://s2.ax1x.com/2020/02/23/31rw79.png" alt="各种偏移属性取值的区别"></p><p> C.<code>scale</code>：表示缩放动画，对应<code>ScaleAnimation</code>类</p><ul><li><code>fromXScale</code>：动画起始时X坐标上的伸缩尺寸<ul><li><code>toXScale</code>：动画结束时X坐标上的伸缩尺寸 </li></ul></li><li><code>fromYScale</code>：动画起始时Y坐标上的伸缩尺寸<ul><li><code>toYScale</code>：属性为动画结束时Y坐标上的伸缩尺寸</li></ul></li></ul><blockquote><p>以上四个属性值的值含义：</p><ul><li>值=0.0 ：表示收缩到没有</li></ul><ul><li>值＜1.0 ：表示收缩</li></ul><ul><li>值=1.0 ：表示无伸缩</li></ul><ul><li>值＞1.0 ：表示放大</li></ul></blockquote><ul><li><code>pivotX</code>：动画相对于物件的X坐标的开始位置</li><li><code>pivotY</code>：动画相对于物件的Y坐标的开始位置</li></ul><blockquote><p>以上两个属性值表示缩放的轴点：从0%-100%中取值。</p></blockquote><p>D.<code>rotate</code>：表示旋转动画，对应<code>RotateAnimation</code>类。</p><ul><li><code>fromDegrees</code>：动画起始时物件的角度 (0度指X轴正方向所在方向)</li><li><code>toDegrees</code>：动画结束时物件旋转的角度</li></ul><blockquote><p>以上两个属性共同确定旋转方向，原则是：当角度(to-from)为<strong>负</strong>数时表示<strong>逆时针</strong>旋转，反之。</p></blockquote><ul><li><code>pivotY</code>：动画旋转的轴点的X坐标</li><li><code>pivotX</code>：动画旋转的轴点的Y坐标</li></ul><p>E.<code>alpha</code>：表示透明度动画，对应<code>AlphaAnimation</code>类</p><ul><li><code>fromAlpha</code>：动画起始时透明度</li><li><code>toAlpha</code>：动画结束时透明度</li></ul><blockquote><p>以上两个属性值：从0-1中取值。注意：</p><ul><li>值=0.0 ：表示完全透明</li><li>值=1.0 ：表示完全不透明</li></ul></blockquote><p>以上四类补间动画除了各自的特有属性外，它们的共有属性有：</p><p><img src="https://s2.ax1x.com/2020/02/23/31gTOK.png" alt="共有属性"></p><p>在<code>XML</code>声明好之后，接下来只要在代码中<code>startAnimation(animation)</code>开始动画即可，代码如下：</p><pre class=" language-java"><code class="language-java">Animation animation <span class="token operator">=</span> AnimationUtils<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>XXX<span class="token punctuation">)</span><span class="token punctuation">;</span>mView<span class="token punctuation">.</span><span class="token function">startAnimation</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同时，可通过Animation的<code>setAnimationListener(new AnimationListener(){...})</code>给动画添加过程监听，这样在动画开始、结束和每一次循环时都可在回调方法中监听到。接口代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">AnimationListener</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//动画开始        </span>        <span class="token keyword">void</span> <span class="token function">onAnimationStart</span><span class="token punctuation">(</span>Animator animation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动画结束</span>        <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>Animator animation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动画重复</span>        <span class="token keyword">void</span> <span class="token function">onAnimationRepeat</span><span class="token punctuation">(</span>Animator animation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>创建方法二: <strong>通过Java代码动态创建</strong></p><ul><li>具体步骤：<ol><li>创建<code>TranslateAnimation</code>、<code>RotateAnimation</code>、<code>ScaleAnimation</code>或<code>AlphaAnimation</code>对象。</li><li>设置创建的动画对象的属性，如动画执行时间、延迟时间、起始位置、结束位置等</li><li>通过<code>View.startAnimation()</code>方法开启动画</li><li>可通过<code>Animation.setAnimationListener()</code>设置动画的监听器</li></ol></li></ul><p>Q3：<strong>综合实例</strong></p><p>A1:<strong>平移</strong>：</p><pre class=" language-xml"><code class="language-xml">//法一：xml定义<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>fromXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>fromYDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>toXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>toYDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>translate</span><span class="token punctuation">></span></span>//在MainActivity中调用  Animation translateAnim = AnimationUtils.loadAnimation(this, R.anim.view_anim_translate);    mImageView.startAnimation(translateAnim);</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//法二：java代码创建 RELATIVE_TO_SELF表示相对自身View</span>TranslateAnimation translateAnimation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TranslateAnimation</span><span class="token punctuation">(</span>            Animation<span class="token punctuation">.</span>RELATIVE_TO_SELF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>            Animation<span class="token punctuation">.</span>RELATIVE_TO_SELF<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>            Animation<span class="token punctuation">.</span>RELATIVE_TO_SELF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>            Animation<span class="token punctuation">.</span>RELATIVE_TO_SELF<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    translateAnimation<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mImageView<span class="token punctuation">.</span><span class="token function">startAnimation</span><span class="token punctuation">(</span>translateAnimation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://s2.ax1x.com/2020/02/23/31W8Q1.png" alt="平移效果"></p><p>A2:<strong>缩放</strong>：</p><pre class=" language-xml"><code class="language-xml">//法一：xml定义<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scale</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>fromXScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>fromYScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>pivotX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>pivotY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>toXScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>toYScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scale</span><span class="token punctuation">></span></span>//在MainActivity中调用   Animation scaleAnim = AnimationUtils.loadAnimation(this, R.anim.view_anim_scale);    mImage.startAnimation(scaleAnim);</code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//法二：java代码创建</span>ScaleAnimation scaleAnimation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ScaleAnimation</span><span class="token punctuation">(</span>            <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">,</span>            <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">,</span>            Animation<span class="token punctuation">.</span>RELATIVE_TO_SELF<span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">,</span>            Animation<span class="token punctuation">.</span>RELATIVE_TO_SELF<span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scaleAnimation<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mImageView<span class="token punctuation">.</span><span class="token function">startAnimation</span><span class="token punctuation">(</span>scaleAnimation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.ax1x.com/2020/02/23/31WrQI.png" alt="缩放效果"></p><p>A3: <strong>旋转</strong>：</p><pre class=" language-xml"><code class="language-xml">//法一：xml定义<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rotate</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fillAfter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromDegrees</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toDegrees</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>360<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>pivotX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>pivotY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rotate</span><span class="token punctuation">></span></span>//在MainActivity中调用Animation rotateAnim = AnimationUtils.loadAnimation(this, R.anim.view_anim_rotate);    mImageView.startAnimation(rotateAnim);</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//法二：java代码创建</span>RotateAnimation rotateAnimation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RotateAnimation</span><span class="token punctuation">(</span>            <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span>            Animation<span class="token punctuation">.</span>RELATIVE_TO_SELF<span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">,</span>            Animation<span class="token punctuation">.</span>RELATIVE_TO_SELF<span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rotateAnimation<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mImageView<span class="token punctuation">.</span><span class="token function">startAnimation</span><span class="token punctuation">(</span>rotateAnimation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果：图片在2s内以图片中心为轴点，顺时针旋转360°，即完整转一圈。</p><p>A4:<strong>透明度：</strong></p><pre class=" language-xml"><code class="language-xml">//法一：xml定义<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alpha</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>fromAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>toAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alpha</span><span class="token punctuation">></span></span>//在MainActivity中调用    Animation alphaAnim = AnimationUtils.loadAnimation(this, R.anim.view_anim_alpha);    mImageView.startAnimation(alphaAnim);</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//法二：java代码创建</span>AlphaAnimation alphaAnimation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlphaAnimation</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alphaAnimation<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mImageView<span class="token punctuation">.</span><span class="token function">startAnimation</span><span class="token punctuation">(</span>alphaAnimation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果：图片在2s内从有到无。</p><p>A5:<strong>动画集合：</strong></p><pre class=" language-xml"><code class="language-xml">//法一：xml定义<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shareInterpolator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span>        <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromYDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toYDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scale</span>       <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>fromXScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>fromYScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>pivotX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>pivotY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>toXScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>toYScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rotate</span>        <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromDegrees</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toDegrees</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>360<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>pivotX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>pivotY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alpha</span>       <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>fromAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>toAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>//在MainActivity中调用    Animation setAnim = AnimationUtils.loadAnimation(this, R.anim.view_anim_set);    mImageView.startAnimation(setAnim);</code></pre><p>效果：以上四种动画效果的叠加。图片在2s内边向右下角移动、边缩小、边旋转、边降低透明度至消失。</p><hr><h5 id="2-自定义动画"><a href="#2-自定义动画" class="headerlink" title="2 自定义动画"></a>2 自定义动画</h5><blockquote><p>实际项目中以上几种动画并不能满足我们的需求，这时就需要自定义补间动画</p></blockquote><ul><li><p>步骤：</p><p>1.继承<code>Animation</code></p><p>2.重写<code>initialize()</code>—&gt;用于初始化</p><p>3.重写<code>applyTransformation()</code>—&gt;用于进行矩阵变换</p><blockquote><p>经常需要借助Camera来简化矩阵变换</p></blockquote></li></ul><ul><li>实例：<a href="https://link.jianshu.com/?t=http://blog.csdn.net/Airsaid/article/details/51591282" target="_blank" rel="noopener">自定义补间动画</a>、<a href="https://link.jianshu.com/?t=http://blog.csdn.net/cyt528300/article/details/52015577?locationNum=9" target="_blank" rel="noopener">3D翻转动画</a></li></ul><hr><h5 id="3-特殊使用场景"><a href="#3-特殊使用场景" class="headerlink" title="3 特殊使用场景"></a>3 特殊使用场景</h5><blockquote><p>View动画除了可作用在某个View对象上， 还可以用在特殊的场景，例如：</p><ul><li><p>控制<code>ViewGroup</code>的<code>子View</code> 的<strong>出场</strong>效果</p></li><li><p><code>Activity</code>的<strong>切换</strong>效果</p><p>接下来将依次介绍:</p></li></ul></blockquote><p>A1:<strong><code>子View</code>出场动画</strong></p><ul><li>常用场景：<code>ListView</code>、<code>GridView</code>、<code>RecyclerView</code></li><li>对应类：<code>LayoutAnimation</code></li><li>该<code>XML</code>文件创建在<code>res/anim/</code> 下</li><li>根节点<code>layoutAnimation</code>，常用属性：</li></ul><pre class=" language-bash"><code class="language-bash">layoutAnimation     <span class="token operator">|</span>- delay<span class="token operator">=</span><span class="token string">"float"</span>    <span class="token operator">|</span>- animationOrder<span class="token operator">=</span><span class="token string">"[normal|reverse | random]"</span>    <span class="token operator">|</span>- animation<span class="token operator">=</span><span class="token string">"[@anim/res_id]"</span></code></pre><p>①<code>delay</code>：表示子元素开始动画的<strong>延迟时间</strong>。</p><blockquote><p>比如，子元素入场动画的时间周期是300ms，那么该属性值=0.5就表示每个子元素都需要延迟150ms才能播放入场动画。</p></blockquote><p>②<code>animationOrder</code> ：表示子元素动画的<strong>播放顺序</strong>。可选模式：<code>normal</code> （正常顺序）、<code>random</code>（随机顺序）、<code>reverse</code>（倒序）。</p><p>③<code>animation</code> ：为子元素指定具体的入场动画。</p><ul><li>创建方法:</li></ul><p>法一：xml定义，分两步</p><p><code>step1</code>：定义<code>layoutAnimation</code>动画</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// res/anim/anim_layout.xml</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layoutAnimation</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>animation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@anim/anim_item<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>animationOrder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layoutAnimation</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">// res/anim/anim_item.xml    效果：子项从右边进入</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shareInterpolator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>interpolator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:anim/accelerate_interpolator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alpha</span>        <span class="token attr-name"><span class="token namespace">android:</span>fromAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span>        <span class="token attr-name"><span class="token namespace">android:</span>fromXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span></code></pre><p><code>step2</code>：为<code>ViewGroup</code>设置<code>android:layoutAnimation</code>属性， 这里假设为<code>Listview</code>：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//activity_main.xml</span><span class="token operator">&lt;</span>ListView        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layoutAnimation<span class="token operator">=</span><span class="token string">"@anim/anim_layout"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>法二：java代码创建，通过<code>LayoutAnimation</code>类绑定</p><pre class=" language-xml"><code class="language-xml">// res/anim/anim_item.xml <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shareInterpolator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>interpolator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:anim/accelerate_interpolator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alpha</span>        <span class="token attr-name"><span class="token namespace">android:</span>fromAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span>        <span class="token attr-name"><span class="token namespace">android:</span>fromXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//main.java </span><span class="token comment" spellcheck="true">//和上述xml定义方法的效果相同</span>Animation animation <span class="token operator">=</span> AnimationUtils<span class="token punctuation">.</span><span class="token function">loadLayoutAnimation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>anim_item<span class="token punctuation">)</span><span class="token punctuation">;</span>LayoutAnimationController controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LayoutAnimationController</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对应android:animation属性</span>controller<span class="token punctuation">.</span><span class="token function">setDelay</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对应android:delay属性    </span>controller<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>LayoutAnimationController<span class="token punctuation">.</span>ORDER_NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对应android:animationOrder属性</span>listView<span class="token punctuation">.</span><span class="token function">setLayoutAnimation</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对应android:layoutAnimation属性</span></code></pre><p>A2:<strong>Activity的切换效果</strong></p><ul><li>该xml文件创建在<code>res/anim/</code> 下</li><li>Activity默认是有切换效果的，若需要自定义切换效果，需要用到<code>overridePendingTransition(int inAnim, int outAnim)</code>方法</li></ul><blockquote><ul><li>参数含义：（进入的Activity所需进行的动画id，退出的Activity所需进行的动画id）</li><li>该方法调用在<code>startActivity()</code>或<code>finish()</code>之<strong>后</strong>才生效。例如：</li></ul><pre class=" language-java"><code class="language-java"><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">overridePendingTransition</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>enter_anim<span class="token punctuation">,</span> R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>exit_anim<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><ul><li>补充实例：感兴趣的读者可以了解下：<a href="https://www.jianshu.com/p/4e7bbe57ac8d" target="_blank" rel="noopener">Android动画总结——布局动画、转场动画</a></li></ul><hr><h4 id="2-1-2-帧动画"><a href="#2-1-2-帧动画" class="headerlink" title="2.1.2 帧动画"></a>2.1.2 帧动画</h4><blockquote><ul><li>帧动画也是View动画的一种，它会按照顺序播放一组预先定义好的图片。对应类<code>AnimationDrawable</code>。</li></ul><ul><li>其中<code>AnimationDrawable</code>，笔者在<a href="https://juejin.im/post/5e520c925188254903693f61" target="_blank" rel="noopener">进阶之路 | 奇妙的Drawable之旅</a>的文章末尾处也提到过。</li></ul></blockquote><p>Q1:<strong>帧动画的创建</strong></p><p>A1:通过<code>xml</code>定义：</p><ul><li>该xml文件创建在<code>res/drawable/</code> 下。</li><li>根节点<code>animation-list</code>，属性<code>android:oneshot</code>表示是否执行一次；子节点<code>item</code> 下可设置轮播的图片资源id和持续时间。例如：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>animation-list</span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>oneshot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/xxx1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/xxx2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/xxx3<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/xxx4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>animation-list</span><span class="token punctuation">></span></span></code></pre><p>在<code>XML</code>声明好之后，将它作为View的背景并通过<code>AnimationDrawable</code>来播放即可。代码如下：</p><pre class=" language-java"><code class="language-java">mView<span class="token punctuation">.</span><span class="token function">setBackgroundResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>XXX<span class="token punctuation">)</span><span class="token punctuation">;</span>AnimationDrawable animationDrawable <span class="token operator">=</span> <span class="token punctuation">(</span>AnimationDrawable<span class="token punctuation">)</span>mView<span class="token punctuation">.</span><span class="token function">getBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animationDrawable<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>A2：通过Java代码动态创建</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//和上述xml定义方法的效果相同</span>AnimationDrawable ad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimationDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.创建AnimationDrawable对象</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//2.添加Drawable对象及其持续时间</span>        Drawable drawable <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token string">"xxx"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"drawable"</span><span class="token punctuation">,</span> <span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ad<span class="token punctuation">.</span><span class="token function">addFrame</span><span class="token punctuation">(</span>drawable<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ad<span class="token punctuation">.</span><span class="token function">setOneShot</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.设置是否执行一次</span>    mView<span class="token punctuation">.</span><span class="token function">setBackgroundResource</span><span class="token punctuation">(</span>ad<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.将帧动画作为view背景</span>    ad<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5.播放动画</span></code></pre><blockquote><ul><li><p><strong>注意</strong>：使用帧动画要注意不能使用尺寸过大的图片，否则容易造成<code>OOM</code>( 内存溢出)</p></li><li><p>想要更进一步了解<strong>帧动画</strong>的读者，可以看一下这篇文章：<a href="https://www.jianshu.com/p/225fe1feba60" target="_blank" rel="noopener">关于 逐帧动画 的使用都在这里了！</a></p></li></ul></blockquote><h3 id="2-2-属性动画"><a href="#2-2-属性动画" class="headerlink" title="2.2 属性动画"></a>2.2 属性动画</h3><h4 id="2-2-1-插值器和估值器"><a href="#2-2-1-插值器和估值器" class="headerlink" title="2.2.1 插值器和估值器"></a>2.2.1 插值器和估值器</h4><blockquote><p>用途：属性动画中的插值器和估值器可以实现非匀速动画</p></blockquote><h5 id="1-插值器-Interpolator"><a href="#1-插值器-Interpolator" class="headerlink" title="1 插值器(Interpolator)"></a>1 插值器(<code>Interpolator</code>)</h5><ul><li><p>作用：根据<strong>时间流逝的百分比</strong>计算出当前<strong>属性值改变的百分比</strong>。确定了动画效果变化的模式，如匀速变化、加速变化、减速变化等等。</p></li><li><p>常用的系统内置插值器：</p><p>a.线性插值器(<code>LinearInterpolator</code>)：匀速动画</p><p>b.加速减速插值器(<code>AccelerateDecelerateInterpolator</code>)：动画两头慢中间快</p><p>c.减速插值器(<code>DecelerateInterpolator</code>)：动画越来越慢</p></li><li><p>可针对的对象:</p><p>a.View动画：插值器对应的属性是<code>android:interpolator</code></p><p>b.属性动画：是实现<strong>非匀速</strong>动画的重要手段。</p></li><li><p>自定义插值器方法：实现 <code>Interpolator</code> / <code>TimeInterpolator</code>接口 ，然后复写<code>getInterpolation()</code></p></li></ul><blockquote><ul><li>补间动画实现 <code>Interpolator</code>接口、属性动画实现<code>TimeInterpolator</code>接口。</li><li><code>TimeInterpolator</code>接口是属性动画中新增的，用于兼容<code>Interpolator</code>接口。</li></ul></blockquote><p><img src="https://s2.ax1x.com/2020/02/24/38dujg.gif" alt="插值器效果图"></p><h5 id="2-类型估值器-TypeEvaluator"><a href="#2-类型估值器-TypeEvaluator" class="headerlink" title="2 类型估值器(TypeEvaluator)"></a>2 类型估值器(<code>TypeEvaluator</code>)</h5><ul><li>作用：根据当前<strong>属性改变的百分比</strong>计算出<strong>改变后的属性值</strong>。</li><li>常用的系统内置的估值器：</li></ul><blockquote><ul><li>整型估值器(<code>IntEvaluator</code>)</li><li>浮点型估值器(<code>FloatEvaluator</code>)</li><li>Color属性估值器(<code>ArgbEvaluator</code>)</li></ul></blockquote><ul><li><strong>仅针对于属性动画</strong>，View动画不需要类型估值器。是属性动画实现<strong>非匀速</strong>动画的重要手段。</li><li>自定义估值器方法：实现<code>TypeEvaluator</code>接口，然后复写<code>evaluate()</code>。</li></ul><blockquote><p>限于篇幅，本篇文章未介绍<strong>自定义插值器和估值器的实例</strong>，想要了解的读者，可以看下这篇文章：</p><p><a href="https://www.jianshu.com/p/2f19fe1e3ca1" target="_blank" rel="noopener">Android 动画：手把手带你深入了解神秘的插值器</a></p></blockquote><h4 id="2-2-2-属性动画与View动画异同"><a href="#2-2-2-属性动画与View动画异同" class="headerlink" title="2.2.2 属性动画与View动画异同"></a>2.2.2 属性动画与View动画异同</h4><table><thead><tr><th></th><th>View动画</th><th>属性动画</th></tr></thead><tbody><tr><td>实现方式</td><td>通过不断图形变换</td><td>通过动态改变对象属性</td></tr><tr><td>作用对象</td><td>View</td><td>任何对象，甚至没有对象</td></tr><tr><td>存放位置</td><td>anim</td><td>animator</td></tr><tr><td>状态变化</td><td>未真正改变View位置</td><td>真正改变View位置</td></tr></tbody></table><h4 id="2-2-3-实现方式"><a href="#2-2-3-实现方式" class="headerlink" title="2.2.3 实现方式"></a>2.2.3 实现方式</h4><h5 id="1-通过XML"><a href="#1-通过XML" class="headerlink" title="1 通过XML"></a>1 通过<code>XML</code></h5><blockquote><p>在<code>res/animator/</code>下可创建属性动画的<code>XML</code>文件。其中，根节点<code>set</code>对应<code>AnimatorSet</code>类，子节点<code>objectAnimator</code>对应<code>ObjectAnimator</code>类、<code>animator</code>对应<code>ValueAnimator</code>类。常用属性：</p></blockquote><pre class=" language-xml"><code class="language-xml">//animator/XX.xml&lt;set  android:ordering=["together" | "sequentially"]>    &lt;objectAnimator        android:propertyName="string"        android:duration="int"        android:valueFrom="float | int | color"        android:valueTo="float | int | color"        android:startOffset="int"        android:repeatCount="int"        android:repeatMode=["repeat" | "reverse"]        android:valueType=["intType" | "floatType"]/>    &lt;animator        android:duration="int"        android:valueFrom="float | int | color"        android:valueTo="float | int | color"        android:startOffset="int"        android:repeatCount="int"        android:repeatMode=["repeat" | "reverse"]        android:valueType=["intType" | "floatType"]/>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>//javaAnimatorSet set= AnimatorInflater.loadAnimator(myContext,R.anim.xxx);set.setTarget(mBtn);set.start();</code></pre><p>首先介绍<code>set</code>标签下的常用属性：</p><ul><li><code>ordering</code>：设置动画的时序关系。可选值：</li></ul><blockquote><ul><li><code>together</code>：默认值。表示动画集合中的子动画<strong>同时</strong>播放</li><li><code>equentially</code>：表示动画集合中的子动画按照<strong>书写</strong>的先后顺序依次播放</li></ul></blockquote><p>接下来具体介绍属性动画的实现方式：</p><p>A.<strong>通过ObjectAnimator实现属性动画</strong></p><ul><li>原理：通过直接对<strong>对象</strong>（<code>object</code>）的属性值进行改变操作，从而实现动画效果。</li><li>对应根节点<code>objectAnimator</code></li><li>常用属性介绍：</li></ul><blockquote><ul><li><p><code>propertyName</code>：属性动画作用的属性名称</p></li><li><p><code>duration</code>： 动画持续时长</p></li><li><p><code>startOffset</code>：设置动画执行之前的等待时长</p></li><li><p><code>repeatCount</code>：动画重复执行的次数；默认为<strong>0</strong>，表示只播放一次。设置为<strong>-1或infinite</strong>，表示无限重复。</p></li><li><p><code>repeatMode</code>：动画重复执行的模式。可选值：</p><p>a.<code>restart</code>：表示连续重复，为默认值。</p><p>b.<code>reverse</code> ：表示逆向重复</p></li><li><p><code>valueFrom</code>：动画初始值</p></li><li><p><code>valueTo</code>：动画结束值</p></li><li><p><code>valueType</code>：表示<code>propertyName</code>指定的属性值类型。可选值：</p><p>a.<code>intType</code> ：以上两个<code>value</code>属性值为整型。</p><p>b.<code>floatType</code>：即以上两个<code>value</code>属性值为浮点型，为默认值。</p><p>c.<code>color</code>：若<code>propertyName</code>为<code>color</code>，则无需设置该属性。</p></li></ul></blockquote><p>B.<strong>通过ValueAnimator实现属性动画</strong></p><ul><li>原理：通过不断控制<strong>值</strong>（value）的变化，再不断<strong>手动</strong>赋给对象的属性，从而实现动画效果。</li></ul><blockquote><p><code>ObjectAnimator</code>与 <code>ValueAnimator</code>类的区别：</p><ul><li>ValueAnimator 类是先改变值，然后<strong>手动</strong>赋值给对象的属性从而实现动画；是<strong>间接</strong>对对象属性进行操作</li><li>ObjectAnimator 类是先改变值，然后<strong>自动</strong>赋值给对象的属性从而实现动画；是<strong>直接</strong>对对象属性进行操作</li></ul></blockquote><ul><li>对应根节点<code>animator</code></li><li>常用属性比<code>objectAnimator</code>标签少一个<code>android:propertyName</code>属性，其他相同</li></ul><h5 id="2-通过JAVA"><a href="#2-通过JAVA" class="headerlink" title="2 通过JAVA"></a>2 通过<code>JAVA</code></h5><blockquote><p>实际开发中建议用<code>JAVA</code>的方式来实现属性动画，原因：</p><ul><li>通过代码来实现比较简单</li><li>很多时候属性的起始值无法提前确定</li></ul></blockquote><p>A.<code>ObjectAnimator</code> </p><blockquote><p>注意：这里<code>ObjectAnimator</code> 作用的属性必须有<code>set</code>方法</p><p>（<code>get</code>方法可选；当动画没有设置初始值的时候，<code>get</code>必须存在）</p></blockquote><ul><li>方法：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一个参数是对象，第二个是对象的属性名字，第3个是值的变化，可以是ofFloat或者是ofInt，根据参数的类型直接写</span>ObjectAnimator objectAnimator <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span><span class="token string">"alpha"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置持续时间</span>objectAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> objectAnimator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>源码分析：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ofFloat直接返还一个 ObjectAnimator对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> ObjectAnimator <span class="token function">ofFloat</span> <span class="token punctuation">(</span>Object target<span class="token punctuation">,</span>String propertyName<span class="token punctuation">,</span><span class="token keyword">float</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>            ObjectAnimator anim<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectAnimator</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>            anim<span class="token punctuation">.</span><span class="token function">setFloatValues</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> anim<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>B.<code>ValueAnimator</code></p><blockquote><ul><li><code>ValueAnimator</code><strong>不提供</strong>任何<strong>动画</strong>效果，更像一个<strong>数值发生器</strong>，用来产生有一定规律的数字，从而让调用者控制动画的实现过程。</li><li>一般在<code>AnimatorUpdateListener</code>/<code>AnimatorListenerAdapter</code>(在下文会详细介绍)中监听数值的变化，而完成动画的变换</li></ul></blockquote><p>测试实例:</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//实现颜色的渐变</span>    ValueAnimator valueAnimator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofArgb</span><span class="token punctuation">(</span><span class="token number">0xFFFF5454</span><span class="token punctuation">,</span> <span class="token number">0xFF5DDE5D</span><span class="token punctuation">,</span> <span class="token number">0xFF5DBEDE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    valueAnimator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> color <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> animation<span class="token punctuation">.</span><span class="token function">getAnimatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            button<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    valueAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记得start</span>    valueAnimator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>C.<strong>组合动画</strong></p><p>C1.<code>AnimatorSet</code></p><blockquote><p>可以实现有先后顺序的组合动画</p></blockquote><ul><li>重点方法：</li></ul><blockquote><ul><li><p>play：传入一个 <code>Animator</code> 对象 ，会返回一个<code>AnimatorSet.Builder</code>的实例</p></li><li><p>Builder中有4个方法：</p><p>a.<code>after(Animator)</code>：将现有动画插入到传入的动画之后执行</p><p>b.<code>before(Animator)</code>：将现有动画插入到传入的动画之前执行</p><p>c.<code>with(Animator)</code>：将现有动画和传入的动画同时执行。</p><p>d.<code>after(Long)</code>：将现有动画延迟指定毫秒后执行。</p></li></ul></blockquote><p><img src="https://s2.ax1x.com/2020/02/23/33mwSf.png" alt="执行顺序"></p><ul><li>实例使用：</li></ul><pre class=" language-java"><code class="language-java">ObjectAnimator alphaAnimator <span class="token operator">=</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"alpha"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectAnimator rotateAnimator <span class="token operator">=</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"rotation"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rotateAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectAnimator scaleAnimator <span class="token operator">=</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"scaleX"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectAnimator translateAnimator <span class="token operator">=</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"translationX"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AnimatorSet animatorSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatorSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animatorSet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>alphaAnimator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>rotateAnimator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>scaleAnimator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>translateAnimator<span class="token punctuation">)</span><span class="token punctuation">;</span>animatorSet<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.ax1x.com/2020/02/23/33ntuF.png" alt="实例执行顺序"></p><p>C2：<code>PropertyValuesHolder</code></p><blockquote><p>可以实现同时执行的组合动画</p></blockquote><ul><li>实例使用：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新建动画类 </span>PropertyValuesHolder valuesHolder1<span class="token operator">=</span>PropertyValuesHolder<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">"scaleX"</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PropertyValuesHolder valuesHolder2<span class="token operator">=</span>PropertyValuesHolder<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">"rotationX"</span><span class="token punctuation">,</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">90.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新建ObjectAnimator</span>ObjectAnimator animator<span class="token operator">=</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofPropertyValuesHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span>valuesHolder1<span class="token punctuation">,</span>valuesHolder2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启动画 </span>animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-2-4-监听器"><a href="#2-2-4-监听器" class="headerlink" title="2.2.4 监听器"></a>2.2.4 监听器</h4><blockquote><p>属性动画主要使用两个接口：<code>AnimatorUpdateListener</code>&amp;<code>AnimatorListener</code>来监听动画的播放过程。</p></blockquote><ul><li><code>AnimatorListener</code>：监听动画的开始、结束、取消以及重复播放。如下：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">AnimatorListener</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">onAnimationStart</span><span class="token punctuation">(</span>Animator animation<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//动画开始</span>    <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>Animator animation<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//动画结束</span>    <span class="token keyword">void</span> <span class="token function">onAnimationCancel</span><span class="token punctuation">(</span>Animator animation<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//动画取消</span>    <span class="token keyword">void</span> <span class="token function">onAnimationRepeat</span><span class="token punctuation">(</span>Animator animation<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//动画重复播放</span><span class="token punctuation">}</span></code></pre><blockquote><p>为方便开发，系统提供了<code>AnimatorListenerAdapter</code>类，它是<code>AnimatorListener</code>的适配器，如此可有选择复写上述四个方法。</p></blockquote><ul><li><code>AnimatorUpdateListener</code>:监听整个动画过程。每播放一帧,<code>onAnimationUpdate()</code>就会被调用一次，如下：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AnimatorUpdateListener</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在属性动画的属性值变化是回调。</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-5-对任意属性做动画"><a href="#2-2-5-对任意属性做动画" class="headerlink" title="2.2.5 对任意属性做动画"></a>2.2.5 对任意属性做动画</h4><ul><li>需满足的条件：</li></ul><blockquote><ul><li>对象必须提供<code>set</code>方法，若未传递初始值给动画，还需提供<code>get</code>方法（因为系统需要去取初始值）</li><li><code>set</code>方法对属性所做的改变必须能通过某种方式反映出来（例如：UI效果改变）</li></ul></blockquote><ul><li><p>解决方法：</p><p>A.给对象加上<code>get</code>和<code>set</code>方法</p></li></ul><blockquote><p>这个方法一般不可行，因为大多数的时候，我们没有权限</p></blockquote><p>​        B.用包装类的方式，间接提供<code>get</code>和<code>set</code>方法</p><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyView</span><span class="token punctuation">{</span><span class="token keyword">private</span> View mTarget<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token function">MyView</span> <span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>mTarget <span class="token operator">=</span>view<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//属性的get方法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> mTarget<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//属性的set方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">{</span>mTarget<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token operator">=</span>width<span class="token punctuation">;</span>mTarget<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">MyView myView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span>mButton<span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span>myView<span class="token punctuation">,</span> <span class="token string">"width"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>C.用<code>ValueAnimator</code>监听动画过程，自己改变属性</p><p>测试实例：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 改变对象的宽度     * @param target 对象     * @param start 起始值     * @param end 目标值     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performAnimate</span><span class="token punctuation">(</span><span class="token keyword">final</span> View target<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ValueAnimator valueAnimator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valueAnimator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//持有一个IntEvaluator对象，方便下面估值的时候使用</span>                IntEvaluator evaluator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//得到当前动画的进度值</span>                <span class="token keyword">float</span> fraction <span class="token operator">=</span> animation<span class="token punctuation">.</span><span class="token function">getAnimatedFraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用整型估值器，通过比例计算出宽度，然后设给Btn</span>                target<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width <span class="token operator">=</span> evaluator<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>fraction<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                target<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valueAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-2-6-工作原理"><a href="#2-2-6-工作原理" class="headerlink" title="2.2.6 工作原理"></a>2.2.6 工作原理</h4><ul><li>总体思路：在一定时间间隔内，通过不断对值进行改变，并不断将该值赋给对象的属性，从而实现该对象在该属性上的动画效果。</li></ul><blockquote><p>具体体现在 ：</p><ul><li>创建属性动画时，若未设初值，则系统会通过该属性的<code>get()</code>方法获取初始值。故属性动画要求必须提供属性的<code>get()</code>方法</li><li>在动画播放的过程中，利用时间插值器和类型估值器获取改变后的属性值</li><li>将改变后的属性值通过<code>set()</code>方法设置到对象中。故属性动画要求必须提供属性的<code>set()</code>方法</li></ul></blockquote><ul><li>具体流程：</li></ul><blockquote><p><code>get/set</code>方法是通过反射调用的，笔者将带你深入属性动画的源码，探究其原因：</p></blockquote><p><img src="https://s2.ax1x.com/2020/02/24/38u074.png" alt="属性动画源码解析"></p><h2 id="三-注意事项"><a href="#三-注意事项" class="headerlink" title="三.注意事项"></a>三.注意事项</h2><blockquote><p>恭喜你！已经看完了前面的文章，相信你对<code>Animation</code>已经有一定深度的了解！</p><p>在使用过程中，也有一些事项是需要我们注意的：</p></blockquote><ul><li>OOM问题</li></ul><blockquote><p>这个问题主要出现在帧动画中，当图片数量较多且图片较大时易出现OOM，所以日常开发中尽量避免使用帧动画</p></blockquote><ul><li>内存泄漏</li></ul><blockquote><ul><li>属性动画中有一类无限循环的动画（<code>repeatCount=-1</code>），这类动画需要在<code>Activity</code>退出时及时停止，否则导致<code>Activity</code>无法释放造成内存泄漏</li><li><code>View</code>动画不存在这个问题</li></ul></blockquote><ul><li>View动画的问题</li></ul><blockquote><p>View动画是对View的影像做动画，不是真正改变View的状态，有时候出现动画完成后View无法隐藏的现象（<code>setVisibility(View.GONE)</code>失效），需要调用<code>view.clearAnimation()</code>清除View动画</p></blockquote><ul><li>不要使用px</li></ul><blockquote><p>在进行动画的过程中，尽量使用dp，使用px会导致在不同的设备上有不同的效果</p><p>想要了解具体原因的读者，笔者给您推荐一篇文章：<a href="https://www.jianshu.com/p/b2c545c65355" target="_blank" rel="noopener">dp、sp、px区别</a></p></blockquote><ul><li>动画元素的交互</li></ul><blockquote><p><code>Android3.0</code>之后，属性动画的单击事件触发位置为移动后的位置，但是<code>View</code>动画仍在原位置</p></blockquote><ul><li>硬件加速</li></ul><blockquote><p><code>Android4.0</code>开始默认开启硬件加速</p></blockquote><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《Andorid 开发艺术探索》</li><li>《Android 进阶之光》</li><li><a href="https://www.bilibili.com/video/av81143719/" target="_blank" rel="noopener">过渡动画有多重要？</a></li><li><a href="https://link.jianshu.com/?t=http://blog.csdn.net/Airsaid/article/details/51591282" target="_blank" rel="noopener">自定义补间动画</a></li><li><a href="https://link.jianshu.com/?t=http://blog.csdn.net/cyt528300/article/details/52015577?locationNum=9" target="_blank" rel="noopener">3D翻转动画</a></li><li><a href="https://www.jianshu.com/p/2f19fe1e3ca1" target="_blank" rel="noopener">Android 动画：手把手带你深入了解神秘的插值器</a></li><li><a href="https://www.jianshu.com/p/b2c545c65355" target="_blank" rel="noopener">dp、sp、px区别</a></li><li><a href="https://www.jianshu.com/p/10dc575896d3" target="_blank" rel="noopener">要点提炼|开发艺术之Animation</a></li><li><a href="https://www.jianshu.com/p/225fe1feba60" target="_blank" rel="noopener">关于 逐帧动画 的使用都在这里了！</a></li><li><a href="https://blog.csdn.net/baidu_23955875/article/details/70918028" target="_blank" rel="noopener">安卓scale动画fromDegrees toDegrees解释</a></li><li><a href="https://www.cnblogs.com/BobGo/p/5626691.html" target="_blank" rel="noopener">RecyclerView使用技巧（item动画及嵌套高度适配解决方案）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发艺术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路 | 奇妙的Drawable之旅</title>
      <link href="/2020/02/21/jin-jie-zhi-lu-qi-miao-de-drawable-zhi-lu/"/>
      <url>/2020/02/21/jin-jie-zhi-lu-qi-miao-de-drawable-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="进阶之路-奇妙的Drawable之旅"><a href="#进阶之路-奇妙的Drawable之旅" class="headerlink" title="进阶之路 | 奇妙的Drawable之旅"></a>进阶之路 | 奇妙的Drawable之旅</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li><code>Drawable</code>简介</li><li><code>Drawable</code>分类</li><li>自定义<code>Drawable</code></li></ul><h2 id="一-为什么要学习Drawable？"><a href="#一-为什么要学习Drawable？" class="headerlink" title="一.为什么要学习Drawable？"></a>一.为什么要学习Drawable？</h2><p><code>Drawable</code>种类繁多，它们都表示一种图像的概念，但是它们不全是图片。在实际开发中，<code>Drawable</code>经常被用来作为<code>View</code>的背景使用。</p><p><code>Drawable</code>可以方便我们做出一些特殊的UI效果，这一点在UI相关的开发工作中极为重要。面对UI设计师设计出来的各式各样的按钮点击效果，动态效果，渐变效果，好看是好看，我们程序员往往会咆哮：”你舒服了，我们呢！！”别慌，学好<code>Drawable</code>，你会对各种效果信手拈来，了然于胸，胸有成竹！！</p><p>而且，<code>Drawable</code>在开发中也有自己的优点：</p><ul><li><p>使用简单，成本低于自定义View</p></li><li><p>非图片类型的<code>Drawable</code>占用空间较小，对于减少APK大小有所裨益</p></li></ul><p>综上，掌握好<code>Drawable</code>,走遍天下也不怕！（jia de）</p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-Drawable简介"><a href="#2-1-Drawable简介" class="headerlink" title="2.1 Drawable简介"></a>2.1 <code>Drawable</code>简介</h3><p>Q1:<code>Drawable</code>类是<strong>抽象类</strong>，是所有Drawable的基类。继承关系如下：</p><p><img src="https://s2.ax1x.com/2020/02/20/3m0LCj.png" alt="Drawable继承关系"></p><p>Q2:<strong><code>Drawable</code>使用方式</strong>:</p><ul><li>创建所需Drawable的根节点的<strong>xml</strong>，再通过<code>@drawable/xxx</code>引入布局中。（常用）</li></ul><blockquote><ul><li>普通控件（非ImageView）是设置<code>background</code></li><li>ImageView是设置<code>src</code></li></ul></blockquote><ul><li><strong>Java代码</strong>：new一个所需Drawable并set相关属性，最后加载到布局中。</li></ul><p>Q3:<strong>内部宽高了解多少</strong>？</p><ul><li>获取方式：<code>getIntrinsicWidth()</code>和<code>getIntrinsicHeight()</code></li></ul><blockquote><p><strong>注意</strong>：</p><ul><li>并不是所有<code>Drawable</code>都有内部宽/高</li><li>图片所形成的<code>Drawable</code>的内部宽/高就是图片的宽/高。</li><li>颜色所形成的<code>Drawable</code>默认情况下没有内部宽/高的概念（除非指定size）。</li><li>内部宽高不等于大小，<code>Drawable</code>没有大小概念</li><li><code>Drawable</code>被用作<code>background</code>的时候，自动被拉伸到View同等大小;<code>Drawable</code>被用作<code>src</code>的时候，存放原图大小比例，不会被拉伸</li></ul></blockquote><h3 id="2-2-Drawable种类"><a href="#2-2-Drawable种类" class="headerlink" title="2.2 Drawable种类"></a>2.2 <code>Drawable</code>种类</h3><h4 id="2-2-1-BitmapDrawable"><a href="#2-2-1-BitmapDrawable" class="headerlink" title="2.2.1 BitmapDrawable"></a>2.2.1 <code>BitmapDrawable</code></h4><ul><li>表示一张图片</li><li>常用属性：</li></ul><pre class=" language-ruby"><code class="language-ruby">bitmap    <span class="token operator">|</span><span class="token operator">-</span> src<span class="token operator">=</span><span class="token string">"@drawable/res_id"</span>    <span class="token operator">|</span><span class="token operator">-</span> antialias<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span><span class="token operator">-</span> dither<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span><span class="token operator">-</span> filter<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span><span class="token operator">-</span> tileMode<span class="token operator">=</span><span class="token string">"[disabled | clamp | repeat | mirror]"</span>    <span class="token operator">|</span><span class="token operator">-</span> gravity<span class="token operator">=</span>"<span class="token punctuation">[</span>top <span class="token operator">|</span> bottom <span class="token operator">|</span> left <span class="token operator">|</span> right <span class="token operator">|</span> center_vertical <span class="token operator">|</span>    <span class="token operator">|</span>            fill_vertical <span class="token operator">|</span> center_horizontal <span class="token operator">|</span> fill_horizontal <span class="token operator">|</span>    <span class="token operator">|</span>            center <span class="token operator">|</span> fill <span class="token operator">|</span> clip_vertical <span class="token operator">|</span> clip_horizontal<span class="token punctuation">]</span>"</code></pre><blockquote><ul><li><code>src</code>:图片的资源id</li><li><code>antialias</code>:是否开启图片<a href="http://www.twinklingstar.cn/2013/390/introduction-to-alias-antialias/" target="_blank" rel="noopener">抗锯齿</a>。开启后会让图片会更加平滑，同时清晰度降低很少，应该开启。</li><li><code>dither</code>：是否开启<strong>抖动</strong>效果。开启后让高质量的图片的在低质量的屏幕上显示不失真，应该开启。</li><li><code>filter</code>：是否开启<strong>过滤</strong>效果。当图片尺寸被拉伸或压缩时，开启后可保持较好的显示效果，应该开启</li><li><code>tileMode</code>：平铺模式。开启后<code>gravity</code>会失效；可选值的具体含义：</li></ul><table><thead><tr><th>可选项</th><th>含义</th></tr></thead><tbody><tr><td>disable</td><td>默认值，关闭平铺模式</td></tr><tr><td>mirror</td><td>在水平和垂直方向的镜面投影效果</td></tr><tr><td>repeat</td><td>在水平和垂直方向的平铺效果</td></tr><tr><td>clamp</td><td>图片四周像素会扩散到其他区域</td></tr></tbody></table><p>具体效果：</p><p><img src="https://s2.ax1x.com/2020/02/20/3mrQgA.png" alt="tileMode效果"></p><ul><li><code>gravity</code>：若位图比容器小，可以设置位图在容器中的相对位置。可选值的具体含义：</li></ul><p><img src="https://s2.ax1x.com/2020/02/20/3mrf29.png" alt="gravity属性"></p><ul><li>使用方法：以下两种方法效果相同，图见之前截图中所示的mirror情况。</li></ul><p>a.xml:</p><pre class=" language-xml"><code class="language-xml">//在Drawable文件夹中创建bg_tilemode_mirror.xml<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bitmap</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>dither</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>tileMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mirror<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bitmap</span><span class="token punctuation">></span></span>//在activity_main.xml中设置为View背景<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/bg_tilemode_mirror<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span></code></pre><p>b.Java代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在MainActivity创建BitmapDrawable</span>Bitmap bitmap <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        BitmapDrawable bitDrawable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapDrawable</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        bitDrawable<span class="token punctuation">.</span><span class="token function">setDither</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bitDrawable<span class="token punctuation">.</span><span class="token function">setTileModeXY</span><span class="token punctuation">(</span>Shader<span class="token punctuation">.</span>TileMode<span class="token punctuation">.</span>MIRROR<span class="token punctuation">,</span> Shader<span class="token punctuation">.</span>TileMode<span class="token punctuation">.</span>MIRROR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载到mylayout布局</span>        LinearLayout myLayout <span class="token operator">=</span> <span class="token punctuation">(</span>LinearLayout<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>mylayout<span class="token punctuation">)</span><span class="token punctuation">;</span>        myLayout<span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span>bitDrawable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h4 id="2-2-2-NinePatchDrawable"><a href="#2-2-2-NinePatchDrawable" class="headerlink" title="2.2.2 NinePatchDrawable"></a>2.2.2 <code>NinePatchDrawable</code></h4><ul><li>表示一张<code>.9</code>格式的图片</li><li>作用：可自动地根据所需的宽/高进行相应的缩放并保证不失真。</li><li>制作方法及原理：可以参考博客：<a href="https://blog.csdn.net/MakerCloud/article/details/80419130" target="_blank" rel="noopener">9patch / NinePatch 详解及使用</a></li><li>常用属性：和本文2.2.1 <code>BitmapDrawable</code>一样</li><li>使用方法： 不建议用Java代码创建<code>NinePatchDrawable</code>，建议使用XML定义，代码见下。</li></ul><pre class=" language-xml"><code class="language-xml">//在Drawable文件夹中创建bg_nine_patch.xml<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nine-patch</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>dither</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/box<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nine-patch</span><span class="token punctuation">></span></span>//在activity_main.xml中设置为EditText背景<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/bg_nine_patch<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span></code></pre><h4 id="2-2-3-ShapeDrawable"><a href="#2-2-3-ShapeDrawable" class="headerlink" title="2.2.3 ShapeDrawable"></a>2.2.3 <code>ShapeDrawable</code></h4><ul><li>可表示纯色、有渐变效果的基础几何图形（矩形,圆形,线条等）</li><li>根节点<code>shape</code>，子节点<code>corners</code>、<code>gradient</code>、<code>padding</code>、<code>size</code>、<code>solid</code>、<code>stroke</code></li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token delimiter">?></span><span class="token operator">&lt;</span>shape    xmlns<span class="token punctuation">:</span>android<span class="token operator">=</span>"http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//schemas.android.com/apk/res/android"</span>    android<span class="token punctuation">:</span>shape<span class="token operator">=</span><span class="token string">"[rectangle | oval | line | ring]"</span>    <span class="token operator">&lt;</span>corners        android<span class="token punctuation">:</span>radius<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>topLeftRaidus<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>topRightRaidus<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>bottomLeftRaidus<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>bottomRightRaidus<span class="token operator">=</span><span class="token string">"integer"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>gradient        android<span class="token punctuation">:</span>angle<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>centerX<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>centerY<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>centerColor<span class="token operator">=</span><span class="token string">"color"</span>        android<span class="token punctuation">:</span>endColor<span class="token operator">=</span><span class="token string">"color"</span>        android<span class="token punctuation">:</span>gradientRadius<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>startColor<span class="token operator">=</span><span class="token string">"color"</span>        android<span class="token punctuation">:</span>type<span class="token operator">=</span><span class="token string">"[linear | radial | sweep]"</span>        android<span class="token punctuation">:</span>useLevel<span class="token operator">=</span><span class="token string">"[true | false]"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>padding        android<span class="token punctuation">:</span>left<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>top<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>right<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>bottom<span class="token operator">=</span><span class="token string">"integer"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>size        android<span class="token punctuation">:</span>width<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>height<span class="token operator">=</span><span class="token string">"integer"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>solid        android<span class="token punctuation">:</span>color<span class="token operator">=</span><span class="token string">"color"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>stroke        android<span class="token punctuation">:</span>width<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>color<span class="token operator">=</span><span class="token string">"color"</span>        android<span class="token punctuation">:</span>dashWidth<span class="token operator">=</span><span class="token string">"integer"</span>        android<span class="token punctuation">:</span>dashGap<span class="token operator">=</span><span class="token string">"integer"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>接下来分别解释各个节点下属性含义：</p><p>Q1  <code>shape</code>:图形的形状，可选值有：</p><ul><li><strong>rectangle</strong>(矩形)：为默认值。</li><li><strong>oval</strong>(椭圆)</li><li><strong>line</strong>(横线)：</li></ul><blockquote><p>注意：<strong>必须</strong>通过<code>stroke</code>标签来指定横线的宽度和颜色等信息。</p></blockquote><ul><li><strong>ring</strong>(圆环)：</li></ul><blockquote><ul><li>注意：<strong>必须</strong>通过<code>stroke</code>标签来指定圆环线的宽度和颜色等信息。</li><li>圆环还有<strong>额外</strong>几个属性，如下图所示：</li></ul><p><img src="https://s2.ax1x.com/2020/02/21/3nbMpd.png" alt="ring额外属性"></p></blockquote><p>Q2 <code>corners</code>：表示shape的四个圆角的角度，<strong>只适用于矩形</strong>。</p><ul><li><code>radius</code>：为四个角同时设定相同的角度。优先级比以下4个属性要低。</li><li><code>topLeftRadius</code>：左上角的角度</li><li><code>topRightRadius</code>：右上角的角度</li><li><code>bottomLeftRadius</code>：左下角的角度</li><li><code>bottomRightRadius</code>：右下角的角度</li></ul><p>Q3:<code>gradient</code>：渐变效果，与<code>solid</code>纯色填充是互斥的。</p><ul><li><code>angle</code>：渐变的角度。</li></ul><blockquote><ul><li>默认为0</li><li>值必须为45的倍数。</li><li>0表示从左到右，90表示从下到上。</li></ul></blockquote><ul><li><code>centerX</code>：渐变的中心点的X坐标</li><li><code>centerY</code>：渐变的中心点的Y坐标</li><li><code>startColor</code>：渐变的起始色</li><li><code>centerColor</code>：渐变的中间色</li><li><code>endColor</code>：渐变的结束色</li><li><code>gradientRadius</code>：渐变半径。仅当<code>android:type=&quot;radial&quot;</code>时有效</li><li><code>useLevel</code>：一般为false，当Drawable作<code>StateListDrawable</code>时为true</li><li><code>type</code>：渐变的类别。可选值：</li></ul><blockquote><ul><li><code>linear</code>(线性渐变)：默认</li><li><code>radial</code>(辐射渐变)：需要配合<code>android:gradientRadius</code>属性一起使用。</li><li><code>sweep</code>(扫描线渐变)：</li></ul><p><img src="https://s2.ax1x.com/2020/02/21/3umcyn.png" alt="渐变的样式"></p></blockquote><ul><li><code>padding</code>：与四周空白的距离。</li><li><code>size</code>:图形的固有大小，非最终大小</li></ul><blockquote><p><code>android:width</code>和<code>android:height</code>分别设定shape的宽/高。</p></blockquote><ul><li><code>solid</code>:纯色填充。</li></ul><blockquote><p><code>android:color</code>：指定填充的颜色。</p></blockquote><ul><li><code>stroke</code>:描边。属性含义：</li></ul><table><thead><tr><th>stroke的属性</th><th>作用</th></tr></thead><tbody><tr><td>width</td><td>描边的宽度</td></tr><tr><td>color</td><td>描边的颜色</td></tr><tr><td>dashWidth</td><td>虚线的宽度</td></tr><tr><td>dashGap</td><td>虚线的空隙的间隔</td></tr></tbody></table><h4 id="2-2-4-LayerDrawable"><a href="#2-2-4-LayerDrawable" class="headerlink" title="2.2.4 LayerDrawable"></a>2.2.4 <code>LayerDrawable</code></h4><ul><li>表示一种<strong>层次化</strong>的Drawable集合，通过将不同的Drawable放置在不同的层上面从而达到一种叠加后的效果。</li><li>根节点<code>layer-list</code>，常用属性：</li></ul><pre class=" language-swift"><code class="language-swift">layer<span class="token operator">-</span>list    <span class="token operator">|</span><span class="token operator">-</span> item    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> drawable<span class="token operator">=</span><span class="token string">"@drawable/drawable_id"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> id<span class="token operator">=</span><span class="token string">"@+id/xxx_id"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> top<span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> <span class="token keyword">left</span><span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> <span class="token keyword">right</span><span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> bottom<span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span></code></pre><blockquote><p>注意：每组 Drawable 由<code>item</code>节点进行配置，一个<code>layer-list</code>可包含多个item，服从下面item覆盖上面item的原则。</p></blockquote><p>A.<code>drawable</code>:所引用的位图资源id，如果为空需要有一个Drawable类型的子节点。</p><p>B.<code>id</code>:层id。</p><p>C.<code>left</code>：层相对于容器的左边距。</p><p>D.<code>right</code>：层相对于容器的右边距。</p><p>E.<code>top</code>：层相对于容器的上边距。</p><p>F.<code>bottom</code>：层相对于容器的下边距。</p><ul><li>实例：bitmap的简单叠加:</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer-list</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bitmap</span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher_round<span class="token punctuation">"</span></span>             <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span>        <span class="token attr-name"><span class="token namespace">android:</span>left</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>top</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bitmap</span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher_round<span class="token punctuation">"</span></span>             <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span>        <span class="token attr-name"><span class="token namespace">android:</span>left</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>top</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bitmap</span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher_round<span class="token punctuation">"</span></span>             <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer-list</span><span class="token punctuation">></span></span></code></pre><p><img src="https://s2.ax1x.com/2020/02/21/3uM9l4.png" alt="bitmap的简单叠加"></p><h4 id="2-2-5-StateListDrawable"><a href="#2-2-5-StateListDrawable" class="headerlink" title="2.2.5 StateListDrawable"></a>2.2.5 <code>StateListDrawable</code></h4><ul><li>表示一个Drawable的集合，每个Drawable对应着View的一种<strong>状态</strong>。</li><li>根节点<code>selector</code>，常用属性：</li></ul><pre class=" language-ruby"><code class="language-ruby">selector    <span class="token operator">|</span><span class="token operator">-</span>constantSize<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span><span class="token operator">-</span>dither<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span><span class="token operator">-</span>variablePadding<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span><span class="token operator">-</span> item    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> drawable<span class="token operator">=</span><span class="token string">"@drawable/drawable_id"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> state_pressed<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> state_focused<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> state_selected<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> state_hovered<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> state_checked<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> state_checkable<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> state_enabled<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> state_activated<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> state_window_focused<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span></code></pre><p>A.<code>selector</code>:</p><ul><li><code>constantSize</code>：<strong>固有大小</strong>是否不变。</li></ul><blockquote><ul><li><p>默认为false，表示固有大小<strong>会</strong>随着状态的改变而改变。</p></li><li><p>设为true，则表示固有大小是<strong>固定值</strong>，是内部所有Drawable的固有大小中的<strong>最大值</strong>。</p></li></ul></blockquote><ul><li><code>dither</code>：是否开启<strong>抖动</strong>效果。开启后让高质量的图片的比较低质量的屏幕上不失真。默认开启。</li><li><code>variblePadding</code>：其<strong>padding</strong>是否随状态的改变而改变。</li></ul><blockquote><ul><li>默认为false，表示padding是<strong>固定值</strong>，是其内部所有Drawable的padding中的<strong>最大值</strong>。</li><li>为true，则表示padding<strong>会</strong>随着状态的改变而改变。</li></ul></blockquote><p>B.<code>item</code>:</p><ul><li><code>drawable</code>：所引用的位图资源id。</li><li>表示各种状态的属性：</li></ul><table><thead><tr><th>状态</th><th>含义</th></tr></thead><tbody><tr><td>state_pressed（常用）</td><td>按下状态</td></tr><tr><td>state_focused</td><td>已经获取了焦点</td></tr><tr><td>state_selected</td><td>选择了View</td></tr><tr><td>state_checked</td><td>适用于<code>checkBox</code></td></tr><tr><td>state_enabled</td><td>表示可用状态</td></tr></tbody></table><ul><li>实例：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selector</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>constantSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>dither</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>variablePadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/red_bg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>state_pressed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/black_bg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>state_pressed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selector</span><span class="token punctuation">></span></span></code></pre><h4 id="2-2-6-LevelListDrawable"><a href="#2-2-6-LevelListDrawable" class="headerlink" title="2.2.6 LevelListDrawable"></a>2.2.6 <code>LevelListDrawable</code></h4><ul><li>表示一个Drawable集合，集合中的每个Drawable都有一个<strong>等级</strong>的概念。通过设置不同的等级来切换具体的<code>Drawable</code></li><li>根节点<code>level-list</code>，常用属性：</li></ul><pre class=" language-cpp"><code class="language-cpp">level<span class="token operator">-</span>list    <span class="token operator">|</span><span class="token operator">-</span> item    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> drawable<span class="token operator">=</span><span class="token string">"@drawable/drawable_id"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> maxLevel<span class="token operator">=</span><span class="token string">"integer"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> minlevel<span class="token operator">=</span><span class="token string">"integer"</span></code></pre><blockquote><ul><li><code>drawable</code>：引用的位图资源id。</li><li><code>maxLevel</code>：对应的最大值，取值范围为0~10000，默认为0。（常用）</li><li><code>minlevel</code>：对应的最小值，取值范围为0~10000，默认为0。</li></ul></blockquote><ul><li><p>使用方法：无论是用xml还是代码实现，若作为View背景，都需要在Java代码中调用<code>setLevel()</code>方法；若作为ImageView前景，需要调用<code>setImageLevel()</code>。</p></li><li><p>加载规则：当某item的<code>android:maxLevel</code> <strong>等于</strong> <code>setLevel</code>所设置的数值时就会被加载。若都没有匹配的则都不显示。</p></li><li><p>实例：</p><pre class=" language-xml"><code class="language-xml">//在Drawable文件夹中创建bg_level.xml<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level-list</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>maxLevel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/image1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>maxLevel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/image2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>maxLevel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/image3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level-list</span><span class="token punctuation">></span></span>//在activity_main.xml中设置为ImageView背景 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/image<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/bg_level<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>//在MainActivity调用setImageLevel()   ImageView imageView = (ImageView) findViewById(R.id.image);        imageView.setImageLevel(2);</code></pre></li></ul><blockquote><p>运行结果：ImageView的背景为image2。</p></blockquote><h4 id="2-2-7-TransitionDrawable"><a href="#2-2-7-TransitionDrawable" class="headerlink" title="2.2.7 TransitionDrawable"></a>2.2.7 <code>TransitionDrawable</code></h4><ul><li>LayerDrawable的子类，实现<strong>两层</strong> Drawable之间的<strong>淡入淡出</strong>效果。</li><li>根节点<code>transition</code>，常用属性和<code>LayerDrawable</code>相同，不再赘述。</li></ul><pre class=" language-swift"><code class="language-swift">transition    <span class="token operator">|</span><span class="token operator">-</span> item    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> drawable<span class="token operator">=</span><span class="token string">"@drawable/drawable_id"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> id<span class="token operator">=</span><span class="token string">"@+id/xxx_id"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> top<span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> <span class="token keyword">left</span><span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> <span class="token keyword">right</span><span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">-</span> bottom<span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span></code></pre><ul><li><p>使用方法：无论是用xml还是代码实现，若作为View背景，都需要在Java代码中调用<code>startTransition()</code>方法才能启动两层间的切换动画，也可以调用<code>reverseTransition()</code>方法反方向切换。</p></li><li><p>实例：</p></li></ul><pre class=" language-xml"><code class="language-xml">//在Drawable文件夹中创建bg_tran.xml<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/image1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/image2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>//在activity_main.xml中设置为ImageView的src <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/image<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/bg_tran<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/bg_tran<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>//在MainActivity调用startTransition()        ImageView imageView = (ImageView) findViewById(R.id.image);        TransitionDrawable td = (TransitionDrawable) imageView.getDrawable();        TransitionDrawable td2 = (TransitionDrawable) imageView.getBackground();        td.startTransition(3000);        td2.startTransition(3000);</code></pre><blockquote><p>运行结果：ImageView的背景从image1缓缓切换到image2。</p></blockquote><h4 id="2-2-8-InsetDrawable"><a href="#2-2-8-InsetDrawable" class="headerlink" title="2.2.8 InsetDrawable"></a>2.2.8 <code>InsetDrawable</code></h4><ul><li>表示把一个Drawable嵌入到另外一个Drawable的内部，并在四周留一些间距。</li></ul><blockquote><p>与Drawable的padding属性不同：padding表示的是<strong>Drawable的内容与Drawable本身</strong>的边距；而InsetDrawable表示的是<strong>Drawable与容器之间</strong>的边距。</p></blockquote><ul><li>根节点<code>inset</code>，常用属性：</li></ul><pre class=" language-bash"><code class="language-bash">inset    <span class="token operator">|</span>- drawable<span class="token operator">=</span><span class="token string">"@drawable/drawable_id"</span>    <span class="token operator">|</span>- visible<span class="token operator">=</span><span class="token string">"[true | false]"</span>    <span class="token operator">|</span>- insetTop<span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span>- insetLeft<span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span>- insetRight<span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span>- insetBottom<span class="token operator">=</span><span class="token string">"dimension"</span>    <span class="token operator">|</span></code></pre><blockquote><ul><li><code>drawable</code>:所引用的位图资源id。</li><li><code>visible</code>：是否留有边距。(经测试，发现设置true/false效果一样….)</li><li><code>insetTop</code>：设置距离容器的上边距。其他同理。</li></ul></blockquote><ul><li>适用场景：当控件需要的背景比实际的边框<strong>小</strong>。</li><li>实例：</li></ul><pre class=" language-xml"><code class="language-xml">//在drawable文件夹下创建<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inset</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/image<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>insetBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>insetLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>insetRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>insetTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>visible</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inset</span><span class="token punctuation">></span></span></code></pre><p><img src="https://s2.ax1x.com/2020/02/21/3u0gC4.png" alt="InsetDrawable效果"></p><ul><li>面试题：为一个充满整个屏幕的LinearLayout布局指定背景图，是否可以让背景图不充满屏幕？</li></ul><blockquote><p>答案：可以使用嵌入(Inset)图像资源来指定图像，然后像使用普通图像资源一样使用嵌入图像资源</p></blockquote><h4 id="2-2-9-ScaleDrawable"><a href="#2-2-9-ScaleDrawable" class="headerlink" title="2.2.9 ScaleDrawable"></a>2.2.9 <code>ScaleDrawable</code></h4><ul><li>表示将Drawable缩放到一定比例。</li><li>根节点<code>scale</code>，常用属性：</li></ul><pre class=" language-bash"><code class="language-bash">scale    <span class="token operator">|</span>- drawable<span class="token operator">=</span><span class="token string">"@drawable/drawable_id"</span>    <span class="token operator">|</span>- scaleGravity<span class="token operator">=</span><span class="token string">"[top | bottom | left | right |        center_vertical | center_horizontal | center |        fill_vertical | fill_horizontal | fill |        clip_vertical | clip_horizontal]"</span>    <span class="token operator">|</span>- scaleWidth<span class="token operator">=</span><span class="token string">"percentage"</span>    <span class="token operator">|</span>- scaleHeight<span class="token operator">=</span><span class="token string">"percentage"</span>    <span class="token operator">|</span></code></pre><blockquote><ul><li><code>drawable</code>：所引用的位图资源id。</li><li><code>scaleGravity</code>：等同于BitmapDrawable的<code>android:gravity</code>。</li><li><code>scaleWidth</code>/<code>android:scaleHeight</code>：指定Drawable宽/高的缩放比例，以<strong>百分比</strong>的形式表示。</li></ul></blockquote><ul><li>使用方法：无论是用xml还是代码实现，若作为View背景，都需要在Java代码中调用<code>setLevel()</code>方法控制Drawable等级。</li></ul><blockquote><ul><li>level取值范围为0~10000</li><li>默认值为0：表示不可见；1~10000：表示可见</li><li>一般<code>level</code>设为1即可</li></ul></blockquote><ul><li>实例：将一张图片缩小为原来的30%，代码为：</li></ul><pre class=" language-xml"><code class="language-xml">//在drawable文件夹下创建bg_scale.xml<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scale</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/drawable_test<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>scaleGravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>scaleHeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70%<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>scaleWidth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70%<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>//在activity_main.xml中设置为ImageView背景 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/image<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/bg_scale<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>//在MainActivity调用setLevel()         ImageView imageView = (ImageView) findViewById(R.id.image);        ScaleDrawable scaleDrawable = (ScaleDrawable) imageView.getDrawable();        scaleDrawable.setLevel(1);</code></pre><h4 id="2-2-10-ClipDrawable"><a href="#2-2-10-ClipDrawable" class="headerlink" title="2.2.10 ClipDrawable"></a>2.2.10 <code>ClipDrawable</code></h4><ul><li>表示裁剪一个Drawable。</li><li>根节点<code>clip</code>，常用属性：</li></ul><pre class=" language-bash"><code class="language-bash">scale    <span class="token operator">|</span>- drawable<span class="token operator">=</span><span class="token string">"@drawable/drawable_id"</span>    <span class="token operator">|</span>- gravity<span class="token operator">=</span><span class="token string">"[top | bottom | left | right |        center_vertical | center_horizontal | center |        fill_vertical | fill_horizontal | fill |        clip_vertical | clip_horizontal]"</span>    <span class="token operator">|</span>- clipOrientation<span class="token operator">=</span><span class="token string">"[vertical | horizontal]"</span>    <span class="token operator">|</span></code></pre><blockquote><ul><li><code>drawable</code>：所引用的位图资源id。</li><li><code>gravity</code>：表示对齐方式，需要和clipOrientation一起发挥作用。可选值含义：</li></ul><p><img src="https://s2.ax1x.com/2020/02/21/3usmZt.png" alt="ClipDrawable的gravity"></p><ul><li><code>clipOrientation</code>：表示裁剪方向，可选值有水平和竖直。</li></ul></blockquote><ul><li>使用方法：无论是用xml还是代码实现，若作为View背景，都需要在Java代码中调用<code>setLevel()</code>方法控制可见区大小。</li></ul><blockquote><ul><li>level取值范围为0~10000。</li><li>0：表示完全裁剪，即不可见；10000：表示不裁剪。</li><li><code>level</code>越大可见区越大。</li><li>一般<code>level</code>设为1即可</li></ul></blockquote><ul><li>补充实例：<a href="https://www.jianshu.com/p/abc445c5a53a" target="_blank" rel="noopener">Android中ClipDrawable的使用</a>,感兴趣的读者可以了解一下</li></ul><h3 id="2-3-自定义Drawable"><a href="#2-3-自定义Drawable" class="headerlink" title="2.3 自定义Drawable"></a>2.3 自定义Drawable</h3><ul><li>工作原理的核心是<code>draw()</code>：系统调用Drawable的<code>draw()</code>来绘制View的背景或ImageView的图像。</li><li>通常没有必要去自定义Drawable，因为无法在XML中使用自定义Drawable，这就降低了其使用范围。</li><li>创建自定义Drawable，必须重写其<code>draw()</code>、<code>setAlpha()</code>、<code>setColorFilter()</code>、<code>getOpacity()</code>等方法.以下为自定义Drawable示例：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义Drawable</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomDrawable</span> <span class="token keyword">extends</span> <span class="token class-name">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Paint mPaint<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CustomDrawable</span><span class="token punctuation">(</span><span class="token keyword">int</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPaint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPaint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Rect rect <span class="token operator">=</span>  <span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> cx <span class="token operator">=</span> rect<span class="token punctuation">.</span><span class="token function">exactCenterX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> cy <span class="token operator">=</span> rect<span class="token punctuation">.</span><span class="token function">exactCenterY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>cx<span class="token punctuation">,</span> cy<span class="token punctuation">)</span><span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token keyword">int</span> alpha<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPaint<span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invalidateSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColorFilter</span><span class="token punctuation">(</span>ColorFilter colorFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPaint<span class="token punctuation">.</span><span class="token function">setColorFilter</span><span class="token punctuation">(</span>colorFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invalidateSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOpacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> PixelFormat<span class="token punctuation">.</span>TRANSLUCENT<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>当自定义的Drawable有固有大小时（Drawable是图片），最好重写<code>getIntrinsicWidth()</code>和<code>getIntrinsicHeight()</code>，因为它会影响到View的wrap_content布局。</li></ul><blockquote><p><strong>注意</strong>：Drawable的内部大小不等于Drawable的实际大小，后者可通过<code>getBounds()</code>获得，一般它和View的尺寸相同。</p></blockquote><h2 id="三-知识拓展"><a href="#三-知识拓展" class="headerlink" title="三.知识拓展"></a>三.知识拓展</h2><p>恭喜你！已经看到这里了，相信你已经对<code>Drawable</code>有一定的见解了！本文只是介绍了<code>Drawable</code>中常用的类型，并没有完全列出所有<code>Drawable</code>的类型，而且只是介绍了<code>XML</code>的创建。</p><p>但是，笔者也给好奇心强的读者准备了一些干货（一篇博客），里面详细介绍了Drawable的各种类型，各种创建方法，总的来说还是写得比较不错的。指路：<a href="https://www.jianshu.com/p/39f09ea26430" target="_blank" rel="noopener">Drawable子类用法总结</a>.</p><p>下面展示下本文还没来得及赘述的<code>Drawable</code>:</p><p><img src="https://s2.ax1x.com/2020/02/21/3ug8hV.gif" alt="AnimationDrawable"></p><p><img src="https://s2.ax1x.com/2020/02/21/3uRo6S.gif" alt="RippleDrawable"></p><p><img src="https://s2.ax1x.com/2020/02/21/3uWS6U.png" alt="RoundedBitmapDrawable"></p><p><img src="https://s2.ax1x.com/2020/02/21/3uWy90.gif" alt="DrawerArrowDrawable"></p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《Android 开发艺术探索》</li><li><a href="https://blog.csdn.net/MakerCloud/article/details/80419130" target="_blank" rel="noopener">9patch / NinePatch 详解及使用</a></li><li><a href="https://www.jianshu.com/p/abc445c5a53a" target="_blank" rel="noopener">Android中ClipDrawable的使用</a></li><li><a href="https://www.jianshu.com/p/39f09ea26430" target="_blank" rel="noopener">Drawable子类用法总结</a></li><li><a href="https://www.jianshu.com/p/35c7775b8202" target="_blank" rel="noopener">要点提炼|开发艺术之Drawable</a></li><li><a href="https://www.sohu.com/a/119744237_355135" target="_blank" rel="noopener">Android ImageView 正确使用姿势</a></li><li><a href="https://blog.csdn.net/xin917480852/article/details/51249190" target="_blank" rel="noopener">InsetDrawable详解</a></li><li><a href="https://blog.csdn.net/ouyang_peng/article/details/46958117" target="_blank" rel="noopener">Android嵌入图像InsetDrawable的用法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发艺术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路 | 奇妙的View之旅</title>
      <link href="/2020/02/19/jin-jie-zhi-lu-qi-miao-de-view-zhi-lu/"/>
      <url>/2020/02/19/jin-jie-zhi-lu-qi-miao-de-view-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="进阶之路-奇妙的View之旅"><a href="#进阶之路-奇妙的View之旅" class="headerlink" title="进阶之路 | 奇妙的View之旅"></a>进阶之路 | 奇妙的View之旅</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li>View是什么</li><li>View的位置参数</li><li>View的触控</li><li>View的滑动</li></ul><blockquote><p>涉及以下各个知识点：</p><ul><li>View的各种滑动方式及其对比</li><li>弹性滑动</li><li>滑动冲突</li></ul></blockquote><ul><li>View的动画</li><li>View的事件分发机制</li><li>View的工作原理</li><li>View的自定义方式</li></ul><h2 id="一-为什么要学习View？"><a href="#一-为什么要学习View？" class="headerlink" title="一.为什么要学习View？"></a>一.为什么要学习View？</h2><p><code>View</code>,是<code>Android</code>中十分重要的一个知识点，是所有控件的基类，尽管<code>View</code>不属于四大组件，但是它的作用堪比四大组件，甚至重要性大于<code>ContentProvider</code>和<code>Broadcast Receivers</code>。</p><p><code>ViewGroup</code>是<code>View</code>的继承，它的内部包含了一组View。</p><p>很多时候，面对产品经理的各种奇葩的需求，仅仅使用系统提供的控件是不能满足需求的，因此，我们就需要自定义特定的控件，而自定义控件就需要对<code>View</code>体系有一定程度的理解；有时候，涉及到滑动事件的自定义View的时候，难免会出现各种各样的滑动冲突，而要解决滑动冲突的话，还需要对<code>View</code>的事件分发机制了然于心。</p><p>综上，掌握好<code>View</code>这方面的知识，不仅可以让你在日常开发中对自定义View的各种场景胸有成竹，还可以让你在面试官的重重追问（ai hu）下游刃有余（xin tai bao zha）。</p><p><img src="https://s2.ax1x.com/2020/02/17/3ilqo9.png" alt="View体系"></p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-View的位置参数"><a href="#2-1-View的位置参数" class="headerlink" title="2.1 View的位置参数"></a>2.1 <code>View</code>的位置参数</h3><p>Q1：<strong>Android坐标系</strong>是怎样的呢？</p><blockquote><p>以屏幕的左上角为坐标原点，<strong>向右</strong>为x轴增大方向，<strong>向下</strong>为y轴增大方向</p></blockquote><p><img src="https://s2.ax1x.com/2019/10/27/KscNIs.png" alt="Android坐标系"></p><p>Q2：<strong>View的位置怎么确定</strong>?</p><ul><li>由四个顶点确定，分别对应四个属性：<strong>top、left、right、bottom</strong>。</li></ul><blockquote><ul><li>left是左上角的横坐标，left = <code>getLeft()</code></li><li>right是右下角的横坐标，right = <code>getRight()</code></li><li>top是左上角的纵坐标，top = <code>getTop()</code></li><li>bottom是右下角的纵坐标，bottom=<code>getBottom()</code></li></ul><p>注意：这些坐标是相对于父容器而言的，属于相对坐标；如果想要得到绝对坐标，需要调用<code>getRawX()</code>，绝对坐标的知识在下文将会详细讲解。</p></blockquote><p><img src="https://s2.ax1x.com/2020/02/17/3iGLnK.png" alt="View坐标系"></p><blockquote><p>因此，View的宽高和坐标关系：</p><ul><li>width = right - left,可直接通过<code>getWidth()</code>得到</li><li>height = bottom - top，可直接通过<code>getHeight()</code>得到</li></ul></blockquote><p>Q3：View偏移量<strong>translation</strong></p><blockquote><p><code>translationX</code>和<code>translationY</code>是View 左上角相对父容器左上角的偏移量，它们默认值是0。这些参数也是<strong>相对于View父容器</strong>。</p></blockquote><p><img src="https://s2.ax1x.com/2020/02/17/3iNVAO.png" alt="View偏移量"></p><blockquote><ul><li>存在关系：x = left + translationX，y = top + translationY</li><li>由此可见，x和left不同体现在：</li><li><strong>left</strong>是View的<strong>初始坐标</strong>，在绘制完毕后就不会再改变；</li><li>而<strong>x</strong>是View偏移后的<strong>实时坐标</strong>，是实际坐标。y和top的区别同理。</li></ul></blockquote><p>需要注意的是，在<code>onCreate()</code>方法里无法获取到View的坐标参数，这是因为此时<strong>View还未开始绘制</strong>，全部坐标参数将都是0。</p><h3 id="2-2-View的触控"><a href="#2-2-View的触控" class="headerlink" title="2.2 View的触控"></a>2.2 <code>View</code>的触控</h3><h4 id="2-2-1-MotionEvent"><a href="#2-2-1-MotionEvent" class="headerlink" title="2.2.1 MotionEvent"></a>2.2.1 MotionEvent</h4><p>它是手指触摸屏幕所产生的一系列事件。典型事件有：</p><ul><li><strong>ACTION_DOWN</strong>：手指刚接触屏幕</li><li><strong>ACTION_MOVE</strong>：手指在屏幕上滑动</li><li><strong>ACTION_UP</strong>：手指在屏幕上松开的一瞬间</li></ul><blockquote><p>事件列：从手指接触屏幕至手指离开屏幕，这个过程产生的一系列事件，任何事件列都是以DOWN事件开始，UP事件结束，中间有无数的MOVE事件</p></blockquote><ul><li><p>通过MotionEvent 对象可以得到触摸事件的<strong>x、y</strong>坐标。其中通过<code>getX()</code>、<code>getY()</code>可获取相对于<strong>当前view</strong>（注意：不是父容器）左上角的x、y坐标(相对坐标)；</p></li><li><p>通过<code>getRawX()</code>、<code>getRawY()</code>可获取相对于手机屏幕左上角的x，y坐标（绝对坐标）。</p><p>具体关系见下图：</p></li></ul><p><img src="https://s2.ax1x.com/2020/02/18/3FBcff.png" alt="MotionEvent具体关系"></p><h4 id="2-2-2-TouchSlop"><a href="#2-2-2-TouchSlop" class="headerlink" title="2.2.2 TouchSlop"></a>2.2.2 TouchSlop</h4><ul><li>系统所能识别的被认为是<strong>滑动的最小距离</strong>。即当手指在屏幕上滑动时，如果两次滑动之间的距离小于这个常量，那么系统就不认为你是在进行滑动操作。</li><li>该常量和设备有关，可用它来判断用户的滑动是否达到阈值</li><li>获取方法：<code>ViewConfiguration.get(getContext()).getScaledTouchSlop()</code></li></ul><h4 id="2-2-3-VelocityTracker"><a href="#2-2-3-VelocityTracker" class="headerlink" title="2.2.3 VelocityTracker"></a>2.2.3 VelocityTracker</h4><blockquote><p><strong>速度追踪</strong>，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。</p></blockquote><p>使用过程：</p><ul><li><p>在view的<code>onTouchEvent</code>方法中追踪当前单击事件的速度：</p><pre class=" language-java"><code class="language-java">VelocityTracker velocityTracker <span class="token operator">=</span> VelocityTracker<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化一个VelocityTracker 对象</span>velocityTracker<span class="token punctuation">.</span><span class="token function">addMovement</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加追踪事件</span></code></pre></li><li><p>在<code>ACTION_UP</code>事件中获取当前的速度 </p><pre class=" language-java"><code class="language-java">velocityTracker <span class="token punctuation">.</span><span class="token function">computeCurrentVelocity</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取速度前先计算速度，这里计算的是在1000ms内</span><span class="token keyword">float</span> xVelocity <span class="token operator">=</span> velocityTracker <span class="token punctuation">.</span><span class="token function">getXVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到的是1000ms内手指在水平方向从左向右滑过的像素数，即水平速度</span><span class="token keyword">float</span> yVelocity <span class="token operator">=</span> velocityTracker <span class="token punctuation">.</span><span class="token function">getYVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到的是1000ms内手指在水平方向从上向下滑过的像素数，垂直速度</span></code></pre><blockquote><p>注意速度方向，这个速度方向和下面的mScrollX的方向相反</p></blockquote></li></ul><ul><li><p>当不需要使用它的时候，需要调用<code>clear</code>方法来重置并回收内存</p><pre class=" language-java"><code class="language-java">velocityTracker<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>velocityTracker<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="2-2-4-GestureDetector"><a href="#2-2-4-GestureDetector" class="headerlink" title="2.2.4 GestureDetector"></a>2.2.4 GestureDetector</h4><blockquote><p>手势检测，用于辅助检测用户的单击、滑动、长按、<strong>双击</strong>等行为</p></blockquote><p>使用过程：</p><ul><li><p>创建一个GestureDetecor对象并实现OnGestureListener接口，根据需要实现单击等方法</p><pre class=" language-java"><code class="language-java">GestureDetector mGestureDetector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化一个GestureDetector对象</span>mGestureDetector<span class="token punctuation">.</span><span class="token function">setIsLongpressEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解决长按屏幕后无法拖动的现象</span></code></pre></li><li><p>接管目标view的onTouchEvent方法，在待监听view的onTouchEvent方法中添加如下实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> consume <span class="token operator">=</span> mGestureDetector<span class="token punctuation">.</span><span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> consume<span class="token punctuation">;</span></code></pre></li><li><p>有选择的实现OnGestureListener和OnDoubleTapListener中的方法</p></li></ul><blockquote><p>建议：如果只是监听滑动操作，建议在<code>onTouchEvent</code>中实现；如果要监听双击这种行为，则使用<code>GestureDetector</code> 。</p></blockquote><h3 id="2-3-View的滑动"><a href="#2-3-View的滑动" class="headerlink" title="2.3 View的滑动"></a>2.3 <code>View</code>的滑动</h3><h4 id="2-3-1-View滑动的七种方式"><a href="#2-3-1-View滑动的七种方式" class="headerlink" title="2.3.1 View滑动的七种方式"></a>2.3.1 <code>View</code>滑动的七种方式</h4><h5 id="1-scrollTo-scollBy"><a href="#1-scrollTo-scollBy" class="headerlink" title="1. scrollTo/scollBy"></a>1. <code>scrollTo</code>/<code>scollBy</code></h5><blockquote><ul><li>区别：<code>scrollBy</code>是内部调用了<code>scrollTo</code>的，它是基于当前位置的<strong>相对滑动</strong>；而<code>scrollTo</code>是<strong>绝对滑动</strong>，因此如果利用相同输入参数多次调用<code>scrollTo()</code>方法，由于View初始位置是不变只会出现一次View滚动的效果而不是多次。</li><li>注意：两者都只能对<strong>view内容</strong>进行滑动，而不能使view本身滑动。</li><li>方向：手指从右向左滑动，mScrollX为正值，反之为负值；手指从下往上滑动，mScrollY为正值，反之为负值。（更直观感受：查看下一张照片或者查看长图时手指滑动方向为正）</li><li>滑动类型：非弹性滑动</li></ul></blockquote><p><img src="https://s2.ax1x.com/2020/02/18/3FhDBV.png" alt="灰色是内容，绿框是View"></p><h5 id="2-LayoutParams"><a href="#2-LayoutParams" class="headerlink" title="2. LayoutParams"></a>2. LayoutParams</h5><blockquote><ul><li>原理：通过改变View的<strong>LayoutParams</strong>使得View重新布局：比如将一个View向右移动100像素，向右，只需要把它的marginLeft参数增大即可</li><li>滑动类型：<strong>非弹性</strong>滑动</li></ul></blockquote><pre class=" language-java"><code class="language-java">MarginLayoutParams params <span class="token operator">=</span> <span class="token punctuation">(</span>MarginLayoutParams<span class="token punctuation">)</span> btn<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span>leftMargin <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请求重新对View进行measure、layout</span></code></pre><h5 id="3-动画"><a href="#3-动画" class="headerlink" title="3. 动画"></a>3. 动画</h5><blockquote><ul><li><p>动画分为View动画和属性动画，View动画又分为帧动画和补间动画</p></li><li><p>如果使用属性动画的话，为了能够兼容3.0以下版本，需要采用开源动画库nineoldandroids。</p></li><li><p>属于弹性滑动</p></li></ul></blockquote><p><img src="https://s2.ax1x.com/2020/02/18/3FopE6.png" alt="动画的分类"></p><pre class=" language-java"><code class="language-java">ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>targetView<span class="token punctuation">,</span><span class="token string">"translationX"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在100ms内使得View从原始位置向右平移100像素</span></code></pre><blockquote><p>想要了解动画详细内容的读者，可以看一下笔者这篇文章：<a href="https://juejin.im/post/5e5376fdf265da5749474559" target="_blank" rel="noopener">进阶之路 | 奇妙的Animation之旅</a></p></blockquote><h5 id="4-layout"><a href="#4-layout" class="headerlink" title="4. layout()"></a>4. <code>layout()</code></h5><blockquote><ul><li><p>基本思想：记下触摸点的坐标移动之后，记下移动后的坐标算出偏移量</p></li><li><p>使用方式：在<code>onTouchEvent</code>中获取到手指的横纵坐标，在<code>ACTION_DOWN</code>中存储上次的x，在<code>ACTION_MOVE</code>中计算移动的距离，最后调用<code>layout</code>方法重新放置<code>View</code></p></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到手指处的横坐标和纵坐标</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//lastX是存储上一次的x</span>                lastX <span class="token operator">=</span> x<span class="token punctuation">;</span>                lastY <span class="token operator">=</span> y<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//计算移动的距离</span>                <span class="token keyword">int</span> offsetX <span class="token operator">=</span> x <span class="token operator">-</span> lastX<span class="token punctuation">;</span>                <span class="token keyword">int</span> offsetY <span class="token operator">=</span> y <span class="token operator">-</span> lastY<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用layout方法来重新放置它的位置,左上右下</span>               <span class="token function">layout</span><span class="token punctuation">(</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetX<span class="token punctuation">,</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetY<span class="token punctuation">,</span>                       <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetX <span class="token punctuation">,</span> <span class="token function">getBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h5 id="5-offsetLeftAndRight-与offsetTopAndBottom"><a href="#5-offsetLeftAndRight-与offsetTopAndBottom" class="headerlink" title="5. offsetLeftAndRight()与offsetTopAndBottom()"></a>5. <code>offsetLeftAndRight()</code>与<code>offsetTopAndBottom()</code></h5><blockquote><p>使用方式类似于<code>layout()</code>，将 <code>layout(getLeft()+offsetX, getTop()+offsetY,getRight()+offsetX , getBottom()+offsetY)</code>换成<code>offsetLeftAndRight(offsetX)</code>与<code>offsetTopAndBottom(offsetY)</code>即可</p></blockquote><pre class=" language-java"><code class="language-java">           <span class="token comment" spellcheck="true">// 对left和right进行偏移</span>           <span class="token function">offsetLeftAndRight</span><span class="token punctuation">(</span>offsetX<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对top和bottom进行偏移</span>           <span class="token function">offsetTopAndBottom</span><span class="token punctuation">(</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="6-Scroller"><a href="#6-Scroller" class="headerlink" title="6. Scroller"></a>6. Scroller</h5><blockquote><ul><li>与scrollTo/scrollBy不同：scrollTo/scrollBy过程是瞬间完成的，非平滑；而Scroller则有过渡滑动的效果</li><li>注意：Scoller本身无法让View弹性滑动，它需要和View的<code>computeScroll</code>方法配合使用。</li><li>原理：Scoller的<code>computeScrollOffset()</code>根据<strong>时间的流逝</strong>动态计算一小段时间里View滑动的距离，并得到当前View位置，再通过scrollTo继续滑动。即把一次滑动拆分成无数次小距离滑动从而实现弹性滑动。</li></ul></blockquote><p><code>Scroller</code>惯用代码：</p><pre class=" language-java"><code class="language-java">Scroller scroller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scroller</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实例化一个Scroller对象</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">smoothScrollTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> dstX<span class="token punctuation">,</span> <span class="token keyword">int</span> dstY<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> scrollX <span class="token operator">=</span> <span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//View的左边缘到其内容左边缘的距离</span>  <span class="token keyword">int</span> scrollY <span class="token operator">=</span> <span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//View的上边缘到其内容上边缘的距离</span>  <span class="token keyword">int</span> deltaX <span class="token operator">=</span> dstX <span class="token operator">-</span> scrollX<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x方向滑动的位移量</span>  <span class="token keyword">int</span> deltaY <span class="token operator">=</span> dstY <span class="token operator">-</span> scrollY<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//y方向滑动的位移量</span>  scroller<span class="token punctuation">.</span><span class="token function">startScroll</span><span class="token punctuation">(</span>scrollX<span class="token punctuation">,</span> scrollY<span class="token punctuation">,</span> deltaX<span class="token punctuation">,</span> deltaY<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开始滑动</span>  <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//刷新界面</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//计算一段时间间隔内偏移的距离，并返回是否滚动结束的标记</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>scroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">scrollTo</span><span class="token punctuation">(</span>scroller<span class="token punctuation">.</span><span class="token function">getCurrX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scroller<span class="token punctuation">.</span><span class="token function">getCurY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过不断的重绘不断的调用computeScroll方法</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>startScroll()</code>的源码：</p><blockquote><p>只是进行前期的准备工作，并没有进行实际的滑动操作，而是通过后续<code>invalidate()</code>方法去做滑动动作。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startScroll</span><span class="token punctuation">(</span><span class="token keyword">int</span> startX<span class="token punctuation">,</span><span class="token keyword">int</span> startY<span class="token punctuation">,</span><span class="token keyword">int</span> dx<span class="token punctuation">,</span><span class="token keyword">int</span> dy<span class="token punctuation">,</span><span class="token keyword">int</span> duration<span class="token punctuation">)</span><span class="token punctuation">{</span>  mMode <span class="token operator">=</span> SCROLL_MODE<span class="token punctuation">;</span>  mFinished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  mDuration <span class="token operator">=</span> duration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滑动时间</span>  mStartTime <span class="token operator">=</span> AnimationUtils<span class="token punctuation">.</span><span class="token function">currentAminationTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始时间</span>  mStartX <span class="token operator">=</span> startX<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滑动起点</span>  mStartY <span class="token operator">=</span> startY<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滑动起点</span>  mFinalX <span class="token operator">=</span> startX <span class="token operator">+</span> dx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滑动终点</span>  mFinalY <span class="token operator">=</span> startY <span class="token operator">+</span> dy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滑动终点</span>  mDeltaX <span class="token operator">=</span> dx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滑动距离</span>  mDeltaY <span class="token operator">=</span> dy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滑动距离</span>  mDurationReciprocal <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>mDuration<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><img src="https://s2.ax1x.com/2020/02/18/3kFo4S.png" alt="Scroller具体流程"></p><h5 id="7-延时策略"><a href="#7-延时策略" class="headerlink" title="7. 延时策略"></a>7. 延时策略</h5><blockquote><ul><li>通过发送一系列<strong>延时信息</strong>从而达到一种渐近式的效果，具体可以通过<code>Handler</code>/<code>View</code>的<code>postDelayed</code>，也可使用线程的<code>sleep</code>方法。</li><li>缺点：无法精确地定时；原因：系统的<strong>消息调度</strong>也需要时间</li></ul></blockquote><h4 id="2-3-2-滑动冲突"><a href="#2-3-2-滑动冲突" class="headerlink" title="2.3.2 滑动冲突"></a>2.3.2 滑动冲突</h4><p>Q1:<strong>产生原因</strong>：</p><blockquote><p>一般情况下，在一个界面里存在内外两层可同时滑动的情况时，会出现滑动冲突现象。</p></blockquote><p>Q2:<strong>出现的场景：</strong></p><ul><li>场景一：外部滑动和内部滑动<strong>方向不一致</strong>：如ViewPager嵌套ListView(实际这么用没问题，因为ViewPager内部已处理过)。</li><li>场景二：外部滑动方向和内部滑动<strong>方向一致</strong>：如ScrollView嵌套ListView。</li></ul><blockquote><p>读者如果想要了解出现原因以及解决方式，笔者推荐一篇文章：<a href="https://www.jianshu.com/p/5f198f8a0977" target="_blank" rel="noopener">ScrollView嵌套ListView时可能产生的问题解决</a></p></blockquote><ul><li>场景三：上面两种情况的嵌套</li></ul><p>Q3:<strong>处理规则</strong>：</p><ul><li>对场景一：当用户左右/上下滑动时让外部View拦截点击事件，当用户上下/左右滑动时让内部View拦截点击事件。即根据滑动的方向判断谁来拦截事件。关于判断是上下滑动还是左右滑动，可根据<strong>滑动的距离</strong>或者<strong>滑动的角度</strong>去判断。</li><li>对场景二：一般从<strong>业务</strong>上找突破点。即根据业务需求，规定何时让外部View拦截事件何时由内部View拦截事件。</li><li>对场景三：相对复杂，可同样根据需求在业务上找到突破点。</li></ul><p>Q4:<strong>解决方式</strong>：</p><blockquote><p>这里的<code>onInterceptTouchEvent</code>，<code>dispatchTouchEvent</code>，<code>requestDisallowInterceptTouchEvent</code>等方法在View的事件分发机制会详细说明</p></blockquote><p>A1：外部拦截法</p><ul><li>含义：指点击事件都先经过<strong>父容器的拦截处理</strong>，如果父容器需要此事件就拦截，否则就不拦截。</li><li>方法：需要重写父容器的<code>onInterceptTouchEvent</code>方法，在内部做出相应的拦截。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//重写父容器的拦截方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span> <span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>对于ACTION_DOWN事件必须返回<span class="token boolean">false</span>，一旦拦截后续事件将不能传递给子View         intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>对于ACTION_MOVE事件根据需要决定是否拦截         <span class="token keyword">if</span> <span class="token punctuation">(</span>父容器需要当前事件） <span class="token punctuation">{</span>             intercepted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             intercepted <span class="token operator">=</span> flase<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>对于ACTION_UP事件必须返回<span class="token boolean">false</span>，一旦拦截子View的onClick事件将不会触发         intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    mLastXIntercept <span class="token operator">=</span> x<span class="token punctuation">;</span>    mLastYIntercept <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span> intercepted<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>A2：内部拦截法</p><ul><li><p>含义：指父容器不拦截任何事件，而将所有的事件都传递给子容器，如果子容器需要此事件就直接消耗，否则就交由父容器进行处理。</p></li><li><p>方法：需要配合<code>requestDisallowInterceptTouchEvent</code>方法。重写<code>子View</code>的<code>dispatchTouchEvent()</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span> <span class="token punctuation">(</span> MotionEvent event <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>getAction<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>         parent<span class="token punctuation">.</span><span class="token function">requestDisallowInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为true表示禁止父容器拦截</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>         <span class="token keyword">int</span> deltaX <span class="token operator">=</span> x <span class="token operator">-</span> mLastX<span class="token punctuation">;</span>         <span class="token keyword">int</span> deltaY <span class="token operator">=</span> y <span class="token operator">-</span> mLastY<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>父容器需要此类点击事件<span class="token punctuation">)</span> <span class="token punctuation">{</span>             parent<span class="token punctuation">.</span><span class="token function">requestDisallowInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为fasle表示允许父容器拦截</span>         <span class="token punctuation">}</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span> <span class="token operator">:</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>  mLastX <span class="token operator">=</span> x<span class="token punctuation">;</span>  mLastY <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>除子容器需要做处理外，父容器也要<strong>默认拦截除了<code>ACTION_DOWN</code>以外的其他事件</strong>，这样当子容器调用<code>parent.requestDisallowInterceptTouchEvent(false)</code>方法时，父元素才能继续拦截所需的事件。</p><p>因此，<code>父View</code>需要重写<code>onInterceptTouchEvent()</code>：</p></blockquote></li></ul><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span> <span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> action <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>action <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>内部拦截法要求父容器不能拦截<code>ACTION_DOWN</code>的原因：</p><p>由于该事件并不受<code>FLAG_DISALLOW_INTERCEPT</code>（由<code>requestDisallowInterceptTouchEvent</code>方法设置）标记位控制，一旦<code>ACTION_DOWN</code>事件到来，该标记位会被重置。所以一旦父容器拦截了该事件，那么所有的事件都<strong>不会传递给子View</strong>，内部拦截法也就失效了。</p></blockquote><h3 id="2-4-View的事件分发机制"><a href="#2-4-View的事件分发机制" class="headerlink" title="2.4 View的事件分发机制"></a>2.4 View的事件分发机制</h3><blockquote><p>读者看完本篇对事件分发机制还有些模糊的话，笔者墙裂推荐一篇浅显易懂的文章：<a href="https://www.cnblogs.com/fuly550871915/p/4983682.html" target="_blank" rel="noopener">android中的事件传递和处理机制</a></p></blockquote><p>Q1：<strong>了解</strong><code>setContentView()</code></p><blockquote><p>我们将从源码的角度，一步步带大家深入<code>setContentView()</code>的本质，为后面事件分发机制的了解打好基础</p></blockquote><p><img src="https://s2.ax1x.com/2020/02/18/3k86dU.png" alt="setContentView()机制"></p><blockquote><p>因此，我们可以得到Activity的构成，如下图所示</p></blockquote><p><img src="https://ftp.bmp.ovh/imgs/2019/11/bda68cabafb44473.png" alt="Activity的构成"></p><p>Q2：<strong>事件分发本质是什么</strong>:</p><blockquote><p>就是对<code>MotionEvent</code>事件分发的过程。即当一个<code>MotionEvent</code>产生了以后，系统需要将这个点击事件传递到一个具体的<code>View</code>上。（关于MotionEvent介绍见本篇2.2.1）</p></blockquote><p>Q3：<strong>事件分发需要的主要方法是什么</strong>：</p><ul><li><code>dispatchTouchEvent</code>：进行事件的<strong>分发</strong>（传递）。返回值是 <code>boolean</code> 类型，受当前<code>onTouchEvent</code>和<strong>下级view</strong>的<code>dispatchTouchEvent</code>影响</li><li><code>onInterceptTouchEvent</code>:对事件进行<strong>拦截</strong>。该方法只在<code>ViewGroup</code>中有，<code>View</code>（不包含 <code>ViewGroup</code>）是没有的。如果一旦拦截，则执行<code>ViewGroup</code>的<code>onTouchEvent</code>，在<code>ViewGroup</code>中处理事件，而不接着分发给View,且只调用一次，所以后面的事件都会交给<code>ViewGroup</code>处理。</li><li><code>onTouchEvent</code>：进行事件处理</li></ul><p><img src="https://s2.ax1x.com/2020/02/18/3kYtIO.png" alt="事件分发过程图"></p><blockquote><ul><li>事件分发是逐级下发的，目的是将事件传递给一个View。</li><li>ViewGroup一旦拦截事件，就不往下分发，同时调用onTouchEvent处理事件。</li></ul></blockquote><h3 id="2-5-View的工作原理"><a href="#2-5-View的工作原理" class="headerlink" title="2.5 View的工作原理"></a>2.5 View的工作原理</h3><h4 id="2-5-1-View工作流程"><a href="#2-5-1-View工作流程" class="headerlink" title="2.5.1 View工作流程"></a>2.5.1 View工作流程</h4><blockquote><p><strong><code>measure</code>测量-&gt;<code>layout</code>布局-&gt;<code>draw</code>绘制</strong></p></blockquote><ul><li><code>measure</code>确定View的<strong>测量宽高</strong></li><li><code>layout</code>确定View的<strong>最终宽高</strong>和<strong>四个顶点的位置</strong></li><li><code>draw</code>将View <strong>绘制到屏幕</strong>上</li><li>对应<code>onMeasure()</code>、<code>onLayout()</code>、<code>onDraw()</code>三个方法。</li></ul><blockquote><p>具体过程：</p><ul><li><code>ViewRoot</code>对应于<code>ViewRootImpl</code>类，它是连接<code>WindowManager</code>和<code>DecorView</code>的纽带</li><li>View的绘制流程是从<code>ViewRoot.performTraversals</code>开始。</li><li><code>performTraversals()</code>依次调用<code>performMeasure()</code>、<code>performLayout()</code>和<code>performDraw()</code>三个方法，完成<strong>顶级</strong> View的绘制。</li><li>其中，<code>performMeasure()</code>会调用<code>measure()</code>，<code>measure()</code>中又调用<code>onMeasure()</code>，实现对其所有子元素的measure过程，这样就完成了一次measure过程；接着子元素会重复父容器的measure过程，如此反复至完成整个View树的遍历。layout和draw同理。过程图如下：</li></ul></blockquote><p><img src="https://s2.ax1x.com/2020/02/18/3ks3VJ.png" alt="View工作流程图"></p><h4 id="2-5-2-measure"><a href="#2-5-2-measure" class="headerlink" title="2.5.2 measure"></a>2.5.2 <code>measure</code></h4><blockquote><p>先来理解<code>MeasureSpec</code>：</p><ul><li><p>作用：通过宽测量值<code>widthMeasureSpec</code>和高测量值<code>heightMeasureSpec</code>决定View的大小</p></li><li><p>组成：一个32位int值，高2位代表<strong>SpecMode</strong>(测量模式)，低30位代表<strong>SpecSize</strong>( 某种测量模式下的规格大小)。</p></li><li><p>三种模式：</p><p>a.<code>UNSPECIFIED</code>: 父容器不对View有任何限制，要多大有多大。常用于系统内部。</p><p>b.<code>EXACTLY</code>(精确模式): 父视图为子视图指定一个确切的尺寸<code>SpecSize</code>。对应<code>LayoutParams</code>中的<code>match_parent</code>或<strong>具体数值</strong>。</p><p>c.<code>AT_MOST</code>(最大模式): 父容器为子视图指定一个最大尺寸<code>SpecSize</code>，View的大小不能大于这个值。对应<code>LayoutParams</code>中的<code>wrap_content</code>。</p></li><li><p>决定因素：由<code>子View</code>的布局参数<code>LayoutParams</code>和<strong>父容器</strong>的<code>MeasureSpec</code>值共同决定。</p></li></ul></blockquote><p><img src="https://s2.ax1x.com/2020/02/18/3k6XE4.png" alt="MeasureSpec决定因素"></p><p>现在，分别讨论两种<code>measure</code>：</p><ul><li><p>View的measure：只有一个原始的View，通过measure()即可完成测量。</p><p><img src="https://s2.ax1x.com/2020/02/18/3A9UAO.png" alt="View的measure流程"></p></li></ul><blockquote><p>从<code>getDefaultSize()</code>中可以看出，直接继承View的自定义View需要重写<code>onMeasure()</code>并设置<code>wrap_content</code>时的自身大小，否则效果相当于<code>macth_parent</code>。解决上述问题的典型代码：</p></blockquote><p>方法一：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> widthSpecMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> widthSpecSize <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightSpecMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightSpecSize <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//分析模式，根据不同的模式来设置</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>widthSpecMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST <span class="token operator">&amp;&amp;</span> heightSpecMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span>mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>widthSpecMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span>heightSpecSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>heightSpecMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>widthSpecSize<span class="token punctuation">,</span>mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>方法二：</p><blockquote><ul><li>原理其实和方法一类似，就是<code>resolveSize</code>封装了方法一的一系列操作</li><li>想探究<code>resolveSize</code>源码的可以看一下这篇文章：<a href="https://www.jianshu.com/p/5d490ab147f8" target="_blank" rel="noopener">resolveSize(int size , int measureSpec)方法介绍</a></li></ul></blockquote><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> width<span class="token operator">=</span><span class="token function">resolveSize</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height<span class="token operator">=</span><span class="token function">resolveSize</span><span class="token punctuation">(</span>mHeight<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>ViewGroup的<code>measure</code>：除了完成ViewGroup自身的测量外，还会遍历去调用所有子元素的<code>measure</code>方法。</li></ul><blockquote><p>ViewGroup中没有重写<code>onMeasure()</code>，而是提供<code>measureChildren()</code>。</p></blockquote><p><img src="https://s2.ax1x.com/2020/02/18/3APxn1.png" alt="ViewGroup的measure"></p><blockquote><p>如果读者对onMeasure的详细重写例子感兴趣的话，笔者推荐一篇文章：<a href="https://www.jianshu.com/p/1dab927b2f36" target="_blank" rel="noopener">自定义View Measure过程 - 最易懂的自定义View原理系列（2）</a></p></blockquote><h4 id="2-5-3-layout"><a href="#2-5-3-layout" class="headerlink" title="2.5.3 layout"></a>2.5.3 <code>layout</code></h4><ul><li>确定View的最终宽高和四个顶点的位置</li></ul><blockquote><p>大致流程：从顶级View开始依次调用<code>layout()</code>，其中子View的<code>layout()</code>会调用<code>setFrame()</code>来设定自己的四个顶点（mLeft、mRight、mTop、mBottom），接着调用<code>onLayout()</code>来确定其坐标，注意该方法是空方法，因为不同的ViewGroup对其子View的布局是不相同的。</p></blockquote><p><img src="https://s2.ax1x.com/2020/02/18/3AVXcD.png" alt="layout流程"></p><blockquote><p>如果读者对<code>onLayout()</code>的详细重写例子感兴趣的话，笔者推荐一篇文章：<a href="https://www.jianshu.com/p/158736a2549d" target="_blank" rel="noopener">（3）自定义View Layout过程 - 最易懂的自定义View原理系列</a></p></blockquote><h4 id="2-5-4-draw"><a href="#2-5-4-draw" class="headerlink" title="2.5.4 draw"></a>2.5.4 <code>draw</code></h4><blockquote><p><strong>推荐阅读</strong>：<a href="https://www.jianshu.com/p/dc32ed4a384e" target="_blank" rel="noopener">对View工作流程的理解（源码)</a></p></blockquote><ul><li>绘制到屏幕</li></ul><blockquote><p>绘制顺序：</p><ul><li>绘制背景：<code>background.draw(canvas)</code></li><li>绘制自己：<code>onDraw(canvas)</code></li><li>绘制children：<code>dispatchDraw(canvas)</code></li><li>绘制装饰：<code>onDrawScrollBars(canvas)</code></li></ul></blockquote><p><img src="https://s2.ax1x.com/2020/02/18/3AeaLQ.png" alt="draw流程"></p><blockquote><p><strong>注意</strong>：View有一个特殊的方法<code>setWillNotDraw()</code>，该方法用于设置 <code>WILL_NOT_DRAW</code> 标记位（其作用是当一个View<strong>不需要绘制内容</strong>时，系统可进行相应优化）。<strong>默认</strong>情况下View是<strong>没有</strong>这个优化标志的（设为true）。</p></blockquote><h3 id="2-6-自定义View"><a href="#2-6-自定义View" class="headerlink" title="2.6 自定义View"></a>2.6 自定义View</h3><blockquote><p>如果想了解自定义View实例的读者，笔者推荐一篇文章：<a href="https://www.jianshu.com/p/e9d8420b1b9c" target="_blank" rel="noopener">手把手教你写一个完整的自定义View</a></p></blockquote><p>Q1：<strong>自定义View的类型有哪些</strong>？</p><p><img src="https://s2.ax1x.com/2020/02/18/3Amfc8.png" alt="自定义View的类型"></p><p><strong>特别提醒</strong>：</p><p><img src="https://s2.ax1x.com/2020/02/18/3AnEjO.png" alt="自定义View须知"></p><h2 id="三-课堂小测试"><a href="#三-课堂小测试" class="headerlink" title="三.课堂小测试"></a>三.课堂小测试</h2><blockquote><p>恭喜你！已经看完了前面的文章，相信你对<code>View</code>已经有一定深度的了解，下面，进行一下课堂小测试，验证一下自己的学习成果吧！</p></blockquote><p>Q1：<strong><code>View</code>的测量宽高和最终宽高有什么区别</strong>？</p><blockquote><p>这个问题具体为<code>View</code>的<code>getMeasuredWidth</code>和<code>getWidth</code>有什么区别？</p></blockquote><ul><li><p>答案揭晓：</p><p>在<code>View</code>的<strong>默认实现</strong>中，测量宽高和最终宽高相等，但是测量宽高的<strong>赋值时机</strong>比最终宽高的赋值时机稍微早一点，测量宽高形成于<code>measure</code>过程，最终宽高形成于View的<code>layout</code>过程。</p></li></ul><p>Q2：<strong>什么情况下测量宽高和最终宽高不一致呢</strong>？</p><ul><li><p>重写了View的<code>layout</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>t<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>在某些情况下，<code>View</code>需要多次<code>measure</code>才能确定自己的测量宽高，在前几次的测量过程中，得出的测量宽高有可能和最终宽高不一致，但最终两者还是一致的。</p></li></ul><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li>《Android 进阶之光》</li><li>《Android 开发艺术探索》</li><li><a href="https://www.jianshu.com/p/25efc9f3a8f0" target="_blank" rel="noopener">Android属性动画和视图动画的区别</a></li><li><a href="https://www.jianshu.com/p/5f198f8a0977" target="_blank" rel="noopener">ScrollView嵌套ListView时可能产生的问题解决</a></li><li><a href="https://www.jianshu.com/p/1dab927b2f36" target="_blank" rel="noopener">自定义View Measure过程 - 最易懂的自定义View原理系列（2）</a></li><li><a href="https://www.jianshu.com/p/158736a2549d" target="_blank" rel="noopener">（3）自定义View Layout过程 - 最易懂的自定义View原理系列</a></li><li><a href="https://www.jianshu.com/p/dc32ed4a384e" target="_blank" rel="noopener">对View工作流程的理解（源码)</a></li><li><a href="https://www.jianshu.com/p/e9d8420b1b9c" target="_blank" rel="noopener">手把手教你写一个完整的自定义View</a></li><li><a href="https://www.jianshu.com/p/06ff0dfeed39" target="_blank" rel="noopener">要点提炼|开发艺术之View</a></li><li><a href="https://www.cnblogs.com/fuly550871915/p/4983682.html" target="_blank" rel="noopener">android中的事件传递和处理机制</a></li><li><a href="https://www.jianshu.com/p/5d490ab147f8" target="_blank" rel="noopener">resolveSize(int size , int measureSpec)方法介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发艺术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路 | 奇妙的 IPC 之旅</title>
      <link href="/2020/02/12/jin-jie-zhi-lu-qi-miao-de-ipc-zhi-lu/"/>
      <url>/2020/02/12/jin-jie-zhi-lu-qi-miao-de-ipc-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="进阶之路-奇妙的-IPC-之旅"><a href="#进阶之路-奇妙的-IPC-之旅" class="headerlink" title="进阶之路 | 奇妙的 IPC 之旅"></a>进阶之路 | 奇妙的 IPC 之旅</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li>IPC的基础概念</li><li>多进程和多线程的概念</li><li>Android中的序列化机制和Binder</li><li>Android中的IPC方式</li><li>Binder连接池的概念及运用</li><li>各种IPC的优缺点</li></ul><h2 id="一-为什么要学习IPC？"><a href="#一-为什么要学习IPC？" class="headerlink" title="一.为什么要学习IPC？"></a>一.为什么要学习<code>IPC</code>？</h2><p><code>IPC</code>是<code>Inter-Process Communication</code>的缩写，含义是<strong>进程间通信</strong>，是指两个进程之间进行数据交换的过程。</p><blockquote><p>有些读者可能疑惑: “那什么是进程呢？什么是线程呢？多进程和多线程有什么区别呢？”</p></blockquote><ul><li>进程：是资源分配的最小单位，一般指一个执行单元，在PC和移动设备上指一个<strong>程序</strong>或<strong>应用</strong>。</li><li>线程：CPU调度的最小单位，线程是一种有限的系统资源。</li></ul><blockquote><p>两者关系：一个<strong>进程</strong>可包含多个<strong>线程</strong>，即一个应用程序上可以同时执行多个任务。</p><ul><li>主线程（UI线程）：UI操作</li><li>有限个子线程：耗时操作</li></ul><p>注意：不可在主线程做大量耗时操作，会导致<strong>ANR</strong>（应用无响应）。解决办法:将耗时任务放在线程中。</p></blockquote><p><code>IPC</code>不是<code>Android</code>所特有的，<code>Android</code>中最有特色的<code>IPC</code>方式是<code>Binder</code>。而日常开发中涉及到的知识：<code>AIDL</code>，插件化，组件化等等，都离不开<code>Binder</code>。由此可见，<code>IPC</code>是挺重要的。</p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-Android中的多进程模式"><a href="#2-1-Android中的多进程模式" class="headerlink" title="2.1 Android中的多进程模式"></a>2.1 <code>Android</code>中的多进程模式</h3><p>Q1：<strong>开启多线程的方式</strong>：</p><ul><li>（常用）在<code>AndroidMenifest</code>中给四大组件指定属性<code>android:process</code></li></ul><blockquote><p>precess的命名规则：</p><ul><li>默认进程：没有指定该属性则运行在默认进程，其进程名就是<strong>包名</strong>。</li><li>以“：”为命名开头的进程：“:”的<strong>含义</strong>是在进程名前面<strong>加上包名</strong>，属于当前应用<strong>私有</strong>进程</li><li>完整命名的进程：属于<strong>全局进程</strong>，其他应用可以通过ShareUID方式和他跑在用一个进程中（需要ShareUID和签名相同）。</li></ul></blockquote><ul><li>（不常用）通过JNI在native层fork一个新的进程。</li></ul><p>Q2：<strong>多进程模式的运行机制</strong>：</p><p>Andoird为每个进程分配了一个<strong>独立的虚拟机</strong>，不同虚拟机在内存分配上有<strong>不同的地址空间</strong>，这也导致了不同虚拟机中访问同一个对象会产生<strong>多份副本</strong>。</p><blockquote><p>带来四个方面的问题：</p><ul><li>静态变量和单例模式失效–&gt;原因：不同虚拟机中访问同一个对象会产生<strong>多份副本</strong>。</li><li>线程同步机制失效–&gt;原因：内存不同，线程无法同步。</li><li>SharedPreference的可靠性下降–&gt;原因：底层是通过读写XML文件实现的，发生并发问题。</li><li>Application多次创建–&gt;原因：Android系统会为新的进程分配独立虚拟机，相当于应用重新启动了一次。</li></ul></blockquote><h3 id="2-2-IPC基础概念"><a href="#2-2-IPC基础概念" class="headerlink" title="2.2  IPC基础概念"></a>2.2  <code>IPC</code>基础概念</h3><blockquote><p>这里主要介绍三方面内容：</p><ul><li>Serializable</li><li>Parcelable</li><li>Binder</li></ul><p>只有熟悉这三方面的内容，才能更好理解<code>IPC</code>的各种方式</p></blockquote><h4 id="2-2-1-什么是序列化"><a href="#2-2-1-什么是序列化" class="headerlink" title="2.2.1 什么是序列化"></a>2.2.1 什么是序列化</h4><ul><li>含义：序列化表示将一个对象转换成<strong>可存储或可传输</strong>的状态。序列化后的对象可以在网络上进行传输，也可以存储到本地。</li><li>使用场景：需要通过<code>Intent</code>和<code>Binder</code>等传输<strong>类对象</strong>就必须完成对象的序列化过程。</li><li>两种方式：实现<code>Serializable</code>/<code>Parcelable</code>接口。</li></ul><h4 id="2-2-2-Serializable接口"><a href="#2-2-2-Serializable接口" class="headerlink" title="2.2.2 Serializable接口"></a>2.2.2 <code>Serializable</code>接口</h4><blockquote><p>Java提供的序列化接口，使用方式比较简单：</p><ul><li>实体类实现<code>Serializable</code></li><li>手动设置/系统自动生成<code>serialVersionUID</code></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Serializable Demo</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 7382351359868556980L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>这里特别注意一下<code>serialVersionUID</code>：</p><ul><li>含义：是<code>Serializable</code>接口中用来辅助序列化和反序列化过程。</li><li>注意：原则上序列化后的数据中的<code>serialVersionUID</code>要和当前类的<code>serialVersionUID</code> <strong>相同</strong>才能正常的序列化。当类发生非常规性变化（修改了<strong>类名</strong>/修改了成员<strong>变量的类型</strong>）的时候，序列化失败。</li></ul></blockquote><h4 id="2-2-3-Parcelable接口"><a href="#2-2-3-Parcelable接口" class="headerlink" title="2.2.3 Parcelable接口"></a>2.2.3 <code>Parcelable</code>接口</h4><blockquote><p>是<code>Android</code>中的序列化接口，使用的时候，类中需要实现下面几点：</p><ul><li>实现<code>Parcelable</code>接口</li><li>内容描述</li><li>序列化方法</li><li>反序列化方法</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token keyword">public</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span>    <span class="token keyword">public</span> Book book<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> String userName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isMale<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isMale <span class="token operator">=</span> isMale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回内容描述 return 0 即可</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//序列化</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>Parcel out<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>isMale <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeParcelable</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//反序列化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Parcelable<span class="token punctuation">.</span>Creator<span class="token operator">&lt;</span>User<span class="token operator">></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcelable<span class="token punctuation">.</span>Creator</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从序列化的对象中创建原始对象</span>        <span class="token keyword">public</span> User <span class="token function">createFromParcel</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从序列化的对象中创建原始对象</span>    <span class="token keyword">private</span> <span class="token function">User</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userId <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userName <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isMale <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readParcelable</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"User:{userId:%s, userName:%s, isMale:%s}, with child:{%s}"</span><span class="token punctuation">,</span>                userId<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> isMale<span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-4-Serializable和Parcelable接口的比较"><a href="#2-2-4-Serializable和Parcelable接口的比较" class="headerlink" title="2.2.4 Serializable和Parcelable接口的比较"></a>2.2.4 Serializable和Parcelable接口的比较</h4><table><thead><tr><th></th><th><code>Serializable</code>接口</th><th><code>Parcelable</code>接口</th></tr></thead><tbody><tr><td>平台</td><td>Java</td><td>Andorid</td></tr><tr><td>序列化原理</td><td>将一个对象转换成可存储或者可传输的状态</td><td>将对象进行分解,且分解后的每一部分都是传递可支持的数据类型</td></tr><tr><td>优缺点</td><td>优点：使用简单 缺点：开销大（因为需要进行大量的IO操作）</td><td>优点：高效 缺点：使用麻烦</td></tr><tr><td>使用场景</td><td>将对象序列化到存储设备或者通过网络传输</td><td>主要用在内存序列化上</td></tr></tbody></table><h4 id="2-2-5-Binder"><a href="#2-2-5-Binder" class="headerlink" title="2.2.5 Binder"></a>2.2.5 Binder</h4><p>Q1：<strong>Binder是什么</strong>？</p><ul><li>从API角度：是一个类，实现<code>IBinder</code>接口。</li><li>从IPC角度：是<code>Android</code>中的一种跨进程通信方式。</li><li>从Framework角度：是<code>ServiceManager</code>，连接各种<code>Manager</code>和相应<code>ManagerService</code>的桥梁。</li><li>从应用层：是客户端和服务端进行通信的<strong>媒介</strong>。客户端通过它可获取服务端提供的服务或者数据。</li></ul><p>Q2:<code>Android</code>是基于<code>Linux</code>内核基础上设计的，却没有把管道/消息队列/共享内存/信号量/<code>Socket</code>等一些<code>IPC</code>通信手段作为Android的主要<code>IPC</code>方式，而是新增了<code>Binder</code>机制，其<strong>优点</strong>有:</p><p>A1:传输效率高、可操作性强</p><blockquote><p>传输效率主要影响因素是<strong>内存拷贝的次数</strong>，拷贝次数越少，传输速率越高。几种数据传输方式比较</p></blockquote><table><thead><tr><th>方式</th><th>拷贝次数</th><th>操作难度</th></tr></thead><tbody><tr><td>Binder</td><td>1</td><td>简易</td></tr><tr><td>消息队列</td><td>2</td><td>简易</td></tr><tr><td>Socket</td><td>2</td><td>简易</td></tr><tr><td>管道</td><td>2</td><td>简易</td></tr><tr><td>共享内存</td><td>0</td><td>复杂</td></tr></tbody></table><p>从Android进程架构角度分析：对于消息队列、Socket和管道来说，数据先从<strong>发送</strong>方的缓存区拷贝到<strong>内核</strong>开辟的缓存区中，再从内核缓存区拷贝到<strong>接收</strong>方的缓存区，一共两次拷贝，如图：</p><p><img src="https://s2.ax1x.com/2020/02/14/1jU6tP.png" alt="消息队列、Socket和管道的数据拷贝"></p><p>对Binder来说：数据从发送方的缓存区拷贝到内核的缓存区，而<strong>接收</strong>方的缓存区与<strong>内核</strong>的缓存区是映射到<strong>同一块</strong>物理地址的，节省了一次数据拷贝的过程</p><p>A2：实现C/S架构方便</p><blockquote><p><code>Linux</code>的众<code>IPC</code>方式除了<code>Socket</code>以外都不是基于<code>C/S</code>架构，而<code>Socket</code>主要用于网络间的通信且传输效率较低。<code>Binder</code>基于<code>C/S</code> 架构 ，<code>Server</code>端与<code>Client</code>端相对独立，稳定性较好。</p></blockquote><p>A3:安全性高</p><blockquote><p>传统<code>Linux</code> <code>IPC</code>的接收方无法获得对方进程可靠的<code>UID/PID</code>，从而无法鉴别对方身份；而<code>Binder</code>机制为每个进程分配了<code>UID/PID</code>且在<code>Binder</code>通信时会根据<code>UID/PID</code>进行有效性检测。</p></blockquote><p>Q3:<strong><code>Binder</code>框架定义了哪四个角色</strong>呢？</p><p>A1:<code>Server</code>&amp;<code>Client</code></p><blockquote><p>服务器&amp;客户端。在<code>Binder</code>驱动和<code>Service Manager</code>提供的基础设施上，进行Client-Server之间的通信。</p></blockquote><p>A2:<code>ServiceManager</code>:</p><blockquote><p><strong>服务</strong>的<strong>管理者</strong>，将<code>Binder</code>名字转换为<code>Client</code>中对该<code>Binder</code>的引用，使得<code>Client</code>可以通过<code>Binder</code>名字获得<code>Server</code>中<code>Binder</code>实体的引用。</p></blockquote><p><img src="https://s2.ax1x.com/2020/02/14/1jdgsg.png" alt="ServiceManager工作机制"></p><p>A3:<strong><code>Binder</code>驱动</strong></p><ul><li>与硬件设备没有关系，其工作方式与设备驱动程序是一样的，工作于内核态。</li><li>提供<code>open()</code>、<code>mmap()</code>、<code>poll()</code>、<code>ioctl()</code>等标准文件操作。</li><li>以字符驱动设备中的<code>misc</code>设备注册在设备目录<code>/dev</code>下，用户通过<code>/dev/binder</code>访问该它。</li><li>负责进程之间<code>binder</code>通信的建立，传递，计数管理以及数据的传递交互等底层支持。</li><li>驱动和应用程序之间定义了一套接口协议，主要功能由<code>ioctl()</code>接口实现，由于<code>ioctl()</code>灵活、方便且能够一次调用实现先写后读以满足同步交互，因此不必分别调用<code>write()</code>和<code>read()</code>接口。</li><li>其代码位于<code>linux</code>目录的<code>drivers/misc/binder.c</code>中。</li></ul><blockquote><p><strong>ioctl</strong>(input/output control)是一个专用于设备<strong>输入输出操作</strong>的系统调用,该调用传入一个跟设备有关的请求码，系统调用的功能完全取决于请求码</p></blockquote><p>Q4：<code>Binder</code> <strong>工作原理</strong>是什么</p><ul><li><p>服务器端：在服务端创建好了一个<code>Binder</code>对象后，内部就会开启一个<strong>线程</strong>用于接收<code>Binder</code>驱动发送的消息，收到消息后会执行<code>onTranscat()</code>，并按照参数执行不同的服务端代码。</p></li><li><p><code>Binder</code>驱动：在服务端成功创建<code>Binder</code>对象后，<code>Binder</code>驱动也会创建一个<code>mRemote</code>对象（也是<code>Binder</code>类），客户端可借助它调用<code>transcat()</code>即可向服务端发送消息。</p></li><li><p>客户端：客户端要想访问<code>Binder</code>的远程服务，就必须获取远程服务的<code>Binder</code>对象在<code>Binder驱动层</code>对应的<code>mRemote</code>引用。当获取到<code>mRemote</code>对象的引用后，就可以调用相应<code>Binder</code>对象的暴露给客户端的方法。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/b5f0f1fd7b2d50fd.png" alt="Binder工作机制"></p></li></ul><blockquote><p>当发出远程请求后<strong>客户端会挂起</strong>，直到返回数据才会唤醒<code>Client</code></p></blockquote><p>Q5：<strong>当服务端进程异常终止的话，造成<code>Binder</code>死亡的话，怎么办？</strong></p><p>在客户端绑定远程服务成功后，给<code>Binder</code>设置<strong>死亡代理</strong>，当<code>Binder</code>死亡的时候，我们会收到通知，从而重新发起连接请求。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> IBinder<span class="token punctuation">.</span>DeathRecipient mDeathRecipient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IBinder<span class="token punctuation">.</span>DeathRecipient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">binderDied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>mBookManager <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>mBookManager<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlinkToDeath</span><span class="token punctuation">(</span>mDeathRecipient<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mBookManager <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// TODO：这里重新绑定远程Service</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">mService <span class="token operator">=</span> IBookManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>binder<span class="token punctuation">)</span><span class="token punctuation">;</span>binder<span class="token punctuation">.</span><span class="token function">linkToDeath</span><span class="token punctuation">(</span>mDeathRecipient<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-3-Android中的IPC方式"><a href="#2-3-Android中的IPC方式" class="headerlink" title="2.3 Android中的IPC方式"></a>2.3 <code>Android</code>中的<code>IPC</code>方式</h3><blockquote><p><code>Android</code>中的<code>IPC</code>方式有很多种，但本质都是基于<code>Binder</code>构建的</p></blockquote><p><img src="https://s2.ax1x.com/2020/02/28/3BXSUA.png" alt="Android中的IPC方式"></p><h4 id="2-3-1-Bundle"><a href="#2-3-1-Bundle" class="headerlink" title="2.3.1 Bundle"></a>2.3.1 <code>Bundle</code></h4><ul><li>原理：<code>Bundle</code>底层实现了<code>Parcelable</code>接口，它可方便的在不同的进程中传输。</li><li>注意：Bundle不支持的数据类型无法在进程中被传递。</li></ul><blockquote><ul><li>小课堂测试：在A进程进行计算后的结果不是<code>Bundle</code>所支持的数据类型，该如何传给B进程？</li></ul><ul><li>答案: 将在A进程进行的计算过程转移到B进程中的一个<code>Service</code>里去做，这样可成功避免进程间的通信问题。</li></ul></blockquote><ul><li><code>Intent</code>和<code>Bundle</code>的区别与联系：</li></ul><blockquote><ul><li><code>Intent</code>底层其实是通过<code>Bundle</code>进行传递数据的</li><li>使用难易：<code>Intent</code>比较简单，<code>Bundle</code>比较复杂</li><li><code>Intent</code>旨在数据传递，<code>bundle</code>旨在存取数据</li></ul></blockquote><h4 id="2-3-2-文件共享"><a href="#2-3-2-文件共享" class="headerlink" title="2.3.2 文件共享"></a>2.3.2 文件共享</h4><ul><li>概念：两个进程通过读/写同一个文件来交换数据。比如A进程把数据写入文件，B进程通过读取这个文件来获取数据。</li><li>适用场景：对数据同步要求不高的进程之间进行通信，并且要妥善处理<strong>并发读/写</strong>的问题。</li><li>特殊情况：<code>SharedPreferences</code>也是文件存储的一种，但不建议采用。因为系统对<code>SharedPreferences</code>的读/写有一定的缓存策略，即在内存中有一份该文件的<strong>缓存</strong>，因此在多进程模式下，其读/写会变得不可靠，甚至丢失数据。</li></ul><h4 id="2-3-3-AIDL"><a href="#2-3-3-AIDL" class="headerlink" title="2.3.3 AIDL"></a>2.3.3 AIDL</h4><h5 id="2-3-3-1-概念"><a href="#2-3-3-1-概念" class="headerlink" title="2.3.3.1 概念"></a>2.3.3.1 概念</h5><p><code>AIDL</code>(Android Interface Definition Language，<strong>Android接口定义语言</strong>)：如果在一个进程中要调用另一个进程中对象的方法，可使用<code>AIDL</code>生成可序列化的参数，<code>AIDL</code>会生成一个服务端对象的<strong>代理类</strong>，通过它客户端实现间接调用服务端对象的方法。</p><h5 id="2-3-3-2-支持的数据类型"><a href="#2-3-3-2-支持的数据类型" class="headerlink" title="2.3.3.2 支持的数据类型"></a>2.3.3.2 支持的数据类型</h5><ul><li>基本数据类型</li><li><code>String</code>和<code>CharSequence</code></li></ul><blockquote><p>想了解<code>String</code>和<code>CharSequence</code>区别的读者，可以看下这篇文章：<a href="https://www.cnblogs.com/skywang12345/p/string01.html" target="_blank" rel="noopener">String和CharSequence的区别</a></p></blockquote><ul><li><code>ArrayList</code>、<code>HashMap</code>且里面的每个元素都能被<code>AIDL</code>支持</li><li>实现<code>Parcelable</code>接口的对象</li><li>所有<code>AIDL</code>接口本身</li></ul><blockquote><p><strong>注意</strong>：除了基本数据类型，其它类型的参数必须标上方向：<code>in、out或inout</code>，用于表示在跨进程通信中数据的流向。</p></blockquote><h5 id="2-3-3-3-两种AIDL文件"><a href="#2-3-3-3-两种AIDL文件" class="headerlink" title="2.3.3.3 两种AIDL文件"></a>2.3.3.3 两种<code>AIDL</code>文件</h5><ul><li>用于定义<code>Parcelable</code>对象，以供其他<code>AIDL</code>文件使用<code>AIDL</code>中非默认支持的数据类型的。</li><li>用于定义方法接口，以供系统使用来完成跨进程通信的。</li></ul><blockquote><p>注意：</p><ul><li>自定义的<code>Parcelable</code>对象<strong>必须</strong>把<code>Java</code>文件和自定义的<code>AIDL</code>文件显式的<code>import</code>进来，无论是否在同一包内。</li><li><code>AIDL</code>文件用到自定义<code>Parcelable</code>的对象，<strong>必须</strong>新建一个和它同名的<code>AIDL</code>文件，并在其中声明它为<code>Parcelable</code>类型。</li></ul></blockquote><h5 id="2-3-3-4-本质，关键类和方法"><a href="#2-3-3-4-本质，关键类和方法" class="headerlink" title="2.3.3.4 本质，关键类和方法"></a>2.3.3.4 本质，关键类和方法</h5><p>a:本质是系统提供了一套可<strong>快速实现<code>Binder</code></strong>的工具。</p><p>b:关键类和方法是什么？</p><ul><li><strong><code>AIDL</code>接口</strong>：继承<code>IInterface</code>。</li><li><strong><code>Stub</code>类</strong>：<code>Binder</code>的实现类，服务端通过这个类来提供服务。</li><li><strong><code>Proxy</code>类</strong>：服务器的本地代理，客户端通过这个类调用服务器的方法。</li><li><code>asInterface()</code>：客户端调用，将服务端的返回的<code>Binder</code>对象，转换成客户端所需要的<code>AIDL</code>接口类型对象。</li></ul><blockquote><p>返回对象：</p><ul><li>若客户端和服务端位于同一进程，则直接返回<code>Stub</code>对象本身；</li><li>否则，返回的是系统封装后的<code>Stub.proxy</code>对象。</li></ul></blockquote><ul><li><code>asBinder()</code>：返回代理<code>Proxy</code>的<code>Binder</code>对象。</li><li><code>onTransact()</code>：运行服务端的<code>Binder</code>线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。</li><li><code>transact()</code>：运行在客户端，当客户端发起远程请求的同时将当前线程挂起。之后调用服务端的<code>onTransact()</code>直到远程请求返回，当前线程才继续执行。</li></ul><p><img src="https://s2.ax1x.com/2020/02/15/1vU8UI.png" alt="AIDL工作机制"></p><h5 id="2-3-3-5-实现方法"><a href="#2-3-3-5-实现方法" class="headerlink" title="2.3.3.5 实现方法"></a>2.3.3.5 实现方法</h5><blockquote><p>如果感兴趣的读者想要了解具体的<code>AIDL</code>实现<code>IPC</code>的流程，笔者分享一篇文章：<a href="https://blog.csdn.net/singwhatiwanna/article/details/17041691" target="_blank" rel="noopener">android跨进程通信（IPC）：使用AIDL</a></p></blockquote><p>A.服务端：</p><ul><li>创建一个<strong><code>aidl</code>文件</strong>；</li><li>创建一个<code>Service</code>，实现<code>AIDL</code>的接口函数并暴露<code>AIDL</code>接口。</li></ul><p>B.客户端：</p><ul><li>通过<code>bindService</code>绑定服务端的<code>Service</code>；</li><li>绑定成功后，将服务端返回的<code>Binder</code>对象<strong>转化</strong>成<code>AIDL</code>接口所属的类型，进而调用相应的<code>AIDL</code>中的方法。</li></ul><blockquote><p><strong>总结</strong>：服务端里的某个<code>Service</code>给和它绑定的特定客户端进程提供<code>Binder</code>对象，客户端通过<code>AIDL</code>接口的静态方法<code>asInterface()</code> 将<code>Binder</code>对象转化成<code>AIDL</code>接口的代理对象，通过这个代理对象就可以发起远程调用请求。</p></blockquote><h5 id="2-3-3-6-可能产生ANR的情形"><a href="#2-3-3-6-可能产生ANR的情形" class="headerlink" title="2.3.3.6 可能产生ANR的情形"></a>2.3.3.6 可能产生<code>ANR</code>的情形</h5><p>A.客户端：</p><ul><li>调用服务端的方法是运行在服务端的<code>Binder</code>线程池中，若<strong>主线程</strong>所调用的方法里执行了较<strong>耗时</strong>的任务，同时会导致客户端线程长时间阻塞，易导致客户端<code>ANR</code>。</li><li>在<code>onServiceConnected()</code>和<code>onServiceDisconnected()</code>里直接调用服务端的耗时方法，易导致客户端<code>ANR</code>。</li></ul><p>B.服务端：</p><ul><li>服务端的方法本身就运行在服务端的<strong><code>Binder</code>线程</strong>中，可在其中执行耗时操作，而<strong>无需再开启子线程</strong>。</li><li><strong>回调客户端<code>Listener</code>的方法</strong>是运行在客户端的<code>Binder</code>线程中，若所调用的方法里执行了较<strong>耗时</strong>的任务，易导致服务端<code>ANR</code>。</li></ul><blockquote><p>解决客户端频繁调用服务器方法导致性能极大损耗的办法：实现<strong>观察者模式</strong>。</p><p>即当客户端关注的数据发生变化时，再让服务端通知客户端去做相应的业务处理。</p></blockquote><h5 id="2-3-3-7-解注册失败的问题"><a href="#2-3-3-7-解注册失败的问题" class="headerlink" title="2.3.3.7 解注册失败的问题"></a>2.3.3.7 解注册失败的问题</h5><ul><li>原因: <code>Binder</code>进行对象传输实际是通过序列化和反序列化进行，即<code>Binder</code>会把客户端传递过来的对象<strong>重新转化</strong>并生成一个新的对象，虽然在注册和解注册的过程中使用的是同一个客户端传递的对象，但经过<code>Binder</code>传到服务端后会生成两个不同的对象。另外，多次跨进程传输的同一个客户端对象会在服务端生成<strong>不同</strong>的对象，但它们在底层的<code>Binder</code>对象是<strong>相同</strong>的。</li><li>解决办法：当客户端解注册的时候，遍历服务端所有的<code>Listener</code>，找到和解注册<code>Listener</code>具有相同的<code>Binder</code>对象的服务端<code>Listener</code>，删掉即可。</li></ul><blockquote><p>需要用到<code>RemoteCallBackList</code>：<code>Android</code>系统专门提供的用于删除跨进程<code>listener</code>的接口。其内部自动实现了线程同步的功能。</p></blockquote><h4 id="2-3-4-Messager"><a href="#2-3-4-Messager" class="headerlink" title="2.3.4 Messager"></a>2.3.4 <code>Messager</code></h4><p>Q1.<strong>什么是<code>Messager</code>？</strong></p><p>A1：<code>Messager</code>是轻量级的<code>IPC</code>方案，通过它可在不同进程中传递<code>Message</code>对象。</p><pre class=" language-java"><code class="language-java">Messenger<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Q2：<strong>特点是什么</strong>？</p><ul><li>底层实现是<code>AIDL</code>，即对<code>AIDL</code>进行了封装，更便于进行进程间通信。</li><li>其服务端以<strong>串行</strong>的方式来处理客户端的请求，不存在并发执行的情形，故无需考虑线程同步的问题。</li><li>可在不同进程中传递<code>Message</code>对象，<code>Messager</code>可支持的数据类型即<code>Messenge</code>可支持的数据类型。</li></ul><blockquote><p><code>Messenge</code>可支持的数据类型：</p><ul><li><code>arg1</code>、<code>arg2</code>、<code>what</code>字段：<code>int</code>型数据</li><li><code>obj</code>字段：<code>Object</code>对象，支持系统提供的<code>Parcelable</code>对象</li><li><code>setData</code>：<code>Bundle</code>对象</li></ul></blockquote><ul><li>有两个构造函数，分别接收<code>Handler</code>对象和<code>Binder</code>对象。</li></ul><p>Q3:<strong>实现的方法</strong>：</p><blockquote><p>读者如果对<code>Messenger</code>的具体使用感兴趣的话，可以看下这篇文章：<a href="https://blog.csdn.net/lezhang123/article/details/55100268" target="_blank" rel="noopener">IPC-Messenger使用实例</a></p></blockquote><p>A1：服务端：</p><ul><li>创建一个<code>Service</code>用于提供服务；</li><li>其中创建一个<code>Handler</code>用于<strong>接收</strong>客户端进程发来的<strong>数据</strong>；</li><li>利用<code>Handler</code>创建一个<code>Messenger</code>对象；</li><li>在<code>Service</code>的<code>onBind()</code>中返回<code>Messenger</code>对应的<code>Binder</code>对象。</li></ul><p>A2：客户端：</p><ul><li><p>通过<code>bindService</code>绑定服务端的<code>Service</code>；</p></li><li><p>通过绑定后返回的<code>IBinder</code>对象创建一个<code>Messenger</code>，进而可向服务器端进程发送<code>Message</code>数据。（至此只完成单向通信）</p></li><li><p>在客户端创建一个<code>Handler</code>并由此创建一个<code>Messenger</code>，并通过<code>Message</code>的<strong><code>replyTo</code>字段</strong>传递给服务器端进程。服务端通过读取<code>Message</code>得到<code>Messenger</code>对象，进而向客户端进程传递数据。（完成双向通信）</p><p> <img src="https://i.bmp.ovh/imgs/2019/11/ba070a20bc6c33d5.png" alt="Messenger通信"></p></li></ul><p>Q4:缺点：</p><ul><li>主要作用是传递 <code>Message</code>，难以实现远程方法调用。</li><li>以串行的方式处理客户端发来的消息的，不适合高并发的场景。</li></ul><blockquote><p>解决方式：使用<code>AIDL</code>的方式处理IPC以应对高并发的场景</p></blockquote><h4 id="2-3-5-ContentProvider"><a href="#2-3-5-ContentProvider" class="headerlink" title="2.3.5 ContentProvider"></a>2.3.5 <code>ContentProvider</code></h4><blockquote><p><code>ContentProvider</code>是<code>Android</code>提供的<strong>专门</strong>用来进行不同应用间数据共享的方式,底层同样是通过<code>Binder</code>实现的。</p></blockquote><ul><li>除了<code>onCreate()</code>运行在UI线程中，其他的<code>query()</code>、<code>update()</code>、<code>insert()</code>、<code>delete()</code>和<code>getType()</code>都运行在<code>Binder</code>线程池中。</li><li><code>CRUD</code>四大操作存在多线程并发访问，要注意在方法内部要做好线程同步。</li><li>一个<code>SQLiteDatabase</code>内部对数据库的操作有同步处理，但多个<code>SQLiteDatabase</code>之间无法同步。</li></ul><h4 id="2-3-6-Socket"><a href="#2-3-6-Socket" class="headerlink" title="2.3.6 Socket"></a>2.3.6 <code>Socket</code></h4><blockquote><p><code>Socket</code>不仅可以跨进程，还可以跨设备通信</p></blockquote><p>Q1:使用类型是什么？</p><ul><li>流套接字：基于<code>TCP</code>协议，采用流的方式提供可靠的字节流服务。</li><li>数据流套接字：基于<code>UDP</code>协议，采用数据报文提供数据打包发送的服务。</li></ul><p>Q2：实现方法是什么？</p><p>A1：服务端：</p><ul><li>创建一个<code>Service</code>，在线程中建立<code>TCP</code>服务、监听相应的端口等待客户端连接请求；</li><li>与客户端连接时，会生成新的<code>Socket</code>对象，利用它可与客户端进行数据传输；</li><li>与客户端断开连接时，关闭相应的<code>Socket</code>并结束线程。</li></ul><p>A2：客户端：</p><ul><li>开启一个线程、通过<code>Socket</code>发出连接请求；</li><li>连接成功后，读取服务端消息；</li><li>断开连接，关闭<code>Socket</code>。</li></ul><h4 id="2-3-7-优缺点比较"><a href="#2-3-7-优缺点比较" class="headerlink" title="2.3.7 优缺点比较"></a>2.3.7 优缺点比较</h4><table><thead><tr><th align="left">名称</th><th align="left">优点</th><th align="left">缺点</th><th align="left">适用场景</th></tr></thead><tbody><tr><td align="left"><code>Bundle</code></td><td align="left">简单易用</td><td align="left">只能传输<code>Bundle</code>支持的数据类型</td><td align="left">四大组件间的进程间通信</td></tr><tr><td align="left">文件共享</td><td align="left">简单易用</td><td align="left">不适合高并发场景，无法做到进程间的即时通信</td><td align="left">无并发访问，交换简单数据且实时性不高</td></tr><tr><td align="left"><code>AIDL</code></td><td align="left">支持一对多并发和实时通信</td><td align="left">使用稍复杂，需要处理线程同步</td><td align="left">一对多且有<code>RPC</code>需求</td></tr><tr><td align="left"><code>Messenger</code></td><td align="left">支持一对多串行通信</td><td align="left">不能很好处理高并发，不支持<code>RPC</code>，只能传输<code>Bundle</code>支持的数据类型</td><td align="left">低并发的一对多</td></tr><tr><td align="left"><code>ContentProvider</code></td><td align="left">支持一对多并发数据共享</td><td align="left">可理解为受约束的<code>AIDL</code></td><td align="left">一对多进程间数据共享</td></tr><tr><td align="left"><code>Socket</code></td><td align="left">支持一对多并发数据共享</td><td align="left">实现细节繁琐</td><td align="left">网络数据交换</td></tr></tbody></table><h3 id="2-4-Binder连接池"><a href="#2-4-Binder连接池" class="headerlink" title="2.4 Binder连接池"></a>2.4 <code>Binder</code>连接池</h3><blockquote><p>有多个业务模块都需要<code>AIDL</code>来进行<code>IPC</code>，此时需要为每个模块创建特定的<code>aidl</code>文件，那么相应的<code>Service</code>就会很多。必然会出现系统资源耗费严重、应用过度重量级的问题。因此需要<code>Binder</code>连接池，通过将每个业务模块的<code>Binder</code>请求<strong>统一</strong>转发到一个远程<code>Service</code>中去执行的方式，从而避免重复创建<code>Service</code>。</p></blockquote><p>Q1：<strong>工作原理是什么</strong>？</p><p>每个业务模块创建自己的<code>AIDL</code>接口并实现此接口，然后向服务端提供自己的<strong>唯一标识</strong>和其对应的<strong>Binder</strong>对象。服务端只需要一个<code>Service</code>，服务器提供一个<code>queryBinder</code>接口，它会根据业务模块的特征来返回相应的<code>Binder</code>对像，不同的业务模块拿到所需的<code>Binder</code>对象后就可进行远程方法的调用了。</p><p><img src="https://s2.ax1x.com/2020/02/15/1xtW8K.png" alt="Binder连接池工作原理"></p><p>Q2：<strong>实现方式是什么</strong>？</p><blockquote><p>读者如果对具体的实现方式感兴趣的话，可以看一下这篇文章：<a href="https://blog.csdn.net/a553181867/article/details/51150867" target="_blank" rel="noopener">Android IPC机制(四):细说Binder连接池</a></p></blockquote><ul><li>为每个业务模块创建<code>AIDL</code>接口并具体实现</li><li>为<code>Binder</code>连接池创建<code>AIDL</code>接口<code>IBinderPool.aidl</code>并具体实现</li><li>远程服务<code>BinderPoolService</code>的实现，在<code>onBind()</code>返回实例化的<code>IBinderPool</code>实现类对象</li><li><code>Binder</code>连接池的具体实现，来绑定远程服务</li><li>客户端的调用</li></ul><h2 id="三-碎碎念"><a href="#三-碎碎念" class="headerlink" title="三.碎碎念"></a>三.碎碎念</h2><blockquote><p>恭喜你，已经完成了这次奇妙的<code>IPC</code>之旅了，如果你感到对概念还是有点模糊不清的话，没关系，很正常，不用太纠结于细节，你可以继续进行下面的旅程了，未来的你，再看这篇文章，也许会有更深的体会，到时候就会有茅舍顿开的感觉了。未来的你，一定会更优秀！！！</p><p>路漫漫其修远兮，吾将上下而求索。《离骚》–屈原</p></blockquote><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li><a href="https://www.cnblogs.com/skywang12345/p/string01.html" target="_blank" rel="noopener">String和CharSequence的区别</a></li><li><a href="https://blog.csdn.net/singwhatiwanna/article/details/17041691" target="_blank" rel="noopener">android跨进程通信（IPC）：使用AIDL</a></li><li><a href="https://blog.csdn.net/lezhang123/article/details/55100268" target="_blank" rel="noopener">IPC-Messenger使用实例</a></li><li><a href="https://blog.csdn.net/a553181867/article/details/51150867" target="_blank" rel="noopener">Android IPC机制(四):细说Binder连接池</a></li><li>《Android 开发艺术探索》</li><li><a href="https://www.jianshu.com/p/1c70d7306808" target="_blank" rel="noopener">要点提炼|开发艺术之IPC</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发艺术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶之路 | 奇妙的Activity之旅</title>
      <link href="/2020/02/12/jin-jie-zhi-lu-qi-miao-de-activity-zhi-lu/"/>
      <url>/2020/02/12/jin-jie-zhi-lu-qi-miao-de-activity-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="进阶之路-奇妙的Activity之旅"><a href="#进阶之路-奇妙的Activity之旅" class="headerlink" title="进阶之路 | 奇妙的Activity之旅"></a>进阶之路 | 奇妙的Activity之旅</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="本篇文章需要已经具备的知识："><a href="#本篇文章需要已经具备的知识：" class="headerlink" title="本篇文章需要已经具备的知识："></a>本篇文章需要已经具备的知识：</h2><ul><li>Activity的基本概念</li><li><code>AndroidManifest.xml</code>的基本概念</li></ul><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li>Activity的生命周期</li><li>Fragment的生命周期</li><li>Activity的启动模式</li><li>IntentFilter的匹配规则</li></ul><h2 id="一-为什么要深入了解Activity呢？"><a href="#一-为什么要深入了解Activity呢？" class="headerlink" title="一.为什么要深入了解Activity呢？"></a>一.为什么要深入了解<code>Activity</code>呢？</h2><p><code>Activity</code>翻译为活动，在<code>Android</code>中代表了界面和以界面为中心相应的业务逻辑，包括显示、与用户交互等，它也是四大组件之一，重要性不言而喻。并且，许多公司在考察<code>Android</code>的知识点的时候，经常会考察到<code>Activity</code>的知识。</p><p>因此，深入了解Activity，不仅对你日常的开发有帮助，还对你之后找工作有所增益。</p><h2 id="二-核心知识点归纳"><a href="#二-核心知识点归纳" class="headerlink" title="二.核心知识点归纳"></a>二.核心知识点归纳</h2><h3 id="2-1-生命周期全解析"><a href="#2-1-生命周期全解析" class="headerlink" title="2.1  生命周期全解析"></a>2.1  生命周期全解析</h3><h4 id="2-1-1-典型情况下的生命周期"><a href="#2-1-1-典型情况下的生命周期" class="headerlink" title="2.1.1 典型情况下的生命周期"></a>2.1.1 典型情况下的生命周期</h4><h5 id="2-1-1-1-Activity生命周期图解"><a href="#2-1-1-1-Activity生命周期图解" class="headerlink" title="2.1.1.1 Activity生命周期图解"></a>2.1.1.1 Activity生命周期图解</h5><p><a href="https://imgchr.com/i/Mon8C4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/21/Mon8C4.md.png" alt="活动生命周期图"></a></p><h5 id="2-1-1-2-Activity切换过程"><a href="#2-1-1-2-Activity切换过程" class="headerlink" title="2.1.1.2 Activity切换过程"></a>2.1.1.2 Activity切换过程</h5><p>（1）启动Activity</p><p><img src="https://s2.ax1x.com/2020/02/12/1HL81g.png" alt="启动Activity"></p><p>（2）打开新的Activity / 切换到桌面</p><ul><li>正常情况：<code>onPause()</code>–&gt;<code>onStop()</code></li><li>特殊情况：当新的<code>Activity</code>使用了透明主题，当前的<code>Activity</code>不会回调onStop，会停留在Paused</li></ul><blockquote><p>想要了解Android 透明主题的可以点击链接：<a href="https://www.cnblogs.com/jdhdevelop/p/11130462.html" target="_blank" rel="noopener">Android透明主题</a></p></blockquote><p>（3）返回旧的Activity</p><ul><li><p>当旧的Activity不可见：</p><p><img src="https://s2.ax1x.com/2020/02/12/1HLWAx.png" alt="当旧的Activity不可见"></p></li><li><p>当旧的Activity可见：</p></li></ul><p><img src="https://s2.ax1x.com/2020/02/12/1HOQbR.png" alt="当旧的Activity可见"></p><blockquote><p>问题思考：当前Activity为A，打开新的ActivityB,那么B的<code>onResume（）</code>和A的<code>onPause（）</code>的执行顺序是怎样的呢?</p></blockquote><p>答案：A<code>onPause（）</code>–&gt;B<code>onResume（）</code>，要得到这个答案，需要对Activity的工作原理有所了解，笔者在本系列文章的后面几篇会介绍。</p><blockquote><p>小Tips:要关闭Activity的时候，尽量在<code>onStop()</code>中进行耗时操作，而使得新Activity尽快显示出来。</p></blockquote><h4 id="2-1-2-异常情况下的生命周期"><a href="#2-1-2-异常情况下的生命周期" class="headerlink" title="2.1.2 异常情况下的生命周期"></a>2.1.2 异常情况下的生命周期</h4><h5 id="2-1-2-1-异常情况下数据的保存和恢复"><a href="#2-1-2-1-异常情况下数据的保存和恢复" class="headerlink" title="2.1.2.1 异常情况下数据的保存和恢复"></a>2.1.2.1 异常情况下数据的保存和恢复</h5><p>这个涉及到<code>onSaveInstanceState</code>和<code>onRestoreInstanceState</code>方法，具体可见下图</p><p><img src="https://s2.ax1x.com/2020/02/12/1HmXJU.png" alt="数据恢复顺序"></p><blockquote><p>需要特别留意的是：</p><ul><li><code>onSaveInstanceState</code>的执行顺序，是在<code>onStop</code>之前，与<code>onPause</code>没有既定顺序</li><li><code>onRestoreInstanceState</code>的执行顺序,是在<code>onStart</code>之后</li></ul></blockquote><p>Q1:<strong>其中保存和恢复View的工作流程是怎样的呢？</strong></p><p><img src="https://s2.ax1x.com/2020/02/12/1HMCes.png" alt="保存View的工作流程"></p><blockquote><p>可以看出，保存和恢复View的工作流程是典型的<strong>委托思想</strong>，上层委托下层，父容器委托子元素处理事情。</p><p>后面会讲到的<code>View</code>的绘制流程，事件分发机制等，都是才有类似的思想。</p></blockquote><p>Q2:<strong>其中数据恢复的方式有哪些？</strong></p><ol><li><p>在onCreate中恢复</p><blockquote><p>需要注意的是，必须要判断Bundle是否为空</p></blockquote></li></ol><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>       <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//方法一：在onCreate中调用缓存恢复数据，必须要判断savedInstanceState是否为空</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>savedInstanceState <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               String test <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"extra_test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"[onCreate]restore extra_test:"</span> <span class="token operator">+</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span></code></pre><ol start="2"><li><p>在onRestoreInstanceState中恢复</p><blockquote><p>Bundle一定有值，不需要判断是否为空，是官方推荐的恢复数据的方法</p></blockquote></li></ol><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//利用onRestoreInstanceState </span>   <span class="token annotation punctuation">@Override</span>       <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRestoreInstanceState</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRestoreInstanceState</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>           String test <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"extra_test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"[onRestoreInstanceState]restore extra_test:"</span> <span class="token operator">+</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span></code></pre><h5 id="2-1-2-2-系统配置变化导致的异常"><a href="#2-1-2-2-系统配置变化导致的异常" class="headerlink" title="2.1.2.2 系统配置变化导致的异常"></a>2.1.2.2 系统配置变化导致的异常</h5><p>Q1:<strong>发生改变的系统配置通常有哪些？</strong></p><ul><li>locale:一般指切换了系统语言</li><li>orientation：旋转屏幕</li><li>keyboardHidden：键盘的可访问性发生变化，比如：调出键盘</li></ul><p>Q2：<strong>想系统配置改变后，activity不被重新创建，应该怎么办？</strong></p><blockquote><p>在<code>ActivityManifest.xml</code>中，对应的<code>Activity</code>的<code>configChanges</code>属性中指定该选项</p></blockquote><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ryg.chapter_1.MainActivity<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>configChanges</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orientation|screenSize<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>launchMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>standard<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span></code></pre><h5 id="2-1-2-3-资源内存不足导致的异常"><a href="#2-1-2-3-资源内存不足导致的异常" class="headerlink" title="2.1.2.3 资源内存不足导致的异常"></a>2.1.2.3 资源内存不足导致的异常</h5><blockquote><p>这种情况应该很容易理解，类比于：当使用小内存手机的时候，会发现某些应用经常一切换后台，就会自动关闭了，原理也是资源内存不足，被系统自动回收了。</p></blockquote><p>Q1：<code>Activity</code>的优先级排序是什么？</p><blockquote><p>由上到下，优先级由高到低</p></blockquote><ul><li>前台<code>Activity</code>–正在和用户交互</li><li>可见非前台<code>Activity</code>–比如说，弹出新的对话框，对话框后面的<code>Activity</code>即属于可见非前台<code>Activity</code></li><li>后台<code>Activity</code>–已经被停止的<code>Activity</code></li></ul><p>Q2：怎么提高后台工作的优先级呢？</p><p>将后台工作放入<code>Service</code>中，保证进程有一定的优先级</p><h4 id="2-1-3-Fragment的生命周期"><a href="#2-1-3-Fragment的生命周期" class="headerlink" title="2.1.3 Fragment的生命周期"></a>2.1.3 <code>Fragment</code>的生命周期</h4><blockquote><p>因为本篇是<code>Activity</code>篇，笔者不便大费周章地叙述，为了满足求知欲强的读者，笔者特地推荐一篇：<a href="https://juejin.im/post/5c2df25be51d451d46035449#heading-7" target="_blank" rel="noopener">Fragment生命周期</a>，里面写得非常详细</p></blockquote><hr><h3 id="2-2-Activity启动模式"><a href="#2-2-Activity启动模式" class="headerlink" title="2.2 Activity启动模式"></a>2.2 <code>Activity</code>启动模式</h3><h4 id="2-2-1-Activity的四种启动模式"><a href="#2-2-1-Activity的四种启动模式" class="headerlink" title="2.2.1 Activity的四种启动模式"></a>2.2.1 <code>Activity</code>的四种启动模式</h4><p>a:<code>standard</code>:标准模式</p><ul><li>含义：每次启动一个Activity就会创建一个新的实例，而不管实例存在与否。</li><li>注意：使用<code>ApplicationContext</code>去启动<code>standard</code>模式<code>Activity</code>就会报错。因为<strong>standard模式的Activity会默认进入启动它所属的任务栈</strong>，但是由于非Activity的Context没有所谓的任务栈，所以就会报错。</li></ul><p>b:<code>singleTop</code>：栈顶复用模式</p><ul><li>含义：如果新Activity已经位于任务栈的栈顶，就不会重新创建，并回调<strong>onNewIntent(intent)</strong>方法。</li></ul><p>c:<code>singleTask</code>：栈内复用模式</p><ul><li>含义：只要Activity在一个栈中存在，都不会重新创建，并回调<code>onNewIntent(intent)</code>方法。如果不存在，系统会先寻找是否存在需要的栈，如果不存在该栈，就创建一个任务栈，并把该Activity放进去；如果存在，就会查看栈中是否有实例存在，若实例存在，则将实例调到栈顶，并回调<code>onNewIntent(intent)</code>方法，否则创建实例到已经存在的栈中。</li></ul><p>d:<code>singleInstance</code>:单实例模式</p><ul><li>含义： 具有此模式的Activity只能单独位于一个任务栈中，且此任务栈中只有<strong>唯一</strong>一个实例。</li></ul><blockquote><p>标识Activity任务栈名称的属性：<code>android：taskAffinity</code>，默认为应用包名。</p></blockquote><h4 id="2-2-2-Activity的Flags"><a href="#2-2-2-Activity的Flags" class="headerlink" title="2.2.2 Activity的Flags"></a>2.2.2 <code>Activity</code>的Flags</h4><blockquote><p>Flags有很多，这里介绍几个常用的Flags</p></blockquote><ul><li><code>FLAG_ACTIVITY_NEW_TASK</code>:指定<code>singleTask</code>模式</li><li><code>FLAG_ACTIVITY_SINGLE_TOP</code>:指定<code>singleTop</code>模式</li><li><code>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</code>：指定新的Activity不会出现在最近启动的Activity的列表中</li></ul><h3 id="2-3-IntentFilter的匹配规则"><a href="#2-3-IntentFilter的匹配规则" class="headerlink" title="2.3 IntentFilter的匹配规则"></a>2.3 IntentFilter的匹配规则</h3><blockquote><p>原则：</p><ul><li>一个intent只有<strong>同时</strong>匹配某个Activity的intent-filter中的<code>action</code>、<code>category</code>、<code>data</code>才算<strong>完全匹配</strong>，才能启动该Activity。</li><li>一个Activity可以有<strong>多个</strong>intent-filter，一个 intent只要成功匹配<strong>任意一组</strong> intent-filter，就可以启动该Activity。</li></ul></blockquote><p>Q1:<strong><code>action</code>的匹配规则</strong></p><ul><li>只要Intent中的<strong>存在</strong>一个action且能够和任何<strong>一个 intent-filter中的action相同</strong>即可成功匹配</li><li>区分<strong>大小写</strong> </li><li>必须存在</li></ul><p>Q2:<strong><code>category</code>的匹配规则</strong></p><ul><li>有其他<code>category</code>，则要求intent中的<code>category</code>和intent-filter中的<strong>所有</strong><code>category</code> 相同。</li><li>非必须，这是因为此时系统给该Activity <strong>默认</strong>加上了<code>&lt; category  android:name=&quot;android.intent.category.DEAFAULT&quot; /&gt;</code>属性值。</li></ul><p>Q3:<strong><code>data</code>匹配规则</strong></p><ul><li>类似于<code>action</code></li><li>URI非必须指定，默认值为<code>content</code>和<code>file</code></li></ul><blockquote><p>需要注意的是，为<code>Intent</code>指定完整的data的时候，要调用<code>setDataAndType(URI,mimeType)</code>方法</p></blockquote><pre class=" language-java"><code class="language-java">intent<span class="token punctuation">.</span><span class="token function">setDataAndType</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"file://abc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"video/png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>采用隐式方式启动Activity时，可以用<code>PackageManager</code>的<code>resolveActivity(Intent)</code>方法或者<code>Intent</code>的<code>resolveActivity(Intent)</code>方法，来判断是否有Activity匹配该隐式Intent,如果匹配不到，会返回NULL</p></blockquote><h2 id="三-课堂小测试"><a href="#三-课堂小测试" class="headerlink" title="三.课堂小测试"></a>三.课堂小测试</h2><blockquote><p>恭喜你，已经看完了前面的文章，相信你对<code>Activity</code>已经有一定深度的了解，下面，进行一下课堂小测试，验证一下自己的学习成果吧！</p></blockquote><ul><li><p>题目情景：有三个<code>Activity</code>，分别名为<code>A</code>,<code>B</code>,<code>C</code>，<code>A</code>的启动模式是<code>standard</code>，<code>B</code>和<code>C</code>的启动模式是<code>singleTask</code>,现在进行如下操作：A启动了B，B启动了C，C启动了A，A再启动B，现在连按2次<code>BACK</code>，你看到的是哪个<code>Activity</code>？</p></li><li><p>答案揭晓：回到桌面，具体过程可以参考下面的流程图</p><p><img src="https://i.loli.net/2020/02/12/vizg1e4p5c8AFyZ.png" alt="流程图"></p></li></ul><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li><a href="https://www.cnblogs.com/jdhdevelop/p/11130462.html" target="_blank" rel="noopener">Android透明主题</a></li><li><a href="https://juejin.im/post/5c2df25be51d451d46035449#heading-7" target="_blank" rel="noopener">Fragment生命周期</a></li><li>《Android开发艺术探索》</li><li><a href="https://blog.csdn.net/fanxingps/article/details/62456180" target="_blank" rel="noopener">Activity到底是什么（新手学Android）</a></li><li><a href="https://www.iteye.com/blog/djun100-2079943" target="_blank" rel="noopener">Android Activity生命周期大全详解</a></li><li><a href="https://www.jianshu.com/p/602b1ec4ca7a" target="_blank" rel="noopener">要点提炼|开发艺术之Activity</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发艺术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你封装自己的MVP+Retrofit+RxJava2框架（二）</title>
      <link href="/2020/02/08/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-er/"/>
      <url>/2020/02/08/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-er/</url>
      
        <content type="html"><![CDATA[<h1 id="带你封装自己的MVP-Retrofit-RxJava2框架（二）"><a href="#带你封装自己的MVP-Retrofit-RxJava2框架（二）" class="headerlink" title="带你封装自己的MVP+Retrofit+RxJava2框架（二）"></a>带你封装自己的MVP+Retrofit+RxJava2框架（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本篇文章是针对上一篇文章：<a href="https://juejin.im/post/5e520d60f265da57127e43af" target="_blank" rel="noopener">带你封装自己的MVP+Retrofit+RxJava2框架（一）</a>的进一步封装改进，建议在看完上一篇文章后，再食用本文效果更佳！</p><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：<a href="http://xcynice.xyz/" target="_blank" rel="noopener">我的GIthub博客</a></p></blockquote><h2 id="本篇文章需要已经具备的知识："><a href="#本篇文章需要已经具备的知识：" class="headerlink" title="本篇文章需要已经具备的知识："></a>本篇文章需要已经具备的知识：</h2><ul><li><code>MVP</code>的概念和基本使用</li><li><code>Retrofit</code>框架的基本使用</li><li><code>RxJava2</code>框架的基本使用</li><li><code>ButterKnife</code>框架的基本使用</li><li><code>Base</code>基类的概念</li><li><a href="https://github.com/yechaoa/YUtils" target="_blank" rel="noopener">YUtils</a>的简单使用</li><li><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="noopener">BaseRecyclerViewAdapterHelper</a>的简单使用</li></ul><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li><code>Base</code>实体类的封装</li><li><code>Base</code>异常类的封装</li><li><code>Base</code>观察者的封装</li><li><code>RxJava</code>线程自动调度的小技巧</li><li>进行网络请求自动显示加载中</li><li>完成网络请求自动关闭加载中</li><li>自动处理异常信息</li><li><code>Cookie</code>自动持久化与<code>Retrofit</code>的协同使用</li><li>接口管理<code>Retrofit</code>请求接口的优美方式</li></ul><h2 id="一-为什么要封装这套框架"><a href="#一-为什么要封装这套框架" class="headerlink" title="一.为什么要封装这套框架"></a>一.为什么要封装这套框架</h2><p>​        如<a href="http://xcynice.xyz/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-yi/" target="_blank" rel="noopener">上一篇文章</a>所说，在<code>MVP</code>模式日渐流行的时候，封装一套<code>MVP</code>框架，不仅对日常的开发大大便利，还能提前积累一下未来在实际工作中的技巧，并且，良好的封装和规范使用还能减少开发中的各种令人头疼的BUG。</p><p>​        有人可能会问：“你上一篇不是也写了<code>MVP</code>框架吗？你这篇难道还是一样的吗？难道你是换汤不换药吗？”</p><p>​        其实，一开始笔者自以为我上一篇文章封装的<code>MVP</code>框架已经够不错了，但是，在笔者某天看了<a href="https://github.com/yechaoa" target="_blank" rel="noopener">yechaoa</a>大神<strong>玩安卓java</strong>的源码后，被其封装的<code>MVP</code>框架的所折服，因此第一时间写这篇文章，想向大家分享下，笔者从中汲取的经验，希望能够帮助到各位！</p><p>​        本文相对<a href="http://xcynice.xyz/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-yi/" target="_blank" rel="noopener">带你封装自己的MVP+Retrofit+RxJava2框架（一）</a>的改进地方有下面几点：</p><ul><li><strong>精简了Activity基类</strong>，将原来的两个<code>BaseActivity</code>和<code>BaseMvpActivity</code>精简为一个<code>BaseActivity</code></li><li><strong>修复了</strong>当继承了<code>Activity</code>基类，不添加<code>Presenter</code>会导致<strong>空指针</strong>的<code>Bug</code></li><li>添加了<strong>网络请求</strong>可选择<strong>自动</strong>显示加载中和自动关闭加载中的功能</li><li>添加了<strong>自动处理异常</strong>信息的功能</li><li>封装了一个<code>Bean</code>对象的<strong>基类</strong></li><li><strong>精简了RxJava</strong>的用法，因此可以省去<code>Model</code>类的编写</li><li><strong>封装</strong>了一个<code>Observer</code>的基类</li><li>增添了<strong>cookie自动持久化</strong>的功能</li><li><strong>改进</strong>了<code>RetrofitService</code>的封装，将<code>Retrofit</code>接口的实例化引入基类</li></ul><h2 id="二-核心用法与样例分析"><a href="#二-核心用法与样例分析" class="headerlink" title="二.核心用法与样例分析"></a>二.核心用法与样例分析</h2><blockquote><p>本项目基于<code>Android X</code> 进行构建，完整代码已经上传到<a href="https://github.com/LoveLifeEveryday/RxJava2_Retrofit_MVP2" target="_blank" rel="noopener">我的Github仓库</a></p></blockquote><p>首先，先给大家介绍下笔者项目的<strong>基本结构</strong></p><p><img src="https://i.loli.net/2020/02/08/GxFTq4ntgHAapOS.png" alt="项目基本结构"></p><p>为了给大家模拟带<strong>自动获取Cookie</strong>的功能,所以笔者设计了一个具有<strong>登陆，注册，收藏</strong>功能的<code>Demo</code></p><blockquote><p>在这里特别感谢<a href="https://www.wanandroid.com/" target="_blank" rel="noopener">玩安卓</a>提供的<a href="https://www.wanandroid.com/blog/show/2" target="_blank" rel="noopener">API</a></p></blockquote><p><img src="https://i.loli.net/2020/02/08/5OjmlFoMG3kcX2V.png" alt="Demo截图"></p><p>笔者在<code>Demo</code>中用到的框架如下</p><pre class=" language-groovy"><code class="language-groovy">    implementation <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    implementation <span class="token string">'androidx.appcompat:appcompat:1.1.0'</span>    implementation <span class="token string">'androidx.legacy:legacy-support-v4:1.0.0'</span>    implementation <span class="token string">'androidx.constraintlayout:constraintlayout:1.1.3'</span>    testImplementation <span class="token string">'junit:junit:4.12'</span>    androidTestImplementation <span class="token string">'androidx.test.ext:junit:1.1.1'</span>    androidTestImplementation <span class="token string">'androidx.test.espresso:espresso-core:3.2.0'</span>    implementation <span class="token string">'com.google.android.material:material:1.1.0'</span>    <span class="token comment" spellcheck="true">//cardView</span>    implementation <span class="token string">'androidx.cardview:cardview:1.0.0'</span>    <span class="token comment" spellcheck="true">/*retrofit、rxjava*/</span>    implementation <span class="token string">'com.squareup.retrofit2:retrofit:2.6.2'</span>    implementation <span class="token string">'com.squareup.retrofit2:adapter-rxjava2:2.4.0'</span>    implementation <span class="token string">'com.squareup.retrofit2:converter-gson:2.4.0'</span>    implementation <span class="token string">'io.reactivex.rxjava2:rxandroid:2.0.2'</span>    implementation <span class="token string">'com.squareup.okhttp3:logging-interceptor:3.4.1'</span>    implementation <span class="token string">'com.squareup.okhttp3:logging-interceptor:3.4.1'</span>    <span class="token comment" spellcheck="true">/*glide*/</span>    implementation <span class="token string">'com.github.bumptech.glide:glide:4.10.0'</span>    annotationProcessor <span class="token string">'com.github.bumptech.glide:compiler:4.10.0'</span>    <span class="token comment" spellcheck="true">/*butterknife*/</span>    implementation <span class="token string">'com.jakewharton:butterknife:10.2.0'</span>    annotationProcessor <span class="token string">'com.jakewharton:butterknife-compiler:10.2.0'</span>    <span class="token comment" spellcheck="true">/*YUtils*/</span>    implementation <span class="token string">'com.github.yechaoa:YUtils:2.1.0'</span>    <span class="token comment" spellcheck="true">/*BRVAH*/</span>    implementation <span class="token string">'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50'</span>    <span class="token comment" spellcheck="true">/*banner*/</span>    implementation <span class="token string">'com.youth.banner:banner:1.4.10'</span></code></pre><p>下面笔者将为大家详细介绍每个类的相关信息</p><h3 id="2-1-Base基类"><a href="#2-1-Base基类" class="headerlink" title="2.1 Base基类"></a>2.1 <code>Base</code>基类</h3><h4 id="2-1-1-BaseActivity"><a href="#2-1-1-BaseActivity" class="headerlink" title="2.1.1 BaseActivity"></a>2.1.1 <code>BaseActivity</code></h4><blockquote><p><code>BaseActivity</code>相对于笔者上一个版本的<code>MVP</code>框架的改进之处：</p><ul><li>将两个基类<code>Activity</code>合并为一个<code>BaseActivity</code></li><li>在其中封装了进度条的显示和隐藏的方法</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseActivity * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span><span class="token operator">&lt;</span>P <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> P presenter<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> P <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置竖屏</span>        <span class="token function">setRequestedOrientation</span><span class="token punctuation">(</span>ActivityInfo<span class="token punctuation">.</span>SCREEN_ORIENTATION_PORTRAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        presenter <span class="token operator">=</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//销毁时，解除绑定</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        YUtils<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"加载中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        YUtils<span class="token punctuation">.</span><span class="token function">dismissLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 可以处理异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorCode</span><span class="token punctuation">(</span>BaseBean bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 启动activity     *     * @param activity 当前活动     * @param isFinish 是否结束当前活动     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startActivity</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> activity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFinish<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFinish<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-2-BaseFragment"><a href="#2-1-2-BaseFragment" class="headerlink" title="2.1.2 BaseFragment"></a>2.1.2 <code>BaseFragment</code></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseFragment * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseFragment</span><span class="token operator">&lt;</span>P <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token keyword">implements</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Unbinder unbinder<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Context mContext<span class="token punctuation">;</span>    <span class="token keyword">protected</span> P presenter<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> P <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unbinder <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到context,在后面的子类Fragment中都可以直接调用</span>        mContext <span class="token operator">=</span> ActivityUtil<span class="token punctuation">.</span><span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        presenter <span class="token operator">=</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//do something</span>        unbinder<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//销毁时，解除绑定</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorCode</span><span class="token punctuation">(</span>BaseBean bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 显示加载中     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        YUtils<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span>ActivityUtil<span class="token punctuation">.</span><span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"加载中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 隐藏加载中     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        YUtils<span class="token punctuation">.</span><span class="token function">dismissLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-3-BasePresenter"><a href="#2-1-3-BasePresenter" class="headerlink" title="2.1.3 BasePresenter"></a>2.1.3 <code>BasePresenter</code></h4><blockquote><p><code>BasePresenter</code>相对于笔者上一个版本的<code>MVP</code>框架的改进之处：</p><ul><li>将线程的调度写入了<code>addDisposable</code>中</li><li>改写了<code>addDisposable</code>方法，使得调用方式更加简单优美</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BasePresenter * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasePresenter</span><span class="token operator">&lt;</span>V <span class="token keyword">extends</span> <span class="token class-name">BaseView</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> CompositeDisposable compositeDisposable<span class="token punctuation">;</span>    <span class="token keyword">public</span> V baseView<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这个后面可以直接用   Example：apiServer.login(username, password)；     */</span>    <span class="token keyword">protected</span> API<span class="token punctuation">.</span>WAZApi apiServer <span class="token operator">=</span> RetrofitService<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApiService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BasePresenter</span><span class="token punctuation">(</span>V baseView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseView <span class="token operator">=</span> baseView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解除绑定     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        baseView <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token function">removeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回 view     */</span>    <span class="token keyword">public</span> V <span class="token function">getBaseView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> baseView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDisposable</span><span class="token punctuation">(</span>Observable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> observable<span class="token punctuation">,</span> BaseObserver observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>compositeDisposable <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            compositeDisposable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        compositeDisposable                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">subscribeWith</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>compositeDisposable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            compositeDisposable<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-4-BaseObserver"><a href="#2-1-4-BaseObserver" class="headerlink" title="2.1.4 BaseObserver"></a>2.1.4 <code>BaseObserver</code></h4><blockquote><ul><li><p><code>Observer</code>的基类，提供了自动显示和自动隐藏进度条的方法</p></li><li><p>对内处理了<code>onStart</code>，<code>onError</code>，<code>onComplete</code>方法</p></li><li><p>对外只提供了<code>onSuccess</code>和<code>onError</code>方法，符合用户一般使用习惯</p></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseObserver * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseObserver</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">DisposableObserver</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> BaseView view<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isShowDialog<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">BaseObserver</span><span class="token punctuation">(</span>BaseView view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 带进度条的初始化方法     *     * @param view         view     * @param isShowDialog 是否显示进度条     */</span>    <span class="token keyword">protected</span> <span class="token function">BaseObserver</span><span class="token punctuation">(</span>BaseView view<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isShowDialog <span class="token operator">=</span> isShowDialog<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>T o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onSuccess</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BaseException be<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//自定义异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">BaseException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                be <span class="token operator">=</span> <span class="token punctuation">(</span>BaseException<span class="token punctuation">)</span> e<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//回调到view层 处理 或者根据项目情况处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 处理登录失效 更新</span>                    view<span class="token punctuation">.</span><span class="token function">onErrorCode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseBean</span><span class="token punctuation">(</span>be<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> be<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">onError</span><span class="token punctuation">(</span>be<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//系统异常</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">HttpException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//HTTP错误</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>BAD_NETWORK_MSG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ConnectException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">UnknownHostException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//连接错误</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>CONNECT_ERROR_MSG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">InterruptedIOException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//连接超时</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>CONNECT_TIMEOUT_MSG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">JsonParseException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">JSONException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">ParseException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//解析错误</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>PARSE_ERROR_MSG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>OTHER_MSG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>OTHER_MSG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">onError</span><span class="token punctuation">(</span>be<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>T o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-5-BaseException"><a href="#2-1-5-BaseException" class="headerlink" title="2.1.5 BaseException"></a>2.1.5 <code>BaseException</code></h4><blockquote><p>异常的基类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseException * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseException</span> <span class="token keyword">extends</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 解析数据失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PARSE_ERROR_MSG <span class="token operator">=</span> <span class="token string">"解析数据失败"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 网络问题     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BAD_NETWORK_MSG <span class="token operator">=</span> <span class="token string">"网络问题"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 连接错误     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONNECT_ERROR_MSG <span class="token operator">=</span> <span class="token string">"连接错误"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 连接超时     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONNECT_TIMEOUT_MSG <span class="token operator">=</span> <span class="token string">"连接超时"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 未知错误     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String OTHER_MSG <span class="token operator">=</span> <span class="token string">"未知错误"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String errorMsg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BaseException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BaseException</span><span class="token punctuation">(</span>String errorMsg<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BaseException</span><span class="token punctuation">(</span><span class="token keyword">int</span> errorCode<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> message<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-6-BaseBean"><a href="#2-1-6-BaseBean" class="headerlink" title="2.1.6 BaseBean"></a>2.1.6 <code>BaseBean</code></h4><blockquote><p>实体类的基类，方便处理返回的<code>Json</code>数据，具体的写法需根据每个<code>API</code>而定</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseBean 实体类的基类 * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseBean</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * data :     * errorCode : 0     * errorMsg :     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">;</span>    <span class="token keyword">public</span> String errorMsg<span class="token punctuation">;</span>    <span class="token keyword">public</span> T data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BaseBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-7-BaseView"><a href="#2-1-7-BaseView" class="headerlink" title="2.1.7 BaseView"></a>2.1.7 <code>BaseView</code></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseView * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onErrorCode</span><span class="token punctuation">(</span>BaseBean bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-http"><a href="#2-2-http" class="headerlink" title="2.2 http"></a>2.2 <code>http</code></h3><h4 id="2-2-1-cookie"><a href="#2-2-1-cookie" class="headerlink" title="2.2.1 cookie"></a>2.2.1 <code>cookie</code></h4><blockquote><p>持久化<code>cookie</code>,因为代码太多，这里只展示一个类的代码，详细代码请前往我的Github<a href="https://github.com/LoveLifeEveryday/RxJava2_Retrofit_MVP2/tree/master/app/src/main/java/com/users/xucanyou666/rxjava2_retrofit_mvp2/http/cookie" target="_blank" rel="noopener">查看</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>rxjava2_retrofit_mvp2<span class="token punctuation">.</span>http<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>CookieJar<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>HttpUrl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by yechao on 2019/11/19/019. * Describe : */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookiesManager</span> <span class="token keyword">implements</span> <span class="token class-name">CookieJar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> PersistentCookieStore cookieStore<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CookiesManager</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cookieStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersistentCookieStore</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveFromResponse</span><span class="token punctuation">(</span>HttpUrl url<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Cookie<span class="token operator">></span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie item <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cookieStore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Cookie<span class="token operator">></span> <span class="token function">loadForRequest</span><span class="token punctuation">(</span>HttpUrl url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cookieStore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-2-gson"><a href="#2-2-2-gson" class="headerlink" title="2.2.2 gson"></a>2.2.2 <code>gson</code></h4><blockquote><p>重写<code>ResponseBodyConverter</code>对<code>Json</code>预处理，这里只展示一个类的代码，详细代码请前往<a href="https://github.com/LoveLifeEveryday/RxJava2_Retrofit_MVP2/tree/master/app/src/main/java/com/users/xucanyou666/rxjava2_retrofit_mvp2/http/gson" target="_blank" rel="noopener">我的Github</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by yechao on 2019/11/18/018. * Describe : 重写ResponseBodyConverter对json预处理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseResponseBodyConverter</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>ResponseBody<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> TypeAdapter<span class="token operator">&lt;</span>T<span class="token operator">></span> adapter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 登陆失效     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LOG_OUT_TIME <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">;</span>    <span class="token function">BaseResponseBodyConverter</span><span class="token punctuation">(</span> TypeAdapter<span class="token operator">&lt;</span>T<span class="token operator">></span> adapter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adapter <span class="token operator">=</span> adapter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">convert</span><span class="token punctuation">(</span>ResponseBody value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String jsonString <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            JSONObject object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> code <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"errorCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String data<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//错误信息</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> LOG_OUT_TIME<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    data <span class="token operator">=</span> <span class="token string">"登录失效，请重新登录"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    data <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//异常处理</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//正确返回整个json</span>            <span class="token keyword">return</span> adapter<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据解析异常即json格式有变动</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">.</span>PARSE_ERROR_MSG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            value<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-3-API"><a href="#2-2-3-API" class="headerlink" title="2.2.3 API"></a>2.2.3 API</h4><blockquote><ul><li>原因：随着项目日渐庞大，请求也越来越多，不可能每个请求都使用一个接口，否则不但造成浪费，而且不方便管理</li><li>作用：新建一个<code>API</code>作为<code>Retrofit</code>的管理类，用一个接口管理所有网络请求，可以有效改善代码质量</li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : API * 接口的管理类 * * @author XuCanyou666 * @date 2020/2/7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">API</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String BASE_URL <span class="token operator">=</span> <span class="token string">"https://www.wanandroid.com/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WAZApi</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//-----------------------【首页相关】----------------------</span>        <span class="token comment" spellcheck="true">//首页文章列表 这里的{}是填入页数</span>        <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"article/list/{page}/json"</span><span class="token punctuation">)</span>        Observable<span class="token operator">&lt;</span>BaseBean<span class="token operator">&lt;</span>Article<span class="token operator">>></span> <span class="token function">getArticleList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> Integer page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//-----------------------【登录注册】----------------------</span>        <span class="token comment" spellcheck="true">//登录</span>        <span class="token annotation punctuation">@FormUrlEncoded</span>        <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"user/login"</span><span class="token punctuation">)</span>        Observable<span class="token operator">&lt;</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">>></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册</span>        <span class="token annotation punctuation">@FormUrlEncoded</span>        <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"user/register"</span><span class="token punctuation">)</span>        Observable<span class="token operator">&lt;</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">>></span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"repassword"</span><span class="token punctuation">)</span> String repassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//-----------------------【  收藏  】----------------------</span>        <span class="token comment" spellcheck="true">//收藏站内文章</span>        <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"lg/collect/{id}/json"</span><span class="token punctuation">)</span>        Observable<span class="token operator">&lt;</span>BaseBean<span class="token operator">></span> <span class="token function">collectIn</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取消收藏---文章列表</span>        <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"lg/uncollect_originId/{id}/json"</span><span class="token punctuation">)</span>        Observable<span class="token operator">&lt;</span>BaseBean<span class="token operator">></span> <span class="token function">uncollect</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-4-RetrofitService"><a href="#2-2-4-RetrofitService" class="headerlink" title="2.2.4 RetrofitService"></a>2.2.4 <code>RetrofitService</code></h4><blockquote><p><code>Retrofit</code>的配置类，在里面初始化了<code>apiServer</code>对象，并配置了日志信息，超时时间，<code>Cookie</code>持久化，用了静态内部类的单例模式</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : RetrofitService * * @author XuCanyou666 * @date 2020/2/8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetrofitService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> RetrofitService apiRetrofit<span class="token punctuation">;</span>    <span class="token keyword">private</span> API<span class="token punctuation">.</span>WAZApi apiServer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 单例调用     *     * @return RetrofitService     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RetrofitService <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>apiRetrofit <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>apiRetrofit <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    apiRetrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetrofitService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> apiRetrofit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取api对象     *     * @return api对象     */</span>    <span class="token keyword">public</span> API<span class="token punctuation">.</span>WAZApi <span class="token function">getApiService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> apiServer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化retrofit     */</span>    <span class="token keyword">private</span> <span class="token function">RetrofitService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置okHttp并设置时间、日志信息和cookies</span>        HttpLoggingInterceptor httpLoggingInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpLoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpLoggingInterceptor<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span>HttpLoggingInterceptor<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>BODY<span class="token punctuation">)</span><span class="token punctuation">;</span>        OkHttpClient okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>httpLoggingInterceptor<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//设置超时时间</span>                <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//设置Cookie持久化</span>                <span class="token punctuation">.</span><span class="token function">cookieJar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CookiesManager</span><span class="token punctuation">(</span>XUtil<span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关联okHttp并加上rxJava和Gson的配置和baseUrl</span>        Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>ScalarsConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>BaseConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span>RxJava2CallAdapterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>API<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        apiServer <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>API<span class="token punctuation">.</span>WAZApi<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-bean"><a href="#2-3-bean" class="headerlink" title="2.3 bean"></a>2.3 <code>bean</code></h3><blockquote><ul><li>这里的带有嵌套的实体类看似很复杂，其实可以通过<code>AS</code>的<code>GsonFormat</code>插件一键生成</li><li>注意：不要将<code>data</code>,<code>errorCode</code>,<code>errorMsg</code>的导入到实体类中</li></ul></blockquote><h4 id="2-3-1-Article"><a href="#2-3-1-Article" class="headerlink" title="2.3.1 Article"></a>2.3.1 <code>Article</code></h4><blockquote><p>文章内容的实体类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : Article * * @author XuCanyou666 * @date 2020/2/8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * curPage : 2     * datas : [{"apkLink":"","author":"叶应是叶","chapterId":67,"chapterName":"网络基......."}]     * offset : 20     * over : false     * pageCount : 62     * size : 20     * total : 1224     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> curPage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> offset<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> over<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> pageCount<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> total<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>DataDetailBean<span class="token operator">></span> datas<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DataDetailBean</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * apkLink :         * author : 叶应是叶         * chapterId : 67         * chapterName : 网络基础         * collect : false         * courseId : 13         * desc :         * envelopePic :         * fresh : false         * id : 2809         * link : https://www.jianshu.com/p/6d2f324c8f42         * niceDate : 2018-04-12         * origin :         * projectLink :         * publishTime : 1523532264000         * superChapterId : 98         * superChapterName : 网络访问         * tags : []         * title : 在 Android 设备上搭建 Web 服务器         * type : 0         * visible : 1         * zan : 0         */</span>        <span class="token keyword">public</span> String apkLink<span class="token punctuation">;</span>        <span class="token keyword">public</span> String author<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> chapterId<span class="token punctuation">;</span>        <span class="token keyword">public</span> String chapterName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> collect<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> courseId<span class="token punctuation">;</span>        <span class="token keyword">public</span> String desc<span class="token punctuation">;</span>        <span class="token keyword">public</span> String envelopePic<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> fresh<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> originId<span class="token punctuation">;</span>        <span class="token keyword">public</span> String link<span class="token punctuation">;</span>        <span class="token keyword">public</span> String niceDate<span class="token punctuation">;</span>        <span class="token keyword">public</span> String origin<span class="token punctuation">;</span>        <span class="token keyword">public</span> String projectLink<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> publishTime<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> superChapterId<span class="token punctuation">;</span>        <span class="token keyword">public</span> String superChapterName<span class="token punctuation">;</span>        <span class="token keyword">public</span> String title<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> visible<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> zan<span class="token punctuation">;</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> tags<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-2-User"><a href="#2-3-2-User" class="headerlink" title="2.3.2 User"></a>2.3.2 <code>User</code></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * GitHub : https://github.com/yechaoa * CSDN : http://blog.csdn.net/yechaoa * &lt;p> * Created by yechao on 2018/5/2. * Describe : */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * collectIds : []     * email :     * icon :     * id : 3     * password : 111111     * type : 0     * username : 111111     */</span>    <span class="token keyword">public</span> String email<span class="token punctuation">;</span>    <span class="token keyword">public</span> String icon<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span>    <span class="token keyword">public</span> String username<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> collectIds<span class="token punctuation">;</span>    <span class="token keyword">public</span> String repassword<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-module"><a href="#2-4-module" class="headerlink" title="2.4 module"></a>2.4 <code>module</code></h3><blockquote><ul><li>这里分模块化进行管理，本<code>Demo</code>有<code>Login</code>,<code>Register</code>,<code>Home</code>总共三个模块</li><li>限于篇幅，在这里仅说明一个模块，其他模块的写法类似，具体写法，可以上<a href="https://github.com/LoveLifeEveryday/RxJava2_Retrofit_MVP2/tree/master/app/src/main/java/com/users/xucanyou666/rxjava2_retrofit_mvp2/module" target="_blank" rel="noopener">Github</a>查看</li></ul></blockquote><h4 id="2-4-1-login"><a href="#2-4-1-login" class="headerlink" title="2.4.1 login"></a>2.4.1 <code>login</code></h4><h5 id="2-4-1-1-ILoginView"><a href="#2-4-1-1-ILoginView" class="headerlink" title="2.4.1.1 ILoginView"></a>2.4.1.1 <code>ILoginView</code></h5><blockquote><p><code>LoginView</code>层的接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : ILoginView * * @author XuCanyou666 * @date 2020/2/8 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoginView</span> <span class="token keyword">extends</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 显示登陆成功     *     * @param successMessage 成功信息     */</span>    <span class="token keyword">void</span> <span class="token function">showLoginSuccess</span><span class="token punctuation">(</span>String successMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 显示登陆失败     *     * @param errorMessage 失败信息     */</span>    <span class="token keyword">void</span> <span class="token function">showLoginFailed</span><span class="token punctuation">(</span>String errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">doSuccess</span><span class="token punctuation">(</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">></span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2-4-1-2-LoginPresenter"><a href="#2-4-1-2-LoginPresenter" class="headerlink" title="2.4.1.2 LoginPresenter"></a>2.4.1.2 <code>LoginPresenter</code></h5><blockquote><p>这里因为<code>RxJava</code>经过封装后，<code>Model</code>层的代码比较精简，所以将<code>Model</code>直接写入<code>Presenter</code>中，以节省工作量</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : LoginPresenter * * @author XuCanyou666 * @date 2020/2/8 */</span><span class="token keyword">class</span> <span class="token class-name">LoginPresenter</span> <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">&lt;</span>ILoginView<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">LoginPresenter</span><span class="token punctuation">(</span>ILoginView baseView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>baseView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 登陆     *     * @param username         username     * @param password         password     * @param usernameCountMax 账号规定输入字符最大值     * @param passwordCountMax 密码规定输入字符最大值     */</span>    <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> <span class="token keyword">int</span> usernameCountMax<span class="token punctuation">,</span> <span class="token keyword">int</span> passwordCountMax<span class="token punctuation">)</span> <span class="token punctuation">{</span>        YUtils<span class="token punctuation">.</span><span class="token function">closeSoftKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断输入的账号密码是否符合规范</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> usernameCountMax<span class="token punctuation">,</span> passwordCountMax<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addDisposable</span><span class="token punctuation">(</span>apiServer<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BaseObserver</span><span class="token operator">&lt;</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">>></span><span class="token punctuation">(</span>baseView<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>BaseBean<span class="token operator">&lt;</span>User<span class="token operator">></span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    baseView<span class="token punctuation">.</span><span class="token function">showLoginSuccess</span><span class="token punctuation">(</span><span class="token string">"登录成功（￣▽￣）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//将登陆的账号存进sp里面</span>                    SpUtil<span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span>GlobalConstant<span class="token punctuation">.</span>IS_LOGIN<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    SpUtil<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>GlobalConstant<span class="token punctuation">.</span>USERNAME<span class="token punctuation">,</span> bean<span class="token punctuation">.</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                    SpUtil<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>GlobalConstant<span class="token punctuation">.</span>PASSWORD<span class="token punctuation">,</span> bean<span class="token punctuation">.</span>data<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                    baseView<span class="token punctuation">.</span><span class="token function">doSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    baseView<span class="token punctuation">.</span><span class="token function">showLoginFailed</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"(°∀°)ﾉ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            baseView<span class="token punctuation">.</span><span class="token function">showLoginFailed</span><span class="token punctuation">(</span><span class="token string">"填写错误 (°∀°)ﾉ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断输入的账号密码是否符合规范     *     * @param userName         username     * @param password         password     * @param usernameCountMax 账号规定输入字符最大值     * @param passwordCountMax 密码规定输入字符最大值     * @return 是否合规     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String userName<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> <span class="token keyword">int</span> usernameCountMax<span class="token punctuation">,</span> <span class="token keyword">int</span> passwordCountMax<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> usernameCountMax<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> passwordCountMax<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断输入是否规范     *     * @param string              输入的内容     * @param tilCounterMaxLength textInputLayout控件的输入字符的最大长度     * @return 是否合规     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>String string<span class="token punctuation">,</span> <span class="token keyword">int</span> tilCounterMaxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> tilCounterMaxLength <span class="token operator">&amp;&amp;</span> tilCounterMaxLength <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-4-1-3-LoginTextWatcher"><a href="#2-4-1-3-LoginTextWatcher" class="headerlink" title="2.4.1.3 LoginTextWatcher"></a>2.4.1.3 <code>LoginTextWatcher</code></h5><blockquote><p>登陆界面输入框的监听器</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * TextInputLayout监听器 * created by xucanyou666 * on 2020/2/7 18:09 * email：913710642@qq.com */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginTextWatcher</span> <span class="token keyword">implements</span> <span class="token class-name">android<span class="token punctuation">.</span>text<span class="token punctuation">.</span>TextWatcher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TextInputLayout mTilUsername<span class="token punctuation">;</span>    <span class="token keyword">private</span> TextInputLayout mTilPassword<span class="token punctuation">;</span>     <span class="token function">LoginTextWatcher</span><span class="token punctuation">(</span>TextInputLayout username<span class="token punctuation">,</span> TextInputLayout password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTilUsername <span class="token operator">=</span> username<span class="token punctuation">;</span>        mTilPassword <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeTextChanged</span><span class="token punctuation">(</span>CharSequence charSequence<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTextChanged</span><span class="token punctuation">(</span>CharSequence charSequence<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterTextChanged</span><span class="token punctuation">(</span>Editable s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkInput</span><span class="token punctuation">(</span>mTilUsername<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkInput</span><span class="token punctuation">(</span>mTilPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断输入内容是否合法     *     * @param textInputLayout textInputLayout     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkInput</span><span class="token punctuation">(</span>TextInputLayout textInputLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> textInputLayout<span class="token punctuation">.</span><span class="token function">getCounterMaxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"输入内容超过上限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> textInputLayout<span class="token punctuation">.</span><span class="token function">getCounterMaxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"最少6位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-4-1-4-LoginActivity"><a href="#2-4-1-4-LoginActivity" class="headerlink" title="2.4.1.4 LoginActivity"></a>2.4.1.4 <code>LoginActivity</code></h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : LoginActivity * * @author XuCanyou666 * @date 2020/2/8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span><span class="token operator">&lt;</span>LoginPresenter<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">ILoginView</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>et_username<span class="token punctuation">)</span>    EditText mEtUsername<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>til_username<span class="token punctuation">)</span>    TextInputLayout mTilUsername<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>et_password<span class="token punctuation">)</span>    EditText mEtPassword<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>til_password<span class="token punctuation">)</span>    TextInputLayout mTilPassword<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_login<span class="token punctuation">)</span>    Button mBtnLogin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_register<span class="token punctuation">)</span>    Button mBtnRegister<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> LoginPresenter <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginPresenter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_login<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LoginTextWatcher textWatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginTextWatcher</span><span class="token punctuation">(</span>mTilUsername<span class="token punctuation">,</span> mTilPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        mEtUsername<span class="token punctuation">.</span><span class="token function">addTextChangedListener</span><span class="token punctuation">(</span>textWatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        mEtPassword<span class="token punctuation">.</span><span class="token function">addTextChangedListener</span><span class="token punctuation">(</span>textWatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoginSuccess</span><span class="token punctuation">(</span>String successMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ToastUtil<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>successMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoginFailed</span><span class="token punctuation">(</span>String errorMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ToastUtil<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span><span class="token punctuation">{</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_login<span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_register<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewClicked</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_login<span class="token operator">:</span>                String username <span class="token operator">=</span> mEtUsername<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String password <span class="token operator">=</span> mEtPassword<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> tilUsernameCounterMaxLength <span class="token operator">=</span> mTilUsername<span class="token punctuation">.</span><span class="token function">getCounterMaxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> tilPasswordCounterMaxLength <span class="token operator">=</span> mTilPassword<span class="token punctuation">.</span><span class="token function">getCounterMaxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                presenter<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> tilUsernameCounterMaxLength<span class="token punctuation">,</span> tilPasswordCounterMaxLength<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_register<span class="token operator">:</span>                YUtils<span class="token punctuation">.</span><span class="token function">closeSoftKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>RegisterActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三-我在使用中遇到的问题"><a href="#三-我在使用中遇到的问题" class="headerlink" title="三.我在使用中遇到的问题"></a>三.我在使用中遇到的问题</h2><h3 id="3-1-颜色的资源文件出错"><a href="#3-1-颜色的资源文件出错" class="headerlink" title="3.1 颜色的资源文件出错"></a>3.1 颜色的资源文件出错</h3><p>有一天， 当我点开我的<code>colors.xml</code>资源文件的时候，发现是下图这个样子</p><p><img src="https://s2.ax1x.com/2020/02/08/1RhyPe.png" alt="colors.xml"></p><p>然后当鼠标的光标移动到红色标记处，发现</p><blockquote><p>The color “colorPrimary” in values has no declaration in the base values folder; this can lead to crashes when the resource is queried in a configuration that does not match this qualifier less…</p></blockquote><p>接着我翻译了一下:</p><blockquote><p>值中的颜色“<code>colorPrimary</code>”在基本值<code>folde</code>中没有声明</p></blockquote><p>懵逼了，我不是声明了吗….最后还是百度到了结果</p><p>解决方式是：先把<code>colors</code>文件剪切下来，再粘回去。</p><p>感觉是<code>AS</code>的<code>BUG</code>….我用的<code>AS</code>版本是<code>3.5.1</code></p><h3 id="3-2-导入依赖的时候提示Failed-to-resolve"><a href="#3-2-导入依赖的时候提示Failed-to-resolve" class="headerlink" title="3.2 导入依赖的时候提示Failed to resolve"></a>3.2 导入依赖的时候提示<code>Failed to resolve</code></h3><p><img src="https://s2.ax1x.com/2020/02/08/1R4Byn.png" alt="Failed to resolve"></p><p>当然百度了一下，解决方式是：在根目录的<code>build.gradle</code>中添加<code>maven</code></p><p>就是下面这样</p><p><img src="https://i.loli.net/2020/02/08/278XKBGTmtvRJNo.png" alt="image.png"></p><h3 id="3-3-在进入文章列表界面的时候，进度条不会自动隐藏"><a href="#3-3-在进入文章列表界面的时候，进度条不会自动隐藏" class="headerlink" title="3.3 在进入文章列表界面的时候，进度条不会自动隐藏"></a>3.3 在进入文章列表界面的时候，进度条不会自动隐藏</h3><blockquote><p>发生问题的场景：笔者在<code>Presenter</code>中请求文章列表的数据的时候，会自动显示和隐藏进度条，但请求完文章列表后，不能自动隐藏</p></blockquote><p>经过浏览代码，发现，我的请求文章列表的方法写多了一次，解决方法：只保存<code>onResume</code>里面的一次</p><h2 id="四-快捷体验"><a href="#四-快捷体验" class="headerlink" title="四.快捷体验"></a>四.快捷体验</h2><p>如果你想更加简单地使用这套框架，笔者特地为您准备了我已经封装好的 <code>MVP</code> 框架，你只需要导入依赖即可享受如上的快捷的开发体验，详情请见 <code>github</code></p><p><code>github</code> 地址：<a href="https://github.com/LoveLifeEveryday/XMvp" target="_blank" rel="noopener">https://github.com/LoveLifeEveryday/XMvp</a></p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li><a href="https://github.com/yechaoa/wanandroid_java" target="_blank" rel="noopener">wanandroid_java</a></li><li><a href="https://blog.csdn.net/weixin_41924068/article/details/89241544" target="_blank" rel="noopener">android studio 中colors文件的bug</a></li><li><a href="https://www.jianshu.com/p/ddf2bf815d57" target="_blank" rel="noopener">Android 基类BaseActivity的封装</a></li><li><a href="https://www.wanandroid.com/blog/show/2" target="_blank" rel="noopener">玩Android 开放API</a></li><li><a href="https://blog.csdn.net/haijie_liu/article/details/90896111" target="_blank" rel="noopener">依赖包后出现Failed to resolve:com.github.xxx错误</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你封装自己的MVP+Retrofit+RxJava2框架（一）</title>
      <link href="/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-yi/"/>
      <url>/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="带你封装自己的MVP-Retrofit-RxJava2框架（一）"><a href="#带你封装自己的MVP-Retrofit-RxJava2框架（一）" class="headerlink" title="带你封装自己的MVP+Retrofit+RxJava2框架（一）"></a>带你封装自己的MVP+Retrofit+RxJava2框架（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>文本已经收录到我的Github个人博客，欢迎大佬们光临寒舍：<a href="https://lovelifeeveryday.github.io/2020/02/03/dai-ni-feng-zhuang-zi-ji-de-mvp-retrofit-rxjava2-kuang-jia/">我的GIthub博客</a></p><p>看完本篇文章的，可以看下<a href="https://juejin.im/post/5e520db1e51d45270c277ca8" target="_blank" rel="noopener">带你封装自己的MVP+Retrofit+RxJava2框架（二）</a>，里面封装得到了改进</p></blockquote><h2 id="本篇文章需要已经具备的知识："><a href="#本篇文章需要已经具备的知识：" class="headerlink" title="本篇文章需要已经具备的知识："></a>本篇文章需要已经具备的知识：</h2><ul><li><code>MVP</code>的概念和基本使用</li><li><code>Retrofit</code>框架的基本使用</li><li><code>RxJava2</code>框架的基本使用</li><li><code>ButterKnife</code>框架的基本使用</li><li><code>Base</code>基类的概念</li></ul><h2 id="学习清单："><a href="#学习清单：" class="headerlink" title="学习清单："></a>学习清单：</h2><ul><li><code>Activity</code>和<code>Fragment</code>基类的封装</li><li><code>MVP</code>的封装使用</li></ul><h2 id="一-为什么要封装这套框架呢？"><a href="#一-为什么要封装这套框架呢？" class="headerlink" title="一.为什么要封装这套框架呢？"></a>一.为什么要封装这套框架呢？</h2><p>在搞清楚这个问题之前，我们回顾一下基本概念</p><p><code>RxJava</code>: <code>ReactiveX</code> 在<code>JVM</code>上的一个实现，<code>ReactiveX</code>使用<code>Observable</code>序列组合异步和基于事件的程序；掌握了它，你可以优美地处理异步任务和事件的回调</p><p><code>Retrofit</code>:一个 <code>RESTful</code> 的 <code>HTTP</code>网络请求框架的封装，网络请求的工作本质上是<code>OkHttp</code> 完成，而 <code>Retrofit</code>仅负责 网络请求接口的封装:掌握了它，你能优美地进行网络请求。</p><p><code>MVP</code>：一种解耦模型和视图的模式，是现在很多公司的主流模式。</p><p>由此可见，在平时的开发中熟练运用这种模式，不仅可以满足生活中大部分应用程序的场景，还可以为将来的工作积攒宝贵的实战经验。</p><h2 id="二-核心用法"><a href="#二-核心用法" class="headerlink" title="二.核心用法"></a>二.核心用法</h2><blockquote><p>本项目基于<code>Android X</code> 进行构建，完整代码可在我的<code>Github</code>上下载:<a href="https://github.com/LoveLifeEveryday/RxJava2_Retrofit_MVP" target="_blank" rel="noopener">带你封装自己的MVP+Retrofit+RxJava2框架</a></p></blockquote><p>首先，看一下我们项目的<strong>基本结构</strong>，下面笔者将为大家详细介绍每个类的相关信息</p><p><img src="https://s2.ax1x.com/2020/02/03/1a9wzn.png" alt="项目基本结构"></p><h3 id="2-1-基类Base"><a href="#2-1-基类Base" class="headerlink" title="2.1 基类Base"></a>2.1 基类<code>Base</code></h3><blockquote><p><code>Base</code>基类是封装了一些基类，方便后面新建新的<code>Activity</code>或者<code>Fragment</code>，减少耦合</p></blockquote><h4 id="2-1-1-BaseActivity"><a href="#2-1-1-BaseActivity" class="headerlink" title="2.1.1 BaseActivity"></a>2.1.1 <code>BaseActivity</code></h4><blockquote><p>这个类是<code>Activity</code>的基类，注意与下面的<code>BaseMvpActivity</code>区分开</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : BaseActivity 基类活动 * * @author XuCanyou666 * @date 2020/2/2 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法：实例化Presenter     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法：初始化控件，一般在BaseActivity中通过ButterKnife来绑定，所以该方法内部一般我们初始化界面相关的操作     *     * @return 控件     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法：得到布局id     *     * @return 布局id     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 启动Fragment     *     * @param id       id     * @param fragment 碎片     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startFragment</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> Fragment fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FragmentTransaction fragmentTransaction <span class="token operator">=</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fragmentTransaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        fragmentTransaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-2-BaseView"><a href="#2-1-2-BaseView" class="headerlink" title="2.1.2 BaseView"></a>2.1.2 <code>BaseView</code></h4><blockquote><p>一个接口，说明了每一个<code>View</code>基本需要的一些操作</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>rxjava2_retrofit_mvp<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2020/1/31 18:26 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 显示进度框     */</span>    <span class="token keyword">void</span> <span class="token function">showProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 关闭进度框     */</span>    <span class="token keyword">void</span> <span class="token function">hideProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 出错信息的回调     *     * @param result 错误信息     */</span>    <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>String result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-3-BaseMvpActivity"><a href="#2-1-3-BaseMvpActivity" class="headerlink" title="2.1.3 BaseMvpActivity"></a>2.1.3 <code>BaseMvpActivity</code></h4><blockquote><ul><li><p><code>MVP</code>活动的基类</p></li><li><p>继承自<code>BaseActivity</code>,它是<code>MVP</code>活动的基类，封装好了<code>Presenter</code>的相关操作</p></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>rxjava2_retrofit_mvp<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * created by xucanyou666  MVP活动的基类，封装好了presenter的相关操作 * on 2019/12/24 20:53 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseMvpActivity</span><span class="token operator">&lt;</span>V <span class="token keyword">extends</span> <span class="token class-name">BaseView</span><span class="token punctuation">,</span> P <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> P presenter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化presenter     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        presenter <span class="token operator">=</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">attachView</span><span class="token punctuation">(</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建presenter     *     * @return Presenter     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> P <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 得到presenter     *     * @return presenter     */</span>    <span class="token keyword">protected</span> P <span class="token function">getPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> presenter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 销毁     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-4-BaseFragment"><a href="#2-1-4-BaseFragment" class="headerlink" title="2.1.4 BaseFragment"></a>2.1.4 <code>BaseFragment</code></h4><blockquote><ul><li><p><code>Fragment</code>的基类</p></li><li><p>需要注意的是，这里用了<code>ButterKnife</code>框架，对碎片进行了绑定和解绑操作</p></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Fragment的基类，封装了一些Fragment的相关操作 * created by xucanyou666 * on 2020/1/31 16:21 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseFragment</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token keyword">implements</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> T mPresenter<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Context mContext<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Bundle mBundle<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Unbinder unbinder<span class="token punctuation">;</span>    <span class="token keyword">protected</span> View view<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 恢复数据     *     * @param outState bundle     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Bundle outState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBundle <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            outState<span class="token punctuation">.</span><span class="token function">putBundle</span><span class="token punctuation">(</span><span class="token string">"bundle"</span><span class="token punctuation">,</span> mBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 绑定activity     *     * @param context context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAttach</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 运行在onAttach之后，可以接收别人传递过来的参数，实例化对象     * 可以解决返回的时候页面空白的bug     *     * @param savedInstanceState     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>savedInstanceState <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mBundle <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"bundle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mBundle <span class="token operator">=</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//初始化presenter</span>        mPresenter <span class="token operator">=</span> <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> T <span class="token function">getPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mPresenter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 运行在onCreate之后，生成View视图     *     * @param inflater     * @param container     * @param savedInstanceState     * @return     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        view <span class="token operator">=</span> <span class="token function">initView</span><span class="token punctuation">(</span>inflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        unbinder <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 运行在onCreateView之后     * 加载数据     *     * @param savedInstanceState     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivityCreated</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityCreated</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPresenter<span class="token punctuation">.</span><span class="token function">attachView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 跳转Fragment     *     * @param toFragment 跳转去的fragment     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startFragment</span><span class="token punctuation">(</span>Fragment toFragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startFragment</span><span class="token punctuation">(</span>toFragment<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 跳转Fragment     *     * @param toFragment 跳转到的fragment     * @param tag        fragment的标签     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startFragment</span><span class="token punctuation">(</span>Fragment toFragment<span class="token punctuation">,</span> String tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FragmentTransaction fragmentTransaction <span class="token operator">=</span> <span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fragmentTransaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>content<span class="token punctuation">,</span> toFragment<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        fragmentTransaction<span class="token punctuation">.</span><span class="token function">addToBackStack</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        fragmentTransaction<span class="token punctuation">.</span><span class="token function">commitAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unbinder<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * fragment进行回退     * 类似于activity的OnBackPress     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">popBackStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPresenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化Fragment应有的视图     *     * @return view     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> View <span class="token function">initView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建presenter     *     * @return &lt;T extends BasePresenter> 必须是BasePresenter的子类     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> T <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 得到context     *     * @return context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Context <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到bundle     *     * @return bundle     */</span>    <span class="token keyword">public</span> Bundle <span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mBundle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到fragment     *     * @return fragment     */</span>    <span class="token keyword">public</span> Fragment <span class="token function">getFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-5-BasePresenter"><a href="#2-1-5-BasePresenter" class="headerlink" title="2.1.5 BasePresenter"></a>2.1.5 <code>BasePresenter</code></h4><blockquote><ul><li><p><code>Presenter</code>的基类，</p></li><li><p><code>CompositeDisposable</code>主要用途是及时取消订阅，以防止内存泄漏，具体<code>CompositeDisposable</code>的用法可参照<a href="https://www.jianshu.com/p/2a882604bbe8" target="_blank" rel="noopener">Rxjava关于Disposable你应该知道的事</a></p></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2020/1/16 17:12 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BasePresenter</span><span class="token operator">&lt;</span>V <span class="token keyword">extends</span> <span class="token class-name">BaseView</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将所有正在处理的Subscription都添加到CompositeSubscription中。统一退出的时候注销观察</span>    <span class="token keyword">private</span> CompositeDisposable mCompositeDisposable<span class="token punctuation">;</span>    <span class="token keyword">private</span> V baseView<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 和View绑定     *     * @param baseView     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attachView</span><span class="token punctuation">(</span>V baseView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseView <span class="token operator">=</span> baseView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解绑View,该方法在BaseMvpActivity类中被调用     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        baseView <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在界面退出等需要解绑观察者的情况下调用此方法统一解绑，防止Rx造成的内存泄漏</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCompositeDisposable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mCompositeDisposable<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取View     *     * @return view     */</span>    <span class="token keyword">public</span> V <span class="token function">getMvpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> baseView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将Disposable添加,在每次网络访问之前初始化时进行添加操作     *     * @param subscription subscription     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDisposable</span><span class="token punctuation">(</span>Disposable subscription<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//csb 如果解绑了的话添加 sb 需要新的实例否则绑定时无效的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCompositeDisposable <span class="token operator">==</span> null <span class="token operator">||</span> mCompositeDisposable<span class="token punctuation">.</span><span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mCompositeDisposable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mCompositeDisposable<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-6-MyApplication"><a href="#2-1-6-MyApplication" class="headerlink" title="2.1.6  MyApplication"></a>2.1.6  <code>MyApplication</code></h4><blockquote><ul><li>封装了一个可以全局获取<code>Context</code>的方法，参考写法自：《第一行代码–第二版》</li><li>注意：记得在<code>AndroidManifest</code>中注册<code>Application</code></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>rxjava2_retrofit_mvp<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Application<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基类 * created by xucanyou666 * on 2019/11/2 14:46 * email：913710642@qq.com * @author xucanyou666 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Context context<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Context <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-工具类-Util"><a href="#2-2-工具类-Util" class="headerlink" title="2.2 工具类 Util"></a>2.2 工具类 <code>Util</code></h3><h4 id="2-2-1-RetrofitManager"><a href="#2-2-1-RetrofitManager" class="headerlink" title="2.2.1 RetrofitManager"></a>2.2.1 <code>RetrofitManager</code></h4><blockquote><p><code>Retrofit</code>单例工具类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Retrofit单例工具类 * created by xucanyou666 * on 2020/1/16 16:38 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetrofitManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Retrofit mRetrofit<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器私有，这个工具类只有一个实例</span>    <span class="token keyword">private</span> <span class="token function">RetrofitManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        OkHttpClient<span class="token punctuation">.</span>Builder httpClientBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpClientBuilder<span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRetrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>httpClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span>RxJava2CallAdapterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>BASE_URL<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 静态内部类单例模式     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RetrofitManager <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>retrofitManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> RetrofitManager retrofitManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetrofitManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 利用泛型传入接口class返回接口实例     *     * @param ser 类     * @param &lt;T> 类的类型     * @return Observable     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">createRs</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> ser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mRetrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-2-RxJavaUtil"><a href="#2-2-2-RxJavaUtil" class="headerlink" title="2.2.2 RxJavaUtil"></a>2.2.2 <code>RxJavaUtil</code></h4><blockquote><p><code>RxJava</code>的工具类，执行线程调度工作</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2019/11/17 19:20 * email：913710642@qq.com * * @author xucanyou666 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RxJavaUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 线程调度工作     *     * @param observable 被观察者     * @param &lt;T>        类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Observable  <span class="token function">toSubscribe</span><span class="token punctuation">(</span>Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> observable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">unsubscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-常量类-Contant"><a href="#2-3-常量类-Contant" class="headerlink" title="2.3 常量类 Contant"></a>2.3 常量类 <code>Contant</code></h3><blockquote><p>常量池，特别感谢<code>api open</code>网提供的免费<code>API</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2019/11/17 19:01 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticQuality</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BASE_URL<span class="token operator">=</span><span class="token string">"https://api.gushi.ci/"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-接口管理器-Contract"><a href="#2-4-接口管理器-Contract" class="headerlink" title="2.4 接口管理器 Contract"></a>2.4 接口管理器 <code>Contract</code></h3><blockquote><p>这里集中了一些<code>Model</code>层,<code>Presenter</code>层,<code>View</code>层的与诗歌相关的接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 诗歌的接口管理器 * created by xucanyou666 * on 2020/2/2 15:33 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPoetryContract</span> <span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">IPoetryModel</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 得到诗歌         *         * @return 诗歌         */</span>        Observable<span class="token operator">&lt;</span>PoetryEntity<span class="token operator">></span> <span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">IPoetryPresenter</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">IPoetryView</span> <span class="token keyword">extends</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * @param author 作者         */</span>        <span class="token keyword">void</span> <span class="token function">searchSuccess</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-实体类-Entity"><a href="#2-5-实体类-Entity" class="headerlink" title="2.5 实体类 Entity"></a>2.5 实体类 <code>Entity</code></h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 诗歌的实体类 * created by xucanyou666 * on 2020/1/23 21:23 * email：913710642@qq.com * API返回示例： * { * "content": "胡瓶落膊紫薄汗，碎叶城西秋月团。", * "origin": "从军行七首", * "author": "王昌龄", * "category": "古诗文-天气-月亮" * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoetryEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//诗歌内容</span>    <span class="token keyword">private</span> String origin<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//来源</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//作者</span>    <span class="token keyword">private</span> String category<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分类</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> origin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrigin</span><span class="token punctuation">(</span>String origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>origin <span class="token operator">=</span> origin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> category<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCategory</span><span class="token punctuation">(</span>String category<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> category<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-Retrofit接口-iApiService"><a href="#2-6-Retrofit接口-iApiService" class="headerlink" title="2.6 Retrofit接口 iApiService"></a>2.6 <code>Retrofit</code>接口 <code>iApiService</code></h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * retrofit接口 * created by xucanyou666 * on 2020/1/23 21:25 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GetPoetryEntity</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取古诗词     *     * @return 古诗词     */</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"all.json"</span><span class="token punctuation">)</span>    Observable<span class="token operator">&lt;</span>PoetryEntity<span class="token operator">></span> <span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-视图层-View"><a href="#2-7-视图层-View" class="headerlink" title="2.7 视图层 View"></a>2.7 视图层 <code>View</code></h3><blockquote><p>这里为了减少代码量，方便读者们掌握核心操作，故<code>View</code>层都是用的同一个<code>Presenter</code>和<code>Model</code>，仅作学习参考</p></blockquote><h4 id="2-7-1-MainActivity"><a href="#2-7-1-MainActivity" class="headerlink" title="2.7.1 MainActivity"></a>2.7.1 <code>MainActivity</code></h4><blockquote><p>需要注意的是，这里<code>BaseMvpActivity&lt;activity, presenter&gt;</code>中<code>Activity</code>填入的是当前的<code>Activity</code>，<code>Presenter</code>填入的是对应的<code>Presenter</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : MainActivity * * @author XuCanyou666 * @date 2020/2/3 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMvpActivity</span><span class="token operator">&lt;</span>MainActivity<span class="token punctuation">,</span> PoetryPresenter<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">IPoetryContract<span class="token punctuation">.</span>IPoetryView</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_get_poetry<span class="token punctuation">)</span>    Button btnGetPoetry<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_poetry_author<span class="token punctuation">)</span>    TextView tvPoetryAuthor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_goto_fragment<span class="token punctuation">)</span>    Button btnGotoFragment<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>ll<span class="token punctuation">)</span>    LinearLayout ll<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> PoetryPresenter <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> PoetryPresenter<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchSuccess</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tvPoetryAuthor<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hideProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>String result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span><span class="token punctuation">{</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_get_poetry<span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_goto_fragment<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewClicked</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_get_poetry<span class="token operator">:</span>                <span class="token function">getPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_goto_fragment<span class="token operator">:</span>                <span class="token function">startFragment</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>ll<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MainFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-7-2-MainFragment"><a href="#2-7-2-MainFragment" class="headerlink" title="2.7.2 MainFragment"></a>2.7.2 <code>MainFragment</code></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description : MainFragment * * @author XuCanyou666 * @date 2020/2/2 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainFragment</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFragment</span><span class="token operator">&lt;</span>PoetryPresenter<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">IPoetryContract<span class="token punctuation">.</span>IPoetryView</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_get_poetry<span class="token punctuation">)</span>    Button btnGetPoetry<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_poetry_author<span class="token punctuation">)</span>    TextView tvPoetryAuthor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">initView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_main<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PoetryPresenter <span class="token function">initPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> PoetryPresenter<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hideProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>String result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_get_poetry<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewClicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchSuccess</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tvPoetryAuthor<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-8-Presenter层"><a href="#2-8-Presenter层" class="headerlink" title="2.8  Presenter层"></a>2.8  <code>Presenter</code>层</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2020/1/16 17:09 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoetryPresenter</span> <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token operator">&lt;</span>IPoetryContract<span class="token punctuation">.</span>IPoetryView<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">IPoetryContract<span class="token punctuation">.</span>IPoetryPresenter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"PoetryPresenter"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> PoetryEntity mPoetryEntity<span class="token punctuation">;</span>    <span class="token keyword">private</span> PoetryModel mPoetryModel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">PoetryPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPoetryModel <span class="token operator">=</span> PoetryModel<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PoetryPresenter <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> PoetryPresenter instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoetryPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到诗歌     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Observable observable <span class="token operator">=</span> mPoetryModel<span class="token punctuation">.</span><span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOnSubscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Disposable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Disposable disposable<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token function">addDisposable</span><span class="token punctuation">(</span>disposable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        observable <span class="token operator">=</span> RxJavaUtil<span class="token punctuation">.</span><span class="token function">toSubscribe</span><span class="token punctuation">(</span>observable<span class="token punctuation">)</span><span class="token punctuation">;</span>        observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>PoetryEntity<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>PoetryEntity poetryEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mPoetryEntity <span class="token operator">=</span> poetryEntity<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getMvpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPoetryEntity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">getMvpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchSuccess</span><span class="token punctuation">(</span>mPoetryEntity<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-9-Model层"><a href="#2-9-Model层" class="headerlink" title="2.9 Model层"></a>2.9 <code>Model</code>层</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2020/1/16 17:06 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoetryModel</span> <span class="token keyword">implements</span> <span class="token class-name">IPoetryContract<span class="token punctuation">.</span>IPoetryModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">PoetryModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PoetryModel <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> PoetryModel instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoetryModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取古诗词     *     * @return 古诗词     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>PoetryEntity<span class="token operator">></span> <span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> RetrofitManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRs</span><span class="token punctuation">(</span>GetPoetryEntity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPoetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-10-app-build-gradle"><a href="#2-10-app-build-gradle" class="headerlink" title="2.10 app.build.gradle"></a>2.10 <code>app.build.gradle</code></h3><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'com.android.application'</span>android <span class="token punctuation">{</span>    compileSdkVersion <span class="token number">28</span>    compileOptions <span class="token punctuation">{</span>        sourceCompatibility JavaVersion<span class="token operator">.</span>VERSION_1_8        targetCompatibility JavaVersion<span class="token operator">.</span>VERSION_1_8    <span class="token punctuation">}</span>    defaultConfig <span class="token punctuation">{</span>        applicationId <span class="token string">"com.users.xucanyou666.rxjava2_retrofit_mvp"</span>        minSdkVersion <span class="token number">19</span>        targetSdkVersion <span class="token number">28</span>        versionCode <span class="token number">1</span>        versionName <span class="token string">"1.0"</span>        testInstrumentationRunner <span class="token string">"androidx.test.runner.AndroidJUnitRunner"</span>    <span class="token punctuation">}</span>    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            minifyEnabled <span class="token boolean">false</span>            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android-optimize.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// RxJava</span>    implementation <span class="token string">'io.reactivex.rxjava2:rxjava:2.1.12'</span>    implementation <span class="token string">'com.squareup.retrofit2:retrofit:2.6.0'</span>    <span class="token comment" spellcheck="true">// Retrofit和jxjava关联</span>    implementation <span class="token string">'com.squareup.retrofit2:adapter-rxjava2:2.4.0'</span>    <span class="token comment" spellcheck="true">// Retrofit使用Gson转换</span>    implementation <span class="token string">'com.squareup.retrofit2:converter-gson:2.4.0'</span>    <span class="token comment" spellcheck="true">// RxAndroid</span>    implementation <span class="token string">'io.reactivex.rxjava2:rxandroid:2.0.2'</span>    <span class="token comment" spellcheck="true">//引入ButterKnife</span>    implementation <span class="token string">"com.jakewharton:butterknife:10.2.0"</span>    implementation <span class="token string">'androidx.legacy:legacy-support-v4:1.0.0'</span>    annotationProcessor <span class="token string">"com.jakewharton:butterknife-compiler:10.2.0"</span>    implementation <span class="token string">"com.google.android.material:material:1.0.0"</span>    implementation <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    implementation <span class="token string">'androidx.appcompat:appcompat:1.1.0'</span>    implementation <span class="token string">'androidx.constraintlayout:constraintlayout:1.1.3'</span>    testImplementation <span class="token string">'junit:junit:4.12'</span>    androidTestImplementation <span class="token string">'androidx.test.ext:junit:1.1.1'</span>    androidTestImplementation <span class="token string">'androidx.test.espresso:espresso-core:3.2.0'</span><span class="token punctuation">}</span></code></pre><h2 id="三-我在使用中遇到的问题"><a href="#三-我在使用中遇到的问题" class="headerlink" title="三.我在使用中遇到的问题"></a>三.我在使用中遇到的问题</h2><h3 id="3-1-网络权限忘记授予"><a href="#3-1-网络权限忘记授予" class="headerlink" title="3.1 网络权限忘记授予"></a>3.1 网络权限忘记授予</h3><ul><li>解决措施：加上权限即可</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h3 id="3-2-ButterKnife框架版本问题"><a href="#3-2-ButterKnife框架版本问题" class="headerlink" title="3.2 ButterKnife框架版本问题"></a>3.2 <code>ButterKnife</code>框架版本问题</h3><p>使用<code>ButterKnife</code>框架的时候</p><p>当是<code>androidX</code>的时候，需要<code>implementation 10.2.0</code>版本的<code>ButterKnife</code></p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//引入ButterKnife</span>    implementation <span class="token string">"com.jakewharton:butterknife:10.2.0"</span>    implementation <span class="token string">'androidx.legacy:legacy-support-v4:1.0.0'</span>    annotationProcessor <span class="token string">"com.jakewharton:butterknife-compiler:10.2.0"</span></code></pre><p>当是<code>android 28</code>等其他版本的时候，可以导入<code>8.4.0</code>版本的<code>ButterKnife</code>（导入<code>10.2.0</code>版本会出错）</p><pre class=" language-groovy"><code class="language-groovy">implementation <span class="token string">'com.jakewharton:butterknife:8.4.0'</span>annotationProcessor <span class="token string">'com.jakewharton:butterknife-compiler:8.4.0'</span> </code></pre><h3 id="3-3-ButterKnife需要Java-1-8以上的支持"><a href="#3-3-ButterKnife需要Java-1-8以上的支持" class="headerlink" title="3.3 ButterKnife需要Java 1.8以上的支持"></a>3.3 <code>ButterKnife</code>需要Java 1.8以上的支持</h3><pre class=" language-groovy"><code class="language-groovy"> compileOptions <span class="token punctuation">{</span>        sourceCompatibility JavaVersion<span class="token operator">.</span>VERSION_1_8        targetCompatibility JavaVersion<span class="token operator">.</span>VERSION_1_8    <span class="token punctuation">}</span> </code></pre><h3 id="3-4-Fragment中点击事件失效的问题"><a href="#3-4-Fragment中点击事件失效的问题" class="headerlink" title="3.4  Fragment中点击事件失效的问题"></a>3.4  <code>Fragment</code>中点击事件失效的问题</h3><blockquote><ul><li>点击事件失效发生的场景：<code>Fragment</code>中初始化控件没有用<code>ButterKnife</code>框架</li></ul></blockquote><p>解决措施如下：</p><p>A:方法一:</p><ul><li>将控件的初始化放在<code>onCreateView</code>中  </li><li>将控件的点击事件的代码放在<code>onActivityCreated</code>中</li></ul><p>B:方法二：</p><ul><li>在<code>Fragment</code>中使用<code>ButterKnife</code>框架</li></ul><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li><p>《第一行代码》</p></li><li><p><a href="https://www.jianshu.com/p/2a882604bbe8" target="_blank" rel="noopener">Rxjava关于Disposable你应该知道的事</a></p></li><li><p><a href="https://www.jianshu.com/p/651146bd0688" target="_blank" rel="noopener">Mvp实战心得(二)—Base基类的封装</a></p></li><li><p><a href="https://blog.csdn.net/gpf1320253667/article/details/84363059" target="_blank" rel="noopener">最实用的Retrofit2+RxJava2+MVP框架搭建，避免各种内存泄漏</a></p></li><li><p><a href="https://blog.csdn.net/u010940300/article/details/43170477?utm_source=blogkpcl3" target="_blank" rel="noopener">Android中Fragment点击事件的添加</a></p></li><li><p><a href="https://blog.csdn.net/xzytl60937234/article/details/52871584" target="_blank" rel="noopener">在Fragment中的子View（如Button等）点击事件失效解决方法</a></p></li><li><p><a href="https://www.jianshu.com/p/5ba83d9639fb" target="_blank" rel="noopener">谈谈RxJava</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻轻松松过六级</title>
      <link href="/2020/01/12/qing-qing-song-song-guo-liu-ji/"/>
      <url>/2020/01/12/qing-qing-song-song-guo-liu-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="轻轻松松过六级"><a href="#轻轻松松过六级" class="headerlink" title="轻轻松松过六级"></a>轻轻松松过六级</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>文本已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h2 id="本篇文章主要想分享下，总结的一些通过六级的技巧和方法，学习清单："><a href="#本篇文章主要想分享下，总结的一些通过六级的技巧和方法，学习清单：" class="headerlink" title="本篇文章主要想分享下，总结的一些通过六级的技巧和方法，学习清单："></a>本篇文章主要想分享下，总结的一些通过六级的技巧和方法，学习清单：</h2><ul><li>过六级的重要性</li><li>过六级的一些小技巧</li><li>单词书的背诵方法及推荐</li><li>该刷的试卷的类型，开始刷题的时间</li><li>六级的考试时间及题型</li><li>听力提高方法</li><li>六级视频大放送</li></ul><h2 id="一-为什么要过六级"><a href="#一-为什么要过六级" class="headerlink" title="一.为什么要过六级"></a>一.为什么要过六级</h2><ol><li><p><strong>保研</strong>的资格</p><p>想要保研的同学，一定要关注学校的保研要求，绝大多数高校对英语四六级的成绩有要求，比如四级500分以上或6级425分以上。</p></li><li><p>英语课程<strong>免修</strong></p><p>当你开始读研，如果四六级高于某一分数，是可以免修英语课程的。北京大学国家发展研究院发布的《关于办理外语免修的通知》中，研修生可免修外语的其中一个条件就是“全国CET六级考试550分以上。”这是不是相当诱人!那必须高分过级呀!单词现在就背起来。</p></li><li><p><strong>外企</strong></p><p>首先，当你投简历的时候你就会发现，他们的招聘信息是全英文的。其次，笔试、面试也都是全英文的。再者，实际工作的语言环境也避免不了英语实践。所以英语好在外企就是妥妥的加分项。</p></li><li><p><strong>银行</strong>岗位</p><p>各分行的校园招聘公告中均硬性要求本科生通过<a href="http://cet4.koolearn.com/" target="_blank" rel="noopener">英语四级</a>考试，研究生通过英语六级考试。四大行总行对于外语的要求则更高，本科生和研究生均须通过英语六级考试。</p></li><li><p>提高英语能力，可以<strong>看到</strong>更加<strong>广阔的世界</strong></p><p>对于我这种IT码农来说，通过六级，是对你英语能力的又一次实质上的提高，众所周知，IT行业很多技术最开始都是只有英文版本的文档，而且很多语言的源码中的注释都是用英文写的，这样，当你想学习一门新技术，你就不必苦等别人大牛的翻译，而是成为第一个吃螃蟹的人，第一时间掌握新的技术，何乐而不为呢？</p></li></ol><h2 id="二-考试时间"><a href="#二-考试时间" class="headerlink" title="二.考试时间"></a>二.考试时间</h2><p>目前官方还没公布考试时间，但是可以参考2019年6月六级考试时间</p><p><strong>6月15日</strong>，15：10-17：25</p><p>考试流程：</p><p>15：10——17：25</p><p>14：40——15：00试音时间</p><p>15：00——15：10 阅读考场注意事项，发放考卷，贴条形码</p><p>15：10——15：40 作文考试阶段</p><p>15：40——16：10 听力测试</p><p>16：10——16：15 考试暂停5分钟，收答题卡一(即作文和听力)</p><p>听力结束后完成剩余考项</p><p>17：25全部考试结束。</p><p>总共是2个小时10分钟的时间，时间可以说是非常紧的。</p><h2 id="三-该刷的题目的类型以及开始刷题的时间"><a href="#三-该刷的题目的类型以及开始刷题的时间" class="headerlink" title="三.该刷的题目的类型以及开始刷题的时间"></a>三.该刷的题目的类型以及开始刷题的时间</h2><p>首先，到某宝或者某东买一套<strong>真题</strong>，认真刷完里面的10套历年真题。<strong>做真题，不要去做模拟题</strong>，真题上的生词和知识点都是通的，就像你雅思拿了7分，去考托福也很难下100分一样。。因为模拟题的质量良莠不齐，我们英语老师也曾经说过，模拟题有的出题老师水平真的不怎么样，写出来的模拟题质量很差。下面是某宝搜的链接：</p><p><a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.9.7b991d4cmw5ezd&id=535700366318&ad_id=&am_id=&cm_id=140105335569ed55e27b&pm_id=&abbucket=9" target="_blank" rel="noopener">星火英语六级2020六月</a></p><p>开始刷真题的时间是考前一个月左右（大部分人），如果是基础比较差的，可以再提前半个月至一个月准备。</p><blockquote><p>如何正确使用真题呢？</p></blockquote><p>你需要找一个不被打扰的地方，最好是图书馆，按照六级考试的时间2小时25分钟，认认真真完完整整答完一套题。最重要的其实是对答案的步骤，不是一次性对完答案就完事了，这样远远发挥不出真题的功效，相当于白做，白做，白做。因为真题最重要的是吃透，重点是质量，而不是数量。刚开始做一套试卷你可能要花很久（短则3~4天，长则1周）才能完全吃透。不要焦躁，这种现象很正常。坚持下去，你会发现第二套、第三套状态会越来越好。</p><blockquote><p>怎么吃透真题呢？</p></blockquote><p>吃透真题的标准就是，当你每一套题都要保证<strong>卷子中随便指出一个单词你都认识</strong>。而吃透真题的方法，一共分为阅读，听力和写作三个部分，详细的讲解请继续往下看。</p><h2 id="四-如何提高听力水平"><a href="#四-如何提高听力水平" class="headerlink" title="四.如何提高听力水平"></a>四.如何提高听力水平</h2><blockquote><p>六级考试35%的分值是听力，所以得听力者得天下！听力不好的小伙伴可要认真听了。</p></blockquote><ul><li><strong>反复听</strong>真题音频，一开始听一遍，听不懂，翻开答案的听力原文，找到生词，标记上，通读两遍原文，再次听，反复听。</li><li><strong>研究</strong>听力题目，仔细分析为什么这里听不懂。是走神还是生词呢？它是怎么设陷阱的？原文和选项进行了怎样的同义替换？</li><li><strong>坚持</strong>，坚持，坚持。英语听力水平的提高，不在一朝一夕，重要的是坚持，不要三天打🐟两天晒网。</li></ul><h2 id="五-如何提高阅读水平"><a href="#五-如何提高阅读水平" class="headerlink" title="五.如何提高阅读水平"></a>五.如何提高阅读水平</h2><blockquote><p>阅读的分值是35%，所以说，只要阅读听力好，六级不怕过不了。</p></blockquote><p>六级的阅读题大多摘自国外期刊，比如经济学人，华尔街日报，纽约时报，金融时报……我们可以做的就是，<strong>每三天读一篇经济学人双语精读笔记</strong>，注意是精读，不是泛读。读外刊的目的不是为了让你遇到原题（想得美），而是让你去渐渐习惯外刊的叙述思路，<strong>提高阅读分数的同时，积累写作词组和句型，提升单词量</strong>。感兴趣的可以关注一下《英语逃脱计划》公众号，里面定期推送外刊精读笔记。</p><p>这个过程，一开始或许会很艰难。但是后面，你会发现越来越顺。有了量的积累，才有质的飞跃，到时候，你难道还会怕六级考试?</p><p>下面是公众号的截图：</p><p><img src="https://i.loli.net/2020/01/12/LpXrDkSYPd4GOZe.png" alt="公众号截图"><br><img src="https://i.loli.net/2020/01/12/6eKZQV1iba9gFxo.jpg" alt="公众号截图"><br><img src="https://i.loli.net/2020/01/12/JlKvpa4c6V5dR31.jpg" alt="公众号截图"></p><h2 id="六-如何提高作文水平"><a href="#六-如何提高作文水平" class="headerlink" title="六.如何提高作文水平"></a>六.如何提高作文水平</h2><blockquote><p>这部分往往是人们最容易忽视的地方了。我身边大部分大学生，现在的写作水平都已经退化到初中的水平了（害羞.jpg），句子有用的高级词汇很少不说，甚至还有语病和写错的单词。</p></blockquote><ul><li>仔细研究真题答案范文，划出好的表达，整理到本子上，最好<strong>分不同的话题</strong>，比如说有关环保的，有关找工作的，有关传统文化的，有关风景的，有关山水的…</li><li>研究真题范文是怎样用各种<strong>从句</strong>的，能用长句就不用短句，能用短句就不写错句。</li><li>写作模板的话，千万不要盲目地在网上找一些已经被用烂的模板，然后盲目背诵，你可以对模板进行解构，比如说：大多数是引出话题+论证过程+结论。你可以把模板放在一边，在你精读外刊或者是阅读题的时候，思考他是怎样引出话题的，然后把你认为精美的句子抄下来，替换掉你的模板对应的那句话，反复操作，你就可以<strong>创造</strong>出一篇质量很高的<strong>模板</strong>了。下面是网上搜的作文模板，仅供参考：<a href="https://wenku.baidu.com/view/0f9c5b39dc36a32d7375a417866fb84ae45cc36d.html" target="_blank" rel="noopener">6级作文模板</a></li></ul><h2 id="七-怎么提高词汇量"><a href="#七-怎么提高词汇量" class="headerlink" title="七.怎么提高词汇量"></a>七.怎么提高词汇量</h2><p>制胜法宝就是真题上的词汇和六级大纲词汇。</p><p>首先真题词汇的重要性不用多说了。</p><p>你可以上网买一本，六级词汇书绿宝书，之前我有用过四级的，书中会有很多单词记忆的小技巧放送，封面大概是这样：<br><img src="https://s2.ax1x.com/2020/01/12/loBOV1.png" alt="六级词汇绿宝书"></p><p>然后每天定量刷，注意的是，背单词的技巧是重复，<strong>少时多频</strong>，这本书的话，仅仅是背完一遍是远远不够的，很快你就会遗忘，推荐的次数是3-7次。也许一开始你会觉得很难受，但是到后面几遍的话，速度就会越来越快，所以，当你背了这么多遍后，试卷上基本上已经没有你不认识的词了，这个时候阅读水平自然大大提升。</p><hr><p>如果文章对您有一点帮助的话，希望您能点一下赞，您的点赞，是我前进的动力</p><p>本文参考链接：</p><ul><li><a href="https://www.zhihu.com/question/34882704" target="_blank" rel="noopener">六级英语该如何准备</a></li><li><a href="https://www.thea.cn/cet6_zx_1856569-1.htm" target="_blank" rel="noopener">全国2020年上半年英语六级考试时间</a></li><li><a href="https://cet4.koolearn.com/20190508/830044.html" target="_blank" rel="noopener">英语四六级的重要性：不过会影响你做这些事！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博客没头绪？我手把手教你！</title>
      <link href="/2020/01/11/xie-bo-ke-mei-tou-xu-wo-shou-ba-shou-jiao-ni/"/>
      <url>/2020/01/11/xie-bo-ke-mei-tou-xu-wo-shou-ba-shou-jiao-ni/</url>
      
        <content type="html"><![CDATA[<h1 id="写博客没头绪？我手把手教你！"><a href="#写博客没头绪？我手把手教你！" class="headerlink" title="写博客没头绪？我手把手教你！"></a>写博客没头绪？我手把手教你！</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文已经收录到我的Github个人博客，欢迎大佬们光临寒舍：</p><p><a href="https://lovelifeeveryday.github.io/">我的GIthub博客</a></p></blockquote><h3 id="本篇文章并不涉及到博客的搭建，主要是想分享下我对写博客整体思路的一些见解，学习清单："><a href="#本篇文章并不涉及到博客的搭建，主要是想分享下我对写博客整体思路的一些见解，学习清单：" class="headerlink" title="本篇文章并不涉及到博客的搭建，主要是想分享下我对写博客整体思路的一些见解，学习清单："></a>本篇文章并不涉及到博客的搭建，主要是想分享下我对写博客整体思路的一些见解，学习清单：</h3><ul><li>写博客的好处</li><li>博客的思路框架</li><li>博客的格式推荐</li><li>写博客的工具</li><li>写博客的语言</li><li>写博客的平台推荐</li></ul><h2 id="一-为什么要写博客？"><a href="#一-为什么要写博客？" class="headerlink" title="一.为什么要写博客？"></a>一.为什么要写博客？</h2><ul><li>写技术博客，可以让你对已经学习的<strong>知识</strong>进行<strong>巩固</strong>，并且很有可能对自己提出一些新的问题，让你摆脱“我好像搞懂了”的怪圈，从而可以更好地沉淀自己的知识与经验。</li><li>写技术博客，对于你后面的<strong>复习</strong>也是很有帮助的。之后你有些知识点忘记了的时候，你回去翻翻博客，重新掌握这一部分的知识点就很快了。</li><li>写技术博客，可能有利于你的<strong>求职</strong>。试想，当你面试的时候，简历上写了你的博客地址，面试官点进去，wow，你的粉丝这么多，你的文章阅读量这么大，你对知识的整理能力这么强，一瞬间就让你在茫茫人海中脱颖而出。</li><li>写技术博客，可以提高你的<strong>学习效率</strong>。不信的话，我们看一下下面一张图。</li></ul><p><img src="https://s2.ax1x.com/2020/01/10/l4RTf0.png" alt="学习内容平均留存率"></p><p>​        我们可以看到，主动学习中的教授给他人，有90%的的留存率，而仅仅是阅读的话，留存率只有10%，学习效率提高        了8倍，但是你可能只是多花了一倍的时间。而写博客，把自己当作一个分享者，而读者是一个小白，恰恰就是主动        教授给他人，这样的话，学习效率难道不高吗？</p><h2 id="二-写博客的思路框架"><a href="#二-写博客的思路框架" class="headerlink" title="二.写博客的思路框架"></a>二.写博客的思路框架</h2><p>总体的思路就是把你自己当作一个分享者，而读者是一个小白，现在思考一个问题：我要教会隔壁村的giao哥这个知识点？我要怎么做呢？</p><p>按照我的思路，我会这样做：</p><ol><li>这项技术是什么？</li><li>为什么要学习这项技术？和其他技术相比，有什么优点？</li><li>技术的核心用法？（简单示例）</li><li>使用技术可能会出现的一些问题（或者是你在使用中遇到的问题）</li></ol><p>下面，比如说，我来介绍一下快排</p><ol><li><p>快速排序是什么？</p><p>快速排序是一种快速的排序算法，基本思想是将一串数字序列中，一个数放在合适的位置，在这个位置下，左边的数字都比它小，右边的都比他大，这个数的位置称为枢纽</p></li><li><p>为什么要学习快速排序呢？</p><p>快速排序是目前最高效率的排序算法之一。面试必问的算法之一。他是冒泡排序的改进版本</p></li><li><p>技术的核心用法</p><pre><code>...代码</code></pre></li><li><p>使用技术遇到的问题（可选）</p></li></ol><h2 id="三-写博客用的语言"><a href="#三-写博客用的语言" class="headerlink" title="三.写博客用的语言"></a>三.写博客用的语言</h2><p>这里炒鸡推荐使用markdown这个轻量级标记语言，这个语言可以不用像word一样，对各种字号字体伤脑筋，还可以很方便地插入各种链接或者是图片，简直是程序员必备技能！！！不会的感觉学起来</p><p><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">markdown入门教程</a></p><h2 id="四-写博客用的工具"><a href="#四-写博客用的工具" class="headerlink" title="四.写博客用的工具"></a>四.写博客用的工具</h2><p>这里推荐一个人见人爱的markdown语言编译器。</p><p>为什么说是人见人爱呢？</p><p>因为它支持各种快捷键，方便你调字号，插入各种公式，完全免费，支持实时预览…反正好处数不过来，简直和markdown是绝配</p><p><img src="https://i.loli.net/2020/01/10/cqgTGMSp7Xd4V5x.png" alt="image.png"></p><p>下面是官网：</p><p><a href="https://www.typora.io/" target="_blank" rel="noopener">typora官网</a></p><h2 id="五-博客的格式推荐"><a href="#五-博客的格式推荐" class="headerlink" title="五.博客的格式推荐"></a>五.博客的格式推荐</h2><p>这里个人感觉是比较重要的，一个博客，如果写得非常晦涩难懂的话，就算技术非常高深，但是受众太小，也不能算上真正的好博客；所以这里介绍一下，写博客的格式及其小技巧，同学们，可要竖起耳朵听了。</p><h3 id="5-1-前言的书写"><a href="#5-1-前言的书写" class="headerlink" title="5.1 前言的书写"></a>5.1 前言的书写</h3><p>如果你有个人博客或者是想要各位大佬的一个小星星的话，可以在前言里面贴上自己的博客或者github链接，这样的话，有可能可以增加关注度</p><h3 id="5-2-学习清单的展示"><a href="#5-2-学习清单的展示" class="headerlink" title="5.2 学习清单的展示"></a>5.2 学习清单的展示</h3><p>这个不仅可以帮助读者快速获取到他们想要的知识，更可以在你脑海中展示一个清晰的知识脉络，双重好处，双倍快乐</p><h3 id="5-3-标题的书写"><a href="#5-3-标题的书写" class="headerlink" title="5.3 标题的书写"></a>5.3 标题的书写</h3><p>名人说：“一个好标题，胜过一篇文。”，由此可见，取个好标题的重要性多大。但是呢，不能矫枉过正，形成UC震惊体就不好了。</p><p>现在这里推荐一下，本人看到的比较好的标题命名：</p><ul><li>学习笔记|Retrofit篇</li><li>学习笔记|markdown篇</li><li>要点提炼|大话数据结构</li><li>手把手带你体验IO流</li><li>从零开始学XXX</li><li>一文带你认识封装</li></ul><h3 id="5-4-文章结尾的书写"><a href="#5-4-文章结尾的书写" class="headerlink" title="5.4 文章结尾的书写"></a>5.4 文章结尾的书写</h3><p>可以在文章结尾的时候，贴上你参考的文章的链接，而且加上一句，希望这篇文章对你有帮助，不仅可以拉近与读者之间的距离，更可以体现你的严谨。</p><h2 id="六-写博客的平台推荐"><a href="#六-写博客的平台推荐" class="headerlink" title="六.写博客的平台推荐"></a>六.写博客的平台推荐</h2><p>之前Java3y大佬专门写了一篇不错的文章，介绍各个平台，有兴趣的可以去看下</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484656&amp;idx=1&amp;sn=9e1dd44bc50ddb370bfa607257ed43a2&amp;chksm=ebd745f1dca0cce7ae67eedd77632ccbaf36d1c0970d66aa28f4db18f1878deb83323f9183a1###rd" target="_blank" rel="noopener">程序员可以选择哪些平台写技术博客？</a></p><hr><p>希望这篇文章对你有一点小小的帮助</p><p>本文参考链接：</p><ul><li><a href="https://www.jianshu.com/p/4025e67d10f1" target="_blank" rel="noopener">如何写一篇技术博客，谈谈我的看法</a></li><li><a href="https://www.jianshu.com/p/602b1ec4ca7a" target="_blank" rel="noopener">要点提炼|开发艺术之Activity</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484656&amp;idx=1&amp;sn=9e1dd44bc50ddb370bfa607257ed43a2&amp;chksm=ebd745f1dca0cce7ae67eedd77632ccbaf36d1c0970d66aa28f4db18f1878deb83323f9183a1###rd" target="_blank" rel="noopener">程序员可以选择哪些平台写技术博客？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.8 B树</title>
      <link href="/2019/11/28/8.8-b-shu/"/>
      <url>/2019/11/28/8.8-b-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="8-8-B树"><a href="#8-8-B树" class="headerlink" title="8.8 B树"></a>8.8 B树</h1><blockquote><p>什么是B树？有什么用呢？B树是由什么演变过来的呢？</p></blockquote><p><strong>多路查找树(muitl-way search tree)</strong>，其每一个节点的<strong>孩子</strong>数可以多于两个，且每一个节点处可以<strong>存储多个元素</strong>。主要有4中特殊形式。</p><h2 id="1-2-3-树"><a href="#1-2-3-树" class="headerlink" title="1. 2-3 树"></a>1. 2-3 树</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p> 其中的每一个节点都具有<strong>两个</strong>孩子（称为2节点）或者<strong>三个</strong>孩子（称为3节点）。<br>并且2-3树中所有的<strong>叶子</strong>都在<strong>同一层</strong>上</p><p><img src="https://s2.ax1x.com/2019/11/28/Qi85LT.png" alt="Qi85LT.png"></p><h3 id="1-2-2结点"><a href="#1-2-2结点" class="headerlink" title="1.2  2结点"></a>1.2  2结点</h3><p> 一个2节点包含<strong>一</strong>个<strong>元素</strong>和<strong>两</strong>个<strong>孩子</strong>（或者<strong>没有孩子</strong>）。 左小右大</p><h3 id="1-3-3结点"><a href="#1-3-3结点" class="headerlink" title="1.3  3结点"></a>1.3  3结点</h3><p> 包含一小一大<strong>两</strong>个<strong>元素</strong>和<strong>三</strong>个<strong>孩子</strong>（或者没有孩子）。 左中右</p><h3 id="1-4-2-3树的插入操作"><a href="#1-4-2-3树的插入操作" class="headerlink" title="1.4 2-3树的插入操作"></a>1.4 2-3树的插入操作</h3><h4 id="1-4-1-空树"><a href="#1-4-1-空树" class="headerlink" title="1.4.1 空树"></a>1.4.1 空树</h4><p>直接插</p><h4 id="1-4-2-插入到2结点的叶子上"><a href="#1-4-2-插入到2结点的叶子上" class="headerlink" title="1.4.2 插入到2结点的叶子上"></a>1.4.2 插入到2结点的叶子上</h4><p>将2结点变成<strong>3结点</strong></p><p><img src="https://s2.ax1x.com/2019/11/28/QiGPFH.png" alt="QiGPFH.png"></p><h4 id="1-4-3-往3结点中插入元素"><a href="#1-4-3-往3结点中插入元素" class="headerlink" title="1.4.3 往3结点中插入元素"></a>1.4.3 往3结点中插入元素</h4><h5 id="1-4-3-1-双亲结点是2结点"><a href="#1-4-3-1-双亲结点是2结点" class="headerlink" title="1.4.3.1 双亲结点是2结点"></a>1.4.3.1 双亲结点是2结点</h5><p><a href="https://imgchr.com/i/QiGDpR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/28/QiGDpR.md.png" alt="QiGDpR.md.png"></a></p><h5 id="1-4-3-2-双亲结点是3结点，双亲的双亲是2结点"><a href="#1-4-3-2-双亲结点是3结点，双亲的双亲是2结点" class="headerlink" title="1.4.3.2 双亲结点是3结点，双亲的双亲是2结点"></a>1.4.3.2 双亲结点是3结点，双亲的双亲是2结点</h5><p><img src="https://s2.ax1x.com/2019/11/28/QiGWAe.png" alt="QiGWAe.png"></p><h5 id="1-4-3-3-双亲结点是3结点，双亲的双亲是3结点"><a href="#1-4-3-3-双亲结点是3结点，双亲的双亲是3结点" class="headerlink" title="1.4.3.3 双亲结点是3结点，双亲的双亲是3结点"></a>1.4.3.3 双亲结点是3结点，双亲的双亲是3结点</h5><p><a href="https://imgchr.com/i/QiJPBT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/28/QiJPBT.md.png" alt="QiJPBT.md.png"></a></p><h3 id="1-5-2-3树的删除操作"><a href="#1-5-2-3树的删除操作" class="headerlink" title="1.5 2-3树的删除操作"></a>1.5 2-3树的删除操作</h3><h4 id="1-5-1-删除的元素是在3结点的叶子结点"><a href="#1-5-1-删除的元素是在3结点的叶子结点" class="headerlink" title="1.5.1  删除的元素是在3结点的叶子结点"></a>1.5.1  删除的元素是在3结点的叶子结点</h4><p><img src="https://s2.ax1x.com/2019/11/28/QiJWrV.png" alt="QiJWrV.png"></p><h4 id="1-5-2-删除的元素是2结点"><a href="#1-5-2-删除的元素是2结点" class="headerlink" title="1.5.2 删除的元素是2结点"></a>1.5.2 删除的元素是2结点</h4><h5 id="1-5-2-1-双亲是2结点，右孩子是3结点"><a href="#1-5-2-1-双亲是2结点，右孩子是3结点" class="headerlink" title="1.5.2.1 双亲是2结点，右孩子是3结点"></a>1.5.2.1 双亲是2结点，右孩子是3结点</h5><p><img src="https://s2.ax1x.com/2019/11/28/QiYaW9.png" alt="QiYaW9.png"></p><p>删除后<strong>左旋</strong></p><h5 id="1-5-2-2-双亲是2结点，右孩子是2结点"><a href="#1-5-2-2-双亲是2结点，右孩子是2结点" class="headerlink" title="1.5.2.2 双亲是2结点，右孩子是2结点"></a>1.5.2.2 双亲是2结点，右孩子是2结点</h5><p><a href="https://imgchr.com/i/QiYoef" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/28/QiYoef.md.png" alt="QiYoef.md.png"></a></p><p>方法是将右结点<strong>变成3结点</strong></p><h5 id="1-5-2-3-双亲是3结点"><a href="#1-5-2-3-双亲是3结点" class="headerlink" title="1.5.2.3 双亲是3结点"></a>1.5.2.3 双亲是3结点</h5><p><img src="https://s2.ax1x.com/2019/11/28/QitJXt.png" alt="QitJXt.png"></p><p>方法是将<strong>双亲拆分</strong></p><h5 id="1-5-2-4-满二叉树"><a href="#1-5-2-4-满二叉树" class="headerlink" title="1.5.2.4 满二叉树"></a>1.5.2.4 满二叉树</h5><p><img src="https://s2.ax1x.com/2019/11/28/QitHnx.png" alt="QitHnx.png"></p><h4 id="1-5-3-删除的是非叶子结点"><a href="#1-5-3-删除的是非叶子结点" class="headerlink" title="1.5.3 删除的是非叶子结点"></a>1.5.3 删除的是非叶子结点</h4><p>重点是找到前驱或者后继</p><p><img src="https://s2.ax1x.com/2019/11/28/QiNt29.png" alt="QiNt29.png"></p><h2 id="2-2-3-4树"><a href="#2-2-3-4树" class="headerlink" title="2. 2-3-4树"></a>2. 2-3-4树</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p> 2-3-4树是2-3树的扩展，包括了<strong>4节点</strong>的使用，一个4节点包含<strong>小中大三个元素</strong>和<strong>四个孩子</strong>（或没有孩子）。 </p><p><img src="https://s2.ax1x.com/2019/11/28/QiNLMn.png" alt="QiNLMn.png"></p><h2 id="3-B树"><a href="#3-B树" class="headerlink" title="3.B树"></a>3.B树</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p> B树（B-树）是一种平衡的多路查找树。2-3树和2-3-4树都是B树的特例。<strong>节点最大的孩子</strong>数组称为B树的<strong>阶</strong>（order），因此，2-3树是3阶B树，2-3-4树是4阶B树。 </p><p><a href="https://imgchr.com/i/Qiwkss" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/28/Qiwkss.md.png" alt="Qiwkss.md.png"></a></p><h3 id="3-2-B树的数据结构为内外存的数据交互准备的"><a href="#3-2-B树的数据结构为内外存的数据交互准备的" class="headerlink" title="3.2  B树的数据结构为内外存的数据交互准备的"></a>3.2  <strong>B树的数据结构为内外存的数据交互准备的</strong></h3><p>当要处理的数据很大时，无法一次全部装入内存。这时对B树调整，使得B树的阶数与硬盘存储的页面大小相匹配。比如说一棵B树的阶为1001（即1个节点包含1000个关键字），高度为2（从0开始），它可以存储超过10亿个关键字（1001x1001x1000+1001x1000+1000）,只要让根节点持久的保留在内存中，那么在这颗树上，寻找某一个关键字至多需要两次硬盘的读取即可。</p><h2 id="4-B-树"><a href="#4-B-树" class="headerlink" title="4.B+树"></a>4.B+树</h2><p><img src="https://s2.ax1x.com/2019/11/28/QiB7GT.png" alt="QiB7GT.png"></p><p> B+树中，出现在分支节点中的元素会被当做他们在该分支节点位置的<strong>中序后继</strong>者（叶子节点）中再次<strong>列出</strong>。另外，每一个叶子节点都会保存一个指向后一叶子节点的<strong>指针</strong>。 </p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.3 依赖注入框架</title>
      <link href="/2019/11/21/9.3-yi-lai-zhu-ru-kuang-jia/"/>
      <url>/2019/11/21/9.3-yi-lai-zhu-ru-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="9-3-依赖注入框架"><a href="#9-3-依赖注入框架" class="headerlink" title="9.3 依赖注入框架"></a>9.3 依赖注入框架</h1><h2 id="1-ButterKnife"><a href="#1-ButterKnife" class="headerlink" title="1.ButterKnife"></a>1.ButterKnife</h2><p>具体看之前的笔记</p><h2 id="2-Dagger2"><a href="#2-Dagger2" class="headerlink" title="2.Dagger2"></a>2.Dagger2</h2><h3 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h3><pre class=" language-groovy"><code class="language-groovy"> implementation <span class="token string">'com.google.dagger:dagger:2.16'</span>annotationProcessor <span class="token string">'com.google.dagger:dagger-compiler:2.16'</span></code></pre><h3 id="2-2-怎么将本地的类注入呢？"><a href="#2-2-怎么将本地的类注入呢？" class="headerlink" title="2.2 怎么将本地的类注入呢？"></a>2.2 怎么将本地的类注入呢？</h3><h4 id="2-2-1-在本地类的构造方法中加个注入注解"><a href="#2-2-1-在本地类的构造方法中加个注入注解" class="headerlink" title="2.2.1 在本地类的构造方法中加个注入注解"></a>2.2.1 在本地类的构造方法中加个注入注解</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">ICar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Inject</span>  <span class="token comment" spellcheck="true">//这里</span>    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span>Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-2-新建个注入器辅助类生成接口"><a href="#2-2-2-新建个注入器辅助类生成接口" class="headerlink" title="2.2.2 新建个注入器辅助类生成接口"></a>2.2.2 新建个注入器辅助类生成接口</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MainActivityComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>MainActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-3-在activity中调用方法"><a href="#2-2-3-在activity中调用方法" class="headerlink" title="2.2.3 在activity中调用方法"></a>2.2.3 在activity中调用方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Inject</span>    Car car<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注入</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        DaggerActivityComponent<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sr<span class="token operator">=</span>car<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//直接调用方法</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"wangshu"</span><span class="token punctuation">,</span>sr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-怎么将第三方库的类注入呢？"><a href="#2-3-怎么将第三方库的类注入呢？" class="headerlink" title="2.3.怎么将第三方库的类注入呢？"></a>2.3.怎么将第三方库的类注入呢？</h3><h4 id="2-3-1-新建一个工厂"><a href="#2-3-1-新建一个工厂" class="headerlink" title="2.3.1 新建一个工厂"></a>2.3.1 新建一个工厂</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span>  <span class="token comment" spellcheck="true">//标记是工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GsonModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApplicationScope</span>     <span class="token annotation punctuation">@Provides</span>  <span class="token comment" spellcheck="true">//生成实例</span>    <span class="token keyword">public</span> Gson <span class="token function">provideGson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-2-新建一个Component类"><a href="#2-3-2-新建一个Component类" class="headerlink" title="2.3.2 新建一个Component类"></a>2.3.2 新建一个Component类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApplicationScope</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>GsonModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>EngineModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dependencies <span class="token operator">=</span> SwordsmanComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActivityComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>MainActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>SecondActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-3-在activity中使用"><a href="#2-3-3-在activity中使用" class="headerlink" title="2.3.3 在activity中使用"></a>2.3.3 在activity中使用</h4><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Inject</span>    Gson gson<span class="token punctuation">;</span>     Man man <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">,</span> Man<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-怎么将抽象类注入呢？"><a href="#2-4-怎么将抽象类注入呢？" class="headerlink" title="2.4.怎么将抽象类注入呢？"></a>2.4.怎么将抽象类注入呢？</h3><p>类似于上面，原理一样</p><p>抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Engine</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GasolineEngine</span> <span class="token keyword">extends</span> <span class="token class-name">Engine</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"汽油发动机发动"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Module类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EngineModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token annotation punctuation">@Gasoline</span>    <span class="token keyword">public</span> Engine <span class="token function">provideGasoline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GasolineEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token annotation punctuation">@Diesel</span>    <span class="token keyword">public</span> Engine <span class="token function">provideDiesel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DieselEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Componet类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>GsonModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>EngineModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dependencies <span class="token operator">=</span> SwordsmanComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActivityComponent</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>MainActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>SecondActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>注入到model</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//model中注入</span>    <span class="token annotation punctuation">@Inject</span>    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span> Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> engine<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-当一个Module类中有2个以上对象怎么办？"><a href="#2-5-当一个Module类中有2个以上对象怎么办？" class="headerlink" title="2.5.当一个Module类中有2个以上对象怎么办？"></a>2.5.当一个Module类中有2个以上对象怎么办？</h3><h4 id="2-5-1-在Module中加上标记Named"><a href="#2-5-1-在Module中加上标记Named" class="headerlink" title="2.5.1 在Module中加上标记Named"></a>2.5.1 在Module中加上标记Named</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EngineModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token annotation punctuation">@Name</span><span class="token punctuation">(</span><span class="token string">"Gasoline"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Engine <span class="token function">provideGasoline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GasolineEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Provides</span>     <span class="token annotation punctuation">@Name</span><span class="token punctuation">(</span><span class="token string">"Diesel"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Engine <span class="token function">provideDiesel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DieselEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-5-2-在model中指定对应的name"><a href="#2-5-2-在model中指定对应的name" class="headerlink" title="2.5.2 在model中指定对应的name"></a>2.5.2 在model中指定对应的name</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Inject</span>  <span class="token comment" spellcheck="true">//指定对应的name</span>    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Name</span><span class="token punctuation">(</span><span class="token string">"Gasoline"</span><span class="token punctuation">)</span> Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> engine<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-怎么实现全局单例？"><a href="#2-6-怎么实现全局单例？" class="headerlink" title="2.6 怎么实现全局单例？"></a>2.6 怎么实现全局单例？</h3><p>要用Scope配合Application</p><h4 id="2-6-1-新建全局注解类"><a href="#2-6-1-新建全局注解类" class="headerlink" title="2.6.1 新建全局注解类"></a>2.6.1 新建全局注解类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Scope</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ApplicationScope</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="2-6-2-在module中使用全局注解"><a href="#2-6-2-在module中使用全局注解" class="headerlink" title="2.6.2 在module中使用全局注解"></a>2.6.2 在module中使用全局注解</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GsonModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApplicationScope</span>  <span class="token comment" spellcheck="true">//全局注解</span>    <span class="token annotation punctuation">@Provides</span>    <span class="token keyword">public</span> Gson <span class="token function">provideGson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-6-3-创建ActivityComponent"><a href="#2-6-3-创建ActivityComponent" class="headerlink" title="2.6.3 创建ActivityComponent"></a>2.6.3 创建ActivityComponent</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@ApplicationScope</span>    <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>GsonModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>EngineModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dependencies <span class="token operator">=</span> SwordsmanComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActivityComponent</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注入到多个activity</span>        <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>MainActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>SecondActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-6-4-创建App类继承自Application"><a href="#2-6-4-创建App类继承自Application" class="headerlink" title="2.6.4 创建App类继承自Application"></a>2.6.4 创建App类继承自Application</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span><span class="token punctuation">{</span>    ActivityComponent activityComponent<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        activityComponent<span class="token operator">=</span>DaggerActivityComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swordsmanComponent</span><span class="token punctuation">(</span>DaggerSwordsmanComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> App <span class="token function">get</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>App<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ActivityComponent <span class="token function">getActivityComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> activityComponent<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-6-5-在activity中使用App创建注入"><a href="#2-6-5-在activity中使用App创建注入" class="headerlink" title="2.6.5 在activity中使用App创建注入"></a>2.6.5 在activity中使用App创建注入</h4><pre class=" language-java"><code class="language-java"> App<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActivityComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-7-怎么实现懒加载"><a href="#2-7-怎么实现懒加载" class="headerlink" title="2.7 怎么实现懒加载"></a>2.7 怎么实现懒加载</h3><p>就是在activity中将注入对象改为注入Lazy</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG<span class="token operator">=</span><span class="token string">"Dagger2"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Inject</span>    Gson gson<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Inject</span>    Gson gson1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//懒加载</span>    <span class="token annotation punctuation">@Inject</span>    Lazy<span class="token operator">&lt;</span>Swordsman<span class="token operator">></span> swordsmanLazy<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        DaggerActivityComponent.builder().build().inject(this);</span>        App<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>SecondActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActivityComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>gson<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-----"</span><span class="token operator">+</span>gson1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//懒加载</span>        Swordsman  swordsman<span class="token operator">=</span>swordsmanLazy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        swordsman<span class="token punctuation">.</span><span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sd1<span class="token operator">=</span>swordsman<span class="token punctuation">.</span><span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"lazy---"</span> <span class="token operator">+</span> sd1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 注解与依赖注入框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.2 依赖注入的原理</title>
      <link href="/2019/11/21/9.2-yi-lai-zhu-ru-de-yuan-li/"/>
      <url>/2019/11/21/9.2-yi-lai-zhu-ru-de-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="9-2-依赖注入的原理"><a href="#9-2-依赖注入的原理" class="headerlink" title="9.2 依赖注入的原理"></a>9.2 依赖注入的原理</h1><h2 id="1-控制反转和依赖注入"><a href="#1-控制反转和依赖注入" class="headerlink" title="1.控制反转和依赖注入"></a>1.控制反转和依赖注入</h2><h3 id="1-1-什么是控制反转（Inversion-of-Control）"><a href="#1-1-什么是控制反转（Inversion-of-Control）" class="headerlink" title="1.1 什么是控制反转（Inversion of Control）"></a>1.1 什么是控制反转（Inversion of Control）</h3><p>其实就是一种<strong>解耦</strong>的方式，当A需要B的时候，通过控制反转容器（IOC），B<strong>主动注入</strong>到A中</p><p><img src="https://i.loli.net/2019/11/19/4nO6kGFhJjUg3fB.jpg" alt></p><h3 id="1-2-什么是依赖注入"><a href="#1-2-什么是依赖注入" class="headerlink" title="1.2  什么是依赖注入"></a>1.2  什么是依赖注入</h3><p>其实就是控制反转的一个更加贴近实际的名字而已</p><h2 id="2-依赖注入的实现方式"><a href="#2-依赖注入的实现方式" class="headerlink" title="2.依赖注入的实现方式"></a>2.依赖注入的实现方式</h2><blockquote><p>其实就是为了<strong>避免</strong>，<strong>实现类变</strong>的时候，<strong>代码要修改</strong>的麻烦</p></blockquote><h3 id="2-1-构造方法注入"><a href="#2-1-构造方法注入" class="headerlink" title="2.1 构造方法注入"></a>2.1 构造方法注入</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Car</span><span class="token punctuation">(</span>Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-Setter方法注入"><a href="#2-2-Setter方法注入" class="headerlink" title="2.2 Setter方法注入"></a>2.2 Setter方法注入</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEngine</span><span class="token punctuation">(</span>Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-接口注入"><a href="#2-3-接口注入" class="headerlink" title="2.3 接口注入"></a>2.3 接口注入</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">ICar</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Engine engine<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEngine</span><span class="token punctuation">(</span>Engine engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实核心和Set方法是一样的</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 注解与依赖注入框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.1 注解</title>
      <link href="/2019/11/21/9.1-zhu-jie/"/>
      <url>/2019/11/21/9.1-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="9-1-注解"><a href="#9-1-注解" class="headerlink" title="9.1 注解"></a>9.1 注解</h1><h2 id="1-注解分类"><a href="#1-注解分类" class="headerlink" title="1.注解分类"></a>1.注解分类</h2><h3 id="1-1-标准注解"><a href="#1-1-标准注解" class="headerlink" title="1.1 标准注解"></a>1.1 标准注解</h3><ul><li>@SuppressWarnings：选择性地<strong>取消</strong>特定代码段中的<strong>警告</strong>。</li><li>@SafeVarargs：JDK 7新增，用来<strong>声明</strong>使用了<strong>可变长度</strong>参数的方法，其在与泛型类一起使用时不会出现 类型安全问题。 </li></ul><h3 id="1-2-元注解"><a href="#1-2-元注解" class="headerlink" title="1.2 元注解"></a>1.2 元注解</h3><p>元注解是用来<strong>注解其他注解</strong>，从而创建新的注解</p><ul><li><p>@Targe：注解所修饰的对象<strong>范围</strong></p><p><img src="https://i.loli.net/2019/11/18/fhmbkVJGERNdKH3.jpg" alt></p></li><li><p>@Inherited：表示注解可以被<strong>继承</strong>。 </p></li><li><p>@<strong>Retention</strong>：用来声明注解的<strong>保留策略</strong>。</p><p>RetentionPolicy.<strong>SOURCE</strong>：<strong>源码</strong>级注解。注解信息只会保留在.java源码中</p><p>RetentionPolicy.<strong>CLASS</strong>：<strong>编译</strong>时注解。注解信息会保留在.java 源码以及.<strong>class</strong> 中</p><p>RetentionPolicy.<strong>RUNTIME</strong>：<strong>运行</strong>时注解。当运行Java程序时，<strong>JVM</strong>也会保留该注解信息，可以通过反<br>射获取该注解信息。</p></li></ul><h2 id="2-定义注解"><a href="#2-定义注解" class="headerlink" title="2.定义注解"></a>2.定义注解</h2><h3 id="2-1-基本定义"><a href="#2-1-基本定义" class="headerlink" title="2.1 基本定义"></a>2.1 基本定义</h3><p>定义注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Swordsman2</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>使用注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Swordsman2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-定义成员变量"><a href="#2-2-定义成员变量" class="headerlink" title="2.2 定义成员变量"></a>2.2 定义成员变量</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Swordsman2</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span>  <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置默认值</span>    <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Swordsman2</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"xsx"</span><span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//在方法前面</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       Goods goods<span class="token operator">=</span>GoodsFactory<span class="token punctuation">.</span><span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token string">"iphone7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       goods<span class="token punctuation">.</span><span class="token function">showGoodsPrice</span><span class="token punctuation">(</span><span class="token string">"32G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Goods goods1<span class="token operator">=</span>GoodsFactory<span class="token punctuation">.</span><span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token string">"iphone7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       goods<span class="token punctuation">.</span><span class="token function">showGoodsPrice</span><span class="token punctuation">(</span><span class="token string">"32G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-3-注解保留策略"><a href="#2-3-注解保留策略" class="headerlink" title="2.3 注解保留策略"></a>2.3 注解保留策略</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Swordsman2</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span>  <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>生命周期长度为 SOURCE ＜CLASS＜ RUNTIME</p><p><strong>RUNTIME</strong>用于<strong>运行</strong>时去<strong>动态获取</strong>注解信息</p><p><strong>CLASS</strong>用于编译时进行一些<strong>预处理</strong>，比如生成一些辅助代码</p><p><strong>SOURCE</strong>用于做一些<strong>检查</strong>性的操作</p><h2 id="3-注解处理器"><a href="#3-注解处理器" class="headerlink" title="3.注解处理器"></a>3.注解处理器</h2><h3 id="3-1-什么是注解处理器？"><a href="#3-1-什么是注解处理器？" class="headerlink" title="3.1 什么是注解处理器？"></a>3.1 什么是注解处理器？</h3><p>其实就是用来处理注解的东西，如果注解没有经过处理的话，没什么用</p><h3 id="3-2-运行时注解"><a href="#3-2-运行时注解" class="headerlink" title="3.2 运行时注解"></a>3.2 运行时注解</h3><p>用到<strong>反射</strong>机制</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>METHOD<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//应用于方法</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">GET</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"http://ip.taobao.com/59.108.54.37"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getIpMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"http://ip.taobao.com/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//得到方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> AnnotationTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method m<span class="token operator">:</span>methods<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//得到注解对象</span>            GET get<span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>GET<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>get<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-3-编译时注解"><a href="#3-3-编译时注解" class="headerlink" title="3.3 编译时注解"></a>3.3 编译时注解</h3><h4 id="3-3-1-定义注解"><a href="#3-3-1-定义注解" class="headerlink" title="3.3.1 定义注解"></a>3.3.1 定义注解</h4><p>新建一个Java Library名为<strong>annotations</strong>来专门存放注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>CLASS<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>FIELD<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">BindView</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-2-编写注解处理器"><a href="#3-3-2-编写注解处理器" class="headerlink" title="3.3.2 编写注解处理器"></a>3.3.2 编写注解处理器</h4><p>新建一个Java Library名为processor来存放注解处理器，我们来配置 <strong>processor</strong>库的build.gradle</p><pre class=" language-Groovy"><code class="language-Groovy">apply plugin: 'java-library'dependencies {    implementation fileTree(dir: 'libs', include: ['*.jar'])    implementation project(':annotations')    implementation 'com.google.auto.service:auto-service:1.0-rc2'}sourceCompatibility = "7"targetCompatibility = "7"</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoService</span><span class="token punctuation">(</span>Processor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//自动注册注解处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProcessor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//被注解处理工具调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ProcessingEnvironment processingEnv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>processingEnv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 相当于主函数     *     * @param annotations     * @param roundEnv     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeElement</span><span class="token operator">></span> annotations<span class="token punctuation">,</span> RoundEnvironment roundEnv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Messager messager <span class="token operator">=</span> processingEnv<span class="token punctuation">.</span><span class="token function">getMessager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Element element <span class="token operator">:</span> roundEnv<span class="token punctuation">.</span><span class="token function">getElementsAnnotatedWith</span><span class="token punctuation">(</span>BindView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ElementKind<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span> <span class="token punctuation">{</span>                messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span>Diagnostic<span class="token punctuation">.</span>Kind<span class="token punctuation">.</span>NOTE<span class="token punctuation">,</span> <span class="token string">"printMessage:"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定注解     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getSupportedAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> annotataions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotataions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>BindView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> annotataions<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定java版本     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> SourceVersion <span class="token function">getSupportedSourceVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SourceVersion<span class="token punctuation">.</span><span class="token function">latestSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-3-注册注解处理器"><a href="#3-3-3-注册注解处理器" class="headerlink" title="3.3.3 注册注解处理器"></a>3.3.3 注册注解处理器</h4><p>引入依赖</p><pre class=" language-groovy"><code class="language-groovy"> implementation <span class="token string">'com.google.auto.service:auto-service:1.0-rc2'</span></code></pre><p>在处理器前面添加<strong>自动注册注解</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoService</span><span class="token punctuation">(</span>Processor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//自动注册注解处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProcessor</span> <span class="token punctuation">{</span></code></pre><h4 id="3-3-4-应用注解"><a href="#3-3-4-应用注解" class="headerlink" title="3.3.4 应用注解"></a>3.3.4 应用注解</h4><p>在app中引用注解</p><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    implementation <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':annotations'</span><span class="token punctuation">)</span>    annotationProcessor <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':processor'</span><span class="token punctuation">)</span></code></pre><p>在activity中应用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>value <span class="token operator">=</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//引入注解</span>    TextView tv_text<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 注解与依赖注入框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.5 RxJava使用场景</title>
      <link href="/2019/11/21/8.5-rxjava-shi-yong-chang-jing/"/>
      <url>/2019/11/21/8.5-rxjava-shi-yong-chang-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="8-5-RxJava使用场景"><a href="#8-5-RxJava使用场景" class="headerlink" title="8.5 RxJava使用场景"></a>8.5 RxJava使用场景</h1><h2 id="1-RxJava结合Retrofit访问网络"><a href="#1-RxJava结合Retrofit访问网络" class="headerlink" title="1.RxJava结合Retrofit访问网络"></a>1.RxJava结合Retrofit访问网络</h2><h3 id="1-1-导入依赖"><a href="#1-1-导入依赖" class="headerlink" title="1.1 导入依赖"></a>1.1 导入依赖</h3><pre><code>implementation &#39;com.squareup.okhttp3:okhttp:4.2.2&#39;    implementation &#39;com.squareup.retrofit2:retrofit:2.6.0&#39;    implementation &#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;  //返回值为gson数据    implementation &#39;com.google.code.gson:gson:2.8.6&#39;   //gson    implementation &#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39;  //rxjava    implementation &#39;io.reactivex:rxjava:1.2.3&#39;    implementation &#39;io.reactivex:rxandroid:1.2.1&#39;</code></pre><h3 id="1-2-新建错误返回的entity-实体类"><a href="#1-2-新建错误返回的entity-实体类" class="headerlink" title="1.2 新建错误返回的entity(实体类)"></a>1.2 新建错误返回的entity(实体类)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testrxjavaretrofitmvp<span class="token punctuation">.</span>eneity<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**{    "code": 200,    "message": "成功!",    "result": [ * created by xucanyou666 * on 2019/11/17 19:23 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpResult</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String reason<span class="token punctuation">;</span>    <span class="token keyword">private</span> T result<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reason<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReason</span><span class="token punctuation">(</span>String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResult</span><span class="token punctuation">(</span>T result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-新建RxJava工具类"><a href="#1-3-新建RxJava工具类" class="headerlink" title="1.3 新建RxJava工具类"></a>1.3 新建RxJava工具类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2019/11/17 19:20 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RxJavaUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 线程调度工作     *     * @param observable 被观察者     * @param subscriber 观察者     * @param &lt;T>        类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">toSubscribe</span><span class="token punctuation">(</span>Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> observable<span class="token punctuation">,</span> Subscriber<span class="token operator">&lt;</span>T<span class="token operator">></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">unsubscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-新建RxJava异常处理类"><a href="#1-4-新建RxJava异常处理类" class="headerlink" title="1.4 新建RxJava异常处理类"></a>1.4 新建RxJava异常处理类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 异常处理类 * created by xucanyou666 * on 2019/11/17 19:22 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpResultFunc</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>HttpResult<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">call</span><span class="token punctuation">(</span>HttpResult<span class="token operator">&lt;</span>T<span class="token operator">></span> httpResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResult<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果错误吗不是0的话，就返回错误</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>httpResult<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> httpResult<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-5-新建异常类"><a href="#1-5-新建异常类" class="headerlink" title="1.5 新建异常类"></a>1.5 新建异常类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * API异常处理，这里可以更具错误码，识别出错误类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span>  <span class="token keyword">int</span>  TIME_MUST_10<span class="token operator">=</span><span class="token number">209501</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span>  <span class="token keyword">int</span>  TIME_OTHER<span class="token operator">=</span><span class="token number">209502</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ApiException</span><span class="token punctuation">(</span><span class="token keyword">int</span> resultCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token function">getApiExceptionMessage</span><span class="token punctuation">(</span>resultCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ApiException</span><span class="token punctuation">(</span>String detailMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>detailMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 由于服务器传递过来的错误信息直接给用户看的话，用户未必能够理解     * 需要根据错误码对错误信息进行一个转换，在显示给用户     * @param code     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getApiExceptionMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> TIME_MUST_10<span class="token operator">:</span>                message <span class="token operator">=</span> <span class="token string">"必须为10位时间戳"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TIME_OTHER<span class="token operator">:</span>                message <span class="token operator">=</span> <span class="token string">"page、pagesize必须为int类型,time为10位时间戳"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                message <span class="token operator">=</span> <span class="token string">"未知错误"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-6-新建网络请求接口"><a href="#1-6-新建网络请求接口" class="headerlink" title="1.6  新建网络请求接口"></a>1.6  新建网络请求接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SearchMusicApiService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"searchMusic"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@FormUrlEncoded</span>    <span class="token comment" spellcheck="true">//注意这里返回的是HttpResult&lt;List&lt;Data>></span>    Observable<span class="token operator">&lt;</span>HttpResult<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>MusicEntity<span class="token operator">>>></span> <span class="token function">getMusic</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-7-编写网络请求model层"><a href="#1-7-编写网络请求model层" class="headerlink" title="1.7 编写网络请求model层"></a>1.7 编写网络请求model层</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchMusic</span><span class="token punctuation">(</span>Subscriber subscriber<span class="token punctuation">,</span> String songName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Observable<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>MusicEntity<span class="token operator">>></span> observable <span class="token operator">=</span> RetrofitManager                <span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">createRs</span><span class="token punctuation">(</span>SearchMusicApiService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getMusic</span><span class="token punctuation">(</span>songName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpResultFunc</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RxJavaUtil<span class="token punctuation">.</span><span class="token function">toSubscribe</span><span class="token punctuation">(</span>observable<span class="token punctuation">,</span> subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="1-8-在presenter层编写观察者"><a href="#1-8-在presenter层编写观察者" class="headerlink" title="1.8 在presenter层编写观察者"></a>1.8 在presenter层编写观察者</h3><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchMusic</span><span class="token punctuation">(</span>String musicName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//新建观察者</span>        subscriber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>MusicEntity<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAttachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">getMvpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MusicEntity<span class="token operator">></span> musicEntities<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAttachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String author <span class="token operator">=</span> musicEntities<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">getMvpView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchSuccess</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用model层</span>        mModel<span class="token punctuation">.</span><span class="token function">searchMusic</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> musicName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="2-用RxJava实现RxBus"><a href="#2-用RxJava实现RxBus" class="headerlink" title="2.用RxJava实现RxBus"></a>2.用RxJava实现RxBus</h2><h3 id="2-1-创建RxBus"><a href="#2-1-创建RxBus" class="headerlink" title="2.1 创建RxBus"></a>2.1 创建RxBus</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RxBus</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> RxBus rxBus<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Subject<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerializedSubject</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>PublishSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">RxBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RxBus <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rxBus <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>RxBus<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rxBus <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    rxBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RxBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rxBus<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//发送</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span>Object ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>        subject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//接收，里面包含了filter和cast的操作</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">toObservable</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> subject<span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-发送事件"><a href="#2-2-发送事件" class="headerlink" title="2.2 发送事件"></a>2.2 发送事件</h3><pre class=" language-java"><code class="language-java">  RxBus<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageEvent</span><span class="token punctuation">(</span><span class="token string">"用RxJava实现RxBus"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-3-接收事件"><a href="#2-3-接收事件" class="headerlink" title="2.3 接收事件"></a>2.3 接收事件</h3><pre class=" language-java"><code class="language-java">Subscription subscription<span class="token operator">=</span> RxBus<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span>MessageEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>MessageEvent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>MessageEvent messageEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>messageEvent<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tv_text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>messageEvent<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-记得取消订阅"><a href="#2-4-记得取消订阅" class="headerlink" title="2.4 记得取消订阅"></a>2.4 记得取消订阅</h3><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>subscription<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>subscription<span class="token punctuation">.</span><span class="token function">isUnsubscribed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 函数响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.2 RxJava的Subject</title>
      <link href="/2019/11/21/8.2-rxjava-de-subject/"/>
      <url>/2019/11/21/8.2-rxjava-de-subject/</url>
      
        <content type="html"><![CDATA[<h1 id="8-2-RxJava的Subject"><a href="#8-2-RxJava的Subject" class="headerlink" title="8.2 RxJava的Subject"></a>8.2 RxJava的Subject</h1><h2 id="1-什么是-Subject"><a href="#1-什么是-Subject" class="headerlink" title="1.什么是 Subject"></a>1.什么是 Subject</h2><p>Subject 既可以是一个 <strong>Observer</strong> 也可以是一个 <strong>Observerable</strong>，它是连接 Observer 和Observerable的<strong>桥梁</strong>。 因此，Subject可以被理解为Subject=Observable+Observer</p><h2 id="2-有多少种Subject"><a href="#2-有多少种Subject" class="headerlink" title="2.有多少种Subject"></a>2.有多少种Subject</h2><h3 id="2-1-PublishSubject"><a href="#2-1-PublishSubject" class="headerlink" title="2.1 PublishSubject"></a>2.1 PublishSubject</h3><p>PublishSubject把<strong>订阅</strong>发生的时间点<strong>之后</strong>来自原始Observable的数据发射给观察者。</p><pre class=" language-java"><code class="language-java">        PublishSubject<span class="token operator">&lt;</span>String<span class="token operator">></span> pSubject <span class="token operator">=</span> PublishSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Observer-1："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Observer-2："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>I/System.out: Observer-1：A   //结果I/System.out: Observer-1：BI/System.out: Observer-1：CI/System.out: Observer-2：CI/System.out: Observer-1：DI/System.out: Observer-2：D</code></pre><h3 id="2-2-BehaviorSubject"><a href="#2-2-BehaviorSubject" class="headerlink" title="2.2 BehaviorSubject"></a>2.2 BehaviorSubject</h3><p><strong>发射</strong>原始Observable<strong>最近发射</strong>的数据，如果没有，就发送默认数据</p><h3 id="2-3-ReplaySubject"><a href="#2-3-ReplaySubject" class="headerlink" title="2.3 ReplaySubject"></a>2.3 ReplaySubject</h3><p>发送<strong>所有</strong>数据，包括之前的数据</p><h3 id="2-4-AsyncSubject"><a href="#2-4-AsyncSubject" class="headerlink" title="2.4 AsyncSubject"></a>2.4 AsyncSubject</h3><p>只会发送<strong>最后</strong>一个数据</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 函数响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.5  行为型设计模式</title>
      <link href="/2019/11/21/6.5-xing-wei-xing-she-ji-mo-shi/"/>
      <url>/2019/11/21/6.5-xing-wei-xing-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-5-行为型设计模式"><a href="#6-5-行为型设计模式" class="headerlink" title="6.5  行为型设计模式"></a>6.5  行为型设计模式</h1><h2 id="1-策略模式"><a href="#1-策略模式" class="headerlink" title="1.策略模式"></a>1.策略模式</h2><p>定义一系列的算法，把每一个算法封装起来，并且使它们可相互替换。策略模式使得算法可独立于使用它的客户而<strong>独立变化</strong>。 可以解决<strong>if..else重复嵌套</strong>的问题.核心其实就是把if..else中的每个<strong>方法封装</strong>起来，为一个个<strong>单独类</strong></p><p>场景分析：</p><p>张无忌作为一个大侠会遇到很多对手，如果每遇 到一个对手他都用自己最厉害的武功去应战，这显然是不明智的。于是张无忌想出了<strong>3种应战的策略</strong>，分别对付3个实力层次的对手。 </p><h3 id="1-1-策略接口"><a href="#1-1-策略接口" class="headerlink" title="1.1  策略接口"></a>1.1  策略接口</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 策略接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FightingStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-具体策略实现"><a href="#1-2-具体策略实现" class="headerlink" title="1.2 具体策略实现"></a>1.2 具体策略实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体策略实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonRivalStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">FightingStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遇到普通对手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体策略实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeakRivalStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">FightingStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遇到弱对手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-上下文角色"><a href="#1-3-上下文角色" class="headerlink" title="1.3 上下文角色"></a>1.3 上下文角色</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 上下文角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> FightingStrategy fightingStrategy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Context</span><span class="token punctuation">(</span>FightingStrategy fightingStrategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fightingStrategy <span class="token operator">=</span> fightingStrategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fightingStrategy<span class="token punctuation">.</span><span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-客户端调用"><a href="#1-4-客户端调用" class="headerlink" title="1.4 客户端调用"></a>1.4 客户端调用</h3><pre class=" language-java"><code class="language-java">         <span class="token comment" spellcheck="true">//遇到弱敌</span>        Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WeakRivalStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遇到普通敌人</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CommonRivalStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fighting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-5-使用场景"><a href="#1-5-使用场景" class="headerlink" title="1.5 使用场景"></a>1.5 使用场景</h3><ul><li>对客户<strong>隐藏具体策略</strong>（算法）的实现细节，彼此完全独立。 </li><li>针对同一类型问题的多种处理方式，仅仅是<strong>具体行为有差别</strong>时。 </li></ul><h3 id="1-6-优点和缺点"><a href="#1-6-优点和缺点" class="headerlink" title="1.6 优点和缺点"></a>1.6 优点和缺点</h3><h4 id="1-6-1-优点"><a href="#1-6-1-优点" class="headerlink" title="1.6.1 优点"></a>1.6.1 优点</h4><ul><li>可以避免使用<strong>多重</strong>条件语句</li><li>易于<strong>拓展</strong>，当需要添加策略，只需要实现接口就行了</li></ul><h4 id="1-6-2-缺点"><a href="#1-6-2-缺点" class="headerlink" title="1.6.2 缺点"></a>1.6.2 缺点</h4><ul><li>策略的<strong>复用性小</strong></li><li>与<strong>迪米特原则违背</strong>，上层模块需要知道有什么策略，才能使用策略</li></ul><h2 id="2-模板方法模式"><a href="#2-模板方法模式" class="headerlink" title="2.模板方法模式"></a>2.模板方法模式</h2><h3 id="2-1-什么是模板方法模式"><a href="#2-1-什么是模板方法模式" class="headerlink" title="2.1 什么是模板方法模式"></a>2.1 什么是模板方法模式</h3><p>定义一个操作中的算法框架，而将<strong>一些步骤延迟到子类</strong>中，使得子类不改变一个算法的结构即可重定义算法的某些<strong>特定步骤</strong>。 实际开发中，有些步骤可以变，有些不能变，所以就需要用到模板方法模式。</p><h3 id="2-2-简单实现"><a href="#2-2-简单实现" class="headerlink" title="2.2 简单实现"></a>2.2 简单实现</h3><blockquote><p>接着举武侠的例子。一个武侠要战斗的时候，也有一套<strong>固定的通用模式</strong>，那就是运行内功、开启经脉、准备武器和使用招式，我们把这些用代码表示，如下所示</p></blockquote><h4 id="2-2-1-创建抽象类，定义算法框架"><a href="#2-2-1-创建抽象类，定义算法框架" class="headerlink" title="2.2.1 创建抽象类，定义算法框架"></a>2.2.1 创建抽象类，定义算法框架</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> javaSmallHomeWork1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 抽象类，算法模板框架 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSwordsman</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">finghting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//内功，抽象方法</span>        <span class="token function">neigong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调节经脉，具体方法</span>        <span class="token function">meridian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasWeapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用武器</span>            <span class="token function">weapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//钩子方法</span>        <span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">weapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span>  <span class="token keyword">boolean</span> <span class="token function">hasWeapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">meridian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启经脉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">neigong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>具体</strong>方法是一些<strong>统一</strong>要执行的步骤</p><p><strong>抽象</strong>方法是必须<strong>延迟到子类</strong>实现的方法</p><p><strong>钩子</strong>方法是有2类，1类是可以视情况<strong>决定是否要覆盖</strong>的方法，第2类是用于<strong>对条件进行判断</strong></p><h4 id="2-2-2-具体实现类"><a href="#2-2-2-具体实现类" class="headerlink" title="2.2.2 具体实现类"></a>2.2.2 具体实现类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangSanFeng</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSwordsman</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">weapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行纯阳无极棍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">neigong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行张山峰神功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//钩子方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"去厕所"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> javaSmallHomeWork1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangWuJi</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSwordsman</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">weapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">neigong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行九阳神功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//钩子方法，决定条件的执行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">hasWeapons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-3-客户端调用"><a href="#2-2-3-客户端调用" class="headerlink" title="2.2.3 客户端调用"></a>2.2.3 客户端调用</h4><pre class=" language-java"><code class="language-java">        ZhangWuJi zhangWuJi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ZhangWuJi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhangWuJi<span class="token punctuation">.</span><span class="token function">finghting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZhangSanFeng zhangSanFeng<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ZhangSanFeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhangSanFeng<span class="token punctuation">.</span><span class="token function">finghting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-3-使用场景"><a href="#2-3-使用场景" class="headerlink" title="2.3 使用场景"></a>2.3 使用场景</h3><ul><li><strong>逻辑</strong>基本<strong>相同</strong></li><li>可以把<strong>核心</strong>算法设计为<strong>模板方法</strong></li><li>实现子类对父类的<strong>反向控制</strong></li></ul><h3 id="2-4-优点和缺点"><a href="#2-4-优点和缺点" class="headerlink" title="2.4  优点和缺点"></a>2.4  优点和缺点</h3><h4 id="2-4-1-优点"><a href="#2-4-1-优点" class="headerlink" title="2.4.1 优点"></a>2.4.1 优点</h4><ul><li><strong>不变的行为</strong>搬移到超类，去除了子类中的重复代码。 </li><li><strong>提高了拓展性</strong></li></ul><h4 id="2-4-2-缺点"><a href="#2-4-2-缺点" class="headerlink" title="2.4.2 缺点"></a>2.4.2 缺点</h4><ul><li>类的个数的增加，设计更加<strong>抽象</strong></li></ul><h2 id="3-观察者模式"><a href="#3-观察者模式" class="headerlink" title="3.观察者模式"></a>3.观察者模式</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p>对象间一种<strong>一对多</strong>的依赖关系，每当一个对象改变状态时，则所有依赖于它的对象都会得到<strong>通知并被自动更新</strong></p><h3 id="3-2-简单使用"><a href="#3-2-简单使用" class="headerlink" title="3.2 简单使用"></a>3.2 简单使用</h3><h4 id="3-2-1-抽象观察者"><a href="#3-2-1-抽象观察者" class="headerlink" title="3.2.1 抽象观察者"></a>3.2.1 抽象观察者</h4><blockquote><p>我们可以拿微信公众号来举例。假设微信用户就是观察者，微信公众号是被观察者，有多个微信用户关注了“程序猿”这个公众号，当这个公众号更新时就会通知这些订阅的微信用户。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象观察者 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-2-具体观察者"><a href="#3-2-2-具体观察者" class="headerlink" title="3.2.2 具体观察者"></a>3.2.2 具体观察者</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体观察者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeixinUser</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeixinUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-3-抽象被观察者"><a href="#3-2-3-抽象被观察者" class="headerlink" title="3.2.3 抽象被观察者"></a>3.2.3 抽象被观察者</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象被观察者 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 增加订阅者     *     * @param observer 订阅者     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 分离订阅者     *     * @param observer     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通知订阅者更新消息     *     * @param msg     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-4-具体被观察者"><a href="#3-2-4-具体被观察者" class="headerlink" title="3.2.4 具体被观察者"></a>3.2.4 具体被观察者</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体被观察者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubscriptionSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存储订阅公众号的微信用户，存储观察者</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> weixinUserList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        weixinUserList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        weixinUserList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer observer <span class="token operator">:</span> weixinUserList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-5-客户端调用"><a href="#3-2-5-客户端调用" class="headerlink" title="3.2.5  客户端调用"></a>3.2.5  客户端调用</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SubscriptionSubject subscriptionSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubscriptionSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建观察者</span>        WeixinUser weixinUser1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WeixinUser weixinUser2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订阅，观察者绑定被观察者</span>        subscriptionSubject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>weixinUser1<span class="token punctuation">)</span><span class="token punctuation">;</span>        subscriptionSubject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>weixinUser2<span class="token punctuation">)</span><span class="token punctuation">;</span>        subscriptionSubject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">"更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.3 RxJava操作符入门</title>
      <link href="/2019/11/21/8.3-rxjava-cao-zuo-fu-ru-men/"/>
      <url>/2019/11/21/8.3-rxjava-cao-zuo-fu-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="8-3-RxJava操作符入门"><a href="#8-3-RxJava操作符入门" class="headerlink" title="8.3 RxJava操作符入门"></a>8.3 RxJava操作符入门</h1><h2 id="1-创建操作符"><a href="#1-创建操作符" class="headerlink" title="1. 创建操作符"></a>1. 创建操作符</h2><h3 id="1-1-create"><a href="#1-1-create" class="headerlink" title="1.1 create"></a>1.1 create</h3><h3 id="1-2-just"><a href="#1-2-just" class="headerlink" title="1.2 just"></a>1.2 just</h3><h3 id="1-3-from"><a href="#1-3-from" class="headerlink" title="1.3 from"></a>1.3 from</h3><h3 id="1-4-interval"><a href="#1-4-interval" class="headerlink" title="1.4 interval"></a>1.4 interval</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//相当于定时器的作用</span>Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Long aLong<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-5-range"><a href="#1-5-range" class="headerlink" title="1.5 range"></a>1.5 range</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从0到5，可以用来代替for循环</span>Observable<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-6-repeat"><a href="#1-6-repeat" class="headerlink" title="1.6 repeat"></a>1.6 repeat</h3><p><strong>重复</strong>发射</p><pre class=" language-java"><code class="language-java">  Observable<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-变换操作符"><a href="#2-变换操作符" class="headerlink" title="2. 变换操作符"></a>2. 变换操作符</h2><blockquote><p>什么是变化，其实就把需要发送的数据经过<strong>加工</strong>，再发送出去</p></blockquote><h3 id="2-1-map"><a href="#2-1-map" class="headerlink" title="2.1 map"></a>2.1 map</h3><p>将Observable转化为新的Observable并发送</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//map的第一个参数是传入的参数类型，第二个参数是返回类型</span>            Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-2-flatMap、cast"><a href="#2-2-flatMap、cast" class="headerlink" title="2.2 flatMap、cast"></a>2.2 flatMap、cast</h3><p>flatMap<strong>返回</strong>的必须是<strong>Observable</strong>，<strong>map</strong>返回的可以是<strong>各种类型</strong>，而且flatMap返回的<strong>顺序不确定</strong></p><p>cast是<strong>强转</strong>Observable的数据为指定类型</p><h3 id="2-3-concatMap"><a href="#2-3-concatMap" class="headerlink" title="2.3 concatMap"></a>2.3 concatMap</h3><p>对比于flatMap，<strong>顺序确定</strong></p><h3 id="2-4-flatMaplterable"><a href="#2-4-flatMaplterable" class="headerlink" title="2.4 flatMaplterable"></a>2.4 flatMaplterable</h3><p>将数据包装成Iterable，然后进行处理</p><pre class=" language-java"><code class="language-java"> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMapIterable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                List list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integer<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span>  list<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-5-buffer"><a href="#2-5-buffer" class="headerlink" title="2.5 buffer"></a>2.5 buffer</h3><p>buffer操作符将源Observable变换为一个新的Observable，这个新的Observable每次发射一组<strong>列表值</strong>。和 buffer操作符类似的还有 window 操作符，只不过 window操作符发射的是Observable而不是数据列表.</p><p>就是一组一组地发</p><h2 id="3-过滤操作符"><a href="#3-过滤操作符" class="headerlink" title="3.过滤操作符"></a>3.过滤操作符</h2><h3 id="3-1-filter"><a href="#3-1-filter" class="headerlink" title="3.1 filter"></a>3.1 filter</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设定过滤</span>Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//只有当数据大于2的时候才会发送</span>                <span class="token keyword">return</span> integer<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-elementAt"><a href="#3-2-elementAt" class="headerlink" title="3.2 elementAt"></a>3.2 elementAt</h3><p>返回指定位置的数据</p><h3 id="3-3-distinct"><a href="#3-3-distinct" class="headerlink" title="3.3 distinct"></a>3.3 distinct</h3><p>去重</p><h3 id="3-4-skip、take"><a href="#3-4-skip、take" class="headerlink" title="3.4 skip、take"></a>3.4 skip、take</h3><p>skip（n）是跳过前n项</p><p>take（n）是只取前n项</p><h2 id="4-组合操作符"><a href="#4-组合操作符" class="headerlink" title="4. 组合操作符"></a>4. 组合操作符</h2><h3 id="4-1-startWith"><a href="#4-1-startWith" class="headerlink" title="4.1  startWith"></a>4.1  startWith</h3><p>startWith操作符会在源Observable发射的数据<strong>前面插上一些数据</strong></p><h3 id="4-2-merge"><a href="#4-2-merge" class="headerlink" title="4.2 merge"></a>4.2 merge</h3><p>合并，可能会顺序错乱</p><h3 id="4-3-concat"><a href="#4-3-concat" class="headerlink" title="4.3 concat"></a>4.3 concat</h3><p>合并，顺序不乱</p><h3 id="4-4-zip"><a href="#4-4-zip" class="headerlink" title="4.4 zip"></a>4.4 zip</h3><p>就是合并加变换</p><p>综合了concat和map</p><h2 id="5-辅助操作符"><a href="#5-辅助操作符" class="headerlink" title="5.辅助操作符"></a>5.辅助操作符</h2><h3 id="5-1-delay"><a href="#5-1-delay" class="headerlink" title="5.1 delay"></a>5.1 delay</h3><p>发送数据前<strong>暂停</strong>一段指定的时间段。</p><h3 id="5-2-subscribeOn、observeOn"><a href="#5-2-subscribeOn、observeOn" class="headerlink" title="5.2 subscribeOn、observeOn"></a>5.2 subscribeOn、observeOn</h3><p>subscribeOn指定被观察者线程</p><p>observeOn 指定观察者线程</p><pre class=" language-java"><code class="language-java">observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//io操作线程，例如网络交互，数据库</span>                <span class="token punctuation">.</span><span class="token function">unsubscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ui线程</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 函数响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.1 RxJava基本用法</title>
      <link href="/2019/11/21/8.1-rxjava-ji-ben-yong-fa/"/>
      <url>/2019/11/21/8.1-rxjava-ji-ben-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="8-1-RxJava基本用法"><a href="#8-1-RxJava基本用法" class="headerlink" title="8.1 RxJava基本用法"></a>8.1 RxJava基本用法</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1-什么是RxJava"><a href="#1-1-什么是RxJava" class="headerlink" title="1.1 什么是RxJava"></a>1.1 什么是RxJava</h3><p>其实就是一种<strong>函数响应式</strong>编程，对于处理嵌套<strong>回调</strong>的<strong>异步</strong>事件，较大地简化项目</p><h3 id="1-2-什么是Rx"><a href="#1-2-什么是Rx" class="headerlink" title="1.2 什么是Rx"></a>1.2 什么是Rx</h3><p>ReactiveX是Reactive Extensions的缩写，一般简写为Rx</p><p>Rx=Observables+LINQ（语言集成查询）+Schedulers</p><h3 id="1-3-Rx与观察者模式"><a href="#1-3-Rx与观察者模式" class="headerlink" title="1.3 Rx与观察者模式"></a>1.3 Rx与观察者模式</h3><p>RxJava的异步操作是通过扩展的<strong>观察者模式</strong>来实现的</p><h2 id="2-基本实现"><a href="#2-基本实现" class="headerlink" title="2.基本实现"></a>2.基本实现</h2><h3 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h3><pre class=" language-groovy"><code class="language-groovy">implementation <span class="token string">'io.reactivex.rxjava2:rxandroid:2.1.1'</span></code></pre><h3 id="2-2-创建观察者（接收回调的数据）"><a href="#2-2-创建观察者（接收回调的数据）" class="headerlink" title="2.2 创建观察者（接收回调的数据）"></a>2.2 创建观察者（接收回调的数据）</h3><pre class=" language-java"><code class="language-java">Subscriber subscriber<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//完成时候的回调</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//一般在这里关闭对话框</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//错误的时候的回调</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//普通事件的回调</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//一般在这里接收信息，并展现给View层</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//可选方法 ，事件未发送之前调用，准备工作，例如数据的重置和清零，</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>或者用Observer</p><pre class=" language-java"><code class="language-java"> Observer observer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="1-3-创建被观察者"><a href="#1-3-创建被观察者" class="headerlink" title="1.3  创建被观察者"></a>1.3  创建被观察者</h3><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//被观察者，一般用来发送事件</span>        Observable<span class="token operator">&lt;</span>String<span class="token operator">></span> observable <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> String<span class="token operator">></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>                subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//发送事件</span>                   subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//发送事件</span>                subscriber<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将事件添加到任务队列 等价于上面</span>Observable observable1<span class="token operator">=</span>Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"1"</span>，<span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//等价于上面</span>        Observable observable2 <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-4-订阅"><a href="#1-4-订阅" class="headerlink" title="1.4 订阅"></a>1.4 订阅</h3><pre class=" language-java"><code class="language-java"> observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-RxJava的不完整定义回调"><a href="#3-RxJava的不完整定义回调" class="headerlink" title="3.RxJava的不完整定义回调"></a>3.RxJava的不完整定义回调</h2><h3 id="3-1-什么是不完整定义回调"><a href="#3-1-什么是不完整定义回调" class="headerlink" title="3.1 什么是不完整定义回调"></a>3.1 什么是不完整定义回调</h3><p>其实就是观察者可以指定回调onNext或者onError，<strong>只指定一种行为</strong></p><p>这里的Action1中的“1”指定<strong>回调数据的个数</strong></p><pre class=" language-java"><code class="language-java"> Action1<span class="token operator">&lt;</span>String<span class="token operator">></span> onNextAction<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>  Action1<span class="token operator">&lt;</span>Throwable<span class="token operator">></span> onErrorAction<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onNextAction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//observable.subscribe(onNextAction，onErrorAction);</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 函数响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.3 创建型设计模式</title>
      <link href="/2019/11/21/6.3-chuang-jian-xing-she-ji-mo-shi/"/>
      <url>/2019/11/21/6.3-chuang-jian-xing-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-3-创建型设计模式"><a href="#6-3-创建型设计模式" class="headerlink" title="6.3 创建型设计模式"></a>6.3 创建型设计模式</h1><blockquote><p>什么是创建型设计模式？其实就是与<strong>对象创建</strong>有关的设计模式</p></blockquote><h2 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h2><h3 id="1-1-怎么杜绝被反序列化时重新生成对象？"><a href="#1-1-怎么杜绝被反序列化时重新生成对象？" class="headerlink" title="1.1 怎么杜绝被反序列化时重新生成对象？"></a>1.1 怎么杜绝被反序列化时重新生成对象？</h3><p>为啥反序列化的时候会生成对象？</p><p>将单例实例对象写入磁盘的时候，再<strong>读回来</strong>，<strong>获得一个实例</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Object <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ObjectStreamException<span class="token punctuation">{</span>    <span class="token keyword">return</span> ourInstance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-单例模式和静态类的优缺点"><a href="#1-2-单例模式和静态类的优缺点" class="headerlink" title="1.2 单例模式和静态类的优缺点"></a>1.2 单例模式和静态类的优缺点</h3><p><strong>单例模式的优点：</strong></p><ul><li>能<strong>延迟加载</strong></li><li>单例模式的<strong>灵活性</strong>更高，方法可以被override</li></ul><p>静态类的优点：</p><ul><li><strong>速度</strong>更快</li><li>没有实例对象，<strong>直接使用</strong>方法</li></ul><h2 id="2-简单工厂模式"><a href="#2-简单工厂模式" class="headerlink" title="2.简单工厂模式"></a>2.简单工厂模式</h2><p>其实就是<strong>静态</strong>的工厂模式，只能<strong>根据</strong>某个<strong>标识</strong>，<strong>事先</strong>在工厂里面写上<strong>对象的生成</strong>的代码</p><h3 id="2-1-抽象产品类（操作类）"><a href="#2-1-抽象产品类（操作类）" class="headerlink" title="2.1 抽象产品类（操作类）"></a>2.1 抽象产品类（操作类）</h3><p>规定了产品的<strong>操作</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span><span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-具体产品类"><a href="#2-2-具体产品类" class="headerlink" title="2.2 具体产品类"></a>2.2 具体产品类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 加法计算</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA <span class="token operator">+</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 减法计算</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA<span class="token operator">-</span>numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mul</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 乘法计算</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA <span class="token operator">*</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Div</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 除法计算</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numberB <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"除数不能为0！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> numberA <span class="token operator">/</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-工厂类"><a href="#2-3-工厂类" class="headerlink" title="2.3 工厂类"></a>2.3 工厂类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EasyFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 简单工厂，根据字符串创建相应的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Operation <span class="token function">createOperation</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Operation operationObj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                operationObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                operationObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                operationObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                operationObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Div</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> operationObj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-客户端调用工厂类"><a href="#2-4-客户端调用工厂类" class="headerlink" title="2.4 客户端调用工厂类"></a>2.4 客户端调用工厂类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Operation add <span class="token operator">=</span> EasyFactory<span class="token punctuation">.</span><span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Operation sub <span class="token operator">=</span> EasyFactory<span class="token punctuation">.</span><span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Operation mul <span class="token operator">=</span> EasyFactory<span class="token punctuation">.</span><span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Operation div <span class="token operator">=</span> EasyFactory<span class="token punctuation">.</span><span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mul<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-工厂方法模式"><a href="#3-工厂方法模式" class="headerlink" title="3.工厂方法模式"></a>3.工厂方法模式</h2><p>其实就是不用事先设置某个字符串标记，而是直接通过Class生成产品，利用了反射的原理</p><p>反射是：<strong>运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong>动态</p><h3 id="3-1-抽象工厂"><a href="#3-1-抽象工厂" class="headerlink" title="3.1 抽象工厂"></a>3.1 抽象工厂</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象工厂 * created by xucanyou666 * on 2019/11/14 16:16 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ComputerFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span>  <span class="token class-name">Computer</span><span class="token operator">></span> T <span class="token function">createComputer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> ciz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-抽象产品"><a href="#3-2-抽象产品" class="headerlink" title="3.2  抽象产品"></a>3.2  抽象产品</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 抽象产品 * created by xucanyou666 * on 2019/11/14 16:19 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-具体工厂"><a href="#3-3-具体工厂" class="headerlink" title="3.3  具体工厂"></a>3.3  具体工厂</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 具体工厂 * created by xucanyou666 * on 2019/11/14 16:21 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GDComputerFactor</span> <span class="token keyword">extends</span> <span class="token class-name">ComputerFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 利用反射     *     * @param ciz 类     * @param &lt;T> 类的类型     * @return 类的对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Computer</span><span class="token operator">></span> T <span class="token function">createComputer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> ciz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Computer computer <span class="token operator">=</span> null<span class="token punctuation">;</span>        String className <span class="token operator">=</span> ciz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//根据类型获取对象</span>            computer <span class="token operator">=</span> <span class="token punctuation">(</span>Computer<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> ClassNotFoundException <span class="token operator">|</span> InstantiationException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> computer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-客户端调用"><a href="#3-4-客户端调用" class="headerlink" title="3.4 客户端调用"></a>3.4 客户端调用</h3><pre class=" language-java"><code class="language-java"> ComputerFactory computerFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GDComputerFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Lenovo lenovo<span class="token operator">=</span>computerFactory<span class="token punctuation">.</span><span class="token function">createComputer</span><span class="token punctuation">(</span>Lenovo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-建造者模式"><a href="#4-建造者模式" class="headerlink" title="4.建造者模式"></a>4.建造者模式</h2><p>生成器模式，将一个<strong>复杂</strong>对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。 </p><p>其实就是将一个大型的复杂对象<strong>分解</strong>为小部分，然后分别对小部分进行初始化，重组</p><h3 id="4-1-创建产品类"><a href="#4-1-创建产品类" class="headerlink" title="4.1 创建产品类"></a>4.1 创建产品类</h3><p>大型复杂对象的组成类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 产品类，Product角色 * @author Jackson * @version 1.0.0 * since 2018 12 24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MacBook</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String mBoard<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//主板</span>    <span class="token keyword">private</span> String mDisplay<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示器</span>    <span class="token keyword">private</span> String mOs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Cpu</span>    <span class="token keyword">public</span> String <span class="token function">getBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mBoard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBoard</span><span class="token punctuation">(</span>String board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mBoard <span class="token operator">=</span> board<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDisplay<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDisplay</span><span class="token punctuation">(</span>String display<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDisplay <span class="token operator">=</span> display<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mOs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOs</span><span class="token punctuation">(</span>String os<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mOs <span class="token operator">=</span> os<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MacBook:"</span> <span class="token operator">+</span> <span class="token string">"mBoard="</span> <span class="token operator">+</span> mBoard <span class="token operator">+</span> <span class="token string">",mDisplay="</span> <span class="token operator">+</span> mDisplay <span class="token operator">+</span> <span class="token string">",mOs="</span> <span class="token operator">+</span> mOs<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-创建Builder类规范产品的组建"><a href="#4-2-创建Builder类规范产品的组建" class="headerlink" title="4.2 创建Builder类规范产品的组建"></a>4.2 创建Builder类规范产品的组建</h3><p><strong>规范</strong>产品每个<strong>部分的生成</strong>，<strong>不含顺序</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 抽象Builder类 * @author Jackson * @version 1.0.0 * since 2018 12 24 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置主板</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">builderBoard</span><span class="token punctuation">(</span>String board<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置显示器</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">builderDisplay</span><span class="token punctuation">(</span>String display<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置操作系统</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">builderOs</span><span class="token punctuation">(</span>String os<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 得到Computer</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> MacBook <span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-具体建造者（具体Builder）"><a href="#4-3-具体建造者（具体Builder）" class="headerlink" title="4.3 具体建造者（具体Builder）"></a>4.3 具体建造者（具体Builder）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 具体的Builder类 * @author Jackson * @version 1.0.0 * since 2018 12 24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MacbookBulder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> MacBook mMacBook<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MacBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">builderBoard</span><span class="token punctuation">(</span>String board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里用set代替复杂的操作</span>        mMacBook<span class="token punctuation">.</span><span class="token function">setBoard</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">builderDisplay</span><span class="token punctuation">(</span>String display<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mMacBook<span class="token punctuation">.</span><span class="token function">setDisplay</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">builderOs</span><span class="token punctuation">(</span>String os<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mMacBook<span class="token punctuation">.</span><span class="token function">setOs</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MacBook <span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mMacBook<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-用导演类来统一组装过程"><a href="#4-4-用导演类来统一组装过程" class="headerlink" title="4.4 用导演类来统一组装过程"></a>4.4 用导演类来统一组装过程</h3><p><strong>包含</strong>组装<strong>顺序</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>    Builder mBuilder<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//引入builder</span>    <span class="token keyword">public</span> <span class="token function">Director</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mBuilder<span class="token operator">=</span>builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//建造</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constract</span><span class="token punctuation">(</span>String board<span class="token punctuation">,</span>String display<span class="token punctuation">,</span>String os<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//规定了顺序</span>        mBuilder<span class="token punctuation">.</span><span class="token function">builderBoard</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>        mBuilder<span class="token punctuation">.</span><span class="token function">builderDisplay</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>        mBuilder<span class="token punctuation">.</span><span class="token function">builderOs</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-5-使用"><a href="#4-5-使用" class="headerlink" title="4.5 使用"></a>4.5 使用</h3><pre class=" language-java"><code class="language-java">  Builder builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MacbookBulder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Director director<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>  director<span class="token punctuation">.</span><span class="token function">constract</span><span class="token punctuation">(</span><span class="token string">"英特尔主板"</span><span class="token punctuation">,</span><span class="token string">"Retina显示器"</span><span class="token punctuation">,</span><span class="token string">"Mac OS X系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-6-使用场景"><a href="#4-6-使用场景" class="headerlink" title="4.6 使用场景"></a>4.6 使用场景</h3><ul><li>当创建复杂对象的算法应该<strong>独立</strong>于该对象的组成部分以及它们的装配方式时。 </li><li>相同的方法，不同的执行<strong>顺序</strong>，产生<strong>不同</strong>的事件结果时。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.4 结构型设计模式</title>
      <link href="/2019/11/21/6.4-jie-gou-xing-she-ji-mo-shi/"/>
      <url>/2019/11/21/6.4-jie-gou-xing-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-4-结构型设计模式"><a href="#6-4-结构型设计模式" class="headerlink" title="6.4 结构型设计模式"></a>6.4 结构型设计模式</h1><blockquote><p>什么是结构型设计模式？其实<strong>结构型</strong>设计模式是为了解决模块间的<strong>耦合</strong>问题</p></blockquote><h2 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1.代理模式"></a>1.代理模式</h2><p>定义：为其他对象提供一种<strong>代理</strong>以控制对这个对象的访问。</p><h3 id="1-1-静态代理的写法"><a href="#1-1-静态代理的写法" class="headerlink" title="1.1 静态代理的写法"></a>1.1 静态代理的写法</h3><h4 id="1-1-1-抽象主题类"><a href="#1-1-1-抽象主题类" class="headerlink" title="1.1.1 抽象主题类"></a>1.1.1 抽象主题类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 接口方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-1-2-真实主题"><a href="#1-1-2-真实主题" class="headerlink" title="1.1.2 真实主题"></a>1.1.2 真实主题</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 具体的业务逻辑实现     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//业务处理逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-1-3-代理类"><a href="#1-1-3-代理类" class="headerlink" title="1.1.3 代理类"></a>1.1.3 代理类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 要代理的实现类     */</span>    <span class="token keyword">private</span> Subject subject <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 默认代理自己     */</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>Subject subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构造函数，传递委托者     *     * @param objects 委托者     */</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> objects<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实现接口方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 预处理     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do something</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后处理     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do something</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-1-4-客户端类"><a href="#1-1-4-客户端类" class="headerlink" title="1.1.4 客户端类"></a>1.1.4 客户端类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Subject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Proxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-动态代理的写法"><a href="#1-2-动态代理的写法" class="headerlink" title="1.2 动态代理的写法"></a>1.2 动态代理的写法</h3><h4 id="1-2-1-动态代理类"><a href="#1-2-1-动态代理类" class="headerlink" title="1.2.1 动态代理类"></a>1.2.1 动态代理类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 动态代理 * created by xucanyou666 * on 2019/11/14 20:08 * email：913710642@qq.com * @author xucanyou666 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicPurchasing</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object object<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DynamicPurchasing</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        object <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 动态代理     *     * @param proxy     * @param method     * @param args     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法名等于buy</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"buy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"DynamicPurchasing"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-2-2-客户端类"><a href="#1-2-2-客户端类" class="headerlink" title="1.2.2 客户端类"></a>1.2.2 客户端类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * created by xucanyou666 * on 2019/11/14 20:12 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//被代理类，真实对象</span>        Lenovo lenovo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lenovo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态代理类</span>        DynamicPurchasing dynamicPurchasing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicPurchasing</span><span class="token punctuation">(</span>lenovo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//类加载器</span>        ClassLoader loader <span class="token operator">=</span> lenovo<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由动态代理生成代理类对象</span>        Lenovo mLenovo <span class="token operator">=</span> <span class="token punctuation">(</span>Lenovo<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Lenovo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> dynamicPurchasing<span class="token punctuation">)</span><span class="token punctuation">;</span>        mLenovo<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-代理模式的种类"><a href="#1-3-代理模式的种类" class="headerlink" title="1.3 代理模式的种类"></a>1.3 代理模式的种类</h3><ul><li>远程代理：为一个对象在不同的地址空间提供局部代表，这样系统可以将 Server 部分的实现隐藏</li><li>虚拟代理：使用一个<strong>代理对象</strong>表示一个十分<strong>耗费资源</strong>的对象并在<strong>真正需要时才创建</strong>。 </li><li>安全代理：用来<strong>控制</strong>真实对象访问时的<strong>权限</strong>。一般用于真实对象有不同的访问权限时。</li><li>智能指引：代理<strong>处理另外一些事</strong>，比如计算真实对象的引用<strong>计数</strong></li></ul><h3 id="1-4-代理模式的优点和缺点"><a href="#1-4-代理模式的优点和缺点" class="headerlink" title="1.4 代理模式的优点和缺点"></a>1.4 代理模式的优点和缺点</h3><h4 id="1-4-1-优点"><a href="#1-4-1-优点" class="headerlink" title="1.4.1 优点"></a>1.4.1 优点</h4><ul><li>实现实际的业务逻辑，<strong>不用关心</strong>其他<strong>非本职</strong>的工作。 职责单一</li><li>真实主题类随时都会发生变化；但是因为它实现了公共的接口，所以<strong>代理类</strong>可以<strong>不做</strong>任何<strong>修改</strong>就能够<br>使用。</li></ul><h4 id="1-4-2-缺点"><a href="#1-4-2-缺点" class="headerlink" title="1.4.2 缺点"></a>1.4.2 缺点</h4><p><strong>它始终无法摆脱仅支持 interface代理的桎梏</strong></p><h2 id="2-装饰模式"><a href="#2-装饰模式" class="headerlink" title="2.装饰模式"></a>2.装饰模式</h2><h3 id="2-1-是什么？"><a href="#2-1-是什么？" class="headerlink" title="2.1 是什么？"></a>2.1 是什么？</h3><p><strong>继承</strong>的<strong>替代</strong>方案之一。它通过创建一个包装对象，也就是装饰来包裹真实的对象。</p><h3 id="2-2-写法"><a href="#2-2-写法" class="headerlink" title="2.2 写法"></a>2.2 写法</h3><h4 id="2-2-1-抽象组件"><a href="#2-2-1-抽象组件" class="headerlink" title="2.2.1 抽象组件"></a>2.2.1 抽象组件</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 抽象主件 * created by xucanyou666 * on 2019/11/14 20:46 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Swordsman</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-2-具体组件"><a href="#2-2-2-具体组件" class="headerlink" title="2.2.2 具体组件"></a>2.2.2 具体组件</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 具体组件 * created by xucanyou666 * on 2019/11/14 20:47 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YangGuo</span> <span class="token keyword">extends</span> <span class="token class-name">Swordsman</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"杨过学的是使用武功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"YangGuo"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-3-抽象装饰类"><a href="#2-2-3-抽象装饰类" class="headerlink" title="2.2.3 抽象装饰类"></a>2.2.3 抽象装饰类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象装饰类 * created by xucanyou666 * on 2019/11/14 20:48 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token keyword">extends</span> <span class="token class-name">Swordsman</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Swordsman mSwordsman<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Master</span><span class="token punctuation">(</span>Swordsman swordsman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSwordsman <span class="token operator">=</span> swordsman<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSwordsman<span class="token punctuation">.</span><span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-4-具体装饰类"><a href="#2-2-4-具体装饰类" class="headerlink" title="2.2.4 具体装饰类"></a>2.2.4 具体装饰类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 具体装饰类 * created by xucanyou666 * on 2019/11/14 20:50 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HongQiGong</span> <span class="token keyword">extends</span> <span class="token class-name">Master</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">HongQiGong</span><span class="token punctuation">(</span>Swordsman swordsman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>swordsman<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"HongQiGong"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teachAttackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"教打狗棍法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">teachAttackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-5-客户端调用"><a href="#2-2-5-客户端调用" class="headerlink" title="2.2.5 客户端调用"></a>2.2.5 客户端调用</h4><pre class=" language-java"><code class="language-java"> YangGuo yangGuo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">YangGuo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       HongQiGong hongQiGong<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HongQiGong</span><span class="token punctuation">(</span>yangGuo<span class="token punctuation">)</span><span class="token punctuation">;</span>       hongQiGong<span class="token punctuation">.</span><span class="token function">attackMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-外观模式"><a href="#3-外观模式" class="headerlink" title="3.外观模式"></a>3.外观模式</h2><p>只有一个<strong>统一的高层接口</strong>，这样能降低用户的使用成本。 </p><h3 id="3-1-简单实现"><a href="#3-1-简单实现" class="headerlink" title="3.1 简单实现"></a>3.1 简单实现</h3><h4 id="3-1-1-子系统类"><a href="#3-1-1-子系统类" class="headerlink" title="3.1.1 子系统类"></a>3.1.1 子系统类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 子系统招式 * created by xucanyou666 * on 2019/11/14 21:29 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhaoShi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TaiJiQuan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"使用招式太极拳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">QiShangQuan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"七伤拳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"ZhaoShi"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 子系统内功 * created by xucanyou666 * on 2019/11/14 21:30 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NeiGong</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">JiuYang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"九阳神功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">QianKun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"乾坤大挪移"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"NeiGong"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-1-2-外观类"><a href="#3-1-2-外观类" class="headerlink" title="3.1.2 外观类"></a>3.1.2 外观类</h4><p>综合调用组合子系统</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 外观类张无忌 * created by xucanyou666 * on 2019/11/14 21:32 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangWuJi</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ZhaoShi zhaoShi<span class="token punctuation">;</span>    <span class="token keyword">private</span> NeiGong neiGong<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ZhangWuJi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zhaoShi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhaoShi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        neiGong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NeiGong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用乾坤大挪移     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Qiankun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zhaoShi<span class="token punctuation">.</span><span class="token function">QiShangQuan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        neiGong<span class="token punctuation">.</span><span class="token function">QianKun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-1-3-客户端"><a href="#3-1-3-客户端" class="headerlink" title="3.1.3 客户端"></a>3.1.3 客户端</h4><pre class=" language-java"><code class="language-java"> ZhangWuJi zhangWuJi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhangWuJi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhangWuJi<span class="token punctuation">.</span><span class="token function">Qiankun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-享元模式"><a href="#4-享元模式" class="headerlink" title="4.享元模式"></a>4.享元模式</h2><p><strong>池技术</strong>的重要实现方式，</p><p>定义：使用共享对象有效地支持大量<strong>细粒度</strong>的对象</p><p>要求细粒度对象，那么不可避免地使得对象<strong>数量多</strong>且<strong>性质相近</strong>。这些对象分为两个部分：<strong>内部</strong>状态和<strong>外部</strong>状态。</p><p>内部状态：对象不会变的信息</p><p>外部状态：对象会变的信息</p><h3 id="4-1-实现"><a href="#4-1-实现" class="headerlink" title="4.1 实现"></a>4.1 实现</h3><h4 id="4-1-1-抽象享元角色"><a href="#4-1-1-抽象享元角色" class="headerlink" title="4.1.1 抽象享元角色"></a>4.1.1 抽象享元角色</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 抽象享元角色 这里用的是外部状态的变量 * created by xucanyou666 * on 2019/11/14 21:41 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IGoods</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGoodsPrice</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-1-2-具体享元角色"><a href="#4-1-2-具体享元角色" class="headerlink" title="4.1.2 具体享元角色"></a>4.1.2 具体享元角色</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>users<span class="token punctuation">.</span>xucanyou666<span class="token punctuation">.</span>testdashboard<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 具体享元角色 * created by xucanyou666 * on 2019/11/14 21:42 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span> <span class="token class-name">IGoods</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//名称 内部状态</span>    <span class="token keyword">private</span> String version<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//版本 外部状态</span>    <span class="token function">Goods</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"Goods"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGoodsPrice</span><span class="token punctuation">(</span>String version<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>version<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"32G"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"价格为5199"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>version<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"128G"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"价格为5999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-1-3-享元工厂"><a href="#4-1-3-享元工厂" class="headerlink" title="4.1.3 享元工厂"></a>4.1.3 享元工厂</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 享元工厂 * created by xucanyou666 * on 2019/11/14 21:45 * email：913710642@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//池</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Goods<span class="token operator">></span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Goods <span class="token function">getGoods</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里的匹配是内部状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用缓存</span>            <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Goods goods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            pool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> goods<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-1-4-客户端调用"><a href="#4-1-4-客户端调用" class="headerlink" title="4.1.4 客户端调用"></a>4.1.4 客户端调用</h4><pre class=" language-java"><code class="language-java"> Goods goods<span class="token operator">=</span>GoodsFactory<span class="token punctuation">.</span><span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token string">"iphone7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       goods<span class="token punctuation">.</span><span class="token function">showGoodsPrice</span><span class="token punctuation">(</span><span class="token string">"32G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Goods goods1<span class="token operator">=</span>GoodsFactory<span class="token punctuation">.</span><span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token string">"iphone7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       goods<span class="token punctuation">.</span><span class="token function">showGoodsPrice</span><span class="token punctuation">(</span><span class="token string">"32G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-2-使用场景"><a href="#4-2-使用场景" class="headerlink" title="4.2 使用场景"></a>4.2 使用场景</h3><ul><li>系统中存在大量的<strong>相似</strong>对象</li><li>需要<strong>缓冲池</strong>的场景</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.1 设计模式六大原则</title>
      <link href="/2019/11/21/6.1-she-ji-mo-shi-liu-da-yuan-ze/"/>
      <url>/2019/11/21/6.1-she-ji-mo-shi-liu-da-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="6-1-设计模式六大原则"><a href="#6-1-设计模式六大原则" class="headerlink" title="6.1 设计模式六大原则"></a>6.1 设计模式六大原则</h1><h2 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1.单一职责原则"></a>1.单一职责原则</h2><p>就一个类而言，应该仅有一个引起它变化的原因</p><p>就是一个类<strong>职责</strong>（功能）<strong>尽可能少</strong></p><h2 id="2-开放封闭原则"><a href="#2-开放封闭原则" class="headerlink" title="2.开放封闭原则"></a>2.开放封闭原则</h2><p>类、模块、函数等应该是<strong>可以拓展</strong>的，但是<strong>不可修改</strong></p><p>对拓展开放，对修改封闭</p><h2 id="3-里氏替换原则"><a href="#3-里氏替换原则" class="headerlink" title="3.里氏替换原则"></a>3.里氏替换原则</h2><p>所有引用基类（<strong>父类</strong>）的地方必须能透明地<strong>使用</strong>其<strong>子类</strong>的对象</p><p>就是父类能够使用子类的所有方法，父能变子</p><p>要求<strong>子类的所有方法必须在父类中声明</strong></p><h2 id="4-依赖倒置原则"><a href="#4-依赖倒置原则" class="headerlink" title="4.依赖倒置原则"></a>4.依赖倒置原则</h2><p><strong>高</strong>层模块<strong>不</strong>应该<strong>依赖低层</strong>模块，两者都应该<strong>依赖于抽象</strong>。抽象<strong>不</strong>应该<strong>依赖于细节</strong>，细节应该依赖于抽象。 </p><h3 id="4-1-什么是高层模块？低层模块？"><a href="#4-1-什么是高层模块？低层模块？" class="headerlink" title="4.1 什么是高层模块？低层模块？"></a>4.1 什么是高层模块？低层模块？</h3><p><strong>高层</strong>模块就是<strong>调用端</strong>-&gt;mainActivity中调用</p><p><strong>低层</strong>模块 就是具体<strong>实现类</strong>-&gt;各种工具类</p><p>当高层模块调用低层模块的时候，不能用继承或者实现接口的形式，而是应该采用new 或者是静态类的形式</p><h2 id="5-迪米特原则"><a href="#5-迪米特原则" class="headerlink" title="5.迪米特原则"></a>5.迪米特原则</h2><p>一个软件<strong>实体</strong>应当尽可能<strong>少</strong>地与<strong>其他实体</strong>发生相互<strong>作用</strong></p><h2 id="6-接口隔离原则"><a href="#6-接口隔离原则" class="headerlink" title="6.接口隔离原则"></a>6.接口隔离原则</h2><p>一个类对另一个类的依赖应该建立在<strong>最小的接口</strong>上。 </p><p>就是接口的功能尽可能单一，不要建立庞大的接口</p><p><strong>接口的方法少用public</strong></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.7 解析Retrofit</title>
      <link href="/2019/11/21/5.7-jie-xi-retrofit/"/>
      <url>/2019/11/21/5.7-jie-xi-retrofit/</url>
      
        <content type="html"><![CDATA[<h1 id="5-7-解析Retrofit"><a href="#5-7-解析Retrofit" class="headerlink" title="5.7 解析Retrofit"></a>5.7 解析Retrofit</h1><blockquote><p>什么是Retrofit？为什么要用Retrofit呢</p></blockquote><h2 id="1-什么是Retrofit？"><a href="#1-什么是Retrofit？" class="headerlink" title="1.什么是Retrofit？"></a>1.什么是Retrofit？</h2><p>Retrofit是<strong>基于OkHttp</strong>实现的，使用<strong>运行时注解</strong>的方式提供功能</p><h2 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h2><h3 id="2-1-导入框架"><a href="#2-1-导入框架" class="headerlink" title="2.1 导入框架"></a>2.1 导入框架</h3><pre class=" language-xml"><code class="language-xml">implementation 'com.squareup.retrofit2:retrofit:2.0.2'implementation 'com.squareup.okhttp3:okhttp:3.4.1'   implementation 'com.squareup.retrofit2:converter-gson:2.0.2'  //返回值为gson数据 implementation 'com.google.code.gson:gson:2.8.5'   //gsonimplementation 'com.squareup.retrofit2:adapter-rxjava:2.0.2'  //rxjava</code></pre><h3 id="2-2-注解分类"><a href="#2-2-注解分类" class="headerlink" title="2.2  注解分类"></a>2.2  注解分类</h3><h4 id="2-2-1-HTTP请求方法注解"><a href="#2-2-1-HTTP请求方法注解" class="headerlink" title="2.2.1 HTTP请求方法注解"></a>2.2.1 HTTP请求方法注解</h4><p>GET、POST、PUT、DELETE、 HEAD、PATCH、OPTIONS和HTTP（可以替换前面的）</p><h4 id="2-2-2-标记类注解"><a href="#2-2-2-标记类注解" class="headerlink" title="2.2.2 标记类注解"></a>2.2.2 标记类注解</h4><ul><li>FormUrlEncoded：标明这是一个<strong>表单请求</strong>，一般配合<strong>post</strong>请求使用</li><li>Multipart：允许多个<strong>@Part</strong>,一般是在<strong>文件上传</strong>的时候使用</li><li>Streaming：以<strong>流</strong>的形式返回，如果不使用它，则默认会把全部数据加载到内存，所以<strong>下载大文件</strong>时需要加上这个注解</li></ul><h4 id="2-2-3-参数类注解"><a href="#2-2-3-参数类注解" class="headerlink" title="2.2.3 参数类注解"></a>2.2.3 参数类注解</h4><p>有Header、Headers、Body、Path、Field、 FieldMap、Part、PartMap、Query和QueryMap等</p><h3 id="3-GET请求"><a href="#3-GET请求" class="headerlink" title="3.GET请求"></a>3.GET请求</h3><h4 id="3-1-新建接口"><a href="#3-1-新建接口" class="headerlink" title="3.1 新建接口"></a>3.1 新建接口</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Call其实是返回的数据的集合</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMgrService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//get请求，参数用Query，@QueryMap是Query的集合</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//192.168.106:8080/login?username=张三&amp;pwd=123456,对应baseUrL后面的</span>    Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//post请求的话，参数用Field</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@FormUrlEncoded</span>   <span class="token comment" spellcheck="true">//URL编码</span>    Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-创建接口文件"><a href="#3-2-创建接口文件" class="headerlink" title="3.2 创建接口文件"></a>3.2 创建接口文件</h4><pre class=" language-java"><code class="language-java">        Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>Constants<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取UserMgrService对象 这里其实用到的是动态代理的原理</span>  UserMgrService userMgrService <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>UserMgrService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-3-返回Call对象"><a href="#3-3-返回Call对象" class="headerlink" title="3.3 返回Call对象"></a>3.3 返回Call对象</h4><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//调用登陆login方法   注意，这里返回的UserInfoModel类</span>        <span class="token keyword">final</span> Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> call <span class="token operator">=</span> userMgrService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-4-发送异步请求（自动回调）"><a href="#3-4-发送异步请求（自动回调）" class="headerlink" title="3.4 发送异步请求（自动回调）"></a>3.4 发送异步请求（自动回调）</h4><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//异步请求,enqueue</span>     call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> call<span class="token punctuation">,</span> Response<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">int</span> id<span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> call<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-5-怎么动态配置URL地址？"><a href="#3-5-怎么动态配置URL地址？" class="headerlink" title="3.5.怎么动态配置URL地址？"></a>3.5.怎么动态配置URL地址？</h4><p>@Path </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IpServiceForPath</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"{path}/getIpInfo.php?ip=59.108.54.37"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这里的path对应上面url中的path</span>    Call<span class="token operator">&lt;</span>IpModel<span class="token operator">></span> <span class="token function">getIpMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span> String path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-6-怎么动态指定查询条件"><a href="#3-6-怎么动态指定查询条件" class="headerlink" title="3.6.怎么动态指定查询条件"></a>3.6.怎么动态指定查询条件</h4><p>@Query,就是添加参数</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//get请求，参数用Query，@QueryMap是Query的集合</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//192.168.106:8080/login?username=张三&amp;pwd=123456,对应baseUrL后面的</span>    Call<span class="token operator">&lt;</span>UserInfoModel<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>动态指定查询条件组：@QueryMap ，类似于集合</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IpServiceForQueryMap</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"getIpInfo.php"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>IpModel<span class="token operator">></span> <span class="token function">getIpMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@QueryMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-POST请求"><a href="#4-POST请求" class="headerlink" title="4.POST请求"></a>4.POST请求</h3><h4 id="4-1-传键值对"><a href="#4-1-传键值对" class="headerlink" title="4.1 传键值对"></a>4.1 传键值对</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IpServiceForPost</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@FormUrlEncoded</span> <span class="token comment" spellcheck="true">//表单请求</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"getIpInfo.php"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>IpModel<span class="token operator">></span> <span class="token function">getIpMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">)</span> String first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-传JSON字符串：-Body"><a href="#4-2-传JSON字符串：-Body" class="headerlink" title="4.2 传JSON字符串：@Body"></a>4.2 传JSON字符串：@Body</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IpServiceForPostBody</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"getIpInfo.php"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>IpModel<span class="token operator">></span> <span class="token function">getIpMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> Ip ip<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>建立标识对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ip</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String ip<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只需要1个String对象就行了</span>    <span class="token keyword">public</span> <span class="token function">Ip</span><span class="token punctuation">(</span>String ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-3-文件上传"><a href="#4-3-文件上传" class="headerlink" title="4.3 文件上传"></a>4.3 文件上传</h4><h5 id="4-3-1-单个文件上传"><a href="#4-3-1-单个文件上传" class="headerlink" title="4.3.1 单个文件上传"></a>4.3.1 单个文件上传</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span>  <span class="token class-name">UploadFileForPart</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Multipart</span>        <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"user/photo"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//第一个参数是准备上传的图片文件，第二个参数是RequestBody类，用来传递键值对</span>        Call<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Part</span> MultipartBody<span class="token punctuation">.</span>Part photo<span class="token punctuation">,</span> <span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">"descirption"</span><span class="token punctuation">)</span>RequestBody description<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//文件 </span>File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"wangshu.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//请求体新建</span>        RequestBody requestBody<span class="token operator">=</span>RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        MultipartBody<span class="token punctuation">.</span>Part photo<span class="token operator">=</span>  MultipartBody<span class="token punctuation">.</span>Part<span class="token punctuation">.</span><span class="token function">createFormData</span><span class="token punctuation">(</span><span class="token string">"photos"</span><span class="token punctuation">,</span><span class="token string">"wangshu.png"</span><span class="token punctuation">,</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        UploadFileForPart uploadFileForPart<span class="token operator">=</span> RetrofitManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRs</span><span class="token punctuation">(</span>UploadFileForPart<span class="token punctuation">)</span><span class="token punctuation">;</span>        Call<span class="token operator">&lt;</span>User<span class="token operator">></span> call<span class="token operator">=</span>uploadFileForPart<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>photo<span class="token punctuation">,</span>RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"wangshu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-3-2-多个文件上传"><a href="#4-3-2-多个文件上传" class="headerlink" title="4.3.2 多个文件上传"></a>4.3.2 多个文件上传</h5><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Multipart</span>         <span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"user/photo"</span><span class="token punctuation">)</span>        Call<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PartMap</span> Map <span class="token operator">&lt;</span> String<span class="token punctuation">,</span> RequestBody <span class="token operator">></span> photos<span class="token punctuation">,</span> <span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span> RequestBody desc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-4-消息报头Header"><a href="#4-4-消息报头Header" class="headerlink" title="4.4.消息报头Header"></a>4.4.消息报头Header</h4><h5 id="4-4-1-静态添加"><a href="#4-4-1-静态添加" class="headerlink" title="4.4.1  静态添加"></a>4.4.1  静态添加</h5><pre class=" language-java"><code class="language-java">    <span class="token keyword">interface</span>  <span class="token class-name">SomeService</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"some/endpoint"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Headers</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding:application/json"</span><span class="token punctuation">)</span>        Call<span class="token operator">&lt;</span>RequestBody<span class="token operator">></span> <span class="token function">getCarType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="4-4-2-动态"><a href="#4-4-2-动态" class="headerlink" title="4.4.2 动态"></a>4.4.2 动态</h5><pre class=" language-java"><code class="language-java"> <span class="token keyword">interface</span>  <span class="token class-name">SomeService</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"some/endpoint"</span><span class="token punctuation">)</span>        Call<span class="token operator">&lt;</span>RequestBody<span class="token operator">></span> <span class="token function">getCarType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">)</span> String location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5-Retrofit-构建器的最佳写法"><a href="#5-Retrofit-构建器的最佳写法" class="headerlink" title="5. Retrofit 构建器的最佳写法"></a>5. <code>Retrofit</code> 构建器的最佳写法</h3><ul><li><code>ServiceCreator</code>单例类</li></ul><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">object</span> ServiceCreator <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> BASE_URL <span class="token operator">=</span> <span class="token string">"http://www.xcynice.xyz/"</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> retrofit <span class="token operator">=</span> Retrofit<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>BASE_URL<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>serviceClass<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>serviceClass<span class="token punctuation">)</span>        <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//调用</span><span class="token keyword">val</span> appService<span class="token operator">=</span>ServiceCreator<span class="token punctuation">.</span>create<span class="token operator">&lt;</span>AppService<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 网络编程与网络框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.5 解析Volley</title>
      <link href="/2019/11/21/5.5-jie-xi-volley/"/>
      <url>/2019/11/21/5.5-jie-xi-volley/</url>
      
        <content type="html"><![CDATA[<h1 id="5-5-解析Volley"><a href="#5-5-解析Volley" class="headerlink" title="5.5 解析Volley"></a>5.5 解析Volley</h1><blockquote><p>网络通信框架Volley,取得数据，也可以加载<strong>图片</strong>，适合进行数据<strong>量不大</strong>但通信<strong>频繁</strong>的网络操作。</p></blockquote><h2 id="5-5-1-基本用法"><a href="#5-5-1-基本用法" class="headerlink" title="5.5.1 基本用法"></a>5.5.1 基本用法</h2><h3 id="1-Volley网络请求队列"><a href="#1-Volley网络请求队列" class="headerlink" title="1.Volley网络请求队列"></a>1.Volley网络请求队列</h3><p>基于队列的,只要把请求放在请求队列中就行</p><p>如果请求不多的话,一个队列就行,反之一个Activity对应一个网络请求队列</p><pre class=" language-java"><code class="language-java">RequestQueue mQueue<span class="token operator">=</span>Volley<span class="token punctuation">.</span><span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-StringRequest的用法"><a href="#2-StringRequest的用法" class="headerlink" title="2.StringRequest的用法"></a>2.StringRequest的用法</h3><p>返回的是String</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个字符串请求 参数（请求方式，URL，响应的回调接口，错误的回调接口）</span>    StringRequest request<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringRequest</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">,</span>            url<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>Listener</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>String response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//正确时的回调方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>ErrorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorResponse</span><span class="token punctuation">(</span>VolleyError error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//错误时的回调方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>返回的是:html文件</p><p><img src="https://img-blog.csdnimg.cn/20190416114018952.png" alt="å¨è¿éæå¥å¾çæè¿°"></p><p>注意,如果<strong>不填请求方式</strong>的话,默认是<strong>get</strong></p><h3 id="3-JsonRequest的用法"><a href="#3-JsonRequest的用法" class="headerlink" title="3.JsonRequest的用法"></a>3.JsonRequest的用法</h3><p>返回json数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendJsonRequestClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>    String url<span class="token operator">=</span><span class="token string">"http://ip.taobao.com/service/getIpInfo.php?ip=63.223.108.42&amp;qq-pf-to=pcqq.group"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//参数（请求方式，URL，请求参数，响应的回调接口，错误的回调接口）</span>    JsonObjectRequest request<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JsonObjectRequest</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">,</span> url<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>Listener</span><span class="token operator">&lt;</span>JSONObject<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>JSONObject response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>ErrorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorResponse</span><span class="token punctuation">(</span>VolleyError error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-使用lmageRequest加载图片"><a href="#4-使用lmageRequest加载图片" class="headerlink" title="4.使用lmageRequest加载图片"></a>4.使用lmageRequest加载图片</h3><p>已经<strong>过时</strong></p><p>方法类似于JsonRequest</p><p>构造方法,这个构造方法没有过时</p><pre class=" language-java"><code class="language-java">ImageRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageRequest</span><span class="token punctuation">(</span>                             url<span class="token punctuation">,</span> myResponseListener<span class="token punctuation">,</span> maxWidth<span class="token punctuation">,</span>                             maxHeight<span class="token punctuation">,</span> scaleType<span class="token punctuation">,</span> Config<span class="token punctuation">.</span>RGB_565<span class="token punctuation">,</span> myErrorListener<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-使用lmageLoader加载图片"><a href="#5-使用lmageLoader加载图片" class="headerlink" title="5.使用lmageLoader加载图片"></a>5.使用lmageLoader加载图片</h3><p>内部使用 <strong>ImageRequest</strong> ,传入一个 ImageCache缓存形参，实现图片<strong>缓存</strong>的功能</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这个可以在MyApplication中实例好</span>ImageLoader imageLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageLoader</span><span class="token punctuation">(</span><span class="token function">getRequestQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VolleyImageCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数是显示的控件,第二个是默认显示图片,第3个是无网的时候显示的图片</span> ImageLoader<span class="token punctuation">.</span>ImageListener listener <span class="token operator">=</span> ImageLoader<span class="token punctuation">.</span><span class="token function">getImageListener</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>MyApplication<span class="token punctuation">.</span><span class="token function">getImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>UserContents<span class="token punctuation">.</span>imageUrl<span class="token punctuation">,</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>简单的封装:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> RequestQueue requestQueue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ImageLoader imageLoader<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RequestQueue <span class="token function">getRequestQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> requestQueue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ImageLoader <span class="token function">getImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> imageLoader<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestQueue <span class="token operator">=</span> Volley<span class="token punctuation">.</span><span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        imageLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageLoader</span><span class="token punctuation">(</span><span class="token function">getRequestQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VolleyImageCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">VolleyImageCache</span> <span class="token keyword">implements</span> <span class="token class-name">ImageLoader<span class="token punctuation">.</span>ImageCache</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> LruCache<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Bitmap<span class="token operator">></span> mCache<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">VolleyImageCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> maxCacheSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>            mCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LruCache</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Bitmap<span class="token operator">></span><span class="token punctuation">(</span>maxCacheSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">sizeOf</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Bitmap value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getRowBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> value<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Bitmap <span class="token function">getBitmap</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putBitmap</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> Bitmap bitmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolleyImageUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ImageLoader<span class="token punctuation">.</span>ImageListener listener <span class="token operator">=</span> ImageLoader<span class="token punctuation">.</span><span class="token function">getImageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span>view<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        MyApplication<span class="token punctuation">.</span><span class="token function">getImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MineFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> View view<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageView img<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ViewGroup container<span class="token punctuation">,</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>mine_layout<span class="token punctuation">,</span>container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        img <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>mine_img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用</span>        VolleyImageUtils<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>UserContents<span class="token punctuation">.</span>imageUrl<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ViewGroup<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-使用NetworklmageView加载图片"><a href="#6-使用NetworklmageView加载图片" class="headerlink" title="6.使用NetworklmageView加载图片"></a>6.使用NetworklmageView加载图片</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.android.volley.toolbox.NetworkImageView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/nivTestView<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.android.volley.toolbox.NetworkImageView</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">        networkImageView <span class="token operator">=</span> <span class="token punctuation">(</span>NetworkImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>nivTestView<span class="token punctuation">)</span><span class="token punctuation">;</span>        mQueue <span class="token operator">=</span> Volley<span class="token punctuation">.</span><span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LruImageCache lruImageCache <span class="token operator">=</span> LruImageCache<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ImageLoader imageLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageLoader</span><span class="token punctuation">(</span>mQueue<span class="token punctuation">,</span>lruImageCache<span class="token punctuation">)</span><span class="token punctuation">;</span>        networkImageView<span class="token punctuation">.</span><span class="token function">setDefaultImageResId</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        networkImageView<span class="token punctuation">.</span><span class="token function">setErrorImageResId</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">;</span>                networkImageView<span class="token punctuation">.</span><span class="token function">setImageUrl</span><span class="token punctuation">(</span>URLS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> imageLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果不想要压缩的话,都用wrap_content</p><h2 id="5-5-2-源码解析Volley"><a href="#5-5-2-源码解析Volley" class="headerlink" title="5.5.2 源码解析Volley"></a>5.5.2 源码解析Volley</h2><h3 id="1-工作流程"><a href="#1-工作流程" class="headerlink" title="1.工作流程"></a>1.工作流程</h3><p><img src="https://i.bmp.ovh/imgs/2019/11/dae2e0aea9954366.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 网络编程与网络框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.3 HTTP协议原理</title>
      <link href="/2019/11/21/5.3-http-xie-yi-yuan-li/"/>
      <url>/2019/11/21/5.3-http-xie-yi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="5-3-HTTP协议原理"><a href="#5-3-HTTP协议原理" class="headerlink" title="5.3 HTTP协议原理"></a>5.3 HTTP协议原理</h1><h2 id="5-3-1-HTTP简介"><a href="#5-3-1-HTTP简介" class="headerlink" title="5.3.1 HTTP简介"></a>5.3.1 HTTP简介</h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><p>• 支持C/S（客户/服务器）模式</p><p>• 简单快速</p><p>• 灵活</p><p>• 无状态</p><h2 id="5-3-2-HTTP请求报文"><a href="#5-3-2-HTTP请求报文" class="headerlink" title="5.3.2 HTTP请求报文"></a>5.3.2 HTTP请求报文</h2><h3 id="1-组成"><a href="#1-组成" class="headerlink" title="1.组成"></a>1.组成</h3><p>由请求<strong>行</strong>、请求报<strong>头</strong>、空行和请求<strong>数据</strong>4个部分组成</p><p><img src="https://i.bmp.ovh/imgs/2019/11/ab591f8871ccfb2e.png" alt></p><h3 id="2-请求行"><a href="#2-请求行" class="headerlink" title="2.请求行"></a>2.请求行</h3><p>由请求方法、URL字段和HTTP协议的版本组成</p><p>Method(请求方法) Request-URI(URL字段) HTTP-Version(版本) CRLF(回车)</p><p>例子:</p><p>GET <a href="http://blog.csdn.net/itachi85" target="_blank" rel="noopener">http://blog.csdn.net/itachi85</a> HTTP/1.1 </p><h4 id="2-1-请求方法"><a href="#2-1-请求方法" class="headerlink" title="2.1 请求方法"></a>2.1 请求方法</h4><ul><li>GET：请求<strong>获取</strong>Request-URI所标识的<strong>资源</strong>。</li><li>POST：在Request-URI所标识的资源后<strong>附加</strong>新的<strong>数据</strong>。 </li><li>HEAD：请求获取由Request-URI所标识的资源的响应<strong>消息报头</strong>。</li><li>PUT：请求服务器<strong>存储</strong>一个资源，并用Request-URI作为其标识。 </li><li>DELETE：请求服务器<strong>删除</strong>Request-URI所标识的资源。</li><li>TRACE：请求服务器<strong>回送收到的请求信息</strong>，主要用于测试或诊断。 </li><li>CONNECT：HTTP 1.1协议中预留给能够将连接改为管道方式的代理服务器。 </li><li>OPTIONS：请求<strong>查询</strong>服务器的<strong>性能</strong>，或者查询与资源相关的选项和需求。 </li></ul><h4 id="2-2-请求报头"><a href="#2-2-请求报头" class="headerlink" title="2.2 请求报头"></a>2.2 请求报头</h4><p>在请求行之后会有0个或者多个请求报头，每个请求报头都包含一个名字和一个值，它们之间用英文冒号“：”分割</p><h4 id="2-3-请求数据"><a href="#2-3-请求数据" class="headerlink" title="2.3 请求数据"></a>2.3 请求数据</h4><p>post的时候,请求报头是Content-Type和Content-Length。</p><h2 id="5-3-3-HTTP响应报文"><a href="#5-3-3-HTTP响应报文" class="headerlink" title="5.3.3 HTTP响应报文"></a>5.3.3 HTTP响应报文</h2><p>由<strong>状态行</strong>、响应<strong>报头</strong>、空行、响应<strong>正文</strong>组成</p><p><img src="https://i.bmp.ovh/imgs/2019/11/710a02270d767883.png" alt></p><h3 id="1-状态行"><a href="#1-状态行" class="headerlink" title="1.状态行"></a>1.状态行</h3><p>HTTP-Version(版本号) Status-Code(状态码) Reason-Phrase(文本描述) CRLF</p><pre><code>HTTP/1.1 200 OK</code></pre><h4 id="1-1-状态码有几类"><a href="#1-1-状态码有几类" class="headerlink" title="1.1 状态码有几类?"></a>1.1 状态码有几类?</h4><ul><li>200 OK：客户端请求<strong>成功</strong>。 </li><li>400 Bad Request：客户端请求有<strong>语法错误</strong>，服务器无法理解。 </li><li>401 Unauthorized：请求未经授权，这个状态码必须和WWW-Authenticate报头域一起使用。</li><li>403 Forbidden：服务器收到请求，但是<strong>拒绝</strong>提供服务。 </li><li>500 Internal Server Error：服务器<strong>内部错误</strong>，无法完成请求。 </li><li>503 Server Unavailable：服务器<strong>当前不能处理</strong>客户端的请求，一段时间后可能恢复正常。 </li></ul><h2 id="5-3-4-HTTP的消息报头"><a href="#5-3-4-HTTP的消息报头" class="headerlink" title="5.3.4 HTTP的消息报头"></a>5.3.4 HTTP的消息报头</h2><h3 id="1-通用报头"><a href="#1-通用报头" class="headerlink" title="1.通用报头"></a>1.通用报头</h3><ul><li>Date:日期和时间</li><li>Connection:允许发送指定连接的选项</li><li>Cache-Control:缓存指令</li></ul><h3 id="2-请求报头"><a href="#2-请求报头" class="headerlink" title="2.请求报头"></a>2.请求报头</h3><ul><li>Host:<strong>主机名</strong>，允许多个域名同处一个IP地址，即虚拟主机。 </li><li>User-Agent:浏览器类型、操作系统等信息</li><li>Accept:指定客户端接收哪些类型的信息</li><li>Accept-Encoding:可识别的数据编码。</li><li>Accept-Language:语言</li><li>Connection:指定与请求/响应连接有关的选项</li><li>Transfer-Encoding:对报文采用了什么编码方式。 </li></ul><h3 id="3-响应报头"><a href="#3-响应报头" class="headerlink" title="3.响应报头"></a>3.响应报头</h3><ul><li>Location:<strong>重定向</strong>接收者到一个新的位置</li><li>Server:包含系统信息</li></ul><h3 id="4-实体报头"><a href="#4-实体报头" class="headerlink" title="4.实体报头"></a>4.实体报头</h3><ul><li>Content-Type:实体正文的媒体<strong>类型</strong></li><li>Content-Lenght:正文的长度</li><li>Content-Language:自然语言。 </li><li>Content-Encoding:修饰符</li><li>Last-Modified:最后修改日期和时间</li><li>Expires:响应过期的日期和时间。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 网络编程与网络框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.2 TCP的三次握手与四次挥手</title>
      <link href="/2019/11/21/5.2-tcp-de-san-ci-wo-shou-yu-si-ci-hui-shou/"/>
      <url>/2019/11/21/5.2-tcp-de-san-ci-wo-shou-yu-si-ci-hui-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="5-2-TCP的三次握手与四次挥手"><a href="#5-2-TCP的三次握手与四次挥手" class="headerlink" title="5.2 TCP的三次握手与四次挥手"></a>5.2 TCP的三次握手与四次挥手</h1><h2 id="1-什么是三次握手"><a href="#1-什么是三次握手" class="headerlink" title="1.什么是三次握手"></a>1.什么是三次握手</h2><ul><li>第一次握手：建立连接。客户端<strong>发送连接请求</strong>报文段，等待服务端的确认。 </li><li>第二次握手： 服务器<strong>收到</strong>客户端的 SYN 报文段，对 SYN 报文段进行确认，设置Acknowledgment Number（ACK）为 x+1（seq+1）；同时自己还要发送 SYN 请求信息，将SYN设置为1、seq为y。服务端将上述所有信息放到SYN+ACK报文段中，一并<strong>发送给客户端</strong>，此时服务端进入SYN_RCVD状态。 （<strong>通知已经收到</strong>）</li><li>第三次握手：客户端收到服务端的SYN+ACK报文段；然后将ACK设置为y+1，向服务端发送ACK报 文段，这个报文段发送完毕后，客户端和服务端都进入ESTABLISHED （TCP连接成功）状态，完成TCP的 三次握手。 <strong>建立连接</strong></li></ul><h2 id="2-什么是4次挥手（断开连接）"><a href="#2-什么是4次挥手（断开连接）" class="headerlink" title="2.什么是4次挥手（断开连接）"></a>2.什么是4次挥手（断开连接）</h2><ul><li>第一次挥手：表示客户端没有数据要发送给服务端了</li><li>第二次挥手：服务端收到</li><li>第三次挥手：服务端请求关闭连接</li><li>第四次挥手：关闭连接</li></ul><p><img src="https://i.bmp.ovh/imgs/2019/11/5eb195994ca3849c.png" alt></p><h2 id="3-每次连接都要握手挥手吗"><a href="#3-每次连接都要握手挥手吗" class="headerlink" title="3.每次连接都要握手挥手吗"></a>3.每次连接都要握手挥手吗</h2><p><strong>HTTP</strong>有一种叫作keepalive connections的机制，它可以在传输数据后仍然保持连接，当客户端需要再次获取数据时，直接使用<strong>刚刚空闲</strong>下来的连接而<strong>无须</strong>再次<strong>握手</strong></p><p><img src="https://i.bmp.ovh/imgs/2019/11/93d82510d02dd074.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 网络编程与网络框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.4 线程池</title>
      <link href="/2019/11/21/4.4-xian-cheng-chi/"/>
      <url>/2019/11/21/4.4-xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="4-4-线程池"><a href="#4-4-线程池" class="headerlink" title="4.4 线程池"></a>4.4 线程池</h1><h2 id="4-4-1-ThreadPoolExecutor"><a href="#4-4-1-ThreadPoolExecutor" class="headerlink" title="4.4.1 ThreadPoolExecutor"></a>4.4.1 ThreadPoolExecutor</h2><h3 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//corePoolSize是核心线程数，maximumPoolSize最大线程数，keepAliveTime超时时间，unit时间单位，workQueue任务队列，threadFactory线程工厂，一般为空，RejectedExecutionHandler饱和策略</span>  <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//核心线程数</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//最大线程数</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//超时时间</span>                              TimeUnit unit<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//时间单位</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//任务队列</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程工厂</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//饱和策略</span>  <span class="token punctuation">{</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-什么是饱和策略RejectedExecutionHandler"><a href="#2-什么是饱和策略RejectedExecutionHandler" class="headerlink" title="2.什么是饱和策略RejectedExecutionHandler"></a>2.什么是饱和策略RejectedExecutionHandler</h3><p>当任务队列和线程池<strong>都满了</strong>时所采取的应对策略，默认是<strong>AbordPolicy</strong>，表示<strong>无法处理</strong>新任务，并抛出RejectedExecutionException异常</p><p>此外还有3种策略，它们分 别如下。</p><p> （1）CallerRunsPolicy：<strong>用调用者</strong>所在的线程来处理任务。此策略提供简单的反馈控制机制，能够减缓 新任务的提交速度。 </p><p>（2）DiscardPolicy：不能执行的任务，并将该<strong>任务删除</strong>。</p><p> （3）DiscardOldestPolicy：<strong>丢弃队列最近</strong>的任务，并执行当前的任务。</p><h2 id="4-4-2-线程池的处理流程和原理"><a href="#4-4-2-线程池的处理流程和原理" class="headerlink" title="4.4.2 线程池的处理流程和原理"></a>4.4.2 线程池的处理流程和原理</h2><p><img src="https://i.bmp.ovh/imgs/2019/11/c61f6297cfff9f18.png" alt></p><p><img src="https://i.bmp.ovh/imgs/2019/11/17b6be95e2d114a2.png" alt></p><h2 id="4-4-3-线程池的种类"><a href="#4-4-3-线程池的种类" class="headerlink" title="4.4.3 线程池的种类"></a>4.4.3 线程池的种类</h2><h3 id="1-FixedThreadPool"><a href="#1-FixedThreadPool" class="headerlink" title="1.FixedThreadPool"></a>1.FixedThreadPool</h3><p><strong>固定</strong>线程数的线程池，<strong>只有核心线程</strong>，采用无界的阻塞队列LinkedBlockingQueue</p><h3 id="2-CachedThreadPool"><a href="#2-CachedThreadPool" class="headerlink" title="2.CachedThreadPool"></a>2.CachedThreadPool</h3><p><strong>根据需要</strong>创建线程，<strong>没有核心线程</strong>，非核心线程是无界的，用了阻塞队列 SynchronousQueue，处理流程是，只要有任务，我就新建一个线程给你处理，所以队列里面根本为空，适于<strong>大量</strong>的需要<strong>立即处理</strong>并且<strong>耗时较少</strong>的任务。 </p><h3 id="3-SingleThreadExecutor"><a href="#3-SingleThreadExecutor" class="headerlink" title="3.SingleThreadExecutor"></a>3.SingleThreadExecutor</h3><p><strong>单</strong>个工作线程的线程池</p><h3 id="4-ScheduledThreadPool"><a href="#4-ScheduledThreadPool" class="headerlink" title="4.ScheduledThreadPool"></a>4.ScheduledThreadPool</h3><p>实现<strong>定时</strong>和<strong>周期</strong>性任务</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.1 网络分层</title>
      <link href="/2019/11/21/5.1-wang-luo-fen-ceng/"/>
      <url>/2019/11/21/5.1-wang-luo-fen-ceng/</url>
      
        <content type="html"><![CDATA[<h1 id="5-1-网络分层"><a href="#5-1-网络分层" class="headerlink" title="5.1 网络分层"></a>5.1 网络分层</h1><h2 id="1-什么是网络分层"><a href="#1-什么是网络分层" class="headerlink" title="1. 什么是网络分层"></a>1. 什么是网络分层</h2><p>将网络节点所要完成的数据的<strong>发送或转发</strong>、<strong>打包或拆包</strong>，以及控<strong>制信息的加载或拆出</strong>等工作，分别由不同的<strong>硬件和软件</strong>模块来完成。</p><h2 id="2-网络分层是怎样的？"><a href="#2-网络分层是怎样的？" class="headerlink" title="2.网络分层是怎样的？"></a>2.网络分层是怎样的？</h2><p><img src="https://i.bmp.ovh/imgs/2019/11/f8dd96e3e95a60c7.png" alt></p><h3 id="2-1-物理层"><a href="#2-1-物理层" class="headerlink" title="2.1 物理层"></a>2.1 物理层</h3><p>把计算机连接起来的物理手段</p><h3 id="2-2-数据链路层"><a href="#2-2-数据链路层" class="headerlink" title="2.2 数据链路层"></a>2.2 数据链路层</h3><p>主要功能是如何在不可靠的物理线路上进行数据的可靠传递。将网络层的数据分割为<strong>帧</strong>供物理层传输</p><p>帧是用来<strong>移动数据的结构包</strong>，它不仅包括<strong>原始数据</strong>，还包括发送方和接收方的<strong>物理地址</strong>以及<strong>纠错和控制</strong>信息</p><h3 id="2-3-网络层"><a href="#2-3-网络层" class="headerlink" title="2.3 网络层"></a>2.3 网络层</h3><p>是建立<strong>主机到主机</strong>的通信，决定如何将数据从发送方路由到接收方</p><h3 id="2-4-传输层"><a href="#2-4-传输层" class="headerlink" title="2.4 传输层"></a>2.4 传输层</h3><p>应用程序提供<strong>端到端</strong>的通信</p><p>有两个传输协议：<strong>TCP</strong>（传输控制协议）和<strong>UDP</strong>（用户数据报协议）。</p><h3 id="2-5-应用层"><a href="#2-5-应用层" class="headerlink" title="2.5 应用层"></a>2.5 应用层</h3><p>解读传输层的数据</p><p>它的主要协议有<strong>HTTP</strong>、FTP、Telnet、SMTP、POP3等。</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 网络编程与网络框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.5 AsyncTask的原理</title>
      <link href="/2019/11/21/4.5-asynctask-de-yuan-li/"/>
      <url>/2019/11/21/4.5-asynctask-de-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="4-5-AsyncTask的原理"><a href="#4-5-AsyncTask的原理" class="headerlink" title="4.5 AsyncTask的原理"></a>4.5 AsyncTask的原理</h1><h2 id="1-AsyncTask源码分析"><a href="#1-AsyncTask源码分析" class="headerlink" title="1.AsyncTask源码分析"></a>1.AsyncTask源码分析</h2><p>AsyncTask在3.0版本之前和3.0及以后版本有着较大的改动</p><p>3.0版本前是并行的，有可能会执行饱和策略，当任务数大于138</p><h3 id="1-1-Android-7-0版本的AsyncTask"><a href="#1-1-Android-7-0版本的AsyncTask" class="headerlink" title="1.1 Android 7.0版本的AsyncTask"></a>1.1 Android 7.0版本的AsyncTask</h3><p><img src="https://ftp.bmp.ovh/imgs/2019/11/d869cabc46b4c2d0.jpg" alt></p><p>其实就是AsyncTask里面有个<strong>线程池串行</strong>（之前是并行），线程池里面有<strong>阻塞队列</strong>，用<strong>InternalHandler</strong>传递信息</p><p>不会出现执行饱和策略</p><p>如果想并行就</p><pre class=" language-java"><code class="language-java">asyncTask<span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">,</span>＂＂<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.3 阻塞队列</title>
      <link href="/2019/11/21/4.3-zu-sai-dui-lie/"/>
      <url>/2019/11/21/4.3-zu-sai-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="4-3-阻塞队列"><a href="#4-3-阻塞队列" class="headerlink" title="4.3 阻塞队列"></a>4.3 阻塞队列</h1><h2 id="4-3-1-阻塞队列简介"><a href="#4-3-1-阻塞队列简介" class="headerlink" title="4.3.1 阻塞队列简介"></a>4.3.1 阻塞队列简介</h2><h3 id="1-什么是阻塞队列呢"><a href="#1-什么是阻塞队列呢" class="headerlink" title="1.什么是阻塞队列呢"></a>1.什么是阻塞队列呢</h3><p>阻塞队列常用于<strong>生产者和消费者</strong>的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。 </p><h3 id="2-什么时候会阻塞呢？"><a href="#2-什么时候会阻塞呢？" class="headerlink" title="2.什么时候会阻塞呢？"></a>2.什么时候会阻塞呢？</h3><ul><li>当队列中<strong>没有数据</strong>的情况，拿不了东西</li><li>当队列中<strong>填满数据</strong>的情况下，生产不了东西</li></ul><h3 id="3-BlockingQueue的核心方法"><a href="#3-BlockingQueue的核心方法" class="headerlink" title="3.BlockingQueue的核心方法"></a>3.BlockingQueue的核心方法</h3><h4 id="3-1-放入数据"><a href="#3-1-放入数据" class="headerlink" title="3.1 放入数据"></a>3.1 放入数据</h4><ul><li><strong>offer</strong>（anObject）：即如果BlockingQueue可以容纳，则返回true，否则返回false。<strong>不阻塞</strong>当前执行方法的线程。</li><li>offer（E o，long timeout，TimeUnit unit）：：可以设定等待的时间。如果在指定的时间内还不能往队列 中加入BlockingQueue，则返回失败。 </li><li><strong>put</strong>（anObject）：将anObject加到BlockingQueue里。如果BlockQueue没有空间，则调用此方法的线程 被<strong>阻断</strong>，直到BlockingQueue里面有空间再继续。 </li></ul><h4 id="3-2-获取数据"><a href="#3-2-获取数据" class="headerlink" title="3.2 获取数据"></a>3.2 获取数据</h4><ul><li><strong>poll</strong>（time）：取走 BlockingQueue 里排在<strong>首位</strong>的对象。若不能立即取出，则可以等 time参数规定的时间。取不到时返回null。 （非阻断）</li><li><strong>take</strong>（）：取走BlockingQueue里排在首位的对象。若BlockingQueue为空，则<strong>阻断</strong>进入等待状态，直 到 BlockingQueue有新的数据被加入。 </li><li>drainTo（）：一次性从BlockingQueue获取<strong>所有可用</strong>的数据对象，drain是<strong>喝干</strong>的意思</li></ul><h2 id="4-3-2-Java中的阻塞队列"><a href="#4-3-2-Java中的阻塞队列" class="headerlink" title="4.3.2 Java中的阻塞队列"></a>4.3.2 Java中的阻塞队列</h2><ul><li>ArrayBlockingQueue：由数组结构组成的<strong>有界</strong>阻塞队列。 最常用</li><li>LinkedBlockingQueue：由链表结构组成的有界阻塞队列。最常用，注意一定要给个大小</li><li>PriorityBlockingQueue：支持<strong>优先级排序</strong>的无界阻塞队列。默认自然升序<strong>排列</strong></li><li>DelayQueue：使用<strong>优先级队列</strong>实现的无界阻塞队列。到期才取走</li><li>SynchronousQueue：<strong>不存储</strong>元素的阻塞队列。插入操作必须等待另一个线程的移除操作，只能<strong>一放进去就被都拿走</strong></li><li>LinkedTransferQueue：由链表结构组成的无界阻塞队列。</li><li>LinkedBlockingDeque：由链表结构组成的<strong>双向阻塞</strong>队列，Deque是双向阻塞的意思</li></ul><h2 id="4-3-4-阻塞队列的使用场景"><a href="#4-3-4-阻塞队列的使用场景" class="headerlink" title="4.3.4 阻塞队列的使用场景"></a>4.3.4 阻塞队列的使用场景</h2><p>生产者：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue blockingQueue<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置队列缓存的大小。生产过程中超过这个大小就暂时停止生产</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> QUEUE_SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>BlockingQueue blockingQueue<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>blockingQueue <span class="token operator">=</span> blockingQueue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> task <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在生产："</span> <span class="token operator">+</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//将生产出来的产品放在队列缓存中</span>                    blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>task<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//让其停止一会，便于查看效果</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>消费者：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//消费者</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue blockingQueue<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>BlockingQueue blockingQueue<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>blockingQueue <span class="token operator">=</span> blockingQueue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//只要阻塞队列中有任务，就一直去消费</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在消费： "</span> <span class="token operator">+</span> blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//让其停止一会，便于查看效果</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> 其实是里面封装了锁，当满的时候会给生产者加锁，当空的时候会生产者自动解锁</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.2 同步</title>
      <link href="/2019/11/21/4.2-tong-bu/"/>
      <url>/2019/11/21/4.2-tong-bu/</url>
      
        <content type="html"><![CDATA[<h1 id="4-2-同步"><a href="#4-2-同步" class="headerlink" title="4.2 同步"></a>4.2 同步</h1><h2 id="4-2-1-重入锁与条件对象"><a href="#4-2-1-重入锁与条件对象" class="headerlink" title="4.2.1 重入锁与条件对象"></a>4.2.1 重入锁与条件对象</h2><h3 id="1-什么是重入锁"><a href="#1-什么是重入锁" class="headerlink" title="1.什么是重入锁"></a>1.什么是重入锁</h3><p>重入锁ReentrantLock就是支持<strong>重进入</strong>的锁，它表示该锁能够支持一个线程对资源的<strong>重复加锁。</strong></p><p><img src="https://i.bmp.ovh/imgs/2019/11/cf21578ee3f0c4c6.png" alt></p><p>这一结构确保任何时刻只有一个线程进入临界区，临界区就是在<strong>同一时刻只能有一个任务</strong>访问的代码区。</p><h3 id="2-什么是条件对象Condition"><a href="#2-什么是条件对象Condition" class="headerlink" title="2.什么是条件对象Condition"></a>2.什么是条件对象Condition</h3><p>条件对象来管理那些已经<strong>获得了一个锁</strong>但是却<strong>不能做有用工作</strong>的线程，条件对象又被称作条件变量，一般要配合ReentrantLock使用，用Condition.await()可以阻塞当前线程，并放弃锁</p><h3 id="3-例子："><a href="#3-例子：" class="headerlink" title="3.例子："></a>3.例子：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bank</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Condition sufficientFunds<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        sufficientFunds <span class="token operator">=</span> bankLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>    bankLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>accounts<span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">&lt;</span> amount<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//当要转给别人的前大于你所拥有的钱的时候，调用Condition的await可以阻塞当前线程，并放弃锁</span>            sufficientFunds<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">//阻塞状态解除,进入可运行状态</span>        sufficientFunds<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span><span class="token punctuation">{</span>        bankLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-2-2-同步方法"><a href="#4-2-2-同步方法" class="headerlink" title="4.2.2 同步方法"></a>4.2.2 同步方法</h2><h3 id="1-synchronized-关键字"><a href="#1-synchronized-关键字" class="headerlink" title="1.synchronized 关键字"></a>1.synchronized 关键字</h3><p>其方法中的await相当于  sufficientFunds.await();</p><p>notyfyAll相对于signalAll</p><h2 id="4-2-3-同步代码块"><a href="#4-2-3-同步代码块" class="headerlink" title="4.2.3 同步代码块"></a>4.2.3 同步代码块</h2><p>块可以让我们精确地控制到具体的“成员变量”，缩小同步的范围，提高效率</p><p><strong>一般实现同步</strong>最好用java.util.concurrent包下提供的类，比如<strong>阻塞队列</strong>。如果<strong>同步方法</strong>适合你的程序，那么请尽量使用同步方法，这样可以减少编写代码的数量，减少出错的概率。如果特别需要使用<strong>Lock/Condition</strong>结构提供的<strong>独有特性</strong>时，才使用Lock/Condition</p><p>（Condition的强大之处在于它可以为多个线程间<strong>建立不同的Condition</strong>， 使用synchronized/wait()只有一个阻塞队列，notifyAll会唤起所有阻塞队列下的线程，而使用lock/condition，可以实现<strong>多个阻塞队列</strong>，<strong>signalAll</strong>只会<strong>唤起某个</strong>阻塞队列下的<strong>阻塞线程</strong>，这就是后面所说的阻塞队列的知识）</p><h2 id="4-2-4-volatile"><a href="#4-2-4-volatile" class="headerlink" title="4.2.4 volatile"></a>4.2.4 volatile</h2><blockquote><p>在讲到volatile关键字之前，我们需要了解一下<strong>内存模型</strong>的相关概念以及<strong>并发编程中的3个特性</strong>：原子性、可见性和有序性。 </p></blockquote><h3 id="1-Java内存模型"><a href="#1-Java内存模型" class="headerlink" title="1.Java内存模型"></a>1.Java内存模型</h3><p>Java 内存模型定义了<strong>线程和主存</strong>之间的抽象关系：线程之间的<strong>共享变量</strong>存储在<strong>主存</strong>中， 每个线程都有一个<strong>私有的本地内存</strong>（工作内存），本地内存中存储了该线程共享变量的<strong>副本</strong>。</p><p><img src="https://i.bmp.ovh/imgs/2019/11/9c5f1de764bb8c47.png" alt></p><p>通信的话的步骤：</p><p>（1）线程A把线程A本地内存中<strong>更新过的共享变量刷新到主存</strong>中去。 </p><p>（2）线程B到主存中去<strong>读取</strong>线程A之前已<strong>更新过的共享变量</strong>。</p><h3 id="2-原子性、可见性和有序性"><a href="#2-原子性、可见性和有序性" class="headerlink" title="2.原子性、可见性和有序性"></a>2.原子性、可见性和有序性</h3><h4 id="2-1-原子性"><a href="#2-1-原子性" class="headerlink" title="2.1 原子性"></a>2.1 原子性</h4><p>对基本数据类型变量的<strong>读取和赋值</strong>（将数字赋值给某个变量）操作是原子性操作</p><pre class=" language-java"><code class="language-java">x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//原子性操作</span>y<span class="token operator">=</span>x<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先读取x的值，再将x的值写入工作内存</span>x<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//语句3包括3个操作：读取x的值、对x的值进行加1、向工作内存写入新值</span></code></pre><p>例如： AtomicInteger 类提供了方法incrementAndGet和decrementAndGet，它们分别以<strong>原子方式</strong>将一个整数<strong>自增</strong>和自减。</p><h4 id="2-2-可见性"><a href="#2-2-可见性" class="headerlink" title="2.2 可见性"></a>2.2 可见性</h4><p>一个线程修改的结果，另一个线程马上就能看到。</p><h4 id="2-3-有序性"><a href="#2-3-有序性" class="headerlink" title="2.3 有序性"></a>2.3 有序性</h4><p>通过<strong>volatile</strong>来保证有序性，除了volatile，也可以通过synchronized和Lock（只有一个线程执行同步代码）来保证有序性。</p><h3 id="3-volatile关键字"><a href="#3-volatile关键字" class="headerlink" title="3.volatile关键字"></a>3.volatile关键字</h3><p>被volatile修饰之后，其就具备了两个含义</p><ul><li><p>一个是线程修改了变量的值时，变量的新值对其他线程是<strong>立即可见</strong>的</p></li><li><p><strong>禁止使用指令重排序</strong></p></li></ul><h4 id="3-1-volatile不保证原子性"><a href="#3-1-volatile不保证原子性" class="headerlink" title="3.1  volatile不保证原子性"></a>3.1  volatile不保证原子性</h4><h4 id="3-2-volatile保证有序性"><a href="#3-2-volatile保证有序性" class="headerlink" title="3.2 volatile保证有序性"></a>3.2 volatile保证有序性</h4><p><strong>禁止指令重排序</strong>，2层含义</p><ol><li>在其前面的操作已经全部执行完毕，并且结果会对后面的操作可见</li><li>在volatile变量之前的语句不能在volatile变量后面执行</li></ol><h3 id="4-正确使用volatile关键字"><a href="#4-正确使用volatile关键字" class="headerlink" title="4.正确使用volatile关键字"></a>4.正确使用volatile关键字</h3><h4 id="4-1-使用条件"><a href="#4-1-使用条件" class="headerlink" title="4.1 使用条件"></a>4.1 使用条件</h4><h5 id="4-1-1-对变量的写操作不会依赖于当前值（不能是自增、自减）"><a href="#4-1-1-对变量的写操作不会依赖于当前值（不能是自增、自减）" class="headerlink" title="4.1.1 对变量的写操作不会依赖于当前值（不能是自增、自减）"></a>4.1.1 对变量的写操作不会依赖于当前值（不能是自增、自减）</h5><h5 id="4-2-2-该变量没有包含在具有其他变量的不变式中"><a href="#4-2-2-该变量没有包含在具有其他变量的不变式中" class="headerlink" title="4.2.2 该变量没有包含在具有其他变量的不变式中"></a>4.2.2 该变量没有包含在具有其他变量的不变式中</h5><p>它包含了一个不变式：下界总是小于或等于上界</p><p>初始状态是 （0，5），在<strong>同一时间</strong>内，线程A调用<strong>setLower</strong>（4）并且线程B调用<strong>setUpper</strong>（3），</p><p>最后的范围值是（4， 3），错误</p><h3 id="4-2-应用场景"><a href="#4-2-应用场景" class="headerlink" title="4.2 应用场景"></a>4.2 应用场景</h3><h5 id="4-2-1-状态标志"><a href="#4-2-1-状态标志" class="headerlink" title="4.2.1 状态标志"></a>4.2.1 状态标志</h5><p>其实就是线程的终止的时候的状态控制</p><h5 id="4-2-2-双重检查模式"><a href="#4-2-2-双重检查模式" class="headerlink" title="4.2.2 双重检查模式"></a>4.2.2 双重检查模式</h5><p><img src="https://i.bmp.ovh/imgs/2019/11/20cbf759f867dd14.png" alt></p><p>避免重排序</p><p>除了上面2种情况，其他情况用synchronized</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.1 线程基础</title>
      <link href="/2019/11/21/4.1-xian-cheng-ji-chu/"/>
      <url>/2019/11/21/4.1-xian-cheng-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-线程基础"><a href="#4-1-线程基础" class="headerlink" title="4.1 线程基础"></a>4.1 线程基础</h1><h2 id="4-1-1-进程与线程"><a href="#4-1-1-进程与线程" class="headerlink" title="4.1.1  进程与线程"></a>4.1.1  进程与线程</h2><h3 id="1-什么是进程"><a href="#1-什么是进程" class="headerlink" title="1.什么是进程"></a>1.什么是进程</h3><p>进程是<strong>操作系统</strong>结构的<strong>基础</strong>，是程序在一个数据集合上运行的过程，是系统进行<strong>资源分配和调度</strong>的<strong>基本单位</strong>。</p><p><img src="https://i.bmp.ovh/imgs/2019/11/8a4e87093df261ac.png" alt></p><p>比如打开任务管理器，就可以看到很多进程</p><h3 id="2-什么是线程"><a href="#2-什么是线程" class="headerlink" title="2.什么是线程"></a>2.什么是线程</h3><p>谷歌浏览器的<strong>进程</strong>，它里面运行了很多<strong>子任务</strong>，这些子任务有的加载网页，有的处理缓存，有的进行下载，这些子任务就是线程，是<strong>操作系统调度</strong>的最小单元，也叫作轻量级进程。</p><h2 id="4-1-2-线程的状态"><a href="#4-1-2-线程的状态" class="headerlink" title="4.1.2 线程的状态"></a>4.1.2 线程的状态</h2><ul><li>New：新创建状态</li><li>Runnable：可运行状态。</li><li>Blocked:阻塞状态。表示线程被锁阻塞，它暂时不活动(当进入<strong>同步</strong>方法并且<strong>没有获取到锁</strong>的时候，会出现这种情况)</li><li>Waiting:等待状态。线程暂时不活动，并且不运行任何代码，这消耗最少的资源，<strong>直到线程调度器重新激活它</strong>。 当<strong>wait或者join</strong>的时候会出现</li><li>Timed waiting：超时等待状态。可以在指定的时间<strong>自行返回</strong>的。 当<strong>sleep（long）</strong>或者是wait(long)的时候进入这个状态</li><li>Terminated:终止状态。第一种就是run方法<strong>执行完毕</strong>正常退出；第二种就是因为一个<strong>没有捕获的异常</strong>而终止了run方法</li></ul><p><img src="https://i.bmp.ovh/imgs/2019/11/589907b6a9f7ca17.png" alt></p><h2 id="4-1-3-创建线程"><a href="#4-1-3-创建线程" class="headerlink" title="4.1.3 创建线程"></a>4.1.3 创建线程</h2><h3 id="1-继承Thread类，重写run（）方法"><a href="#1-继承Thread类，重写run（）方法" class="headerlink" title="1.继承Thread类，重写run（）方法"></a>1.继承Thread类，重写run（）方法</h3><h3 id="2-实现Runnable接口，并实现该接口的run（）方法"><a href="#2-实现Runnable接口，并实现该接口的run（）方法" class="headerlink" title="2.实现Runnable接口，并实现该接口的run（）方法"></a>2.实现Runnable接口，并实现该接口的run（）方法</h3><h3 id="3-实现Callable接口，重写call（）方法"><a href="#3-实现Callable接口，重写call（）方法" class="headerlink" title="3.实现Callable接口，重写call（）方法"></a>3.实现Callable接口，重写call（）方法</h3><h4 id="3-1-和实现Runnable接口比，有什么优点"><a href="#3-1-和实现Runnable接口比，有什么优点" class="headerlink" title="3.1 和实现Runnable接口比，有什么优点"></a>3.1 和实现Runnable接口比，有什么优点</h4><ul><li>Callable可以在任务接受后提供一个<strong>返回值</strong></li><li>call（）方法可以<strong>抛出异常</strong></li><li>可以拿到一个<strong>Future对象</strong>，Future对象表示异步计算的结果，它提供了检查<strong>计算是否完成</strong>的方法。但调用 Future的<strong>get</strong>（）方法以获取结果时，当前线程就会<strong>阻塞</strong>，直到call（）方法返回结果。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试Callable */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCallable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 新建一个类实现callable接口     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTestCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyTestCallable myTestCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTestCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>Object<span class="token operator">></span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>myTestCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-1-4-理解中断"><a href="#4-1-4-理解中断" class="headerlink" title="4.1.4 理解中断"></a>4.1.4 理解中断</h2><h3 id="1-用interrupted来中断"><a href="#1-用interrupted来中断" class="headerlink" title="1.用interrupted来中断"></a>1.用interrupted来中断</h3><p>当一个线程调用 <strong>interrupt</strong> 方法时，线程的<strong>中断标识位将被置位</strong>（中断标识位为true），线程会不时地检测这个中断标识位，以判断线程是否应该被中断。要想知道线程是否被置位，可以调用 Thread.currentThread（）.isInterrupted（）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在run方法里面加上判断</span><span class="token comment" spellcheck="true">//如果没有被阻塞</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span>currentThread（）<span class="token punctuation">.</span>isInterrupted（）<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//doSomething</span><span class="token punctuation">}</span></code></pre><h2 id="4-1-5-安全地终止线程"><a href="#4-1-5-安全地终止线程" class="headerlink" title="4.1.5 安全地终止线程"></a>4.1.5 安全地终止线程</h2><h3 id="1-利用中断来终结"><a href="#1-利用中断来终结" class="headerlink" title="1.利用中断来终结"></a>1.利用中断来终结</h3><p><img src="https://i.bmp.ovh/imgs/2019/11/350866048e4a686d.png" alt></p><h3 id="2-利用boolean变量"><a href="#2-利用boolean变量" class="headerlink" title="2.利用boolean变量"></a>2.利用boolean变量</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MoonRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoonRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runner<span class="token punctuation">,</span> <span class="token string">"MoonThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            runner<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MoonRunner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意的是这里的变量是用volatile修饰</span>        <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> on <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>on<span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sTop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置一个取消的方法</span>        <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            on <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.7 View的工作流程</title>
      <link href="/2019/11/21/3.7-view-de-gong-zuo-liu-cheng/"/>
      <url>/2019/11/21/3.7-view-de-gong-zuo-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="3-7-View的工作流程"><a href="#3-7-View的工作流程" class="headerlink" title="3.7 View的工作流程"></a>3.7 View的工作流程</h1><h2 id="3-7-1-View的工作流程入口"><a href="#3-7-1-View的工作流程入口" class="headerlink" title="3.7.1 View的工作流程入口"></a>3.7.1 View的工作流程入口</h2><h3 id="1-DecorView被加载到Window中"><a href="#1-DecorView被加载到Window中" class="headerlink" title="1.DecorView被加载到Window中"></a>1.DecorView被加载到Window中</h3><ol><li><p>startAcivity</p></li><li><p>handleLaunchActivity</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Activity <span class="token function">handleLaunchActivity</span><span class="token punctuation">(</span>ActivityClientRecord r<span class="token punctuation">,</span>            PendingTransactionActions pendingActions<span class="token punctuation">,</span> Intent customIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">final</span> Activity a <span class="token operator">=</span> <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> customIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1进去</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span>createdConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>mConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">reportSizeConfigurations</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span>mFinished <span class="token operator">&amp;&amp;</span> pendingActions <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                pendingActions<span class="token punctuation">.</span><span class="token function">setOldState</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>                pendingActions<span class="token punctuation">.</span><span class="token function">setRestoreInstanceState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pendingActions<span class="token punctuation">.</span><span class="token function">setCallOnPostCreate</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> </code></pre><p>这里1进入会调用到Activity的 <strong>onCreate</strong>方法，从而完成<strong>DecorView</strong>的创建，</p></li><li><p>handleResumeActivity</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleResumeActivity</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span> <span class="token keyword">boolean</span> finalStateRequest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isForward<span class="token punctuation">,</span>            String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ActivityClientRecord r <span class="token operator">=</span> <span class="token function">performResumeActivity</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> finalStateRequest<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>window <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">.</span>mFinished <span class="token operator">&amp;&amp;</span> willBeVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span>window <span class="token operator">=</span> r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              View decor <span class="token operator">=</span> r<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//得到DecorView</span>            decor<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>INVISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ViewManager wm <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getWindowManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//得到WindowManager</span>            WindowManager<span class="token punctuation">.</span>LayoutParams l <span class="token operator">=</span> r<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>mDecor <span class="token operator">=</span> decor<span class="token punctuation">;</span>            l<span class="token punctuation">.</span>type <span class="token operator">=</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>TYPE_BASE_APPLICATION<span class="token punctuation">;</span>            l<span class="token punctuation">.</span>softInputMode <span class="token operator">|=</span> forwardBit<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>mPreserveWindow<span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">.</span>mWindowAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span>mPreserveWindow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                ViewRootImpl impl <span class="token operator">=</span> decor<span class="token punctuation">.</span><span class="token function">getViewRootImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>impl <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    impl<span class="token punctuation">.</span><span class="token function">notifyChildRebuilt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>mVisibleFromClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span>mWindowAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    a<span class="token punctuation">.</span>mWindowAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                     wm<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>decor<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//调用的是WindowManager的实现类的方法</span>                <span class="token punctuation">}</span></code></pre></li><li><p>WindowManager的实现类中的addView</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> View view<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">applyDefaultToken</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        mGlobal<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">,</span> mContext<span class="token punctuation">.</span><span class="token function">getDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mParentWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//进入</span>    <span class="token punctuation">}</span></code></pre></li><li><p>WindowManagerGlobal 的 addView方</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">,</span>            Display display<span class="token punctuation">,</span> Window parentWindow<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewRootImpl</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> display<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1</span>            view<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>            mViews<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>            mRoots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            mParams<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// do this last because it fires off messages to start doing things</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                root<span class="token punctuation">.</span><span class="token function">setView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> wparams<span class="token punctuation">,</span> panelParentView<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// BadTokenException or InvalidDisplayException, clean up.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">removeViewLocked</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>1处创建了ViewRootImpl实例，2处调用了ViewRootImpl的addView</p><p>这样就把DecorView加载到了Window中</p></li></ol><p><img src="https://ftp.bmp.ovh/imgs/2019/11/df7fb45aa65f6173.jpg" alt></p><h3 id="2-ViewRootlmpl的PerformTraveals方法"><a href="#2-ViewRootlmpl的PerformTraveals方法" class="headerlink" title="2.ViewRootlmpl的PerformTraveals方法"></a>2.ViewRootlmpl的PerformTraveals方法</h3><p>ViewTree开始View的工作流程</p><p>这里面主要执行了3个方法，分别是<strong>performMeasure</strong>、<strong>performLayout</strong>和<strong>performDraw</strong>，在其方法的内部又会分别调用View的measure、layout和draw方法。</p><h2 id="3-7-2-理解MeasureSpec"><a href="#3-7-2-理解MeasureSpec" class="headerlink" title="3.7.2 .理解MeasureSpec"></a>3.7.2 .理解MeasureSpec</h2><h4 id="1-什么是MeasureSpec"><a href="#1-什么是MeasureSpec" class="headerlink" title="1.什么是MeasureSpec"></a>1.什么是MeasureSpec</h4><p>View的内部类，其封装了一个View的<strong>规格尺寸</strong>，包括View的宽和高的信息，</p><h4 id="2-有几种模式SpecMode？"><a href="#2-有几种模式SpecMode？" class="headerlink" title="2.有几种模式SpecMode？"></a>2.有几种模式SpecMode？</h4><ul><li>UNSPECIFIED，specified（规定的）：未指定模式，View想多大就多大，父容器不做限制，</li><li>AT_MOST：最大模式，对应于wrap_comtent</li><li>EXACTLY：精确模式，对应于 match_parent </li></ul><h4 id="3-怎么保存和得到宽高呢"><a href="#3-怎么保存和得到宽高呢" class="headerlink" title="3.怎么保存和得到宽高呢"></a>3.怎么保存和得到宽高呢</h4><p><strong>makeMeasureSpec</strong>来<strong>保存</strong>宽和高的信息。通过<strong>getMode</strong>或getSize<strong>得到</strong>模式和宽、高。 </p><h4 id="4-顶层View怎么得到MeasureSpec呢"><a href="#4-顶层View怎么得到MeasureSpec呢" class="headerlink" title="4.顶层View怎么得到MeasureSpec呢"></a>4.顶层View怎么得到MeasureSpec呢</h4><p>其实是根据自身的LayoutParams来得到MeasureSpec</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRootMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> windowSize<span class="token punctuation">,</span> <span class="token keyword">int</span> rootDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> measureSpec<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>rootDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token operator">:</span>            measureSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token operator">:</span>            measureSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            measureSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>rootDimension<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> measureSpec<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-7-3-View的measure流程"><a href="#3-7-3-View的measure流程" class="headerlink" title="3.7.3 View的measure流程"></a>3.7.3 View的measure流程</h2><blockquote><p>分为 <strong>View</strong> 的 measure 流程和 <strong>ViewGroup</strong> 的measure流程， 只不过ViewGroup的measure流程除了要完成自己的测量，还要遍历地调用子元素的measure（）方法</p></blockquote><h3 id="1-View的measure流程"><a href="#1-View的measure流程" class="headerlink" title="1.View的measure流程"></a>1.View的measure流程</h3><p><img src="https://ftp.bmp.ovh/imgs/2019/11/a0fcfb0d4496bb91.jpg" alt></p><h3 id="2-ViewGroup的measure流程"><a href="#2-ViewGroup的measure流程" class="headerlink" title="2.ViewGroup的measure流程"></a>2.ViewGroup的measure流程</h3><p><img src="https://ftp.bmp.ovh/imgs/2019/11/95f40f7096aa4078.jpg" alt></p><p>LinearLayout的measure流程</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/76e23c250d4d8c11.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.5 解析Scroller</title>
      <link href="/2019/11/21/3.5-jie-xi-scroller/"/>
      <url>/2019/11/21/3.5-jie-xi-scroller/</url>
      
        <content type="html"><![CDATA[<h1 id="3-5-解析Scroller"><a href="#3-5-解析Scroller" class="headerlink" title="3.5 解析Scroller"></a>3.5 解析Scroller</h1><blockquote><p>什么是Scroller呢？他的工作流程是怎样的呢？</p></blockquote><h2 id="1-什么是Scroller？"><a href="#1-什么是Scroller？" class="headerlink" title="1.什么是Scroller？"></a>1.什么是Scroller？</h2><p>实现有过渡效果的滑动</p><h2 id="2-startScroller（）源码是怎样的呢？"><a href="#2-startScroller（）源码是怎样的呢？" class="headerlink" title="2.startScroller（）源码是怎样的呢？"></a>2.startScroller（）源码是怎样的呢？</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startScroll</span><span class="token punctuation">(</span><span class="token keyword">int</span> startX<span class="token punctuation">,</span> <span class="token keyword">int</span> startY<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">,</span> <span class="token keyword">int</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mMode <span class="token operator">=</span> SCROLL_MODE<span class="token punctuation">;</span>        mFinished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        mDuration <span class="token operator">=</span> duration<span class="token punctuation">;</span>        mStartTime <span class="token operator">=</span> AnimationUtils<span class="token punctuation">.</span><span class="token function">currentAnimationTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mStartX <span class="token operator">=</span> startX<span class="token punctuation">;</span>        mStartY <span class="token operator">=</span> startY<span class="token punctuation">;</span>        mFinalX <span class="token operator">=</span> startX <span class="token operator">+</span> dx<span class="token punctuation">;</span>        mFinalY <span class="token operator">=</span> startY <span class="token operator">+</span> dy<span class="token punctuation">;</span>        mDeltaX <span class="token operator">=</span> dx<span class="token punctuation">;</span>        mDeltaY <span class="token operator">=</span> dy<span class="token punctuation">;</span>        mDurationReciprocal <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> mDuration<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看出，<strong>startScroller</strong>只是用来做<strong>前期准备</strong>的，并不能使 View 进行滑动</p><h2 id="3-computeScroll（）方法是怎样的呢？"><a href="#3-computeScroll（）方法是怎样的呢？" class="headerlink" title="3.computeScroll（）方法是怎样的呢？"></a>3.computeScroll（）方法是怎样的呢？</h2><p>computeScroll是什么？</p><p>其实就是通过这个方法进行不断地重绘，从而实现滑动效果,重绘的话，会调用draw,draw会调用computeScroll</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过不断的重绘不断的调用computeScroll方法</span>            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-在scoller中怎么获取当前的ScrollX和ScrollY呢？"><a href="#4-在scoller中怎么获取当前的ScrollX和ScrollY呢？" class="headerlink" title="4.在scoller中怎么获取当前的ScrollX和ScrollY呢？"></a>4.在scoller中怎么获取当前的ScrollX和ScrollY呢？</h2><p>其实就是在调用scrollTo前，调用computeScrollOffset,</p><p>computeScrollOffset（）源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFinished<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算持续时间</span>        <span class="token keyword">int</span> timePassed <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>AnimationUtils<span class="token punctuation">.</span><span class="token function">currentAnimationTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mStartTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//小于设定时间，还没结束</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timePassed <span class="token operator">&lt;</span> mDuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>mMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//执行</span>            <span class="token keyword">case</span> SCROLL_MODE<span class="token operator">:</span>                <span class="token keyword">final</span> <span class="token keyword">float</span> x <span class="token operator">=</span> mInterpolator<span class="token punctuation">.</span><span class="token function">getInterpolation</span><span class="token punctuation">(</span>timePassed <span class="token operator">*</span> mDurationReciprocal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//得到当前的位置</span>                    mCurrX <span class="token operator">=</span> mStartX <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x <span class="token operator">*</span> mDeltaX<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mCurrY <span class="token operator">=</span> mStartY <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x <span class="token operator">*</span> mDeltaY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FLING_MODE<span class="token operator">:</span>                <span class="token keyword">final</span> <span class="token keyword">float</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> timePassed <span class="token operator">/</span> mDuration<span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>NB_SAMPLES <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> distanceCoef <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span>                <span class="token keyword">float</span> velocityCoef <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> NB_SAMPLES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> t_inf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> index <span class="token operator">/</span> NB_SAMPLES<span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> t_sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> NB_SAMPLES<span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> d_inf <span class="token operator">=</span> SPLINE_POSITION<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> d_sup <span class="token operator">=</span> SPLINE_POSITION<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    velocityCoef <span class="token operator">=</span> <span class="token punctuation">(</span>d_sup <span class="token operator">-</span> d_inf<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>t_sup <span class="token operator">-</span> t_inf<span class="token punctuation">)</span><span class="token punctuation">;</span>                    distanceCoef <span class="token operator">=</span> d_inf <span class="token operator">+</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> t_inf<span class="token punctuation">)</span> <span class="token operator">*</span> velocityCoef<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                mCurrVelocity <span class="token operator">=</span> velocityCoef <span class="token operator">*</span> mDistance <span class="token operator">/</span> mDuration <span class="token operator">*</span> <span class="token number">1000.0f</span><span class="token punctuation">;</span>                mCurrX <span class="token operator">=</span> mStartX <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>distanceCoef <span class="token operator">*</span> <span class="token punctuation">(</span>mFinalX <span class="token operator">-</span> mStartX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Pin to mMinX &lt;= mCurrX &lt;= mMaxX</span>                mCurrX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>mCurrX<span class="token punctuation">,</span> mMaxX<span class="token punctuation">)</span><span class="token punctuation">;</span>                mCurrX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>mCurrX<span class="token punctuation">,</span> mMinX<span class="token punctuation">)</span><span class="token punctuation">;</span>                mCurrY <span class="token operator">=</span> mStartY <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>distanceCoef <span class="token operator">*</span> <span class="token punctuation">(</span>mFinalY <span class="token operator">-</span> mStartY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Pin to mMinY &lt;= mCurrY &lt;= mMaxY</span>                mCurrY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>mCurrY<span class="token punctuation">,</span> mMaxY<span class="token punctuation">)</span><span class="token punctuation">;</span>                mCurrY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>mCurrY<span class="token punctuation">,</span> mMinY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mCurrX <span class="token operator">==</span> mFinalX <span class="token operator">&amp;&amp;</span> mCurrY <span class="token operator">==</span> mFinalY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mFinished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            mCurrX <span class="token operator">=</span> mFinalX<span class="token punctuation">;</span>            mCurrY <span class="token operator">=</span> mFinalY<span class="token punctuation">;</span>            mFinished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>首先会计算动画<strong>持续时间</strong>，如果持续时间<strong>小于设定</strong>的滑动时间的话，就执行Switch,因为在startScroll中的mMode值为<strong>SCROLL_MODE</strong>，执行分支语句 SCROLL_MODE，然后得到滑动后的位置</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>其实就是Scroller不能直接实现滑动，先<strong>start</strong>,再调用重绘<strong>invalidate</strong>，重绘调用<strong>draw</strong>，draw调用<strong>computeScroll</strong>，computeScroll中调用<strong>computeScrollOffset获取当前位置</strong>，再调用<strong>invalidate</strong>，循环进行，<strong>直到动画结束</strong></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.6 View的事件分发机制</title>
      <link href="/2019/11/21/3.6-view-de-shi-jian-fen-fa-ji-zhi/"/>
      <url>/2019/11/21/3.6-view-de-shi-jian-fen-fa-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="3-6-View的事件分发机制"><a href="#3-6-View的事件分发机制" class="headerlink" title="3.6 View的事件分发机制"></a>3.6 View的事件分发机制</h1><h2 id="3-6-1-源码解析Activity的构成"><a href="#3-6-1-源码解析Activity的构成" class="headerlink" title="3.6.1 源码解析Activity的构成"></a>3.6.1 源码解析Activity的构成</h2><h3 id="1-让我们来一步一步看源码"><a href="#1-让我们来一步一步看源码" class="headerlink" title="1.让我们来一步一步看源码"></a>1.让我们来一步一步看源码</h3><pre class=" language-java"><code class="language-java"><span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_change_password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//进入</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@LayoutRes</span> <span class="token keyword">int</span> layoutResID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span>layoutResID<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//进入</span>        <span class="token function">initWindowDecorActionBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> mWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneWindow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> window<span class="token punctuation">,</span> activityConfigCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentView</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mContentParent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">installDecor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//进去</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasFeature</span><span class="token punctuation">(</span>FEATURE_CONTENT_TRANSITIONS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mContentParent<span class="token punctuation">.</span><span class="token function">removeAllViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasFeature</span><span class="token punctuation">(</span>FEATURE_CONTENT_TRANSITIONS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Scene newScene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>mContentParent<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">transitionTo</span><span class="token punctuation">(</span>newScene<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mContentParent<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mContentParent<span class="token punctuation">.</span><span class="token function">requestApplyInsets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Callback cb <span class="token operator">=</span> <span class="token function">getCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cb<span class="token punctuation">.</span><span class="token function">onContentChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mContentParentExplicitlySet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre><code> return new DecorView(context, featureId, this, getAttributes());</code></pre><p>总的Activity的构成</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/bda68cabafb44473.png" alt></p><h2 id="3-6-2-源码解析View的事件分发机制"><a href="#3-6-2-源码解析View的事件分发机制" class="headerlink" title="3.6.2 源码解析View的事件分发机制"></a>3.6.2 源码解析View的事件分发机制</h2><h3 id="1-点击事件的关键"><a href="#1-点击事件的关键" class="headerlink" title="1.点击事件的关键"></a>1.点击事件的关键</h3><ul><li>dispatchTouchEvent  —用来进行事件的分发。 </li><li>onInterceptTouchEvent —用来进行事件的拦截</li><li>onTouchEvent —用来处理点击事件</li></ul><h3 id="2-View的事件分发机制"><a href="#2-View的事件分发机制" class="headerlink" title="2.View的事件分发机制"></a>2.View的事件分发机制</h3><p>点击事件-&gt;Activity.dispatchTouchEvent()-&gt;PhoneWindow-&gt;DecorView-&gt;ViewGroup.dispatchTouchEvent</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cancelAndClearTouchTargets</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resetTouchState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> intercepted<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//mFirstTouchTarget的意义是，如果为null,表示当前ViewGroup拦截了事件，否则，没有拦截并交由子View处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN                    <span class="token operator">||</span> mFirstTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">boolean</span> disallowIntercept <span class="token operator">=</span> <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_DISALLOW_INTERCEPT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disallowIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    intercepted <span class="token operator">=</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ev<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// restore action in case it was changed</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                intercepted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span></code></pre><p>总结，如果<strong>拦截</strong>了，<strong>后续</strong>的事件序列都将<strong>交给它处理</strong>，而<strong>不</strong>用再调用<strong>onInterceptTouchEvent</strong>（）方法了。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认情况下不拦截，如果需要拦截就重写该方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childrenCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">final</span> <span class="token keyword">int</span> childIndex <span class="token operator">=</span> <span class="token function">getAndVerifyPreorderedIndex</span><span class="token punctuation">(</span>                                    childrenCount<span class="token punctuation">,</span> i<span class="token punctuation">,</span> customOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">final</span> View child <span class="token operator">=</span> <span class="token function">getAndVerifyPreorderedView</span><span class="token punctuation">(</span>                                    preorderedList<span class="token punctuation">,</span> children<span class="token punctuation">,</span> childIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>childWithAccessibilityFocus <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>childWithAccessibilityFocus <span class="token operator">!=</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                childWithAccessibilityFocus <span class="token operator">=</span> null<span class="token punctuation">;</span>                                i <span class="token operator">=</span> childrenCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个for循环是<strong>倒序遍历</strong>的，即 从<strong>最上层的子View开始往内层遍历。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cancel<span class="token punctuation">,</span>            View child<span class="token punctuation">,</span> <span class="token keyword">int</span> desiredPointerIdBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> handled<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> oldAction <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cancel <span class="token operator">||</span> oldAction <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            event<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//否则调用父类的dispatchTouchEvent ，，进入</span>                handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//如果有子View，就调用子View的</span>                handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            event<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>oldAction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> handled<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>​    <img src="https://ftp.bmp.ovh/imgs/2019/11/f91df53ab01ddefd.png" alt></p><p><img src="https://i.bmp.ovh/imgs/2019/11/8b75a303d20b2887.png" alt></p><p>只要View的<strong>CLICKABLE</strong>和<strong>LONG_CLICKABLE</strong>有<strong>一个为true</strong>，那么 onTouchEvent（）就会返回true消耗这个事件</p><p><img src="https://i.bmp.ovh/imgs/2019/11/3ee29774a431ad5a.png" alt></p><p>如果<strong>设置了点击事件</strong>的话，那么它的<strong>onClick</strong>（）方法 就会被执行。</p><h3 id="3-点击事件分发的传递规则"><a href="#3-点击事件分发的传递规则" class="headerlink" title="3.点击事件分发的传递规则"></a>3.点击事件分发的传递规则</h3><h4 id="3-1-自上而下的传递规则"><a href="#3-1-自上而下的传递规则" class="headerlink" title="3.1 自上而下的传递规则"></a>3.1 自上而下的传递规则</h4><p>其实就是一直寻找子类，如果有子类的话，就将点击事件传到子类（先不管子类处理与否）</p><h4 id="3-2-自下而上的传递规则"><a href="#3-2-自下而上的传递规则" class="headerlink" title="3.2 自下而上的传递规则"></a>3.2 自下而上的传递规则</h4><p>其实就是子类不处理的话，就向上传递给父类，如此，直到找到可以处理的</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.4 属性动画</title>
      <link href="/2019/11/21/3.4-shu-xing-dong-hua/"/>
      <url>/2019/11/21/3.4-shu-xing-dong-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="3-4-属性动画"><a href="#3-4-属性动画" class="headerlink" title="3.4 属性动画"></a>3.4 属性动画</h1><blockquote><p>什么是属性动画呢？为什么要有属性动画呢？</p></blockquote><h2 id="1-什么是属性动画"><a href="#1-什么是属性动画" class="headerlink" title="1.什么是属性动画"></a>1.什么是属性动画</h2><p>简单来说就是通过<strong>改变对象属性</strong>而形成的动画效果</p><h2 id="2-为什么要有属性动画呢？"><a href="#2-为什么要有属性动画呢？" class="headerlink" title="2.为什么要有属性动画呢？"></a>2.为什么要有属性动画呢？</h2><p>传统的动画没有交互性，属性动画具有<strong>交互性</strong></p><h2 id="3-属性动画中有哪些比较重要的类呢？"><a href="#3-属性动画中有哪些比较重要的类呢？" class="headerlink" title="3.属性动画中有哪些比较重要的类呢？"></a>3.属性动画中有哪些比较重要的类呢？</h2><h3 id="1-ObjectAnimator"><a href="#1-ObjectAnimator" class="headerlink" title="1. ObjectAnimator"></a>1. ObjectAnimator</h3><p><strong>静态工厂方法</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一个参数是对象，第二个是对象的属性名字，第3个是值的变化，可以是ofFloat或者是ofInt，根据参数的类型直接写</span>ObjectAnimator objectAnimator <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span><span class="token string">"alpha"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置持续时间</span>objectAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> objectAnimator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>源码</strong>分析：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ObjectAnimator <span class="token function">ofFloat</span> <span class="token punctuation">(</span>Object target<span class="token punctuation">,</span>String propertyName<span class="token punctuation">,</span><span class="token keyword">float</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>            ObjectAnimator anim<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectAnimator</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>            anim<span class="token punctuation">.</span><span class="token function">setFloatValues</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> anim<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>直接返还一个 ObjectAnimator对象</p><p><strong>属性值</strong>：</p><ul><li>translationX和translationY：用来沿着X轴或者Y轴进行平移。</li><li>rotation、rotationX、rotationY：用来围绕View的支点进行旋转</li><li>PrivotX和PrivotY：控制View对象的支点位置，围绕这个支点进行旋转和缩放变换处理</li><li>alpha：透明度，默认是<strong>1（不透明</strong>），<strong>0</strong>代表完全<strong>透明</strong>（简单记忆，0是不存在的，所以是透明）</li><li>x和y：描述View对象在其容器中的最终位置。</li></ul><p>自定义属性类：</p><p>如果一个属性没有get和Set的方法的话，就可以通过包装类的方式，增加get和set方法</p><pre class=" language-Java"><code class="language-Java">   private static class MyView{        private View mTarget;        private MyView (View view){            mTarget =view;        }       //属性的setget方法        public int getWidth(){            return mTarget.getLayoutParams().width;        }        public void setWidth(int width){            mTarget.getLayoutParams().width=width;            mTarget.requestLayout();        }    }</code></pre><p>使用的时候</p><pre class=" language-java"><code class="language-java">MyView myView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span>mButton<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span>myView<span class="token punctuation">,</span> <span class="token string">"width"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-ValueAnimator"><a href="#2-ValueAnimator" class="headerlink" title="2.ValueAnimator"></a>2.ValueAnimator</h3><p>ValueAnimator<strong>不提供</strong>任何<strong>动画</strong>效果，更像一个<strong>数值发生器</strong>，用来产生有一定规律的数字，从而让调用者控制动画的实现过程。</p><p>一般在AnimatorUpdateListener中监听数值的变化，而完成动画的变换</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现颜色的渐变</span>    ValueAnimator valueAnimator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofArgb</span><span class="token punctuation">(</span><span class="token number">0xFFFF5454</span><span class="token punctuation">,</span> <span class="token number">0xFF5DDE5D</span><span class="token punctuation">,</span> <span class="token number">0xFF5DBEDE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    valueAnimator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> color <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> animation<span class="token punctuation">.</span><span class="token function">getAnimatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            button<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    valueAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记得start</span>    valueAnimator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-动画的监听"><a href="#3-动画的监听" class="headerlink" title="3.动画的监听"></a>3.动画的监听</h3><p>动画有4个过程：有start、Repeat、End、Cancel这4个过程，</p><p>大部分时候我们只关心 onAnimationEnd 事件，可以用AnimatorListenterAdaper来对必要的事件进行监听</p><pre class=" language-java"><code class="language-java">valueAnimator<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnimatorListenerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>Animator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-组合动画——AnimatorSet"><a href="#4-组合动画——AnimatorSet" class="headerlink" title="4.组合动画——AnimatorSet"></a>4.组合动画——AnimatorSet</h3><p>AnimatorSet提供了一个play方法，们向这个方法中传入一个 Animator 对象 ，会返回一个AnimatorSet.Builder的实例。</p><p>play的源码：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> Builder <span class="token function">play</span><span class="token punctuation">(</span>Animator anim<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>anim <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span>anim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>AnimatorSet.Builder中有4个方法</p><p>• after（Animator anim）：将现有动画插入到传入的动画之后执行。 //这里面的after是别人after</p><p>• after（long delay）：将现有动画延迟指定毫秒后执行。</p><p>• before（Animator anim）：将现有动画插入到传入的动画之前执行。</p><p>• with（Animator anim）：将现有动画和传入的动画同时执行。</p><p>animatorSet的使用</p><pre class=" language-java"><code class="language-java">ObjectAnimator alphaAnimator <span class="token operator">=</span>                        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"alpha"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectAnimator rotateAnimator <span class="token operator">=</span>                        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"rotation"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rotateAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectAnimator scaleAnimator <span class="token operator">=</span>                        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"scaleX"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectAnimator translateAnimator <span class="token operator">=</span>                        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> <span class="token string">"translationX"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                AnimatorSet animatorSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatorSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                animatorSet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>alphaAnimator<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>rotateAnimator<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>scaleAnimator<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>translateAnimator<span class="token punctuation">)</span><span class="token punctuation">;</span>                animatorSet<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>scaleAnimator-&gt;alphaAnimator==rotateAnimator-&gt;translateAnimator</p><h3 id="5-组合动画——PropertyValuesHolder"><a href="#5-组合动画——PropertyValuesHolder" class="headerlink" title="5.组合动画——PropertyValuesHolder"></a>5.组合动画——PropertyValuesHolder</h3><p>PropertyValuesHolder只能实现动画同时执行</p><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新建动画类 </span>PropertyValuesHolder valuesHolder1<span class="token operator">=</span>PropertyValuesHolder<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">"scaleX"</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PropertyValuesHolder valuesHolder2<span class="token operator">=</span>PropertyValuesHolder<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">"rotationX"</span><span class="token punctuation">,</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">90.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新建ObjectAnimator</span>ObjectAnimator animator<span class="token operator">=</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofPropertyValuesHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span>valuesHolder1<span class="token punctuation">,</span>valuesHolder2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启动画 </span>animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-在xml中用属性动画"><a href="#6-在xml中用属性动画" class="headerlink" title="6.在xml中用属性动画"></a>6.在xml中用属性动画</h3><p>直接新建anim文件</p><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8hees97f4j30nv08p75s.jpg" alt="http://tva1.sinaimg.cn/large/007X8olVly1g8hees97f4j30nv08p75s.jpg"></p><p>scaleX是水平缩放比例</p><p>然后导入：</p><pre class=" language-java"><code class="language-java">        Animator animator<span class="token operator">=</span> AnimatorInflater<span class="token punctuation">.</span><span class="token function">loadAnimator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>scale<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置对象</span>        animator<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.8 自定义View</title>
      <link href="/2019/11/21/3.8-zi-ding-yi-view/"/>
      <url>/2019/11/21/3.8-zi-ding-yi-view/</url>
      
        <content type="html"><![CDATA[<h1 id="3-8-自定义View"><a href="#3-8-自定义View" class="headerlink" title="3.8 自定义View"></a>3.8 自定义View</h1><blockquote><p>自定义View有几类呢？分别的实现方式是什么呢？别急，下面为你一一解答</p></blockquote><h2 id="3-8-0-自定义View分为几类？"><a href="#3-8-0-自定义View分为几类？" class="headerlink" title="3.8.0 自定义View分为几类？"></a>3.8.0 自定义View分为几类？</h2><h3 id="1-自定义View"><a href="#1-自定义View" class="headerlink" title="1.自定义View"></a>1.自定义View</h3><p>自定义View又分为<strong>继承系统控件</strong>（比如TextView）和<strong>继承View</strong></p><h3 id="2-自定义ViewGroup"><a href="#2-自定义ViewGroup" class="headerlink" title="2.自定义ViewGroup"></a>2.自定义ViewGroup</h3><p>自定义ViewGroup也分为<strong>继承 ViewGroup</strong> 和继承<strong>系统特定</strong>的 ViewGroup</p><h3 id="3-自定义组合控件"><a href="#3-自定义组合控件" class="headerlink" title="3.自定义组合控件"></a>3.自定义组合控件</h3><h2 id="3-8-1-继承系统控件的自定义View"><a href="#3-8-1-继承系统控件的自定义View" class="headerlink" title="3.8.1 继承系统控件的自定义View"></a>3.8.1 继承系统控件的自定义View</h2><p>一般是在onDraw方法(绘制)里面处理</p><p>例子：画一个中间带线的TextView</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvalidTextView</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Paint mPaint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">InvalidTextView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">InvalidTextView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">InvalidTextView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置画笔</span>        mPaint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPaint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写onDraw方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.bmp.ovh/imgs/2019/11/ba867dfeb90d257d.png" alt></p><h2 id="3-8-2-继承View的自定义View"><a href="#3-8-2-继承View的自定义View" class="headerlink" title="3.8.2 继承View的自定义View"></a>3.8.2 继承View的自定义View</h2><h3 id="1-要实现或者重写什么方法呢？"><a href="#1-要实现或者重写什么方法呢？" class="headerlink" title="1.要实现或者重写什么方法呢？"></a>1.要实现或者重写什么方法呢？</h3><ul><li>onDraw</li><li>wrap_content属性以及padding 属性的设置</li><li>对外提供自定义的属性</li><li>重写 onTouchEvent（）等触控事件</li></ul><h3 id="2-例子：画一个能够设置padding和支持wrap-content，自定义属性的矩形"><a href="#2-例子：画一个能够设置padding和支持wrap-content，自定义属性的矩形" class="headerlink" title="2.例子：画一个能够设置padding和支持wrap_content，自定义属性的矩形"></a>2.例子：画一个能够设置padding和支持wrap_content，自定义属性的矩形</h3><p><img src="https://i.bmp.ovh/imgs/2019/11/98ff9b43d4123875.png" alt></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RectView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Paint mPaint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mColor<span class="token operator">=</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RectView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">RectView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提取自定义属性</span>        TypedArray mTypedArray<span class="token operator">=</span>context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>RectView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提取RectView属性集合的rect_color属性，如果没设置默认值为Color.RED</span>        mColor<span class="token operator">=</span>mTypedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>RectView_rect_color<span class="token punctuation">,</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取资源后要及时回收</span>        mTypedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">RectView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPaint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>mColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPaint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测量宽高，能够适配wrap_content</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> widthSpecMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightSpecMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> widthSpecSize<span class="token operator">=</span>MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightSpecSize<span class="token operator">=</span>MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//宽高都是wrap_content</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>widthSpecMode<span class="token operator">==</span>MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token operator">&amp;&amp;</span>heightSpecMode<span class="token operator">==</span>MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//宽是wrap_content</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>widthSpecMode<span class="token operator">==</span>MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span>heightSpecSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//高是wrap_content</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>heightSpecMode<span class="token operator">==</span>MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>widthSpecSize<span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//绘制</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到padding</span>        <span class="token keyword">int</span> paddingLeft <span class="token operator">=</span> <span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> paddingRight <span class="token operator">=</span> <span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> paddingTop <span class="token operator">=</span> <span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> paddingBottom <span class="token operator">=</span> <span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到绘制的宽度</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> paddingLeft <span class="token operator">-</span> paddingRight<span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> paddingTop <span class="token operator">-</span> paddingBottom<span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> paddingLeft<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">+</span> paddingTop<span class="token punctuation">,</span> width <span class="token operator">+</span> paddingLeft<span class="token punctuation">,</span> height <span class="token operator">+</span> paddingTop<span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义属性的属性组合：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-stylexable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RectView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rect_color<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>调用：</p><pre class=" language-xml"><code class="language-xml"> &lt;com.example.liuwangshu.mooncustomview.RectView        xmlns:app="http://schemas.android.com/apk/res-auto"        android:id="@+id/rv_rect"        android:layout_width="wrap_content"        android:layout_height="200dp"        android:layout_below="@id/iv_text"        android:layout_marginTop="50dp"        android:layout_centerHorizontal="true"        android:padding="10dp"        <span class="token comment" spellcheck="true">&lt;!--设置图片--></span>        app:rect_color="@android:color/holo_blue_light"        /></code></pre><h2 id="3-8-3-自定义组合控件"><a href="#3-8-3-自定义组合控件" class="headerlink" title="3.8.3 自定义组合控件"></a>3.8.3 自定义组合控件</h2><h3 id="1-适用情况"><a href="#1-适用情况" class="headerlink" title="1.适用情况"></a>1.适用情况</h3><p>顶部的标题栏，或者弹出的固定样式的Dialog</p><h3 id="2-例子：自定义标题栏"><a href="#2-例子：自定义标题栏" class="headerlink" title="2.例子：自定义标题栏"></a>2.例子：自定义标题栏</h3><h4 id="1-布局："><a href="#1-布局：" class="headerlink" title="1.布局："></a>1.布局：</h4><p>其实就是左右两个图片，中间是文字</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/layout_titlebar_rootlayout<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>45dp<span class="token punctuation">"</span></span>   <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_titlebar_left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerInParent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/ico_return<span class="token punctuation">"</span></span>       <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_titlebar_title<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerInParent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>maxEms</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>singleLine</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>ellipsize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>end<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">bold</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_titlebar_right<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerInParent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/title_right<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>clickable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span></code></pre><h4 id="2-代码："><a href="#2-代码：" class="headerlink" title="2.代码："></a>2.代码：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TitleBar</span> <span class="token keyword">extends</span> <span class="token class-name">RelativeLayout</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ImageView iv_titlebar_left<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageView iv_titlebar_right<span class="token punctuation">;</span>    <span class="token keyword">private</span> TextView tv_titlebar_title<span class="token punctuation">;</span>    <span class="token keyword">private</span> RelativeLayout layout_titlebar_rootlayout<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mTextColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">;</span>    <span class="token keyword">private</span> String titlename<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TitleBar</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TitleBar</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initTypedArray</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TitleBar</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initTypedArray</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initTypedArray</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TypedArray mTypedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TitleBar<span class="token punctuation">)</span><span class="token punctuation">;</span>        mColor <span class="token operator">=</span> mTypedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TitleBar_title_bg<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        mTextColor <span class="token operator">=</span> mTypedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TitleBar_title_text_color<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        titlename <span class="token operator">=</span> mTypedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TitleBar_title_text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取资源后要及时回收</span>        mTypedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_customtitle<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iv_titlebar_left <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_titlebar_left<span class="token punctuation">)</span><span class="token punctuation">;</span>        iv_titlebar_right <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_titlebar_right<span class="token punctuation">)</span><span class="token punctuation">;</span>        tv_titlebar_title <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_titlebar_title<span class="token punctuation">)</span><span class="token punctuation">;</span>        layout_titlebar_rootlayout <span class="token operator">=</span> <span class="token punctuation">(</span>RelativeLayout<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>layout_titlebar_rootlayout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置背景颜色</span>        layout_titlebar_rootlayout<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>mColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置标题文字颜色</span>        tv_titlebar_title<span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>mTextColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTitle</span><span class="token punctuation">(</span>titlename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span>String titlename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>titlename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tv_titlebar_title<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>titlename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置点击事件监听</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeftListener</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iv_titlebar_left<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>onClickListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRightListener</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iv_titlebar_right<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>onClickListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TitleBar mTitleBar<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        mTitleBar<span class="token operator">=</span> <span class="token punctuation">(</span>TitleBar<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        mTitleBar<span class="token punctuation">.</span><span class="token function">setLeftListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"点击左键"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTitleBar<span class="token punctuation">.</span><span class="token function">setRightListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"点击右键"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-8-4-自定义ViewGroup"><a href="#3-8-4-自定义ViewGroup" class="headerlink" title="3.8.4 自定义ViewGroup"></a>3.8.4 自定义ViewGroup</h2><h3 id="1-例子：一个能够左右滑动的类似于ViewPager的控件"><a href="#1-例子：一个能够左右滑动的类似于ViewPager的控件" class="headerlink" title="1.例子：一个能够左右滑动的类似于ViewPager的控件"></a>1.例子：一个能够左右滑动的类似于ViewPager的控件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HorizontalView</span> <span class="token keyword">extends</span> <span class="token class-name">ViewGroup</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastX<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastY<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前子元素</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> childWidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Scroller scroller<span class="token punctuation">;</span>    <span class="token keyword">private</span> VelocityTracker tracker<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增加速度检测,如果速度比较快的话,就算没有滑动超过一半的屏幕也可以</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastInterceptX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastInterceptY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HorizontalView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HorizontalView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HorizontalView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        scroller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scroller</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tracker <span class="token operator">=</span> VelocityTracker<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> intercept <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                intercept <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//再次触摸阻止屏幕滑动</span>                <span class="token comment" spellcheck="true">//如果scroller没有执行完毕,则打断</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scroller<span class="token punctuation">.</span><span class="token function">isFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    scroller<span class="token punctuation">.</span><span class="token function">abortAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                <span class="token keyword">int</span> deltaX <span class="token operator">=</span> x <span class="token operator">-</span> lastInterceptX<span class="token punctuation">;</span>                <span class="token keyword">int</span> deltaY <span class="token operator">=</span> y <span class="token operator">-</span> lastInterceptY<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//水平方向距离长  MOVE中返回true一次,后续的MOVE和UP都不会收到此请求</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>deltaX<span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>deltaY<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    intercept <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>                intercept <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastX <span class="token operator">=</span> x<span class="token punctuation">;</span>        lastY <span class="token operator">=</span> y<span class="token punctuation">;</span>        lastInterceptX <span class="token operator">=</span> x<span class="token punctuation">;</span>        lastInterceptY <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">return</span> intercept<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tracker<span class="token punctuation">.</span><span class="token function">addMovement</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scroller<span class="token punctuation">.</span><span class="token function">isFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    scroller<span class="token punctuation">.</span><span class="token function">abortAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//跟随手指滑动</span>                <span class="token keyword">int</span> deltaX <span class="token operator">=</span> x <span class="token operator">-</span> lastX<span class="token punctuation">;</span>                <span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token operator">-</span>deltaX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//释放手指以后开始自动滑动到目标位置</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//相对于当前View滑动的距离,正为向左,负为向右</span>                <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> currentIndex <span class="token operator">*</span> childWidth<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//必须滑动的距离要大于1/2个宽度,否则不会切换到其他页面</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span> <span class="token operator">></span> childWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        currentIndex<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        currentIndex<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果速度能够超过50的话，也可以滑动</span>                    tracker<span class="token punctuation">.</span><span class="token function">computeCurrentVelocity</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">float</span> xV <span class="token operator">=</span> tracker<span class="token punctuation">.</span><span class="token function">getXVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>xV<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>xV <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            currentIndex<span class="token operator">--</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            currentIndex<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                currentIndex <span class="token operator">=</span> currentIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> currentIndex <span class="token operator">></span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> currentIndex<span class="token punctuation">;</span>                <span class="token function">smoothScrollTo</span><span class="token punctuation">(</span>currentIndex <span class="token operator">*</span> childWidth<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tracker<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastX <span class="token operator">=</span> x<span class="token punctuation">;</span>        lastY <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> widthMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> widthSize <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heightSize <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//测量所有子元素</span>        <span class="token function">measureChildren</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理wrap_content的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//宽高都是wrap_content，宽度设置为所有元素的值，高度设置为第一个子元素的高度</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>widthMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST <span class="token operator">&amp;&amp;</span> heightMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            View childOne <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> childWidth <span class="token operator">=</span> childOne<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> childHeight <span class="token operator">=</span> childOne<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>childWidth <span class="token operator">*</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>widthMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            View childOne <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> childWidth <span class="token operator">=</span> childOne<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>childWidth <span class="token operator">*</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> heightSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>heightMode <span class="token operator">==</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> childHeight <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>widthSize<span class="token punctuation">,</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//弹性滑动到其他页面</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scrollTo</span><span class="token punctuation">(</span>scroller<span class="token punctuation">.</span><span class="token function">getCurrX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scroller<span class="token punctuation">.</span><span class="token function">getCurrY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">postInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smoothScrollTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> destX<span class="token punctuation">,</span> <span class="token keyword">int</span> destY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scroller<span class="token punctuation">.</span><span class="token function">startScroll</span><span class="token punctuation">(</span><span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> destX <span class="token operator">-</span> <span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> destY <span class="token operator">-</span> <span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左边的距离</span>        View child<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历布局子元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> width <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                childWidth <span class="token operator">=</span> width<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//赋值给子元素宽度变量</span>                child<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> left <span class="token operator">+</span> width<span class="token punctuation">,</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                left <span class="token operator">+=</span> width<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-引用使用"><a href="#2-引用使用" class="headerlink" title="2.引用使用"></a>2.引用使用</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.example.liuwangshu.mooncustomviewgroup.HorizontalView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/lv_one<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/lv_two<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.example.liuwangshu.mooncustomviewgroup.HorizontalView</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.2 坐标系</title>
      <link href="/2019/11/21/3.2-zuo-biao-xi/"/>
      <url>/2019/11/21/3.2-zuo-biao-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="3-2-坐标系"><a href="#3-2-坐标系" class="headerlink" title="3.2 坐标系"></a>3.2 坐标系</h1><h2 id="3-2-1-Android坐标系"><a href="#3-2-1-Android坐标系" class="headerlink" title="3.2.1 Android坐标系"></a>3.2.1 Android坐标系</h2><p>以屏幕<strong>左上角的顶点</strong>作为Android的<strong>原点</strong>，这个原点向右是X轴正方向，向下是Y 轴正方向</p><p>在<strong>触控</strong>事件中，<strong>getRawX</strong>和getRawY也是Android坐标系的坐标</p><p><img src="https://s2.ax1x.com/2019/10/27/KscNIs.png" alt="KscNIs.png"></p><h2 id="3-2-2-View-坐标系"><a href="#3-2-2-View-坐标系" class="headerlink" title="3.2.2 View 坐标系"></a>3.2.2 View 坐标系</h2><p><img src="https://img-blog.csdn.net/20161219235525714?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzg3Mjg1Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="å¾1.1"></p><p><img src="https://img-blog.csdn.net/20170719232348885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzg3Mjg1Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="å¾2.1"></p><h3 id="1-获取自身的宽高"><a href="#1-获取自身的宽高" class="headerlink" title="1.获取自身的宽高"></a>1.获取自身的宽高</h3><p>getWidth</p><p>getHeight</p><h2 id="3-3-View的滑动"><a href="#3-3-View的滑动" class="headerlink" title="3.3 View的滑动"></a>3.3 View的滑动</h2><h3 id="1-基本思想是什么？"><a href="#1-基本思想是什么？" class="headerlink" title="1.基本思想是什么？"></a>1.基本思想是什么？</h3><ol><li>记下触摸点的坐标</li><li>移动之后，记下移动后的坐标</li><li>算出偏移量</li></ol><h3 id="2-滑动方法有哪些？"><a href="#2-滑动方法有哪些？" class="headerlink" title="2.滑动方法有哪些？"></a>2.滑动方法有哪些？</h3><h4 id="3-3-1-layout（）方法"><a href="#3-3-1-layout（）方法" class="headerlink" title="3.3.1 layout（）方法"></a>3.3.1 layout（）方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到手指处的横坐标和纵坐标</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//lastX是存储上一次的x</span>                lastX <span class="token operator">=</span> x<span class="token punctuation">;</span>                lastY <span class="token operator">=</span> y<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//计算移动的距离</span>                <span class="token keyword">int</span> offsetX <span class="token operator">=</span> x <span class="token operator">-</span> lastX<span class="token punctuation">;</span>                <span class="token keyword">int</span> offsetY <span class="token operator">=</span> y <span class="token operator">-</span> lastY<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用layout方法来重新放置它的位置,左上右下</span>               <span class="token function">layout</span><span class="token punctuation">(</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetX<span class="token punctuation">,</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetY<span class="token punctuation">,</span>                       <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetX <span class="token punctuation">,</span> <span class="token function">getBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="3-3-2-offsetLeftAndRight（）与offsetTopAndBottom（）"><a href="#3-3-2-offsetLeftAndRight（）与offsetTopAndBottom（）" class="headerlink" title="3.3.2  offsetLeftAndRight（）与offsetTopAndBottom（）"></a>3.3.2  offsetLeftAndRight（）与offsetTopAndBottom（）</h4><p>类似于layout(),将layout方法换为<strong>offsetLeftAndRight和offsetTopAndBottom</strong></p><pre class=" language-java"><code class="language-java">           <span class="token comment" spellcheck="true">// 对left和right进行偏移</span>           <span class="token function">offsetLeftAndRight</span><span class="token punctuation">(</span>offsetX<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对top和bottom进行偏移</span>           <span class="token function">offsetTopAndBottom</span><span class="token punctuation">(</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-3-3-使用LayoutParams（改变布局参数）"><a href="#3-3-3-使用LayoutParams（改变布局参数）" class="headerlink" title="3.3.3 使用LayoutParams（改变布局参数）"></a>3.3.3 使用LayoutParams（改变布局参数）</h4><pre class=" language-java"><code class="language-java">                <span class="token comment" spellcheck="true">//使用LayoutParams</span>     LinearLayout<span class="token punctuation">.</span>LayoutParams layoutParams<span class="token operator">=</span> <span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> <span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//改变Margin</span>               layoutParams<span class="token punctuation">.</span>leftMargin <span class="token operator">=</span> <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetX<span class="token punctuation">;</span>                layoutParams<span class="token punctuation">.</span>topMargin <span class="token operator">=</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetY<span class="token punctuation">;</span>                <span class="token function">setLayoutParams</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意的是：这里的LayoutParams需要<strong>根据父控件</strong>获得，</p><p>如果父控件是RelativeLayout， 则要使用RelativeLayout.LayoutParams</p><p>除了使用布局的LayoutParams外，我们<strong>还可以用 ViewGroup.MarginLayoutParams</strong>来实现：</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//使用MarginLayoutParams</span>      ViewGroup<span class="token punctuation">.</span>MarginLayoutParams layoutParams <span class="token operator">=</span> <span class="token punctuation">(</span>ViewGroup<span class="token punctuation">.</span>MarginLayoutParams<span class="token punctuation">)</span> <span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               layoutParams<span class="token punctuation">.</span>leftMargin <span class="token operator">=</span> <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetX<span class="token punctuation">;</span>               layoutParams<span class="token punctuation">.</span>topMargin <span class="token operator">=</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetY<span class="token punctuation">;</span>              <span class="token function">setLayoutParams</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-3-4-动画"><a href="#3-3-4-动画" class="headerlink" title="3.3.4 动画"></a>3.3.4 动画</h4><h5 id="1-新建anim文件夹，在里面新建translate-xml"><a href="#1-新建anim文件夹，在里面新建translate-xml" class="headerlink" title="1.新建anim文件夹，在里面新建translate.xml"></a>1.新建anim文件夹，在里面新建translate.xml</h5><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>fillAfter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>translate</span>        <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toXDelta</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span></code></pre><p>注意，这里加上fillAfter=”true”是表明停留在动画移动后的位置</p><h5 id="2-调用动画"><a href="#2-调用动画" class="headerlink" title="2.调用动画"></a>2.调用动画</h5><pre class=" language-java"><code class="language-java">mCustomView<span class="token punctuation">.</span><span class="token function">setAnimation</span><span class="token punctuation">(</span>AnimationUtils<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>translate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-需要注意什么？"><a href="#3-需要注意什么？" class="headerlink" title="3.需要注意什么？"></a>3.需要注意什么？</h5><p>动画并<strong>不能改变</strong>View的<strong>具体位置</strong>，只是改变了他的显示位置，所以我们如果在新的位置点击的话，不会有反应</p><p>解决方式是用属性动画，既可以执行动画，又可以改变位置</p><h4 id="3-3-5-scrollTo与scollBy"><a href="#3-3-5-scrollTo与scollBy" class="headerlink" title="3.3.5 scrollTo与scollBy"></a>3.3.5 scrollTo与scollBy</h4><p>scroll<strong>To</strong>（x，y）表示移动到一个<strong>具体的坐标点</strong></p><p>scroll<strong>By</strong>（dx，dy）则表示移动的<strong>增量</strong>为dx、dy,其实底层还是调用scrollTo的</p><h5 id="1-scrollTo的源码是怎样的？"><a href="#1-scrollTo的源码是怎样的？" class="headerlink" title="1.scrollTo的源码是怎样的？"></a>1.scrollTo的源码是怎样的？</h5><p><img src="https://s2.ax1x.com/2019/10/27/KshSaD.png" alt="KshSaD.png"></p><h5 id="2-怎么使用呢？"><a href="#2-怎么使用呢？" class="headerlink" title="2.怎么使用呢？"></a>2.怎么使用呢？</h5><p>我们将 ACTION_MOVE中的代码替换成如下代码；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用scrollBy</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token operator">-</span>offsetX<span class="token punctuation">,</span><span class="token operator">-</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为啥这里是<strong>偏移是负数</strong>呢？</p><p>因为这个偏移是把手机屏幕偏移了，<strong>界面自然就反方向移动</strong></p><h4 id="3-3-6-Scroller"><a href="#3-3-6-Scroller" class="headerlink" title="3.3.6 Scroller"></a>3.3.6 Scroller</h4><h5 id="1-为什么要用这个呢"><a href="#1-为什么要用这个呢" class="headerlink" title="1.为什么要用这个呢"></a>1.为什么要用这个呢</h5><p>实现有过渡效果的滑动</p><h5 id="2-怎么使用呢？-1"><a href="#2-怎么使用呢？-1" class="headerlink" title="2.怎么使用呢？"></a>2.怎么使用呢？</h5><ol><li><p>初始化</p><pre class=" language-java"><code class="language-java">mScroller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scroller</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>重写computeScroll方法</p><p>当系统调用draw的时候会调用这个方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过不断的重绘不断的调用computeScroll方法</span>            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>新建一个smoothScrollTo方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smoothScrollTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> destX<span class="token punctuation">,</span><span class="token keyword">int</span> destY<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> scrollX<span class="token operator">=</span><span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> delta<span class="token operator">=</span>destX<span class="token operator">-</span>scrollX<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1000秒内滑向destX</span>        mScroller<span class="token punctuation">.</span><span class="token function">startScroll</span><span class="token punctuation">(</span>scrollX<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>delta<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>调用</p><pre class=" language-java"><code class="language-java">mCustomView<span class="token punctuation">.</span><span class="token function">smoothScrollTo</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向右平移400像素</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2 Design Support Library 常用控件详解</title>
      <link href="/2019/11/21/2.2-design-support-library-chang-yong-kong-jian-xiang-jie/"/>
      <url>/2019/11/21/2.2-design-support-library-chang-yong-kong-jian-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="2-2-Design-Support-Library-常用控件详解"><a href="#2-2-Design-Support-Library-常用控件详解" class="headerlink" title="2.2 Design Support Library 常用控件详解"></a>2.2 Design Support Library 常用控件详解</h1><h2 id="2-2-2-TextInputLayout输入框"><a href="#2-2-2-TextInputLayout输入框" class="headerlink" title="2.2.2 TextInputLayout输入框"></a>2.2.2 TextInputLayout输入框</h2><h3 id="1-什么是TextInputLayout？"><a href="#1-什么是TextInputLayout？" class="headerlink" title="1.什么是TextInputLayout？"></a>1.什么是TextInputLayout？</h3><p>其实是一个输入框的控件</p><p><img src="https://upload-images.jianshu.io/upload_images/8850933-06fc0260057f22e4.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/482/format/webp" alt="img"></p><h3 id="2-TextInputLayout的使用"><a href="#2-TextInputLayout的使用" class="headerlink" title="2.TextInputLayout的使用"></a>2.TextInputLayout的使用</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.TextInputLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tl_username<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerInParent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/et_username<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>maxLength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>maxLines</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.TextInputLayout</span><span class="token punctuation">></span></span></code></pre><h3 id="3-显示错误信息"><a href="#3-显示错误信息" class="headerlink" title="3.显示错误信息"></a>3.显示错误信息</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">validateUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         tl_username<span class="token punctuation">.</span><span class="token function">setErrorEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         tl_username<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"请输入正确的邮箱地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>         tl_username<span class="token punctuation">.</span><span class="token function">setErrorEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         tl_password<span class="token punctuation">.</span><span class="token function">setErrorEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre><h3 id="4-改变样式"><a href="#4-改变样式" class="headerlink" title="4.改变样式"></a>4.改变样式</h3><p>如果对TextInputLayout输入框以及输入框上方的hint提示颜色不满意，则还可以在style.xml文件中对 colorAccent属性进行修改</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorAccent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/colorAccent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span></code></pre><h2 id="2-2-4-用TabLayout实现动态滑动效果"><a href="#2-2-4-用TabLayout实现动态滑动效果" class="headerlink" title="2.2.4 用TabLayout实现动态滑动效果"></a>2.2.4 用TabLayout实现动态滑动效果</h2><h3 id="1-主界面布局"><a href="#1-主界面布局" class="headerlink" title="1.主界面布局"></a>1.主界面布局</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.TabLayoutActivity<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这里用AppBarLayout是为了把tabLayout放在标题栏里--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.AppBarLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/appbar<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/ThemeOverlay.AppCompat.Dark.ActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.Toolbar</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/toolbar<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>?attr/actionBarSize<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_scrollFlags</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll|enterAlways<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>popupTheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/ThemeOverlay.AppCompat.Light<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.TabLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tabs<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>tabIndicatorColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ADBE107E<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>tabMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scrollable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.design.widget.AppBarLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v4.view.ViewPager</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/viewpager<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_behavior</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/appbar_scrolling_view_behavior<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p><img src="https://i.bmp.ovh/imgs/2019/10/b160476c557804fc.png" alt></p><h3 id="2-流程："><a href="#2-流程：" class="headerlink" title="2.流程："></a>2.流程：</h3><ol><li><p>初始化Toolbar和TabLayout和ViewPager</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> ViewPager mViewPager<span class="token operator">=</span> <span class="token punctuation">(</span>ViewPager<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>viewpager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> TabLayout mTabLayout <span class="token operator">=</span> <span class="token punctuation">(</span>TabLayout<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tabs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre></li><li><p>准备好tabLayout的标题</p><pre class=" language-java"><code class="language-java"> List<span class="token operator">&lt;</span>String<span class="token operator">></span> titles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"精选"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"体育"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"巴萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"购物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"明星"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"健康"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"励志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"图文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"本地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"动漫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"搞笑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"精选"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将tabLayout的标题设置进tabLayout</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTabLayout<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>mTabLayout<span class="token punctuation">.</span><span class="token function">newTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>titles<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>新建和标题数量相等的fragment</p><pre class=" language-java"><code class="language-java"> List<span class="token operator">&lt;</span>Fragment<span class="token operator">></span> fragments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fragments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>准备好ViewPager和TabLayout的adapter</p><pre class=" language-java"><code class="language-java"></code></pre></li></ol><p>   public class FragmentAdapter extends FragmentStatePagerAdapter {<br>       private List<fragment> mFragments;<br>       private List<string> mTitles;</string></fragment></p><pre><code>   public FragmentAdapter(FragmentManager fm, List&lt;Fragment&gt; fragments, List&lt;String&gt; titles) {       super(fm);       mFragments = fragments;       mTitles = titles;   }   //得到具体的fragment   @Override   public Fragment getItem(int position) {       return mFragments.get(position);   }   //得到数目   @Override   public int getCount() {       return mFragments.size();   }   //得到title   @Override   public CharSequence getPageTitle(int position) {       return mTitles.get(position);   }</code></pre><p>   }</p><pre><code>6. 准备好fragment7. 给ViewPager和tabLayout设置adapter,并且将二者关联起来   ```java    FragmentAdapter mFragmentAdapteradapter =                   new FragmentAdapter(getSupportFragmentManager(), fragments, titles);           //给ViewPager设置适配器           mViewPager.setAdapter(mFragmentAdapteradapter);           //将TabLayout和ViewPager关联起来。           mTabLayout.setupWithViewPager(mViewPager);       }</code></pre><h3 id="3-总的代码："><a href="#3-总的代码：" class="headerlink" title="3.总的代码："></a>3.总的代码：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>liuwangshu<span class="token punctuation">.</span>mytablayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>design<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TabLayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Fragment<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewPager<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>DrawerLayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toolbar<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TabLayoutActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> DrawerLayout mDrawerLayout<span class="token punctuation">;</span>    <span class="token keyword">private</span> ViewPager mViewPager<span class="token punctuation">;</span>    <span class="token keyword">private</span> TabLayout mTabLayout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_tab_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        Toolbar toolbar <span class="token operator">=</span> <span class="token punctuation">(</span>Toolbar<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setSupportActionBar</span><span class="token punctuation">(</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">;</span>        mViewPager <span class="token operator">=</span> <span class="token punctuation">(</span>ViewPager<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>viewpager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initViewPager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initViewPager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTabLayout <span class="token operator">=</span> <span class="token punctuation">(</span>TabLayout<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tabs<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> titles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"精选"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"体育"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"巴萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"购物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"明星"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"健康"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"励志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"图文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"本地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"动漫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"搞笑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        titles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"精选"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTabLayout<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>mTabLayout<span class="token punctuation">.</span><span class="token function">newTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>titles<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Fragment<span class="token operator">></span> fragments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fragments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        FragmentAdapter mFragmentAdapteradapter <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">FragmentAdapter</span><span class="token punctuation">(</span><span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fragments<span class="token punctuation">,</span> titles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给ViewPager设置适配器</span>        mViewPager<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>mFragmentAdapteradapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将TabLayout和ViewPager关联起来</span>        mTabLayout<span class="token punctuation">.</span><span class="token function">setupWithViewPager</span><span class="token punctuation">(</span>mViewPager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-当tab数不确定的时候，怎么动态添加fragment并且区分他们"><a href="#4-当tab数不确定的时候，怎么动态添加fragment并且区分他们" class="headerlink" title="4.当tab数不确定的时候，怎么动态添加fragment并且区分他们"></a>4.当tab数不确定的时候，怎么动态添加fragment并且区分他们</h3><p>利用bundle，setArguments</p><pre class=" language-java"><code class="language-java">  mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"特惠新品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"有机果蔬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"放养牲畜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"健康吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"调味品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"素食者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"时令食品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"野生菌类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"放养家禽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"休闲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"粮油类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"素食类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"周边菜场"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态添加Fragment</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mTabs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Fragment fragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Bundle bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"position"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            fragment<span class="token punctuation">.</span><span class="token function">setArguments</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>            mFragmentArrays<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>然后在fragment中</p><pre class=" language-java"><code class="language-java">mPosition <span class="token operator">=</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"position"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-怎么解决切换回来的时候，空白的情况"><a href="#5-怎么解决切换回来的时候，空白的情况" class="headerlink" title="5.怎么解决切换回来的时候，空白的情况"></a>5.怎么解决切换回来的时候，空白的情况</h3><p>在fragment  缓存View</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 首页 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tablayout<span class="token punctuation">)</span>    TabLayout tablayout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab_viewpager<span class="token punctuation">)</span>    ViewPager tabViewpager<span class="token punctuation">;</span>    Unbinder unbinder<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_fenlei<span class="token punctuation">)</span>    ImageView mIvFenlei<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Fragment<span class="token operator">></span> mFragmentArrays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> mTabs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> View view<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup container<span class="token punctuation">,</span>                             Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//解决点击“我的”回来方法二，首页空白的问题，推荐的方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            unbinder <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//必须加，不然报ButterKnife的异常</span>            ViewGroup parent <span class="token operator">=</span> <span class="token punctuation">(</span>ViewGroup<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                parent<span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> view<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_home<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unbinder <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里也得有，不然报ButterKnife的异常</span>        <span class="token function">initView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mIvFenlei<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tablayout<span class="token punctuation">.</span><span class="token function">removeAllTabs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tabViewpager<span class="token punctuation">.</span><span class="token function">removeAllViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFragmentArrays <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mFragmentArrays<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mTabs<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//替换成从服务器接口请求数据就成动态了</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"特惠新品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"有机果蔬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"放养牲畜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"健康吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"调味品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"素食者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"时令食品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"野生菌类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"放养家禽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"休闲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"粮油类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"素食类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTabs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"周边菜场"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态添加Fragment</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mTabs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Fragment fragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Bundle bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"position"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            fragment<span class="token punctuation">.</span><span class="token function">setArguments</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>            mFragmentArrays<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tabViewpager<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TabFragmentAdapter</span><span class="token punctuation">(</span><span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mFragmentArrays<span class="token punctuation">,</span> mTabs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tablayout<span class="token punctuation">.</span><span class="token function">setupWithViewPager</span><span class="token punctuation">(</span>tabViewpager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_fenlei<span class="token operator">:</span>                <span class="token function">startPopuwindows</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startPopuwindows</span><span class="token punctuation">(</span>View view1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        View view<span class="token operator">=</span>LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_main_popuwindows<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        RecyclerView recyclerView<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>recycler<span class="token punctuation">)</span><span class="token punctuation">;</span>        recyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayoutManager</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RecycleViewGridAdapter gridAdapter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RecycleViewGridAdapter</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_gride_fenlei<span class="token punctuation">,</span>mTabs<span class="token punctuation">)</span><span class="token punctuation">;</span>        recyclerView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>gridAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> PopupWindow popupWindow<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PopupWindow</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">,</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        popupWindow<span class="token punctuation">.</span><span class="token function">showAsDropDown</span><span class="token punctuation">(</span>view1<span class="token punctuation">)</span><span class="token punctuation">;</span>        gridAdapter<span class="token punctuation">.</span><span class="token function">setOnItemChildClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseQuickAdapter<span class="token punctuation">.</span>OnItemChildClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemChildClick</span><span class="token punctuation">(</span>BaseQuickAdapter adapter<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"点击了"</span><span class="token operator">+</span>mTabs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tabViewpager<span class="token punctuation">.</span><span class="token function">setCurrentItem</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                popupWindow<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gridAdapter<span class="token punctuation">.</span><span class="token function">setOnItemChildClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseQuickAdapter<span class="token punctuation">.</span>OnItemChildClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemChildClick</span><span class="token punctuation">(</span>BaseQuickAdapter adapter<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tabViewpager<span class="token punctuation">.</span><span class="token function">setCurrentItem</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                popupWindow<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unbinder<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-2-6-实现Toolbar隐藏和折叠"><a href="#2-2-6-实现Toolbar隐藏和折叠" class="headerlink" title="2.2.6 实现Toolbar隐藏和折叠"></a>2.2.6 实现Toolbar隐藏和折叠</h2><h3 id="1-自定义Behavior"><a href="#1-自定义Behavior" class="headerlink" title="1.自定义Behavior"></a>1.自定义Behavior</h3><p>Behavior就是实现组件和滑动交互</p><h4 id="1-实现自定义Behavior的方式有哪些？"><a href="#1-实现自定义Behavior的方式有哪些？" class="headerlink" title="1.实现自定义Behavior的方式有哪些？"></a>1.实现自定义Behavior的方式有哪些？</h4><p>我们来做个demo,就是底部提示条，当向上滑的时候就消失，当向下滑的时候就显示</p><ol><li><h5 id="定义View监听CoordinatorLayout里的滑动状态"><a href="#定义View监听CoordinatorLayout里的滑动状态" class="headerlink" title="定义View监听CoordinatorLayout里的滑动状态"></a>定义View监听CoordinatorLayout里的滑动状态</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooterBehavior</span> <span class="token keyword">extends</span> <span class="token class-name">CoordinatorLayout<span class="token punctuation">.</span>Behavior</span><span class="token operator">&lt;</span>View<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> directionChange<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FooterBehavior</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回值表示滑动要不要关注</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onStartNestedScroll</span><span class="token punctuation">(</span>CoordinatorLayout coordinatorLayout<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View directTargetChild<span class="token punctuation">,</span> View target<span class="token punctuation">,</span> <span class="token keyword">int</span> nestedScrollAxes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//关注竖直方向的滑动</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>nestedScrollAxes <span class="token operator">&amp;</span> ViewCompat<span class="token punctuation">.</span>SCROLL_AXIS_VERTICAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//dy是滑动的距离，上滑是正，下滑是负</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNestedPreScroll</span><span class="token punctuation">(</span>CoordinatorLayout coordinatorLayout<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View target<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> consumed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dy <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> directionChange <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> dy <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> directionChange <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            child<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            directionChange <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        directionChange <span class="token operator">+=</span> dy<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>directionChange <span class="token operator">></span> child<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span><span class="token function">getVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">hide</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>directionChange <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span><span class="token function">getVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token keyword">final</span> View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置动画</span>        ViewPropertyAnimator animator <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">translationY</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FastOutSlowInInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animator<span class="token punctuation">.</span><span class="token function">setListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnimatorListenerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>Animator animator<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//动画结束</span>                view<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">final</span> View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewPropertyAnimator animator <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">translationY</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FastOutSlowInInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animator<span class="token punctuation">.</span><span class="token function">setListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnimatorListenerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>Animator animator<span class="token punctuation">)</span> <span class="token punctuation">{</span>                view<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启动画</span>        animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在xml中</p><pre class=" language-xml"><code class="language-xml">//指定behavior<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span><span class="token attr-name">...</span><span class="token attr-name"><span class="token namespace">app:</span>layout_behavior</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.FooterBehavior<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><h5 id="定义View来监听另一个View的显示，来改变自己的状态"><a href="#定义View来监听另一个View的显示，来改变自己的状态" class="headerlink" title="定义View来监听另一个View的显示，来改变自己的状态"></a>定义View来监听另一个View的显示，来改变自己的状态</h5><p>java:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooterBehaviorAppBar</span> <span class="token keyword">extends</span> <span class="token class-name">CoordinatorLayout<span class="token punctuation">.</span>Behavior</span><span class="token operator">&lt;</span>View<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">FooterBehaviorAppBar</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这个方法是返回我们关心的类，第一个参数是CoordinatorLayout，第2个是设置这个Behavior的view,第3个dependency是我们监听的View</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">layoutDependsOn</span><span class="token punctuation">(</span>CoordinatorLayout parent<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View dependency<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里我们监听的是AppBarLayout</span>        <span class="token keyword">return</span> dependency <span class="token keyword">instanceof</span> <span class="token class-name">AppBarLayout</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onDependentViewChanged</span><span class="token punctuation">(</span>CoordinatorLayout parent<span class="token punctuation">,</span> View child<span class="token punctuation">,</span> View dependency<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//得到监听的控件的y</span>        <span class="token keyword">float</span> translationY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dependency<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"wangshu"</span><span class="token punctuation">,</span>translationY<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//使其与被监听的控件同步显示</span>        child<span class="token punctuation">.</span><span class="token function">setTranslationY</span><span class="token punctuation">(</span>translationY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> Material Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.2 Android 6.0 新特性</title>
      <link href="/2019/11/21/1.2-android-6.0-xin-te-xing/"/>
      <url>/2019/11/21/1.2-android-6.0-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-2-Android-6-0-新特性"><a href="#1-2-Android-6-0-新特性" class="headerlink" title="1.2 Android 6.0 新特性"></a>1.2 Android 6.0 新特性</h1><h2 id="1-2-2-运行时权限机制"><a href="#1-2-2-运行时权限机制" class="headerlink" title="1.2.2 运行时权限机制"></a>1.2.2 运行时权限机制</h2><h3 id="1-处理不再询问选项"><a href="#1-处理不再询问选项" class="headerlink" title="1.处理不再询问选项"></a>1.处理不再询问选项</h3><p>其实就是当你选择不再询问的时候，会弹出一个提示</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> permissions<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grantResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCode <span class="token operator">==</span> PERMISSIONS_REQUEST_CALL_PHONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>grantResults<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>PERMISSION_GRANTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">callPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当选择不再询问，shouldShowRequestPermissionRationale返回false</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ActivityCompat<span class="token punctuation">.</span><span class="token function">shouldShowRequestPermissionRationale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    AlertDialog dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"该功能需要访问电话的权限，不开启将无法正常工作！"</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token annotation punctuation">@Override</span>                                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>DialogInterface dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    dialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://s2.ax1x.com/2019/10/26/KDrqC8.png" alt="KDrqC8.png"></p><p><img src="https://s2.ax1x.com/2019/10/26/KDrxDs.png" alt="KDrxDs.png"></p><h2 id="2-PermissionsDispatcher解析"><a href="#2-PermissionsDispatcher解析" class="headerlink" title="2.PermissionsDispatcher解析"></a>2.PermissionsDispatcher解析</h2><h3 id="1-什么是PermissionsDispatcher"><a href="#1-什么是PermissionsDispatcher" class="headerlink" title="1.什么是PermissionsDispatcher"></a>1.什么是PermissionsDispatcher</h3><p>其实就是一个权限申请框架，</p><h3 id="2-怎么使用"><a href="#2-怎么使用" class="headerlink" title="2.怎么使用"></a>2.怎么使用</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><pre><code> implementation &#39;com.github.hotchemi:permissionsdispatcher:2.3.2&#39;    annotationProcessor &#39;com.github.hotchemi:permissionsdispatcher-processor:2.3.2&#39;</code></pre><h4 id="2-权限的讲解"><a href="#2-权限的讲解" class="headerlink" title="2.权限的讲解"></a>2.权限的讲解</h4><ul><li>RuntimePermissions：必需的注释，它用来注册一个 <strong>Activity</strong> 或 Fragment，使它们可以<strong>处理权限</strong>。 </li><li>NeedsPermission：必需的注释，在需要获取权限的地方注释，用来<strong>获取权限</strong>。 </li><li>OnShowRationale：提示用户为何要开启此权限。在用户选择拒绝后，<strong>再次需要访问该权限</strong>时调用。 </li><li>OnPermissionDenied：用户选择<strong>拒绝时</strong>的提示。</li><li>OnNeverAskAgain：用户选择<strong>不再询问</strong>后的提示。 </li></ul><h3 id="3-在onRequestPermissionsResult中注册一下框架"><a href="#3-在onRequestPermissionsResult中注册一下框架" class="headerlink" title="3.在onRequestPermissionsResult中注册一下框架"></a>3.在onRequestPermissionsResult中注册一下框架</h3><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> permissions<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grantResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里注意一下，要注册一下</span>        ThirdPartyActivityPermissionsDispatcher<span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-代码："><a href="#4-代码：" class="headerlink" title="4.代码："></a>4.代码：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//类的权限</span><span class="token annotation punctuation">@RuntimePermissions</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThirdPartyActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button bt_call<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_third_party<span class="token punctuation">)</span><span class="token punctuation">;</span>        bt_call <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>bt_call<span class="token punctuation">)</span><span class="token punctuation">;</span>        bt_call<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//检查权限</span>                ThirdPartyActivityPermissionsDispatcher<span class="token punctuation">.</span><span class="token function">callWithCheck</span><span class="token punctuation">(</span>ThirdPartyActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@NeedsPermission</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在需要获取权限的地方注释</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_CALL<span class="token punctuation">)</span><span class="token punctuation">;</span>        Uri data <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"tel:"</span> <span class="token operator">+</span> <span class="token string">"10086"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnShowRationale</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//提示用户为何要开启此权限</span>    <span class="token keyword">void</span> <span class="token function">showWhy</span><span class="token punctuation">(</span><span class="token keyword">final</span> PermissionRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"提示用户为何要开启此权限"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"知道了"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>DialogInterface dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        request<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再次执行权限请求</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnPermissionDenied</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用户选择拒绝时的提示</span>    <span class="token keyword">void</span> <span class="token function">showDenied</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"用户选择拒绝时的提示"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnNeverAskAgain</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CALL_PHONE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用户选择不再询问后的提示</span>    <span class="token keyword">void</span> <span class="token function">showNotAsk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"该功能需要访问电话的权限，不开启将无法正常工作！"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>DialogInterface dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> permissions<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grantResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里注意一下，要注册一下</span>        ThirdPartyActivityPermissionsDispatcher<span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-注意注意：需要先在AndoirdManifest中注册权限"><a href="#5-注意注意：需要先在AndoirdManifest中注册权限" class="headerlink" title="5.注意注意：需要先在AndoirdManifest中注册权限"></a>5.注意注意：需要先在AndoirdManifest中注册权限</h4>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> Android新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1 安卓5.0新特性</title>
      <link href="/2019/11/21/1.1-an-zhuo-5.0-xin-te-xing/"/>
      <url>/2019/11/21/1.1-an-zhuo-5.0-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-安卓5-0新特性"><a href="#1-1-安卓5-0新特性" class="headerlink" title="1.1 安卓5.0新特性"></a>1.1 安卓5.0新特性</h1><h2 id="1-1-1-Android-5-0-主要新特性"><a href="#1-1-1-Android-5-0-主要新特性" class="headerlink" title="1.1.1 Android 5.0 主要新特性"></a>1.1.1 Android 5.0 主要新特性</h2><p><strong>1. 全新的 Material Design 新风格</strong></p><p><strong>2. 支持多种设备</strong></p><p><strong>3. 全新的通知中心设计</strong></p><p><strong>4. 支持 64 位 ART 虚拟机（ART:Android runtime）</strong></p><p><strong>5. Overview</strong>（多任务，就是关后台程序的那个，小米手机上拉）</p><p><strong>6. 设备识别解锁</strong></p><p><strong>7. Ok Google 语音指令</strong>（语音助手）</p><p><strong>8. Face unlock 面部解锁</strong></p><h2 id="1-1-2-替换-ListView-和-GridView-的-RecyclerView"><a href="#1-1-2-替换-ListView-和-GridView-的-RecyclerView" class="headerlink" title="1.1.2 替换 ListView 和 GridView 的 RecyclerView"></a>1.1.2 替换 ListView 和 GridView 的 RecyclerView</h2><blockquote><p>有什么优点？</p><p>具有高度的解耦、异常的灵活性和更高的效率，通过设置它提供的不同 LayoutManager、ItemDecoration、ItemAnimator 可实现更加丰富多样的效果</p><p>缺点：</p><p>分割线需要自定义，另外列表的点击事件需要自己去实现。</p></blockquote><h3 id="1-设置分割线"><a href="#1-设置分割线" class="headerlink" title="1.设置分割线"></a>1.设置分割线</h3><p>现在谷歌有提供默认的分割线</p><pre class=" language-java"><code class="language-java">  recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DividerItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>DividerItemDecoration<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果是网格布局的话，横着，竖着都画</p><h3 id="2-自定义分割线"><a href="#2-自定义分割线" class="headerlink" title="2.自定义分割线"></a>2.自定义分割线</h3><p>利用setDrawable方法</p><p>首先编写1个样式</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rectangle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;gradient        android:centerColor="#ff00ff00" //绿色        android:endColor="#ff0000ff"    //蓝色        android:startColor="#ffff0000"  //红色        android:type="linear" />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span> <span class="token attr-name"><span class="token namespace">android:</span>height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span></code></pre><p>然后</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//添加自定义分割线</span>  DividerItemDecoration divider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DividerItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>DividerItemDecoration<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>；                           divider<span class="token punctuation">.</span><span class="token function">setDrawable</span><span class="token punctuation">(</span>ContextCompat<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>custom_divider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span>divider<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者用代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Moon on 2015/11/21. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DividerItemDecoration</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ItemDecoration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ATTRS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>listDivider    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HORIZONTAL_LIST <span class="token operator">=</span> LinearLayoutManager<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> VERTICAL_LIST <span class="token operator">=</span> LinearLayoutManager<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">;</span>    <span class="token keyword">private</span> Drawable mDivider<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mOrientation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DividerItemDecoration</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token keyword">int</span> orientation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> TypedArray a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>ATTRS<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDivider <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setOrientation</span><span class="token punctuation">(</span>orientation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrientation</span><span class="token punctuation">(</span><span class="token keyword">int</span> orientation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orientation <span class="token operator">!=</span> HORIZONTAL_LIST <span class="token operator">&amp;&amp;</span> orientation <span class="token operator">!=</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"invalid orientation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mOrientation <span class="token operator">=</span> orientation<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientation <span class="token operator">==</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">drawVertical</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">drawHorizontal</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawVertical</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> left <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> right <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> View child <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> <span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> child                    <span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> top <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>bottomMargin<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> bottom <span class="token operator">=</span> top <span class="token operator">+</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawHorizontal</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> top <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> bottom <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> View child <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> <span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> child                    <span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> left <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>rightMargin<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> right <span class="token operator">=</span> left <span class="token operator">+</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getItemOffsets</span><span class="token punctuation">(</span>Rect outRect<span class="token punctuation">,</span> <span class="token keyword">int</span> itemPosition<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientation <span class="token operator">==</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            outRect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            outRect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-自定义点击事件"><a href="#3-自定义点击事件" class="headerlink" title="3.自定义点击事件"></a>3.自定义点击事件</h3><ol><li>定义接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnItemClickListener</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.这里写的为了调用方法，用到上面的接口回调</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span>OnItemClickListener mOnItemClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mOnItemClickListener <span class="token operator">=</span> mOnItemClickListener<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.在onCreateViewHolder里面设置</p><pre class=" language-java"><code class="language-java"> view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//点击事件</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//回调</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//长按事件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//回调</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.在activity中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setLister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mHomeAdaper<span class="token punctuation">.</span><span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HomeAdapter<span class="token punctuation">.</span>OnItemClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>RecyclerViewActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"点击第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>RecyclerViewActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"确认删除吗？"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string">"取消"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>DialogInterface dialogInterface<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                mHomeAdaper<span class="token punctuation">.</span><span class="token function">removeData</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>5.总的代码Adapter</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>liuwangshu<span class="token punctuation">.</span>myrecyclerview<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>LayoutInflater<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>FrameLayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by Moon on 2015/11/21. */</span><span class="token keyword">class</span> <span class="token class-name">HomeAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token operator">&lt;</span>HomeAdapter<span class="token punctuation">.</span>MyViewHolder<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">,</span>View<span class="token punctuation">.</span>OnLongClickListener<span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> mList<span class="token punctuation">;</span>    <span class="token keyword">private</span> Context mContext<span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> OnItemClickListener mOnItemClickListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HomeAdapter</span><span class="token punctuation">(</span>Context mContext<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span>mList<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mContext<span class="token operator">=</span>mContext<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mList<span class="token operator">=</span>mList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnItemClickListener</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span>OnItemClickListener mOnItemClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mOnItemClickListener <span class="token operator">=</span> mOnItemClickListener<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeData</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//动态效果</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MyViewHolder <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>ViewGroup parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        View view<span class="token operator">=</span>LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>                mContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_recycler<span class="token punctuation">,</span> parent<span class="token punctuation">,</span>                <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyViewHolder holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyViewHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> holder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token keyword">final</span> MyViewHolder holder<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> mList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">MyViewHolder</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span>    <span class="token punctuation">{</span>        TextView tv<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyViewHolder</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>            tv <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-1-4-3种通知"><a href="#1-1-4-3种通知" class="headerlink" title="1.1.4 3种通知"></a>1.1.4 3种通知</h2><h3 id="1-普通通知"><a href="#1-普通通知" class="headerlink" title="1.普通通知"></a>1.普通通知</h3><p><img src="https://i.loli.net/2019/10/10/qyiDrenEUch7A1t.jpg" alt></p><p>就是显示在那个状态栏的通知</p><h3 id="2-折叠式"><a href="#2-折叠式" class="headerlink" title="2.折叠式"></a>2.折叠式</h3><p>它有两种状态，一种是<strong>普通状态</strong>下的视图（如果不是自定义的话和上面普通通知的视图样式一样），一种是<strong>展开状态</strong>下的视图。</p><p> 自定义的视图，而这个视图显示的进程和我们创建视图的进程不再一个进程，所以我们需要使用RemoteViews，首先要使用RemoteViews来创建我们的自定义视图:</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//用RemoteViews来创建自定义Notification视图</span>RemoteViews remoteViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteViews</span><span class="token punctuation">(</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_fold<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>1.展开后的视图的布局文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/fold<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_image<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/fold<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_text<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>展开后的自定义视图<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorPrimaryDark<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>2.指定展开的视图</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定展开时的视图</span>notification<span class="token punctuation">.</span>bigContentView <span class="token operator">=</span> remoteViews<span class="token punctuation">;</span></code></pre><p>3.总的代码</p><pre class=" language-java"><code class="language-java">        Notification<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Intent mIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">,</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://blog.csdn.net/itachi85/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PendingIntent pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mIntent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setContentIntent</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>foldleft<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setLargeIcon</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>lanucher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setAutoCancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">"折叠式通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用RemoteViews来创建自定义Notification视图</span>        RemoteViews remoteViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteViews</span><span class="token punctuation">(</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_fold<span class="token punctuation">)</span><span class="token punctuation">;</span>        Notification notification <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定展开时的视图</span>        notification<span class="token punctuation">.</span>bigContentView <span class="token operator">=</span> remoteViews<span class="token punctuation">;</span>        notificationManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.界面展示</p><p><img src="https://i.loli.net/2019/10/10/MH24lmvzAUGiafL.jpg" alt></p><p><img src="https://i.loli.net/2019/10/10/dkVYmfyvABLgjKr.jpg" alt></p><h3 id="3-悬挂式"><a href="#3-悬挂式" class="headerlink" title="3.悬挂式"></a>3.悬挂式</h3><p>就是不需要下拉状态栏就行了</p><p><img src="https://i.loli.net/2019/10/10/VKYW8LRlDdj3ytb.jpg" alt></p><p>1.不同的是，需要用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果描述的PendingIntent已经存在，则在产生新的Intent之前会先取消掉当前的</span>        PendingIntent hangPendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hangIntent<span class="token punctuation">,</span> PendingIntent<span class="token punctuation">.</span>FLAG_CANCEL_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里需要设置setFullScreenIntent而不是setContentIntent</span>        builder<span class="token punctuation">.</span><span class="token function">setFullScreenIntent</span><span class="token punctuation">(</span>hangPendingIntent<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="1-1-5-ToolBar和Palette"><a href="#1-1-5-ToolBar和Palette" class="headerlink" title="1.1.5 ToolBar和Palette"></a>1.1.5 ToolBar和Palette</h2><h3 id="1-怎么在ToolBar中的按钮中指定控件呢"><a href="#1-怎么在ToolBar中的按钮中指定控件呢" class="headerlink" title="1.怎么在ToolBar中的按钮中指定控件呢"></a>1.怎么在ToolBar中的按钮中指定控件呢</h3><p>其实就是在menu中的item里面</p><p>app:actionViewClass=”控件”就行了</p><h2 id="2-Palette的应用"><a href="#2-Palette的应用" class="headerlink" title="2.Palette的应用"></a>2.Palette的应用</h2><blockquote><p>这个是什么，其实就是得到图片的色调的</p></blockquote><p>怎么使用？</p><p>1.导入包</p><pre><code>‘com.android.support:palette-v7:23.0.1</code></pre><p>2.先获取图片的Bitmap</p><pre class=" language-java"><code class="language-java">        Bitmap bitmap<span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.然后在Palette的回调中获取色调</p><pre class=" language-java"><code class="language-java"> Palette<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Palette<span class="token punctuation">.</span>PaletteAsyncListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGenerated</span><span class="token punctuation">(</span>Palette palette<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Palette<span class="token punctuation">.</span>Swatch swatch<span class="token operator">=</span>palette<span class="token punctuation">.</span><span class="token function">getVibrantSwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//得到他的rgb色</span>                <span class="token function">getSupportActionBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorDrawable</span><span class="token punctuation">(</span>swatch<span class="token punctuation">.</span><span class="token function">getRgb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.内置提取颜色的种类</p><ul><li>Vibrant 充满活力的</li><li>Vibrant dark充满活力的黑</li><li>Vibrant light 充满活力的亮</li><li>Muted 柔和</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> Android新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.7 平衡二叉树</title>
      <link href="/2019/11/21/8.7-ping-heng-er-cha-shu/"/>
      <url>/2019/11/21/8.7-ping-heng-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="8-7-平衡二叉树"><a href="#8-7-平衡二叉树" class="headerlink" title="8.7 平衡二叉树"></a>8.7 平衡二叉树</h1><blockquote><p>二叉排序树如果不平衡的话，效率会高吗？当然不会</p></blockquote><h2 id="什么是平衡二叉树？"><a href="#什么是平衡二叉树？" class="headerlink" title="什么是平衡二叉树？"></a>什么是平衡二叉树？</h2><p>是一种<strong>二叉排序树</strong>，当中每个节点的<strong>左子树和右子树的高度差至多等于1</strong>.</p><h2 id="什么是平衡因子BF？"><a href="#什么是平衡因子BF？" class="headerlink" title="什么是平衡因子BF？"></a>什么是平衡因子BF？</h2><p>二叉树上节点的<strong>左子树深度减去右子树深度</strong>的值</p><h2 id="什么是最小不平衡树呢？"><a href="#什么是最小不平衡树呢？" class="headerlink" title="什么是最小不平衡树呢？"></a>什么是最小不平衡树呢？</h2><p>距离<strong>插入节点</strong>最<strong>近</strong>的。且<strong>平衡因子的绝对值大于1</strong>的节点为根的子树。<br>下图中，新插入节点37时。距离它近期的平衡因子绝对值超过1的节点是58。所以从58开始下面的子树为最小不平衡子树。</p><p><img src="https://s2.ax1x.com/2019/11/15/Ma25KP.png" alt="Ma25KP.png"></p><h2 id="8-7-1-实现原理"><a href="#8-7-1-实现原理" class="headerlink" title="8.7.1 实现原理"></a>8.7.1 实现原理</h2><h3 id="1-什么是左旋，右旋，双旋"><a href="#1-什么是左旋，右旋，双旋" class="headerlink" title="1.什么是左旋，右旋，双旋"></a>1.什么是左旋，右旋，双旋</h3><p>原理：其实就是利用左旋，右旋，双旋，进行二叉树的调整，</p><p>当BF&gt;1就右旋，反之左旋</p><p>什么是<strong>左旋</strong>？</p><p>其实就是将要旋转的结点B，<strong>左孩子A与它断开</strong>，然后旋转后，A再接到旋转后的B的左孩子下面，作为B的左孩子的右孩子</p><p>同理右旋</p><p><strong>双旋</strong>分为<strong>先左后右双旋转</strong>和<strong>先右后左双旋转</strong>，具体情况具体分析，下面的例子是先左后右双旋转的</p><p> <img src="https://img-blog.csdnimg.cn/20190505172528631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODcwMzM2Ng==,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"> </p><p> <img src="https://img-blog.csdnimg.cn/20190505172601987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODcwMzM2Ng==,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"> </p><h2 id="8-7-2-平衡二叉树的实现算法"><a href="#8-7-2-平衡二叉树的实现算法" class="headerlink" title="8.7.2 平衡二叉树的实现算法"></a>8.7.2 平衡二叉树的实现算法</h2><h3 id="1-平衡二叉树的结构"><a href="#1-平衡二叉树的结构" class="headerlink" title="1.平衡二叉树的结构"></a>1.平衡二叉树的结构</h3><p>其实就是相对于二叉排序树来说<strong>多了个平衡因子</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span>  <span class="token keyword">struct</span> BiTNode <span class="token comment" spellcheck="true">/* 结点结构 */</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 结点数据 */</span>    <span class="token keyword">int</span> bf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  结点的平衡因子 */</span>     <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 左右孩子指针 */</span><span class="token punctuation">}</span> BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span></code></pre><h3 id="2-右旋操作"><a href="#2-右旋操作" class="headerlink" title="2.右旋操作"></a>2.右旋操作</h3><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* 对以p为根的二叉排序树作右旋处理。 */</span><span class="token comment" spellcheck="true">/* 处理之后p指向新的树根结点。即旋转处理之前的左子树的根结点 */</span><span class="token keyword">void</span> <span class="token function">R_Rotate</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">{</span>     BiTree L<span class="token punctuation">;</span>    L<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*L指向P的左子树根结点 */</span>     <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token operator">=</span>L<span class="token operator">-></span>rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*L的右子树挂接为P的左子树 */</span>     L<span class="token operator">-></span>rchild<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>P<span class="token operator">=</span>L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*P指向新的根结点 */</span> <span class="token punctuation">}</span></code></pre><p><img src="https://s2.ax1x.com/2019/11/15/Ma2O8s.png" alt="Ma2O8s.png"></p><p>左旋操作类似，所以不写出来了</p><h3 id="3-左平衡旋转代码"><a href="#3-左平衡旋转代码" class="headerlink" title="3.左平衡旋转代码"></a>3.左平衡旋转代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> LH +1 </span><span class="token comment" spellcheck="true">/*  左高 */</span> <span class="token macro property">#<span class="token directive keyword">define</span> EH 0  </span><span class="token comment" spellcheck="true">/*  等高 */</span> <span class="token macro property">#<span class="token directive keyword">define</span> RH -1 </span><span class="token comment" spellcheck="true">/*  右高 */</span> <span class="token comment" spellcheck="true">/*  对以指针T所指结点为根的二叉树作左平衡旋转处理 */</span><span class="token comment" spellcheck="true">/*  本算法结束时，指针T指向新的根结点*/</span><span class="token keyword">void</span> <span class="token function">LeftBalance</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>     BiTree L<span class="token punctuation">,</span>Lr<span class="token punctuation">;</span>    L<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  L指向T的左子树根结点 */</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>L<span class="token operator">-></span>bf<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  检查T的左子树的平衡度，并作对应平衡处理 */</span>          <span class="token keyword">case</span> LH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  新结点插入在T的左孩子的左子树上。要作单右旋处理 */</span>             <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>L<span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>            <span class="token function">R_Rotate</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> RH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  新结点插入在T的左孩子的右子树上。要作双旋处理 */</span>             Lr<span class="token operator">=</span>L<span class="token operator">-></span>rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  Lr指向T的左孩子的右子树根 */</span>             <span class="token keyword">switch</span><span class="token punctuation">(</span>Lr<span class="token operator">-></span>bf<span class="token punctuation">)</span>            <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  改动T及其左孩子的平衡因子 */</span>                 <span class="token keyword">case</span> LH<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>RH<span class="token punctuation">;</span>                         L<span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>                         <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> EH<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>L<span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>                         <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> RH<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>                         L<span class="token operator">-></span>bf<span class="token operator">=</span>LH<span class="token punctuation">;</span>                         <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Lr<span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>            <span class="token function">L_Rotate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  对T的左子树作左旋平衡处理 */</span>             <span class="token function">R_Rotate</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  对T作右旋平衡处理 */</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-主函数代码"><a href="#4-主函数代码" class="headerlink" title="4.主函数代码"></a>4.主函数代码</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*  若在平衡的二叉排序树T中不存在和e有同样关键字的结点，则插入一个 */</span> <span class="token comment" spellcheck="true">/*  数据元素为e的新结点。并返回1，否则返回0。若因插入而使二叉排序树 */</span> <span class="token comment" spellcheck="true">/*  失去平衡，则作平衡旋转处理。布尔变量taller反映T长高与否。 */</span>Status <span class="token function">InsertAVL</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">,</span>Status <span class="token operator">*</span>taller<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>T<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  插入新结点。树“长高”，置taller为TRUE */</span>          <span class="token operator">*</span>T<span class="token operator">=</span><span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span>         <span class="token operator">*</span>taller<span class="token operator">=</span>TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">==</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  树中已存在和e有同样关键字的结点则不再插入 */</span>             <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  应继续在T的左子树中进行搜索 */</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">InsertAVL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">,</span>e<span class="token punctuation">,</span>taller<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  未插入 */</span>                 <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>taller<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*   已插入到T的左子树中且左子树“长高” */</span>                 <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  检查T的平衡度 */</span>                 <span class="token punctuation">{</span>                    <span class="token keyword">case</span> LH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本左子树比右子树高。须要作左平衡处理 */</span>                             <span class="token function">LeftBalance</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> EH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本左、右子树等高，现因左子树增高而使树增高 */</span>                             <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>LH<span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>TRUE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> RH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本右子树比左子树高，现左、右子树等高 */</span>                              <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  应继续在T的右子树中进行搜索 */</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">InsertAVL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">,</span>e<span class="token punctuation">,</span>taller<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  未插入 */</span>                 <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>taller<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  已插入到T的右子树且右子树“长高” */</span>                 <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  检查T的平衡度 */</span>                 <span class="token punctuation">{</span>                    <span class="token keyword">case</span> LH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本左子树比右子树高。现左、右子树等高 */</span>                             <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>EH<span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> EH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本左、右子树等高，现因右子树增高而使树增高  */</span>                            <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>bf<span class="token operator">=</span>RH<span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>TRUE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> RH<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/*  原本右子树比左子树高，须要作右平衡处理 */</span>                             <span class="token function">RightBalance</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>taller<span class="token operator">=</span>FALSE<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.2 设计模式分类</title>
      <link href="/2019/11/16/6.2-she-ji-mo-shi-fen-lei/"/>
      <url>/2019/11/16/6.2-she-ji-mo-shi-fen-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="6-2-设计模式分类"><a href="#6-2-设计模式分类" class="headerlink" title="6.2 设计模式分类"></a>6.2 设计模式分类</h1><h2 id="1-创建型"><a href="#1-创建型" class="headerlink" title="1.创建型"></a>1.创建型</h2><p>单例模式、工厂方法模式、抽象工厂模式、建造者模式、原型模式。 </p><h2 id="2-结构型"><a href="#2-结构型" class="headerlink" title="2.结构型"></a>2.结构型</h2><p>适配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><h2 id="3-行为型"><a href="#3-行为型" class="headerlink" title="3.行为型"></a>3.行为型</h2><p>策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.6 二叉排序树</title>
      <link href="/2019/10/29/8.6-er-cha-pai-xu-shu/"/>
      <url>/2019/10/29/8.6-er-cha-pai-xu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="8-6-二叉排序树"><a href="#8-6-二叉排序树" class="headerlink" title="8.6 二叉排序树"></a>8.6 二叉排序树</h1><blockquote><p>在前面我们了解了动态查找表（在查找的时候进行插入和删除的查找表），那什么结构可以实现动态查找表呢？</p></blockquote><h2 id="什么是二叉排序树？"><a href="#什么是二叉排序树？" class="headerlink" title="什么是二叉排序树？"></a>什么是二叉排序树？</h2><p>二叉排序树(Binary Sort Tree)，又称二叉查找树。它或者是一颗空树，或者是具有下列性质的二叉树。</p><ul><li>若它的左子树不空，则<strong>左子树</strong>上所有节点的值都<strong>小于它的根节点</strong>的值；</li><li>若它的右子树不空，则<strong>右子树</strong>上所有节点的值都<strong>大于它的根节点</strong>的值；</li><li>它的左、右子树也分别为二叉排序树。</li></ul><p>简而言之，就是左边孩子小，右边孩子大</p><h2 id="8-6-1-二叉排序树查找操作"><a href="#8-6-1-二叉排序树查找操作" class="headerlink" title="8.6.1 二叉排序树查找操作"></a>8.6.1 二叉排序树查找操作</h2><p>递归查找是否存在key；</p><h3 id="1-二叉树的结构"><a href="#1-二叉树的结构" class="headerlink" title="1.二叉树的结构"></a>1.二叉树的结构</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 二叉树的二叉链表结点结构定义 */</span><span class="token keyword">typedef</span>  <span class="token keyword">struct</span> BiTNode <span class="token comment" spellcheck="true">/* 结点结构 */</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 结点数据 */</span>    <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 左右孩子指针 */</span><span class="token punctuation">}</span> BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span></code></pre><h3 id="2-代码："><a href="#2-代码：" class="headerlink" title="2.代码："></a>2.代码：</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 递归查找二叉排序树T中是否存在key, */</span><span class="token comment" spellcheck="true">/* 指针f指向T的双亲，其初始调用值为NULL */</span><span class="token comment" spellcheck="true">/* 若查找成功，则指针p指向该数据元素结点，并返回TRUE */</span><span class="token comment" spellcheck="true">/* 否则指针p指向查找路径上访问的最后一个结点并返回FALSE */</span>Status <span class="token function">SearchBST</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> BiTree f<span class="token punctuation">,</span> BiTree <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  查找不成功 */</span>    <span class="token comment" spellcheck="true">//判断是否是叶子</span>    <span class="token punctuation">{</span>         <span class="token operator">*</span>p <span class="token operator">=</span> f<span class="token punctuation">;</span>          <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*  查找成功 */</span>     <span class="token punctuation">{</span>         <span class="token operator">*</span>p <span class="token operator">=</span> T<span class="token punctuation">;</span>          <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">&lt;</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">,</span> key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  在左子树中继续查找 */</span>    <span class="token keyword">else</span>          <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">,</span> key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  在右子树中继续查找 */</span><span class="token punctuation">}</span></code></pre><h2 id="8-6-2-插入操作"><a href="#8-6-2-插入操作" class="headerlink" title="8.6.2 插入操作"></a>8.6.2 插入操作</h2><h3 id="1-代码："><a href="#1-代码：" class="headerlink" title="1.代码："></a>1.代码：</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*  当二叉排序树T中不存在关键字等于key的数据元素时， */</span><span class="token comment" spellcheck="true">/*  插入key并返回TRUE，否则返回FALSE */</span>Status <span class="token function">InsertBST</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      BiTree p<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">SearchBST</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/* 查找不成功，p是查到的最后一个结点 */</span>    <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> key<span class="token punctuation">;</span>          s<span class="token operator">-></span>lchild <span class="token operator">=</span> s<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>             <span class="token operator">*</span>T <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*  插入s为新的根结点 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">&lt;</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span>             p<span class="token operator">-></span>lchild <span class="token operator">=</span> s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  插入s为左孩子 */</span>        <span class="token keyword">else</span>             p<span class="token operator">-></span>rchild <span class="token operator">=</span> s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  插入s为右孩子 */</span>        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span>         <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  树中已有关键字相同的结点，不再插入 */</span><span class="token punctuation">}</span></code></pre><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="8-6-3-二叉排序树删除操作"><a href="#8-6-3-二叉排序树删除操作" class="headerlink" title="8.6.3 二叉排序树删除操作"></a>8.6.3 二叉排序树删除操作</h2><h3 id="1-叶子结点的删除"><a href="#1-叶子结点的删除" class="headerlink" title="1.叶子结点的删除"></a>1.叶子结点的删除</h3><p>直接删除，不影响原树；</p><p><img src="https://img-blog.csdn.net/20150609175928707" alt="è¿éåå°"></p><h3 id="2-只有左或右子树的节点的删除："><a href="#2-只有左或右子树的节点的删除：" class="headerlink" title="2.只有左或右子树的节点的删除："></a>2.只有左或右子树的节点的删除：</h3><p>节点删除后，将它的左子树或右子树整个移动到删除节点的位置即可，子承父业；</p><p><img src="https://img-blog.csdn.net/20150609180000500" alt="è¿éåå¾çæè¿°"></p><h3 id="3-既有左又有右子树的节点的删除："><a href="#3-既有左又有右子树的节点的删除：" class="headerlink" title="3.既有左又有右子树的节点的删除："></a>3.既有左又有右子树的节点的删除：</h3><p>找到需要删除的节点p的<strong>直接前驱</strong>或者直接后继<strong>s</strong>，用s来<strong>替换节点p</strong>，然后<strong>再删除节点s</strong>。</p><p><img src="https://img-blog.csdn.net/20150609180012387" alt="è¿éåå¾çæè¿°"></p><h3 id="4-代码："><a href="#4-代码：" class="headerlink" title="4.代码："></a>4.代码：</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 若二叉排序树T中存在关键字等于key的数据元素时，则删除该数据元素结点, */</span><span class="token comment" spellcheck="true">/* 并返回TRUE；否则返回FALSE*/</span>Status <span class="token function">DeleteBST</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 不存在关键字等于key的数据元素 */</span>         <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* 找到关键字等于key的数据元素 */</span> <span class="token comment" spellcheck="true">//找到要删除的地方</span>            <span class="token keyword">return</span> <span class="token function">Delete</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">DeleteBST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">DeleteBST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 从二叉排序树中删除结点p，并重接它的左或右子树。 */</span>Status <span class="token function">Delete</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiTree q<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 右子树空则只需重接它的左子树（待删结点是叶子也走此分支) */</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 只需重接它的右子树 */</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token comment" spellcheck="true">/* 左右子树均不空 */</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span> s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">-></span>rchild<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 转左，然后向右到尽头（找待删结点的前驱） */</span>        <span class="token punctuation">{</span>            q<span class="token operator">=</span>s<span class="token punctuation">;</span>            s<span class="token operator">=</span>s<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token operator">=</span>s<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  s指向被删结点的直接前驱（将被删结点前驱的值取代被删结点的值） */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token operator">*</span>p<span class="token punctuation">)</span>            q<span class="token operator">-></span>rchild<span class="token operator">=</span>s<span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  重接q的右子树 */</span>         <span class="token keyword">else</span>            q<span class="token operator">-></span>lchild<span class="token operator">=</span>s<span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  重接q的左子树 */</span>        <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="8-6-4-总结"><a href="#8-6-4-总结" class="headerlink" title="8.6.4 总结"></a>8.6.4 总结</h2><h3 id="1-时间复杂度是多少？"><a href="#1-时间复杂度是多少？" class="headerlink" title="1.时间复杂度是多少？"></a>1.时间复杂度是多少？</h3><p>当二叉排序树是比较平衡的时候，时间复杂度是O（logn），类似于折半查找，当不够平衡的时候，时间复杂度是O（n）</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.7 堆排序</title>
      <link href="/2019/10/29/9.7-dui-pai-xu/"/>
      <url>/2019/10/29/9.7-dui-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="9-7-堆排序"><a href="#9-7-堆排序" class="headerlink" title="9.7 堆排序"></a>9.7 堆排序</h1><blockquote><p>我们前面学过简单选择排序，那么这里的堆排序和简单选择排序有什么关系呢？</p></blockquote><h2 id="堆是什么？"><a href="#堆是什么？" class="headerlink" title="堆是什么？"></a>堆是什么？</h2><p>堆是具有下列性质的<strong>完全二叉树</strong>：每个<strong>结点</strong>的值都<strong>大于或等于其左右孩子</strong>结点的值，称为<strong>大顶堆</strong>（例如图9-7-2左图）；或者每个结点的值都<strong>小于或等于其左右孩子</strong>结点的值，称为<strong>小顶堆</strong>（例如图9-7-2右图）</p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-02.jpg" alt="img"></p><h2 id="简单选择排序的缺点是什么？"><a href="#简单选择排序的缺点是什么？" class="headerlink" title="简单选择排序的缺点是什么？"></a>简单选择排序的缺点是什么？</h2><p>简单选择排序没有将每一趟比较结果保存下来，以至于在后面的比较中有与前面的重复的比较的现象。</p><h2 id="9-7-1-堆排序算法"><a href="#9-7-1-堆排序算法" class="headerlink" title="9.7.1 堆排序算法"></a>9.7.1 堆排序算法</h2><h3 id="1-堆排序是什么"><a href="#1-堆排序是什么" class="headerlink" title="1.堆排序是什么"></a>1.堆排序是什么</h3><p>堆排序（Heap Sort）就是利用堆（假设利用<strong>大顶堆</strong>）进行<strong>排序</strong>的方法</p><p>核心思想是：先将待排序的序列构造成一个<strong>大顶堆</strong>，然后将<strong>根节点移走</strong>，接着将<strong>剩余的n-1个序列</strong>重新构造成<strong>大顶堆</strong>，如此<strong>反复执行</strong>，便能得到一个有序序列了。</p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-04.jpg" alt="img"></p><h3 id="2-堆排序的代码："><a href="#2-堆排序的代码：" class="headerlink" title="2.堆排序的代码："></a>2.堆排序的代码：</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L进行堆排序 */</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 把L中的r构建成一个大顶堆 */</span>   <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*将堆顶记录和当前未经排序子序列的最后一个记录交换*/</span>   <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 将L->r[1..i-1]重新调整为大顶堆 */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在构建大顶堆的时候，为什么是<strong>i=L-&gt;length/2？</strong></p><p>因为<strong>i</strong>这时候是<strong>有孩子</strong>的结点</p><h3 id="3-HeapAdjust（堆调整）的代码是怎样的？"><a href="#3-HeapAdjust（堆调整）的代码是怎样的？" class="headerlink" title="3.HeapAdjust（堆调整）的代码是怎样的？"></a>3.HeapAdjust（堆调整）的代码是怎样的？</h3><pre class=" language-C"><code class="language-C">/* 已知L->r[s..m]中记录的关键字除L->r[s]之外均满足堆的定义， *//* 本函数调整L->r[s]的关键字,使L->r[s..m]成为一个大顶堆 */  //这里s是当前结点序号，m是长度void HeapAdjust(SqList *L,int s,int m){  int temp,j; temp=L->r[s]; for(j=2*s;j<=m;j*=2)  /* 沿关键字较大的孩子结点向下筛选 */ {  if(j<m && L->r[j]<L->r[j+1])   ++j;   /* j为关键字中较大的记录的下标 */  if(temp>=L->r[j])   break;   /* rc应插入在位置s上 */  L->r[s]=L->r[j];  s=j; } L->r[s]=temp;   /* 插入 */}</code></pre><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-07.jpg" alt="img"></p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-08.jpg" alt="img"></p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-09.jpg" alt="img"></p><h3 id="4-堆调整后，怎么办？"><a href="#4-堆调整后，怎么办？" class="headerlink" title="4.堆调整后，怎么办？"></a>4.堆调整后，怎么办？</h3><pre class=" language-c"><code class="language-c"> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 将堆顶记录和当前未经排序子序列的最后一个记录交换 */</span>   <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 将L->r[1..i-1]重新调整为大顶堆 */</span> <span class="token punctuation">}</span></code></pre><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-10.jpg" alt="img"></p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-11.jpg" alt="img"></p><p><img src="https://images.cnblogs.com/cnblogs_com/cj723/dasu/9-7-12.jpg" alt="img"></p><p>堆排序的<strong>核心思想</strong>就是：<strong>从下往上找大的，大的放在前面</strong></p><h2 id="9-7-2-堆排序复杂度分析"><a href="#9-7-2-堆排序复杂度分析" class="headerlink" title="9.7.2 堆排序复杂度分析"></a>9.7.2 堆排序复杂度分析</h2><p>时间复杂度为O（nlogn）</p><p>不稳定的，不适合个数较少的情况</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.3 Android 7.0新特性</title>
      <link href="/2019/10/29/1.3-android-7.0-xin-te-xing/"/>
      <url>/2019/10/29/1.3-android-7.0-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-3-Android-7-0新特性"><a href="#1-3-Android-7-0新特性" class="headerlink" title="1.3 Android 7.0新特性"></a>1.3 Android 7.0新特性</h1><h2 id="1-3-2-多窗口模式"><a href="#1-3-2-多窗口模式" class="headerlink" title="1.3.2 多窗口模式"></a>1.3.2 多窗口模式</h2><h3 id="1-多窗口模式的生命周期是怎样的？"><a href="#1-多窗口模式的生命周期是怎样的？" class="headerlink" title="1.多窗口模式的生命周期是怎样的？"></a>1.多窗口模式的生命周期是怎样的？</h3><h4 id="1-当进入多窗口模式的时候"><a href="#1-当进入多窗口模式的时候" class="headerlink" title="1.当进入多窗口模式的时候"></a>1.当进入多窗口模式的时候</h4><ul><li><p>onPause </p></li><li><p>onStop </p></li><li><p>onDestroy </p></li><li><p>onCreate </p></li><li><p>onStart </p></li><li><p>onResume </p></li><li><p>onPause </p><p>先停止销毁后重建，最后停留在pause</p></li></ul><h4 id="2-当退出多窗口模式的时候"><a href="#2-当退出多窗口模式的时候" class="headerlink" title="2.当退出多窗口模式的时候"></a>2.当退出多窗口模式的时候</h4><ul><li><p>onStop </p></li><li><p>onDestroy </p></li><li><p>onCreate </p></li><li><p>onStart </p></li><li><p>onResume </p></li><li><p>onPause </p></li><li><p>onResume </p><p>先销毁后重建，最后停在onResume </p></li></ul><h3 id="3-怎么禁用多窗口模式"><a href="#3-怎么禁用多窗口模式" class="headerlink" title="3.怎么禁用多窗口模式"></a>3.怎么禁用多窗口模式</h3><h4 id="1-当targetSdkVersion-gt-24时"><a href="#1-当targetSdkVersion-gt-24时" class="headerlink" title="1.当targetSdkVersion&gt;=24时"></a>1.当targetSdkVersion&gt;=24时</h4><p><img src="https://s2.ax1x.com/2019/10/26/KDclGV.png" alt="KDclGV.png"></p><h4 id="2-当targetSdkVersion-lt-24"><a href="#2-当targetSdkVersion-lt-24" class="headerlink" title="2.当targetSdkVersion&lt;24"></a>2.当targetSdkVersion&lt;24</h4><p>禁止横竖屏转化</p><p><img src="https://s2.ax1x.com/2019/10/26/KDc0G6.png" alt="KDc0G6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓进阶之光 </tag>
            
            <tag> Android新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/10/26/jin-jie-zhi-guang-1.1-an-zhuo-5.0-xin-te-xing/"/>
      <url>/2019/10/26/jin-jie-zhi-guang-1.1-an-zhuo-5.0-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-安卓5-0新特性"><a href="#1-1-安卓5-0新特性" class="headerlink" title="1.1 安卓5.0新特性"></a>1.1 安卓5.0新特性</h1><h2 id="1-1-1-Android-5-0-主要新特性"><a href="#1-1-1-Android-5-0-主要新特性" class="headerlink" title="1.1.1 Android 5.0 主要新特性"></a>1.1.1 Android 5.0 主要新特性</h2><p><strong>1. 全新的 Material Design 新风格</strong></p><p><strong>2. 支持多种设备</strong></p><p><strong>3. 全新的通知中心设计</strong></p><p><strong>4. 支持 64 位 ART 虚拟机（ART:Android runtime）</strong></p><p><strong>5. Overview</strong>（多任务，就是关后台程序的那个，小米手机上拉）</p><p><strong>6. 设备识别解锁</strong></p><p><strong>7. Ok Google 语音指令</strong>（语音助手）</p><p><strong>8. Face unlock 面部解锁</strong></p><h2 id="1-1-2-替换-ListView-和-GridView-的-RecyclerView"><a href="#1-1-2-替换-ListView-和-GridView-的-RecyclerView" class="headerlink" title="1.1.2 替换 ListView 和 GridView 的 RecyclerView"></a>1.1.2 替换 ListView 和 GridView 的 RecyclerView</h2><blockquote><p>有什么优点？</p><p>具有高度的解耦、异常的灵活性和更高的效率，通过设置它提供的不同 LayoutManager、ItemDecoration、ItemAnimator 可实现更加丰富多样的效果</p><p>缺点：</p><p>分割线需要自定义，另外列表的点击事件需要自己去实现。</p></blockquote><h3 id="1-设置分割线"><a href="#1-设置分割线" class="headerlink" title="1.设置分割线"></a>1.设置分割线</h3><p>现在谷歌有提供默认的分割线</p><pre class=" language-java"><code class="language-java">  recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DividerItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>DividerItemDecoration<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果是网格布局的话，横着，竖着都画</p><h3 id="2-自定义分割线"><a href="#2-自定义分割线" class="headerlink" title="2.自定义分割线"></a>2.自定义分割线</h3><p>利用setDrawable方法</p><p>首先编写1个样式</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rectangle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;gradient        android:centerColor="#ff00ff00" //绿色        android:endColor="#ff0000ff"    //蓝色        android:startColor="#ffff0000"  //红色        android:type="linear" />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span> <span class="token attr-name"><span class="token namespace">android:</span>height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span></code></pre><p>然后</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//添加自定义分割线</span>        DividerItemDecoration divider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DividerItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>DividerItemDecoration<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        divider<span class="token punctuation">.</span><span class="token function">setDrawable</span><span class="token punctuation">(</span>ContextCompat<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>custom_divider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span>divider<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者用代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Moon on 2015/11/21. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DividerItemDecoration</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ItemDecoration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ATTRS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>listDivider    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HORIZONTAL_LIST <span class="token operator">=</span> LinearLayoutManager<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> VERTICAL_LIST <span class="token operator">=</span> LinearLayoutManager<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">;</span>    <span class="token keyword">private</span> Drawable mDivider<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mOrientation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DividerItemDecoration</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token keyword">int</span> orientation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> TypedArray a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>ATTRS<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDivider <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setOrientation</span><span class="token punctuation">(</span>orientation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrientation</span><span class="token punctuation">(</span><span class="token keyword">int</span> orientation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orientation <span class="token operator">!=</span> HORIZONTAL_LIST <span class="token operator">&amp;&amp;</span> orientation <span class="token operator">!=</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"invalid orientation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mOrientation <span class="token operator">=</span> orientation<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientation <span class="token operator">==</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">drawVertical</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">drawHorizontal</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawVertical</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> left <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> right <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> View child <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> <span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> child                    <span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> top <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>bottomMargin<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> bottom <span class="token operator">=</span> top <span class="token operator">+</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawHorizontal</span><span class="token punctuation">(</span>Canvas c<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> top <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> bottom <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> parent<span class="token punctuation">.</span><span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> View child <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> RecyclerView<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> <span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> child                    <span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> left <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>rightMargin<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> right <span class="token operator">=</span> left <span class="token operator">+</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>            mDivider<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getItemOffsets</span><span class="token punctuation">(</span>Rect outRect<span class="token punctuation">,</span> <span class="token keyword">int</span> itemPosition<span class="token punctuation">,</span> RecyclerView parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientation <span class="token operator">==</span> VERTICAL_LIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            outRect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            outRect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mDivider<span class="token punctuation">.</span><span class="token function">getIntrinsicWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-自定义点击事件"><a href="#3-自定义点击事件" class="headerlink" title="3.自定义点击事件"></a>3.自定义点击事件</h3><ol><li>定义接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnItemClickListener</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.这里写的为了调用方法，用到上面的接口回调</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span>OnItemClickListener mOnItemClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mOnItemClickListener <span class="token operator">=</span> mOnItemClickListener<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.在onCreateViewHolder里面设置</p><pre class=" language-java"><code class="language-java"> view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//点击事件</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//回调</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//长按事件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//回调</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.在activity中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setLister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mHomeAdaper<span class="token punctuation">.</span><span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HomeAdapter<span class="token punctuation">.</span>OnItemClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>RecyclerViewActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"点击第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>RecyclerViewActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"确认删除吗？"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string">"取消"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>DialogInterface dialogInterface<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                mHomeAdaper<span class="token punctuation">.</span><span class="token function">removeData</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>5.总的代码Adapter</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>liuwangshu<span class="token punctuation">.</span>myrecyclerview<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>LayoutInflater<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>FrameLayout<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by Moon on 2015/11/21. */</span><span class="token keyword">class</span> <span class="token class-name">HomeAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token operator">&lt;</span>HomeAdapter<span class="token punctuation">.</span>MyViewHolder<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">,</span>View<span class="token punctuation">.</span>OnLongClickListener<span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> mList<span class="token punctuation">;</span>    <span class="token keyword">private</span> Context mContext<span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> OnItemClickListener mOnItemClickListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HomeAdapter</span><span class="token punctuation">(</span>Context mContext<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span>mList<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mContext<span class="token operator">=</span>mContext<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mList<span class="token operator">=</span>mList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnItemClickListener</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span>OnItemClickListener mOnItemClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mOnItemClickListener <span class="token operator">=</span> mOnItemClickListener<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeData</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//动态效果</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MyViewHolder <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>ViewGroup parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        View view<span class="token operator">=</span>LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>                mContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_recycler<span class="token punctuation">,</span> parent<span class="token punctuation">,</span>                <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyViewHolder holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyViewHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> holder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token keyword">final</span> MyViewHolder holder<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnItemClickListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOnItemClickListener<span class="token punctuation">.</span><span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> mList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">MyViewHolder</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span>    <span class="token punctuation">{</span>        TextView tv<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyViewHolder</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>            tv <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-1-4-3种通知"><a href="#1-1-4-3种通知" class="headerlink" title="1.1.4 3种通知"></a>1.1.4 3种通知</h2><h3 id="1-普通通知"><a href="#1-普通通知" class="headerlink" title="1.普通通知"></a>1.普通通知</h3><p><img src="https://i.loli.net/2019/10/10/qyiDrenEUch7A1t.jpg" alt></p><p>就是显示在那个状态栏的通知</p><h3 id="2-折叠式"><a href="#2-折叠式" class="headerlink" title="2.折叠式"></a>2.折叠式</h3><p>它有两种状态，一种是普通状态下的视图（如果不是自定义的话和上面普通通知的视图样式一样），一种是展开状态下的视图。</p><p> 自定义的视图，而这个视图显示的进程和我们创建视图的进程不再一个进程，所以我们需要使用RemoteViews，首先要使用RemoteViews来创建我们的自定义视图:</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//用RemoteViews来创建自定义Notification视图</span>RemoteViews remoteViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteViews</span><span class="token punctuation">(</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_fold<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>1.展开后的视图的布局文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/fold<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_image<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/fold<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_text<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>展开后的自定义视图<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorPrimaryDark<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>2.指定展开的视图</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定展开时的视图</span>notification<span class="token punctuation">.</span>bigContentView <span class="token operator">=</span> remoteViews<span class="token punctuation">;</span></code></pre><p>3.总的代码</p><pre class=" language-java"><code class="language-java">        Notification<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Intent mIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">,</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://blog.csdn.net/itachi85/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PendingIntent pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mIntent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setContentIntent</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>foldleft<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setLargeIcon</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>lanucher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setAutoCancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">"折叠式通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用RemoteViews来创建自定义Notification视图</span>        RemoteViews remoteViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteViews</span><span class="token punctuation">(</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_fold<span class="token punctuation">)</span><span class="token punctuation">;</span>        Notification notification <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定展开时的视图</span>        notification<span class="token punctuation">.</span>bigContentView <span class="token operator">=</span> remoteViews<span class="token punctuation">;</span>        notificationManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.界面展示</p><p><img src="https://i.loli.net/2019/10/10/MH24lmvzAUGiafL.jpg" alt></p><p><img src="https://i.loli.net/2019/10/10/dkVYmfyvABLgjKr.jpg" alt></p><h3 id="3-悬挂式"><a href="#3-悬挂式" class="headerlink" title="3.悬挂式"></a>3.悬挂式</h3><p>就是不需要下拉状态栏就行了</p><p><img src="https://i.loli.net/2019/10/10/VKYW8LRlDdj3ytb.jpg" alt></p><p>1.不同的是，需要用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果描述的PendingIntent已经存在，则在产生新的Intent之前会先取消掉当前的</span>        PendingIntent hangPendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hangIntent<span class="token punctuation">,</span> PendingIntent<span class="token punctuation">.</span>FLAG_CANCEL_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里需要设置setFullScreenIntent而不是setContentIntent</span>        builder<span class="token punctuation">.</span><span class="token function">setFullScreenIntent</span><span class="token punctuation">(</span>hangPendingIntent<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="1-1-5-ToolBar和Palette"><a href="#1-1-5-ToolBar和Palette" class="headerlink" title="1.1.5 ToolBar和Palette"></a>1.1.5 ToolBar和Palette</h2><h3 id="1-怎么在ToolBar中的按钮中指定控件呢"><a href="#1-怎么在ToolBar中的按钮中指定控件呢" class="headerlink" title="1.怎么在ToolBar中的按钮中指定控件呢"></a>1.怎么在ToolBar中的按钮中指定控件呢</h3><p>其实就是在menu中的item里面</p><p>app:actionViewClass=”控件”就行了</p><h2 id="2-Palette的应用"><a href="#2-Palette的应用" class="headerlink" title="2.Palette的应用"></a>2.Palette的应用</h2><blockquote><p>这个是什么，其实就是得到图片的色调的</p></blockquote><p>怎么使用？</p><p>1.导入包</p><pre><code>‘com.android.support:palette-v7:23.0.1</code></pre><p>2.先获取图片的Bitmap</p><pre class=" language-java"><code class="language-java">        Bitmap bitmap<span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.然后在Palette的回调中获取色调</p><pre class=" language-java"><code class="language-java"> Palette<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Palette<span class="token punctuation">.</span>PaletteAsyncListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGenerated</span><span class="token punctuation">(</span>Palette palette<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Palette<span class="token punctuation">.</span>Swatch swatch<span class="token operator">=</span>palette<span class="token punctuation">.</span><span class="token function">getVibrantSwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//得到他的rgb色</span>                <span class="token function">getSupportActionBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorDrawable</span><span class="token punctuation">(</span>swatch<span class="token punctuation">.</span><span class="token function">getRgb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.内置提取颜色的种类</p><ul><li>Vibrant 充满活力的</li><li>Vibrant dark充满活力的黑</li><li>Vibrant light 充满活力的亮</li><li>Muted 柔和</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>7.7 最短路径</title>
      <link href="/2019/10/26/7.7-zui-duan-lu-jing/"/>
      <url>/2019/10/26/7.7-zui-duan-lu-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="7-7-最短路径"><a href="#7-7-最短路径" class="headerlink" title="7.7 最短路径"></a>7.7 最短路径</h1><blockquote><p>上节我们探讨了最小生成树的生成方法，分别是prim算法和Kruskal算法,这节课我们来探讨下求最短路径的算法</p><p>上上节我们探讨了广度优先和深度优先，其实这与本节有一定的关系</p></blockquote><h2 id="7-7-1-Dijkstra算法"><a href="#7-7-1-Dijkstra算法" class="headerlink" title="7.7.1 Dijkstra算法"></a>7.7.1 Dijkstra算法</h2><h3 id="1-什么是Dijkstra算法？"><a href="#1-什么是Dijkstra算法？" class="headerlink" title="1.什么是Dijkstra算法？"></a>1.什么是Dijkstra算法？</h3><p>用于计算一个结点到其他结点的最短路径</p><p>算法的<strong>主要特点</strong>是以起始点为中心向外层层扩展(<strong>广度优先搜索</strong>思想)， 直到扩展到终点为止，不断地找最小值的点中的连线</p><h3 id="2-图解"><a href="#2-图解" class="headerlink" title="2.图解"></a>2.图解</h3><p><img src="https://s2.ax1x.com/2019/10/26/KBYanO.png" alt="KBYanO.png"></p><p>其实就是不断找最短的距离，要和之前的比较</p><h3 id="3-算法"><a href="#3-算法" class="headerlink" title="3.算法"></a>3.算法</h3><p><code>final</code>数组为<strong>已求</strong>得<strong>最短路径</strong>的顶点<strong>集合</strong>，<code>D</code>数组为起点到各顶点的最短路径的<strong>权值和</strong>， <code>P</code>数组为最短路径的<strong>路径的顶点</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Dijkstra算法， 求有向网 G 的 v0 顶点到其余顶点 v 最短路径 P[v] 及带权长度 D[v], P[v] 的值为前驱顶点下标, * D[v] 表示 v0 到 v 的最短路径长度和 */</span><span class="token keyword">void</span> <span class="token function">ShortestPath_Dijkstra</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v0<span class="token punctuation">,</span> ShortPathTable <span class="token operator">*</span>D<span class="token punctuation">,</span> Patharc <span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> min<span class="token punctuation">,</span> k<span class="token punctuation">,</span> final<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* final[w] = 1 表示求得顶点 v0 至 vw 的最短路径 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 初始化数据 */</span>    <span class="token punctuation">{</span>        final<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 全部顶点初始化为未知最短路径状态 */</span>        <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>v0<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 将与 v0 顶点有连线的顶点加上权值 */</span>        <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 初始化路径数组 P 为 0 */</span>    <span class="token punctuation">}</span>    final<span class="token punctuation">[</span>v0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* v0 至 v0 不需要求路径 */</span>    <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* v0 至 v0 路径为 0 */</span>    <span class="token comment" spellcheck="true">/* 开始主循环, 每次求得 v0 到某个 v 顶点的最短路径 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        min <span class="token operator">=</span> INF<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 当前所知离 v0 顶点的最近距离 */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">/* 寻找离 v0 最近的顶点 */</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>final<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                min <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* w 顶点离 v0 顶点更近 */</span>                k <span class="token operator">=</span> w<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        final<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 将目前找到的最近的顶点置为 1 */</span>        <span class="token comment" spellcheck="true">//这里是更新最短路径长度</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">/* 更新当前最短路径及距离 */</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 如果经过 v 顶点的路径比现在这条路径的长度短的话 */</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>final<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* 说明找到了更短的路径, 修改 D[w] 和 P[w] */</span>                <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> min <span class="token operator">+</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 修改当前路径长度 */</span>                <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-如果还想知道v3到v5这样任意顶点开始的最短路径怎么办？"><a href="#4-如果还想知道v3到v5这样任意顶点开始的最短路径怎么办？" class="headerlink" title="4.如果还想知道v3到v5这样任意顶点开始的最短路径怎么办？"></a>4.如果还想知道v3到v5这样任意顶点开始的最短路径怎么办？</h3><p>对每个顶点作为源点运行一次上述算法</p><p>时间复杂度是O(n3)</p><h2 id="7-7-2-Floyd算法"><a href="#7-7-2-Floyd算法" class="headerlink" title="7.7.2 Floyd算法"></a>7.7.2 Floyd算法</h2><h3 id="1-什么是Floyd算法"><a href="#1-什么是Floyd算法" class="headerlink" title="1.什么是Floyd算法"></a>1.什么是<code>Floyd</code>算法</h3><p>在给定的加权图中求最短路径的算法，其实就是不断尝试借助中间结点，而不是之间一步到位的结点，来求最短路径</p><h3 id="2-核心是什么？"><a href="#2-核心是什么？" class="headerlink" title="2.核心是什么？"></a>2.核心是什么？</h3><p><img src="https://s2.ax1x.com/2019/10/26/KBU3NQ.jpg" alt="KBU3NQ.jpg"></p><h3 id="3-步骤是什么？"><a href="#3-步骤是什么？" class="headerlink" title="3.步骤是什么？"></a>3.步骤是什么？</h3><ol><li>首先明确定义，定义两个二维数组<code>D[MAXVEX][MAXVEX]</code>和<code>P[MAXVEX][MAXVEX]</code>，<strong>D</strong>数组代表顶点到顶点的<strong>最短路径权值和</strong>矩阵， <code>P</code>代表对应顶点的<strong>最小路径前驱矩阵</strong>。</li><li>初始的时候，将矩阵<code>D</code>中顶点<code>D[v][w]</code>设置为顶点<code>v</code>到顶点<code>w</code>的<strong>权值</strong>，若两顶点<strong>不相连</strong>，则<code>D[v][w] = INF</code>。</li><li>接下来对矩阵<code>D</code>更新， <strong>如果D[v][w] &gt; D[v][k] + D[k][w]</strong><code>，</code>k<code>表示</code>v、w`两顶点通过中转顶点，该表达式表示通过中转顶点的权值和较小时，<strong>更新v、w权值和</strong>。</li></ol><p><img src="https://s2.ax1x.com/2019/10/26/KBa3qK.png" alt="KBa3qK.png"></p><h3 id="4-算法是什么？"><a href="#4-算法是什么？" class="headerlink" title="4.算法是什么？"></a>4.算法是什么？</h3><p>结构</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXVEX 9</span><span class="token macro property">#<span class="token directive keyword">define</span> INF 65535</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Patharc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ShortPathTable<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> vexs<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">}</span>MGraph<span class="token punctuation">;</span></code></pre><p>算法：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Floyd 算法， 求网图 G 中各顶点 v 到其余顶点 w 的最短路径 P[v][w] 及带权长度 D[v][w] */</span><span class="token keyword">void</span> <span class="token function">ShortestPath_Floyd</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> Patharc <span class="token operator">*</span>P<span class="token punctuation">,</span> ShortPathTable <span class="token operator">*</span>D<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 初始化 D 与 P */</span>    <span class="token comment" spellcheck="true">//双重循环初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>w<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* D[v][w] 值即为对应顶点间的权值 */</span>            <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 初始化 P */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//三重循环更新最短路径</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//k是中间的结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>w<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* 如果经过下标为 k 的顶点路径比原两点间路径更短 */</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将当前两点间权值设为更小的一个 */</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 路径设置为经过下标为 k 的顶点 */</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打印各节点间的最短路径</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 打印各顶点间的最短路径 */</span><span class="token keyword">void</span> <span class="token function">ShowShortestPath</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> Patharc <span class="token operator">*</span>P<span class="token punctuation">,</span> ShortPathTable <span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> <span class="token operator">++</span>w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"v%d-v%d weight: %d "</span><span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 获得第一个路径顶点下标 */</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" path: %d"</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印源点 */</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> w<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 如果路径顶点下标不是终点 */</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -> %d"</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 打印路径顶点 */</span>                k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 获得下一个路径顶点下标 */</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -> %d\n"</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 打印终点 */</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.6 最小生成树</title>
      <link href="/2019/10/25/7.6-zui-xiao-sheng-cheng-shu/"/>
      <url>/2019/10/25/7.6-zui-xiao-sheng-cheng-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="7-6-最小生成树"><a href="#7-6-最小生成树" class="headerlink" title="7.6 最小生成树"></a>7.6 最小生成树</h1><blockquote><p>什么是最小生成树呢？</p></blockquote><h2 id="什么是最小生成树呢？"><a href="#什么是最小生成树呢？" class="headerlink" title="什么是最小生成树呢？"></a>什么是最小生成树呢？</h2><p>即构造连通图的最小代价生成树，就是能够到达每个点，花费最少的路径</p><h2 id="7-6-1-Prim算法"><a href="#7-6-1-Prim算法" class="headerlink" title="7.6.1 Prim算法"></a>7.6.1 Prim算法</h2><p><img src="https://s2.ax1x.com/2019/10/25/Kw73hd.jpg" alt="Kw73hd.jpg"></p><h3 id="1-代码："><a href="#1-代码：" class="headerlink" title="1.代码："></a>1.代码：</h3><h3 id="邻接矩阵结构："><a href="#邻接矩阵结构：" class="headerlink" title="邻接矩阵结构："></a>邻接矩阵结构：</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXVER 10</span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    VertexType vexs<span class="token punctuation">[</span>MAXVER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arc<span class="token punctuation">[</span>MAXVER<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">}</span>MGraph<span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Prim 算法生成最小生成树 */</span><span class="token keyword">void</span> <span class="token function">MiniSpanTree_Prim</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> min<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// min 为当前权值最小值</span>    <span class="token keyword">int</span> lowcost<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 保存顶点间边的权值 */</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 保存相关顶点的下标，即下标与其值所连边为当前最小权值边 */</span>    lowcost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 选取第一个顶点为起始点， 即 v0 加入树， lowcost的值为0，在这里就是此下标的顶点已经加入生成树 */</span>    adjvex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 初始化第一个顶点下标为0 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 循环除下标为 0 外的全部顶点 */</span>    <span class="token punctuation">{</span>        lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将与 v0 顶点有边的权值存入数组 */</span>        adjvex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将其他所有顶点的值初始化为 v0 的下标 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        min <span class="token operator">=</span> INF<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 初始化最小权值为 无穷大 */</span>        j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 循环全部顶点，寻找当前最小生成树顶点集合中最小权值的边 */</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 如果权值不为 0(即不在树中), 且权值小于 min */</span>            <span class="token punctuation">{</span>                min <span class="token operator">=</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 则让当前权值成为最小值 */</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/* 将当前最小值的下标存入k */</span>            <span class="token punctuation">}</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将当前顶点的权值设置为0, 表示此顶点已加入树的顶点集合 */</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d, %d)"</span><span class="token punctuation">,</span> adjvex<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印当前顶点边中权值最小的边 */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 循环所有顶点 */</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 如果下标为 k 的顶点边集中权值小于已存在的权值, 比如 (v0, v6)权值为INF, 而(v1, v6)权值为 16， 更新*/</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将较小的权值存入 lowcost 相应位置 */</span>                adjvex<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 将下标为 k 的顶点存入 adjvex */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>lowcost其实存着最小的权,当lowcost==0的时候，说明该结点已经放入最小生成树中了</p><p>adjvex其实存在点，</p><h3 id="2-复杂度"><a href="#2-复杂度" class="headerlink" title="2.复杂度"></a>2.复杂度</h3><p>时间复杂度是O（n2）</p><h2 id="7-6-2-Kruskal算法"><a href="#7-6-2-Kruskal算法" class="headerlink" title="7.6.2 Kruskal算法"></a>7.6.2 Kruskal算法</h2><h3 id="1-什么是克鲁斯卡尔算法"><a href="#1-什么是克鲁斯卡尔算法" class="headerlink" title="1.什么是克鲁斯卡尔算法"></a>1.什么是克鲁斯卡尔算法</h3><p>按照<strong>权值从小到大</strong>的顺序选择<code>n - 1</code>条边，并保证这<code>n - 1</code>条边<strong>不构成回路</strong></p><h3 id="2-思路是怎样的？"><a href="#2-思路是怎样的？" class="headerlink" title="2.思路是怎样的？"></a>2.思路是怎样的？</h3><ol><li>将邻接矩阵转化为边集数组</li><li>构造一个只含<code>n</code>个顶点的森林，</li><li>然后<strong>依权值从小到大</strong>从连通网中选择边加入到森林中，并使森林<strong>不产生回路</strong>，直至森林变成过一棵树为止</li></ol><p><img src="https://s2.ax1x.com/2019/10/25/KwbbTO.jpg" alt="KwbbTO.jpg"></p><h3 id="3-具体算法"><a href="#3-具体算法" class="headerlink" title="3.具体算法"></a>3.具体算法</h3><p>边集数组结构</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token punctuation">}</span>Edge<span class="token punctuation">;</span></code></pre><p>算法</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 生成最小生成树 */</span><span class="token keyword">void</span> <span class="token function">MiniSpanTree_Kruskal</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 定义一数组用来判断边与边是否形成环路 */</span>    Edge edges<span class="token punctuation">[</span>MAXEDGE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 定义边集数组,edge的结构为begin,end,weight,均为整型 */</span>    <span class="token comment" spellcheck="true">/* 用来构建边集数组并排序********************* */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> INF<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>begin <span class="token operator">=</span> i<span class="token punctuation">;</span>                edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>end <span class="token operator">=</span> j<span class="token punctuation">;</span>                edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> <span class="token operator">&amp;</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* ******************************************* */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打印最小生成树：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 初始化数组值为0 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 循环每一条边 */</span>    <span class="token punctuation">{</span>        n <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> m<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 假如n与m不等，说明此边没有与现有的生成树形成环路 */</span>        <span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将此边的结尾顶点放入下标为起点的parent中。 表示此顶点已经在生成树集合中*/</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d, %d) %d\n"</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Kruskal（克鲁斯卡尔算法）生成最小生成树</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       f <span class="token operator">=</span> parent<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，如果已经加入的话，parent[5]=8表示(5,8)在边集合里面</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.5 图的遍历</title>
      <link href="/2019/10/25/7.5-tu-de-bian-li/"/>
      <url>/2019/10/25/7.5-tu-de-bian-li/</url>
      
        <content type="html"><![CDATA[<h1 id="7-5-图的遍历"><a href="#7-5-图的遍历" class="headerlink" title="7.5 图的遍历"></a>7.5 图的遍历</h1><h2 id="7-5-1-深度优先遍历"><a href="#7-5-1-深度优先遍历" class="headerlink" title="7.5.1 深度优先遍历"></a>7.5.1 深度优先遍历</h2><h3 id="1-什么是深度优先遍历呢"><a href="#1-什么是深度优先遍历呢" class="headerlink" title="1.什么是深度优先遍历呢?"></a>1.什么是深度优先遍历呢?</h3><p>深度优先遍历（Depth_First_Search)，也称为深度优先搜索，简称DFS</p><p>从图中某个顶点<code>v</code>出发，访问此顶点，然后从<code>v</code>的未被访问的邻接点出发深度优先遍历图，直至图中所有和<code>v</code>有路径想通的顶点都被访问到。若图中尚有顶点未被访问到，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。显然，深度优先遍历是一个 <strong>递归</strong>的过程，类似于树的前序遍历</p><p>打个比方，就是一个房间无死角地找，找完再去下一个房间</p><p><img src="https://i.loli.net/2019/10/25/4bxnUeEVWDO9dcm.jpg" alt></p><ul><li>顶点A出发，访问A， 假设没有碰到重复顶点的情况下，始终向右手边走</li><li>访问A的邻接点B， B的邻接点C， C的邻接点D， D的邻接点E， E的邻接点F</li><li>在顶点F处，右手边为顶点A，但已被访问过，故访问顶点G</li><li>在顶点G处，右手边为顶点B，下一个为D， 都已被访问，故访问顶点H</li><li>在顶点H处，由于邻接点G、D和E都被访问，故回退到G，同理，一直回退到D处，访问I</li></ul><h3 id="2-邻接矩阵的方式深度遍历的算法是怎样的？"><a href="#2-邻接矩阵的方式深度遍历的算法是怎样的？" class="headerlink" title="2.邻接矩阵的方式深度遍历的算法是怎样的？"></a>2.邻接矩阵的方式深度遍历的算法是怎样的？</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> Boolean<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Boolean 是布尔类型， 其值是 TRUE 或 FALSE */</span>Boolean visited<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 访问标志的数组 */</span><span class="token comment" spellcheck="true">/* 邻接矩阵的深度优先递归算法 */</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%C "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印顶点，也可以是其他操作 */</span>    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 对未访问的邻接顶点递归调用 */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 邻接矩阵的深度遍历操作 */</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 初始所有顶点状态都是未访问过状态 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 对未访问过的顶点调用 DFS， 若是连通图，只会执行一次 */</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意，void DFSTraverse(MGraph G)中的第二个循环，主要是为了遍历非连通图的情况</p><h3 id="3-邻接表的深度遍历的算法是怎样的？"><a href="#3-邻接表的深度遍历的算法是怎样的？" class="headerlink" title="3.邻接表的深度遍历的算法是怎样的？"></a>3.邻接表的深度遍历的算法是怎样的？</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 邻接表的深度优先递归算法 */</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    EdgeNode <span class="token operator">*</span>p <span class="token operator">=</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">visited</span><span class="token punctuation">(</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>GL<span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 邻接表的深度遍历操作 */</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>GL<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-邻接表和邻接矩阵二者哪个好"><a href="#4-邻接表和邻接矩阵二者哪个好" class="headerlink" title="4.邻接表和邻接矩阵二者哪个好"></a>4.邻接表和邻接矩阵二者哪个好</h3><p>如果是点多边少的话，用邻接表比较好</p><h2 id="7-5-2-广度优先遍历"><a href="#7-5-2-广度优先遍历" class="headerlink" title="7.5.2 广度优先遍历"></a>7.5.2 广度优先遍历</h2><h3 id="1-什么是广度优先遍历"><a href="#1-什么是广度优先遍历" class="headerlink" title="1.什么是广度优先遍历"></a>1.什么是<strong>广度优先遍历</strong></h3><p><strong>广度优先遍历(Breadth First Search)</strong>，又称为 <strong>广度优先搜索</strong>， 简称 <strong>BFS</strong>。</p><p>思想：</p><p>从图中某个顶点<code>v</code>出发，在访问了顶点<code>v</code>后，依次访问顶点<code>v</code>的所有未被访问过的邻接点，然后分别从这些邻接点依次访问他们的邻接点，并使得<code>先被访问过的顶点的邻接点先于后被访问的顶点的邻接点被访问</code>， 直至图中所有已被访问的顶点的邻接点都被访问到。</p><p>类似于层序遍历</p><h3 id="2-图解"><a href="#2-图解" class="headerlink" title="2.图解"></a>2.图解</h3><p><img src="https://i.loli.net/2019/10/25/NpQqzhHudERPUSA.jpg" alt></p><p>核心思想是：出队一个，要把与它直接相连的都进队</p><p>比如说：第2步出队一个A，进队与他直接相连的B F</p><h3 id="3-代码："><a href="#3-代码：" class="headerlink" title="3.代码："></a>3.代码：</h3><h4 id="1-无向图的邻接矩阵"><a href="#1-无向图的邻接矩阵" class="headerlink" title="1.无向图的邻接矩阵"></a>1.无向图的邻接矩阵</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    SqQueue Q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 初始化辅助用的队列 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 对每一个顶点做循环 */</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 若是未访问过就处理 */</span>        <span class="token punctuation">{</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将此队列入队 */</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印顶点，也可以是其他操作 */</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 设置当前顶点访问过 */</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 若当前队列不为空 */</span>            <span class="token punctuation">{</span>                <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将队列中元素出队列，赋值给 i */</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* 判断其他顶点若与当前顶点存在边且未被访问过 */</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                      <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印顶点 */</span>                        visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将找到的此顶点标记为已访问 */</span>                        <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将找到的此顶点入队 */</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>               <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-无向图的邻接表"><a href="#2-无向图的邻接表" class="headerlink" title="2.无向图的邻接表"></a>2.无向图的邻接表</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 邻接表的广度遍历算法 */</span><span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span><span class="token punctuation">{</span>    SqQueue Q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 打印顶点，也可以是其他操作 */</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                NodeEdge <span class="token operator">*</span>p <span class="token operator">=</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 找到当前顶点边表链表头指针 */</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 若此顶点未被访问 */</span>                    <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将此顶点入队 */</span>                        visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 指针指向下一个邻接点 */</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="DFS和BFS哪个更好呢？"><a href="#DFS和BFS哪个更好呢？" class="headerlink" title="DFS和BFS哪个更好呢？"></a>DFS和BFS哪个更好呢？</h2><p>DFS适合目标更明确</p><p>BFS适合不断扩大范围找到相对最优解</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.4 图的存储结构</title>
      <link href="/2019/10/25/7.4-tu-de-cun-chu-jie-gou/"/>
      <url>/2019/10/25/7.4-tu-de-cun-chu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="7-4-图的存储结构"><a href="#7-4-图的存储结构" class="headerlink" title="7.4 图的存储结构"></a>7.4 图的存储结构</h1><h2 id="7-4-1-邻接矩阵"><a href="#7-4-1-邻接矩阵" class="headerlink" title="7.4.1 邻接矩阵"></a>7.4.1 邻接矩阵</h2><h3 id="1-什么是邻接矩阵"><a href="#1-什么是邻接矩阵" class="headerlink" title="1.什么是邻接矩阵"></a>1.什么是邻接矩阵</h3><p>图的邻接矩阵存储方式是用两个数组来标示图。一个<strong>一维数组</strong>存储图<strong>顶点</strong>的信息，一个<strong>二维数组</strong>（称为邻接矩阵）存储图中<strong>边或者弧</strong>的信息。</p><h4 id="1-无向图的邻接矩阵："><a href="#1-无向图的邻接矩阵：" class="headerlink" title="1.无向图的邻接矩阵："></a>1.无向图的邻接矩阵：</h4><p><img src="https://i.loli.net/2019/10/25/81XwrqsD7CuzT3o.jpg" alt></p><h4 id="2-有向图的邻接矩阵："><a href="#2-有向图的邻接矩阵：" class="headerlink" title="2.有向图的邻接矩阵："></a>2.有向图的邻接矩阵：</h4><p><img src="https://i.loli.net/2019/10/25/XTVAmFcyEovWSMJ.jpg" alt></p><p>可以很容易看出，入度是多少（看列），出度是多少（看行）</p><h4 id="3-网图的邻接矩阵："><a href="#3-网图的邻接矩阵：" class="headerlink" title="3.网图的邻接矩阵："></a>3.网图的邻接矩阵：</h4><p>当2个点到达不了的，用无穷表示距离，当自己到自己的，用0表示距离</p><p><img src="https://i.loli.net/2019/10/25/nqPfX9szxOT63Lw.jpg" alt></p><h3 id="2-邻接矩阵的存储结构："><a href="#2-邻接矩阵的存储结构：" class="headerlink" title="2.邻接矩阵的存储结构："></a>2.邻接矩阵的存储结构：</h3><p><img src="https://i.loli.net/2019/10/25/QJplD6WanVSydCX.jpg" alt></p><h3 id="3-无向网图的创建："><a href="#3-无向网图的创建：" class="headerlink" title="3.无向网图的创建："></a>3.无向网图的创建：</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateMGraph</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>w<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入顶点数和边数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-></span>numVertexes<span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-></span>numEdges<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入顶点数和边数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token operator">-></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//初始化顶点表 </span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>G<span class="token operator">-></span>vex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token operator">-></span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>inj<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token operator">-></span>numVertexes<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            G<span class="token operator">-></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INFINITY<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//邻接矩阵初始化</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>G<span class="token operator">-></span>numEdges<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入边(vi,vj)的下标i，j和权w：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入边(vi,vj)的下标i，j和权w：</span>            G<span class="token operator">-></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">;</span>            G<span class="token operator">-></span>arc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>G<span class="token operator">-></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//因为是无向图，矩阵对称 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h2 id="7-4-2-邻接表"><a href="#7-4-2-邻接表" class="headerlink" title="7.4.2 邻接表"></a>7.4.2 邻接表</h2><h3 id="1-什么是邻接表？"><a href="#1-什么是邻接表？" class="headerlink" title="1.什么是邻接表？"></a>1.什么是邻接表？</h3><p>用<strong>数组和链表结合</strong>的存储方式来标示图的方法称为<strong>邻接表</strong>。类似于树中的孩子表示法</p><h3 id="2-邻接表的处理思路"><a href="#2-邻接表的处理思路" class="headerlink" title="2.邻接表的处理思路"></a>2.邻接表的处理思路</h3><ol><li><strong>顶点用一维数组</strong>存储</li><li>每个顶点的<strong>邻接点用链表</strong>存储，这个表在<strong>有向图</strong>中叫做弧尾的<strong>出边表</strong>，在<strong>无向图</strong>中叫<strong>边表</strong></li></ol><p><img src="https://i.loli.net/2019/10/25/CoyZhOaBTIfmr84.jpg" alt></p><h3 id="3-邻接表结构分析"><a href="#3-邻接表结构分析" class="headerlink" title="3.邻接表结构分析"></a>3.邻接表结构分析</h3><p><strong>data</strong>是存储<strong>顶点的信息</strong>，<strong>firstedge</strong>是<strong>指针域</strong>，<strong>adjvex</strong>是<strong>邻接点域</strong>，<strong>next</strong>存储边表<strong>下一个结点的地址</strong></p><h3 id="4-带权重的网图是怎样的？"><a href="#4-带权重的网图是怎样的？" class="headerlink" title="4.带权重的网图是怎样的？"></a>4.带权重的网图是怎样的？</h3><p><img src="https://i.loli.net/2019/10/25/UtC1jmIGQEqporL.jpg" alt></p><p><img src="https://i.loli.net/2019/10/25/nlSpAICoqc3Fr2d.jpg" alt></p><h3 id="5-存储结构定义："><a href="#5-存储结构定义：" class="headerlink" title="5.存储结构定义："></a>5.存储结构定义：</h3><p><img src="https://i.loli.net/2019/10/25/jyEYkXLFcPe6tW9.jpg" alt></p><h3 id="6-无向图邻接表的创建代码："><a href="#6-无向图邻接表的创建代码：" class="headerlink" title="6.无向图邻接表的创建代码："></a>6.无向图邻接表的创建代码：</h3><p><img src="https://i.loli.net/2019/10/25/jMaQtV8RBcuKmk9.jpg" alt></p><p><img src="https://i.loli.net/2019/10/25/4QPOBge6WCywHbk.jpg" alt></p><p>因为一条边对应了2个顶点，所以一次循环插入2条边</p><h2 id="7-4-3-十字链表"><a href="#7-4-3-十字链表" class="headerlink" title="7.4.3 十字链表"></a>7.4.3 十字链表</h2><h3 id="1-什么是十字链表"><a href="#1-什么是十字链表" class="headerlink" title="1.什么是十字链表"></a>1.什么是十字链表</h3><p>十字链表把邻接表与逆邻接表结合起来</p><h3 id="2-十字链表的结构是怎样的？"><a href="#2-十字链表的结构是怎样的？" class="headerlink" title="2.十字链表的结构是怎样的？"></a>2.十字链表的结构是怎样的？</h3><p><img src="https://i.loli.net/2019/10/25/l3NMa6KIcWnOeQV.jpg" alt></p><p><img src="https://i.loli.net/2019/10/25/zrt8YwxTEG7h5HW.jpg" alt></p><p>注意的是：headlink是指向终点相同的下一条边，taillink是指向起点相同的下一条边</p><h3 id="3-有什么好处？"><a href="#3-有什么好处？" class="headerlink" title="3.有什么好处？"></a>3.有什么好处？</h3><p>便于求出度和入度</p><h2 id="7-4-4-邻接多重表"><a href="#7-4-4-邻接多重表" class="headerlink" title="7.4.4 邻接多重表"></a>7.4.4 邻接多重表</h2><h3 id="1-为什么要设计邻接多重表呢？"><a href="#1-为什么要设计邻接多重表呢？" class="headerlink" title="1.为什么要设计邻接多重表呢？"></a>1.为什么要设计邻接多重表呢？</h3><p>其实是为了便于边的操作，一条边对应一个结点</p><h3 id="2-邻接多重表的结构是怎样的？"><a href="#2-邻接多重表的结构是怎样的？" class="headerlink" title="2.邻接多重表的结构是怎样的？"></a>2.邻接多重表的结构是怎样的？</h3><p><img src="https://i.loli.net/2019/10/25/v2D3gjczXla5IOP.jpg" alt></p><p>注意的是：ilink与jvex相连，jlink与ivex相连</p><p><img src="https://i.loli.net/2019/10/25/irCVB1XcYu5fvqx.jpg" alt></p><p>如果想要去掉（v0,v2）这条边，只需要把6和9的连接改为null就行</p><h2 id="7-4-5-边集数组"><a href="#7-4-5-边集数组" class="headerlink" title="7.4.5 边集数组"></a>7.4.5 边集数组</h2><h3 id="1-边集数组的结构是怎样的？"><a href="#1-边集数组的结构是怎样的？" class="headerlink" title="1.边集数组的结构是怎样的？"></a>1.边集数组的结构是怎样的？</h3><p><img src="https://i.loli.net/2019/10/25/jnCNfa5JkvoZQmh.jpg" alt></p><p><img src="https://i.loli.net/2019/10/25/dChOJexVnzFvof3.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.12 赫夫曼树及其应用</title>
      <link href="/2019/10/24/6.12-he-fu-man-shu-ji-qi-ying-yong/"/>
      <url>/2019/10/24/6.12-he-fu-man-shu-ji-qi-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="6-12-赫夫曼树及其应用"><a href="#6-12-赫夫曼树及其应用" class="headerlink" title="6.12 赫夫曼树及其应用"></a>6.12 赫夫曼树及其应用</h1><blockquote><p>用来干什么呢？其实就是最基本的压缩算法</p></blockquote><h2 id="6-12-2-赫夫曼树定义和原理"><a href="#6-12-2-赫夫曼树定义和原理" class="headerlink" title="6.12.2 赫夫曼树定义和原理"></a>6.12.2 赫夫曼树定义和原理</h2><h3 id="1-什么是路径，什么是路径长度"><a href="#1-什么是路径，什么是路径长度" class="headerlink" title="1.什么是路径，什么是路径长度"></a>1.什么是路径，什么是路径长度</h3><p>路径就是：从树中一个结点到另一个结点之间的分支</p><p>路径长度是：路径上的分支数目</p><p>树的路径长度是：从树根到一每结点的路径长度之和。</p><p><img src="https://i.loli.net/2019/10/24/tkaxuSOz57sfHL2.jpg" alt></p><p>比如上图，根节点到A的路径长度是3，树的路径长度=1+2+3+3+2+1=12</p><h3 id="2-什么是带权路径长度"><a href="#2-什么是带权路径长度" class="headerlink" title="2.什么是带权路径长度"></a>2.什么是带权路径长度</h3><p>就是路径长度*权值，上面的树的带权路径长度=3 *5+3 *15+2 *70+1 *10</p><h3 id="3-什么是赫夫曼树"><a href="#3-什么是赫夫曼树" class="headerlink" title="3.什么是赫夫曼树"></a>3.什么是赫夫曼树</h3><p>带权路径长度WPL最小的二叉树称作赫夫曼树</p><h3 id="4-怎么构造赫夫曼树呢？"><a href="#4-怎么构造赫夫曼树呢？" class="headerlink" title="4.怎么构造赫夫曼树呢？"></a>4.怎么构造赫夫曼树呢？</h3><ol><li><p>在森林中选出两颗根结点的权值最小的二叉树。</p></li><li><p>合并两棵树，增加一个新结点作为新二叉树的根，权值为左右孩子的权重之和。</p></li><li><p>再从未选中的结点中选择一个最小的，和第2步的结点比较，小的放左边，大的放右边，然后重复，一直到结点没有了为止</p><p>具体如下图所示</p></li></ol><p><img src="https://i.loli.net/2019/10/24/EJ57lqokSVDbrfp.jpg" alt></p><h2 id="6-12-3-赫夫曼编码"><a href="#6-12-3-赫夫曼编码" class="headerlink" title="6.12.3 赫夫曼编码"></a>6.12.3 赫夫曼编码</h2><h3 id="1-什么是赫夫曼编码"><a href="#1-什么是赫夫曼编码" class="headerlink" title="1.什么是赫夫曼编码"></a>1.什么是赫夫曼编码</h3><p>其实是一种<strong>按照赫夫曼树定义的编码规则</strong>，出现多的字符的编码比较短，反之比较长，赫夫曼编码可以节省空间</p><h3 id="2-怎么生成赫夫曼编码呢？"><a href="#2-怎么生成赫夫曼编码呢？" class="headerlink" title="2.怎么生成赫夫曼编码呢？"></a>2.怎么生成赫夫曼编码呢？</h3><p>先把一系列数字转换成<strong>赫夫曼树</strong>，然后将权值<strong>左分支改为0</strong>，<strong>右分支改为1</strong>，得到下图：</p><p><img src="https://i.loli.net/2019/10/24/xfmdUTr32nL6CBF.jpg" alt></p><p>然后用<strong>树根到叶子所经过路径的0或者1来编码</strong>，比如B的编码是1001</p><p><img src="https://i.loli.net/2019/10/24/bIkjSQWZDxrm4EF.jpg" alt></p><h3 id="3-怎么由赫夫曼编码解码呢？"><a href="#3-怎么由赫夫曼编码解码呢？" class="headerlink" title="3.怎么由赫夫曼编码解码呢？"></a>3.怎么由赫夫曼编码解码呢？</h3><ol><li>先得到已知的赫夫曼树</li><li>按照数字对着赫夫曼树逐个查找就可以了</li></ol><p>比如说10010100101是什么？</p><p>B A D C</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.10 线索二叉树</title>
      <link href="/2019/10/24/6.10-xian-suo-er-cha-shu/"/>
      <url>/2019/10/24/6.10-xian-suo-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="6-10-线索二叉树"><a href="#6-10-线索二叉树" class="headerlink" title="6.10 线索二叉树"></a>6.10 线索二叉树</h1><h2 id="6-10-1-线索二叉树的原理"><a href="#6-10-1-线索二叉树的原理" class="headerlink" title="6.10.1  线索二叉树的原理"></a>6.10.1  线索二叉树的原理</h2><h3 id="1-普通的二叉树存在什么浪费空间的地方吗？"><a href="#1-普通的二叉树存在什么浪费空间的地方吗？" class="headerlink" title="1.普通的二叉树存在什么浪费空间的地方吗？"></a>1.普通的二叉树存在什么浪费空间的地方吗？</h3><p>对于有n个结点的二叉树，空链域却有n+1个</p><h3 id="2-怎么利用那些浪费的空间呢"><a href="#2-怎么利用那些浪费的空间呢" class="headerlink" title="2.怎么利用那些浪费的空间呢?"></a>2.怎么利用那些浪费的空间呢?</h3><p>因此，提出了一种方法，利用原来的<strong>空链域存放指针</strong>，指向树中其他结点。我们把指向前驱后继的这种指针称为线索。</p><p>相应的二叉树就是线索二叉树</p><h3 id="3-怎么知道某一个结点的lchild是指向左孩子还是前驱呢？"><a href="#3-怎么知道某一个结点的lchild是指向左孩子还是前驱呢？" class="headerlink" title="3.怎么知道某一个结点的lchild是指向左孩子还是前驱呢？"></a>3.怎么知道某一个结点的lchild是指向左孩子还是前驱呢？</h3><p>其实思路很简单，<strong>加个标记</strong>就行，0表示孩子，1表示前驱或者后继</p><p><img src="https://i.loli.net/2019/10/24/9DdJ51EHlzPi4aV.jpg" alt></p><p>修改后的二叉树是怎样的？</p><p><img src="https://i.loli.net/2019/10/24/i4QtNHmd5pqErVw.jpg" alt></p><h2 id="6-10-2-线索二叉树结构实现"><a href="#6-10-2-线索二叉树结构实现" class="headerlink" title="6.10.2 线索二叉树结构实现"></a>6.10.2 线索二叉树结构实现</h2><h3 id="1-线索二叉树存储结构是怎样的？"><a href="#1-线索二叉树存储结构是怎样的？" class="headerlink" title="1.线索二叉树存储结构是怎样的？"></a>1.线索二叉树存储结构是怎样的？</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 二叉树的二叉线索存储结构定义*/</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>Link<span class="token punctuation">,</span> Thread<span class="token punctuation">}</span>PointerTag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Link = 0表示指向左右孩子指针；Thread = 1表示指向前驱或后继的线索</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BitNode<span class="token punctuation">{</span>       <span class="token keyword">char</span> data<span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//结点数据</span>       <span class="token keyword">struct</span> BitNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//左右孩子指针</span>       PointerTag  Ltag<span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//左右标志</span>       PointerTag  rtal<span class="token punctuation">;</span><span class="token punctuation">}</span>BitNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span></code></pre><h3 id="2-怎么将普通二叉树转换为线索二叉树呢？"><a href="#2-怎么将普通二叉树转换为线索二叉树呢？" class="headerlink" title="2.怎么将普通二叉树转换为线索二叉树呢？"></a>2.怎么将普通二叉树转换为线索二叉树呢？</h3><p>其实<strong>线索化的实质</strong>是将二叉链表中的<strong>空指针改为指向前驱或后继</strong>的线索。</p><p><strong>中序遍历线索化</strong>的代码：</p><pre class=" language-c"><code class="language-c">BiTree pre<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//全局变量，始终指向刚刚访问过的结点</span><span class="token comment" spellcheck="true">//中序遍历进行中序线索化</span><span class="token keyword">void</span> <span class="token function">InThreading</span><span class="token punctuation">(</span>BiTree p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//递归左子树线索化</span>        <span class="token comment" spellcheck="true">//  中序遍历的是printf("%c",T->data);//显示结点数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//当前结点没有左孩子</span>        <span class="token punctuation">{</span>            p<span class="token operator">-></span>ltag <span class="token operator">=</span> Thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//前驱线索</span>            p<span class="token operator">-></span>lchild <span class="token operator">=</span> pre<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左孩子指针指向前驱</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pre<span class="token operator">-></span>rchild<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//前驱结点没有右孩子</span>        <span class="token punctuation">{</span>            pre<span class="token operator">-></span>rtag <span class="token operator">=</span> Thread<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//后继线索</span>            pre<span class="token operator">-></span>rchild <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//前驱右孩子指针指向后继(当前结点p)</span>        <span class="token punctuation">}</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//往上走</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//递归右子树线索化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-为什么后继的遍历要用前驱结点没有右孩子来判断呢？"><a href="#1-为什么后继的遍历要用前驱结点没有右孩子来判断呢？" class="headerlink" title="1.为什么后继的遍历要用前驱结点没有右孩子来判断呢？"></a>1.为什么后继的遍历要用前驱结点没有右孩子来判断呢？</h4><p>因为当前结点的后继还没有访问到，所以用前驱结点的后继来实现</p><h4 id="2-这里中序遍历线索化的代码和中序遍历有什么相同点呢？"><a href="#2-这里中序遍历线索化的代码和中序遍历有什么相同点呢？" class="headerlink" title="2.这里中序遍历线索化的代码和中序遍历有什么相同点呢？"></a>2.这里中序遍历线索化的代码和中序遍历有什么相同点呢？</h4><p>其实这里只是用改变空指针的代码代替了中序遍历中打印结点的代码</p><h3 id="3-怎么遍历线索二叉树呢？"><a href="#3-怎么遍历线索二叉树呢？" class="headerlink" title="3.怎么遍历线索二叉树呢？"></a>3.怎么遍历线索二叉树呢？</h3><p>类似遍历双向链表的方法，加个头指针</p><p><img src="https://i.loli.net/2019/10/24/hMZevPtKx1LRX48.jpg" alt></p><p>代码是怎样的？</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//t指向头结点，头结点左链lchild指向根结点，头结点右链rchild指向中序遍历的最后一个结点。</span><span class="token comment" spellcheck="true">//中序遍历二叉线索树表示二叉树t</span><span class="token keyword">int</span> <span class="token function">InOrderThraverse_Thr</span><span class="token punctuation">(</span>BiTree t<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiTree p<span class="token punctuation">;</span>    p <span class="token operator">=</span> t<span class="token operator">-></span>lchild<span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//p指向根结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> t<span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true">//空树或遍历结束时p == t</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>ltag <span class="token operator">==</span> Link<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true">//当ltag = 0时循环到中序序列的第一个结点，到达最底部结点</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//显示结点数据，可以更改为其他对结点的操作</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rtag <span class="token operator">==</span> Thread <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>rchild <span class="token operator">!=</span> t<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当右指针指向后继的时候，循环打印</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//p进入其右子树</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>什么时候使用线索二叉树呢？</p><p>当需要经常遍历或者查找结点的时候，可以用线索二叉树</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口和接口回调</title>
      <link href="/2019/10/23/jie-kou-he-jie-kou-hui-diao/"/>
      <url>/2019/10/23/jie-kou-he-jie-kou-hui-diao/</url>
      
        <content type="html"><![CDATA[<h1 id="接口和接口回调"><a href="#接口和接口回调" class="headerlink" title="接口和接口回调"></a>接口和接口回调</h1><h2 id="1-什么是接口"><a href="#1-什么是接口" class="headerlink" title="1.什么是接口"></a>1.什么是接口</h2><p>一种规范，一种规则，比如说，如果你是鸟，你就一定会飞，这里，鸟其实可以简单看成1个接口，会飞，可以看成接口里面的一个方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//有两条腿</span>    <span class="token keyword">void</span> <span class="token function">haveTwoLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swallow</span> <span class="token keyword">implements</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是燕子我会飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">haveTwoLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是燕子我有2条腿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-接口的作用"><a href="#2-接口的作用" class="headerlink" title="2.接口的作用"></a>2.接口的作用</h2><ul><li><p>实现了高内聚</p><p>其实就是通过接口，把使用细节封装起来，向外展示的是一个方法而已，类似于说明书的作用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Chat</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这样就声明这个聊天的功能有2个，让别人一看就知道</span>    <span class="token comment" spellcheck="true">//发消息</span>    <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收消息</span>    <span class="token keyword">void</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Class <span class="token class-name">GroupChat</span> <span class="token keyword">implements</span> <span class="token class-name">Chat</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>很多行代码    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>很多行代码    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>低耦合</p><p>我也不是很明白</p><p>百度说的</p><p>其次是接口的松耦合是我们可以编写可复性高的代码。比如Server层本来引用使用Dao层mysql数据库的实现类，现在遇到mysql解决不了的业务，需要orcale实现，难道你要为了这一个或几个的功能，把所有的引用mysql的全删掉重写？只要再写一个dao层的实现类去引用这个接口，遇到需要orcale方法使用哪个接口变量就好了，别人写的代码也无需去删改。抽象类可以再写一个子类，但子类却不受父类过多约束，随意添加方法，对于项目的协同工作不利。抽象类做不到==对修改封闭，对扩展开放==的原则。</p></li></ul><h2 id="3-接口的应用之一–接口回调"><a href="#3-接口的应用之一–接口回调" class="headerlink" title="3.接口的应用之一–接口回调"></a>3.接口的应用之一–接口回调</h2><h3 id="1-什么是接口回调呢"><a href="#1-什么是接口回调呢" class="headerlink" title="1.什么是接口回调呢"></a>1.什么是接口回调呢</h3><p>  ​    其实就是，A调用B，B再回去调用A的另一个方法，是不是很晕，晕就对了</p><p>  打个比方：就是A去打车，问B多少钱，B说100块，然后A给了B 100元</p><p>  再打个比方：小明问小花数学题，小花说我先学完java，学完后就打回给你，之后半小时，小花打电话回去给小明了</p><h3 id="2-为什么要回调呢"><a href="#2-为什么要回调呢" class="headerlink" title="2.为什么要回调呢"></a>2.为什么要回调呢</h3><p>有人想说，直接A调用A的另一个方法就行了鸭，但是事情往往不是那么简单的，有一些事情必须要问别人，等待别人的回答，才能调用A的另一个方法，类比，总不能A自问自答吧</p><h3 id="3-简单的回调示例"><a href="#3-简单的回调示例" class="headerlink" title="3.简单的回调示例"></a>3.简单的回调示例</h3><p>实现功能，小明打电话给小花，小花接到电话后，完成数学作业后，再打电话给小明</p><p>//接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> net<span class="token punctuation">.</span>qiujuer<span class="token punctuation">.</span>web<span class="token punctuation">.</span>italker<span class="token punctuation">.</span>push<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CallBack</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">callBackToXiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//小明</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMing</span> <span class="token keyword">implements</span> <span class="token class-name">CallBack</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">askToXiaoHua</span><span class="token punctuation">(</span>XiaoHua xiaoHua<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明打电话给小花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaoHua<span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里为什么传入this,因为他实现了CallBack，本来是应该传入callBack的，但是因为当前类实现了CallBack，所以callBack有的东西当前的类也有，自然就可以传入this了</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callBackToXiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明收到回电"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>//小花</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoHua</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">answer</span><span class="token punctuation">(</span>CallBack callBack<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小花接到了小明的电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//这里写的是小花花费了半个小时写作业</span>            <span class="token comment" spellcheck="true">//半小时后，打电话回去</span>        callBack<span class="token punctuation">.</span><span class="token function">callBackToXiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>main方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> net<span class="token punctuation">.</span>qiujuer<span class="token punctuation">.</span>web<span class="token punctuation">.</span>italker<span class="token punctuation">.</span>push<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCallBack</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        XiaoHua xiaoHua <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoHua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XiaoMing xiaoMing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">askToXiaoHua</span><span class="token punctuation">(</span>xiaoHua<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-安卓中的接口回调是怎样的？"><a href="#4-安卓中的接口回调是怎样的？" class="headerlink" title="4.安卓中的接口回调是怎样的？"></a>4.安卓中的接口回调是怎样的？</h2><blockquote><p>其实接口回调经常见到</p></blockquote><h3 id="1-点击事件就是接口回调"><a href="#1-点击事件就是接口回调" class="headerlink" title="1.点击事件就是接口回调"></a>1.点击事件就是接口回调</h3><pre class=" language-java"><code class="language-java">mIvMe<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里面写了点击后的处理，调用了点击事件的接口，注意：点击事件的接口的设计相对于上面所说的司机的角色</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>BaseActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>MeActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-接口回调怎么写？"><a href="#2-接口回调怎么写？" class="headerlink" title="2.接口回调怎么写？"></a>2.接口回调怎么写？</h3><h4 id="1-在需要传递数据的地方定义一个接口，例如可以直接接收点击事件的地方（RecyclerView的adapter）"><a href="#1-在需要传递数据的地方定义一个接口，例如可以直接接收点击事件的地方（RecyclerView的adapter）" class="headerlink" title="1.在需要传递数据的地方定义一个接口，例如可以直接接收点击事件的地方（RecyclerView的adapter）"></a>1.在需要传递数据的地方定义一个接口，例如可以直接接收点击事件的地方（RecyclerView的adapter）</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/** * 定义一个接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span>  <span class="token class-name">onListener</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">OnListener</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-在需要传递数据的地方定义一个的接口类型的变量存储数据"><a href="#2-在需要传递数据的地方定义一个的接口类型的变量存储数据" class="headerlink" title="2.在需要传递数据的地方定义一个的接口类型的变量存储数据"></a>2.在需要传递数据的地方<strong>定义一个的接口类型的变量存储数据</strong></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *定义一个变量储存数据 */</span><span class="token keyword">private</span> onListener listener<span class="token punctuation">;</span> </code></pre><h4 id="3-在需要传递数据的地方定义一个公共的方法，让外部去调用，并且传递接口类型的参数，给其定义的接口类型的数据初始化"><a href="#3-在需要传递数据的地方定义一个公共的方法，让外部去调用，并且传递接口类型的参数，给其定义的接口类型的数据初始化" class="headerlink" title="3.在需要传递数据的地方定义一个公共的方法，让外部去调用，并且传递接口类型的参数，给其定义的接口类型的数据初始化"></a>3.在需要传递数据的地方<strong>定义一个公共的方法，让外部去调用，并且传递接口类型的参数，给其定义的接口类型的数据初始化</strong></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *提供公共的方法,并且初始化接口类型的数据 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setListener</span><span class="token punctuation">(</span> onListener listener<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>listener <span class="token operator">=</span> listener<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-在需要传递数据的地方，合适的位置调用接口里面的方法，传递数据。（比如点击事件的地方）"><a href="#4-在需要传递数据的地方，合适的位置调用接口里面的方法，传递数据。（比如点击事件的地方）" class="headerlink" title="4.在需要传递数据的地方，合适的位置调用接口里面的方法，传递数据。（比如点击事件的地方）"></a>4.在需要传递数据的地方，<strong>合适的位置调用接口里面的方法，传递数据。（比如点击事件的地方）</strong></h4><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/** * 在合适的位置给其调用接口，给其赋值 */</span> @Override <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//这个判断不可少</span>          listener<span class="token punctuation">.</span><span class="token function">OnListener</span><span class="token punctuation">(</span>rtncode<span class="token punctuation">,</span>rtnmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-在需要获取数据的地方，创建对象调方法。"><a href="#5-在需要获取数据的地方，创建对象调方法。" class="headerlink" title="5.在需要获取数据的地方，创建对象调方法。"></a>5.<strong>在需要获取数据的地方，创建对象调方法。</strong></h4><pre class=" language-java"><code class="language-java">allPersonAdapter<span class="token punctuation">.</span><span class="token function">setItemOnClickInterface</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AllPersonAdapter<span class="token punctuation">.</span>ItemOnClickInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//在这里获取数据进行处理</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓基础知识 </tag>
            
            <tag> java基础知识 </tag>
            
            <tag> 接口回调 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.11 树、森林与二叉树的转换</title>
      <link href="/2019/10/23/6.11-shu-sen-lin-yu-er-cha-shu-de-zhuan-huan/"/>
      <url>/2019/10/23/6.11-shu-sen-lin-yu-er-cha-shu-de-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="6-11-树、森林与二叉树的转换"><a href="#6-11-树、森林与二叉树的转换" class="headerlink" title="6.11 树、森林与二叉树的转换"></a>6.11 树、森林与二叉树的转换</h1><h2 id="6-11-1-树转换为二叉树"><a href="#6-11-1-树转换为二叉树" class="headerlink" title="6.11.1 树转换为二叉树"></a>6.11.1 树转换为<strong>二叉树</strong></h2><h3 id="1-步骤是什么？"><a href="#1-步骤是什么？" class="headerlink" title="1.步骤是什么？"></a>1.步骤是什么？</h3><ol><li>加线，在所有兄弟结点之间加一条连线；</li><li>去线，就是对树中的每个结点，只保留他与第一个孩子结点之间的连线，删除它与其它孩子结点之间的连线；</li><li>层次调整，是以树的根结点为轴心，将整棵树顺时针旋转一定角度，使之结构层次分明。</li></ol><p><img src="https://i.loli.net/2019/10/23/CxQZTmFYn3h8ELw.jpg" alt></p><h2 id="6-11-2-森林转换为二叉树"><a href="#6-11-2-森林转换为二叉树" class="headerlink" title="6.11.2 森林转换为二叉树"></a>6.11.2 森林<strong>转换为二叉树</strong></h2><h3 id="1-步骤是什么？-1"><a href="#1-步骤是什么？-1" class="headerlink" title="1.步骤是什么？"></a>1.步骤是什么？</h3><ol><li>先把<strong>每棵树转换为二叉树</strong>；</li><li>第一棵二叉树不动，从第二棵二叉树开始，依次<strong>把后一棵二叉树的根结点</strong>作为<strong>前一棵二叉树</strong>的<strong>根结点的右孩子</strong>结点，用线连接起来。当所有的二叉树连接起来后得到的二叉树就是由森林转换得到的二叉树</li></ol><p><img src="https://i.loli.net/2019/10/23/kDR29fTqIHF38Xl.jpg" alt></p><h2 id="6-11-3-二叉树转化为树"><a href="#6-11-3-二叉树转化为树" class="headerlink" title="6.11.3 二叉树转化为树"></a>6.11.3 二叉树转化为树</h2><h3 id="1-步骤是什么？-2"><a href="#1-步骤是什么？-2" class="headerlink" title="1.步骤是什么？"></a>1.步骤是什么？</h3><ol><li>若某结点的左孩子结点存在，将左孩子结点的右孩子结点、右孩子结点的右孩子结点……都作为该结点的孩子结点，将该结点与这些右孩子结点用线连接起来（反正是左孩子的n个右孩子结点）</li><li>去线，删除原二叉树中所有结点与其右孩子结点的连线；</li><li>层次调整</li></ol><p><img src="https://i.loli.net/2019/10/23/YGgTMPKELtbAxcm.jpg" alt></p><h2 id="6-11-4-二叉树转换为森林"><a href="#6-11-4-二叉树转换为森林" class="headerlink" title="6.11.4 二叉树转换为森林"></a>6.11.4 <strong>二叉树转换为森林</strong></h2><h3 id="1-步骤是什么？-3"><a href="#1-步骤是什么？-3" class="headerlink" title="1.步骤是什么？"></a>1.步骤是什么？</h3><ol><li><p>先把每个结点与右孩子结点的连线删除，得到分离的二叉树；（先分出每棵树）</p></li><li><p>把分离后的每棵二叉树转换为树；</p></li><li><p>整理</p><p><img src="https://i.loli.net/2019/10/23/WUjwXCGIJulRPb3.jpg" alt></p></li></ol><h2 id="6-11-5-树和森林的遍历"><a href="#6-11-5-树和森林的遍历" class="headerlink" title="6.11.5 树和森林的遍历"></a>6.11.5 树和森林的遍历</h2><h3 id="1-树的遍历方式有几种？"><a href="#1-树的遍历方式有几种？" class="headerlink" title="1.树的遍历方式有几种？"></a>1.树的遍历方式有几种？</h3><p><img src="https://i.loli.net/2019/10/23/YGgTMPKELtbAxcm.jpg" alt></p><h4 id="1-第一种，根优先遍历"><a href="#1-第一种，根优先遍历" class="headerlink" title="1.第一种，根优先遍历"></a>1.第一种，根优先遍历</h4><p>先根遍历树，就是<strong>先访问树的根节点，然后依次根遍历根的子树</strong>，拿上图举例，就是 <strong>ABCEFDGHI</strong></p><h4 id="2-第二种，后根遍历"><a href="#2-第二种，后根遍历" class="headerlink" title="2.第二种，后根遍历"></a>2.第二种，后根遍历</h4><p><strong>先依次后根遍历每棵子树</strong>，然后<strong>再访问根结点</strong>，拿上图举例，就是 <strong>ECFBDHIGA</strong></p><h3 id="2-森林的遍历有几种方式？"><a href="#2-森林的遍历有几种方式？" class="headerlink" title="2.森林的遍历有几种方式？"></a>2.森林的遍历有几种方式？</h3><p><img src="https://i.loli.net/2019/10/23/WUjwXCGIJulRPb3.jpg" alt></p><h4 id="1-前序遍历："><a href="#1-前序遍历：" class="headerlink" title="1.前序遍历："></a>1.前序遍历：</h4><p>其实就是先访问森林中第一棵树的根节点，然后依次遍历根的子树，然后再找下一棵树的根，再重复上述操作</p><p>上图的就是，ABCDEFGHJI</p><h4 id="2-后序遍历："><a href="#2-后序遍历：" class="headerlink" title="2.后序遍历："></a>2.后序遍历：</h4><p>其实就是以后根方式依次遍历每一棵树</p><p>上图的就是，BCDAFEJHIG</p><h3 id="总结前面的，其实我们可以知道，森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同"><a href="#总结前面的，其实我们可以知道，森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同" class="headerlink" title="总结前面的，其实我们可以知道，森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同"></a>总结前面的，其实我们可以知道，森林的前序遍历和二叉树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同</h3>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广义表简析</title>
      <link href="/2019/10/23/guang-yi-biao-jian-xi/"/>
      <url>/2019/10/23/guang-yi-biao-jian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="广义表简析"><a href="#广义表简析" class="headerlink" title="广义表简析"></a>广义表简析</h1><blockquote><p>什么是广义表呢？你知道文件系统吗</p></blockquote><h2 id="1-什么是广义表呢？"><a href="#1-什么是广义表呢？" class="headerlink" title="1.什么是广义表呢？"></a>1.什么是广义表呢？</h2><p>其实就是一个可以表中有表的，允许表的嵌套的结构</p><p>例如:文件系统，文件夹下面可能是文件夹，也可能是文件，这就是广义表</p><h2 id="2-广义表有什么属性呢？"><a href="#2-广义表有什么属性呢？" class="headerlink" title="2.广义表有什么属性呢？"></a>2.广义表有什么属性呢？</h2><ul><li><p>表头，表尾</p><p>表头是第一个元素，表尾是除表头以外的元素</p></li><li><p>长度</p><p>广义表的元素个数</p></li><li><p>深度</p><p>广义表的嵌套层数，需要注意，<strong>空表</strong>的深度是1，<strong>原子</strong>的深度是0</p></li></ul><h2 id="3-存储结构"><a href="#3-存储结构" class="headerlink" title="3.存储结构"></a>3.存储结构</h2><h3 id="1-是链式还是顺序表式"><a href="#1-是链式还是顺序表式" class="headerlink" title="1.是链式还是顺序表式"></a>1.是链式还是顺序表式</h3><p>链式，便于存储空间的扩容</p><h3 id="2-结点的分类："><a href="#2-结点的分类：" class="headerlink" title="2.结点的分类："></a>2.结点的分类：</h3><ol><li><p>原子结点（ATOM==0）</p></li><li><p>表结点（LIST==1）</p><p>表结点用来表示一个广义表</p></li></ol><p><img src="https://i.loli.net/2019/10/23/Z1dzhrqCw6ypnxO.jpg" alt></p><h2 id="4-广义表的分解方式"><a href="#4-广义表的分解方式" class="headerlink" title="4.广义表的分解方式"></a>4.广义表的分解方式</h2><h3 id="1-分解为表头和表尾，2个子集，分别递归求解，直至空表或者原子出现"><a href="#1-分解为表头和表尾，2个子集，分别递归求解，直至空表或者原子出现" class="headerlink" title="1.分解为表头和表尾，2个子集，分别递归求解，直至空表或者原子出现"></a>1.分解为表头和表尾，2个子集，分别递归求解，直至空表或者原子出现</h3><p><img src="https://i.loli.net/2019/10/23/Bhi4Sp8ZlJLow5q.jpg" alt></p><h3 id="2-每个元素依次分解"><a href="#2-每个元素依次分解" class="headerlink" title="2.每个元素依次分解"></a>2.每个元素依次分解</h3><p><img src="https://i.loli.net/2019/10/23/j3rRJdYagkwvIGx.jpg" alt></p><p>由此可见，方式2比方式1分解层数少</p><h2 id="5-广义表常用操作实现"><a href="#5-广义表常用操作实现" class="headerlink" title="5.广义表常用操作实现"></a>5.广义表常用操作实现</h2><h3 id="1-求深度的算法"><a href="#1-求深度的算法" class="headerlink" title="1.求深度的算法"></a>1.求深度的算法</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">GListDepth</span><span class="token punctuation">(</span>GList L<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> h1<span class="token punctuation">,</span>h2<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>L<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//空表</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>ATOM<span class="token operator">==</span>L<span class="token operator">-></span>tag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//原子</span>     h1<span class="token operator">=</span><span class="token function">GListDepth</span><span class="token punctuation">(</span>L<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表头深度+1</span>     h2<span class="token operator">=</span><span class="token function">GListDepth</span><span class="token punctuation">(</span>L<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表尾的深度和原表相同</span>     <span class="token keyword">return</span> h1<span class="token operator">>=</span>h2<span class="token operator">?</span> h1<span class="token punctuation">:</span>h2<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="2-在表尾添加元素"><a href="#2-在表尾添加元素" class="headerlink" title="2.在表尾添加元素"></a>2.在表尾添加元素</h3><pre class=" language-c"><code class="language-c">bool <span class="token function">Append</span><span class="token punctuation">(</span>GList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>GLNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在广义表末尾添加新的表结点，将参数p赋予表头指针hp</span>    GLNode <span class="token operator">*</span>pp<span class="token punctuation">;</span>    GList tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新建表尾结点</span>    tail<span class="token operator">=</span><span class="token punctuation">(</span>GList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>GLNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>tail<span class="token punctuation">)</span> <span class="token keyword">return</span> OVERFLOW<span class="token punctuation">;</span>    tail<span class="token operator">-></span>tag<span class="token operator">=</span>LIST<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加数据</span>    tail<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>hp<span class="token operator">=</span>p<span class="token punctuation">;</span>    tail<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>tp<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>L<span class="token punctuation">)</span> L<span class="token operator">=</span>tail<span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>pp<span class="token operator">=</span>L<span class="token punctuation">;</span>pp<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>tp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>pp<span class="token operator">=</span>pp<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定位到最后一个结点</span>        pp<span class="token operator">-></span>un<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>tp<span class="token operator">=</span>tail<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广义表 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.9 二叉树的建立</title>
      <link href="/2019/10/23/6.9-er-cha-shu-de-jian-li/"/>
      <url>/2019/10/23/6.9-er-cha-shu-de-jian-li/</url>
      
        <content type="html"><![CDATA[<h1 id="6-9-二叉树的建立"><a href="#6-9-二叉树的建立" class="headerlink" title="6.9 二叉树的建立"></a>6.9 二叉树的建立</h1><h2 id="1-什么是拓展二叉树"><a href="#1-什么是拓展二叉树" class="headerlink" title="1.什么是拓展二叉树"></a>1.什么是拓展二叉树</h2><p>简单说，就是将叶子结点也补上空指针，使其形成类似于完全二叉树的样子</p><p><img src="https://i.loli.net/2019/10/15/kS9qYKHmROis4gh.jpg" alt></p><h2 id="2-怎么生成一个二叉树呢？"><a href="#2-怎么生成一个二叉树呢？" class="headerlink" title="2.怎么生成一个二叉树呢？"></a>2.怎么生成一个二叉树呢？</h2><p>我们把刚才<strong>前序</strong>遍历序列<strong>AB#D##C##</strong>用键盘挨个输入。实现如下算法：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//根左右</span><span class="token keyword">void</span>  <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>BiTree   <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>     TElemType   ch<span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token operator">*</span>T<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>               <span class="token operator">*</span>T<span class="token operator">=</span><span class="token punctuation">(</span>SiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SiTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成根结点</span>                 <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>T<span class="token punctuation">)</span>                <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左子树</span>                <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右子树</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实生成二叉树的方法也是用到了递归的思想</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.8 遍历二叉树</title>
      <link href="/2019/10/23/6.8-bian-li-er-cha-shu/"/>
      <url>/2019/10/23/6.8-bian-li-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="6-8-遍历二叉树"><a href="#6-8-遍历二叉树" class="headerlink" title="6.8 遍历二叉树"></a>6.8 遍历二叉树</h1><h2 id="6-8-1-原理"><a href="#6-8-1-原理" class="headerlink" title="6.8.1 原理"></a>6.8.1 原理</h2><p>是指从根节点出发，按照<strong>某种次序依次</strong>访问二叉树中的所有节点，使得每个节点被访问一次且<strong>仅被访问一次</strong>。</p><p>重点和难点是<strong>次序</strong></p><h2 id="6-8-2-二叉树遍历方法"><a href="#6-8-2-二叉树遍历方法" class="headerlink" title="6.8.2  二叉树遍历方法"></a>6.8.2  二叉树遍历方法</h2><h3 id="1-前序遍历"><a href="#1-前序遍历" class="headerlink" title="1.前序遍历"></a>1.前序遍历</h3><p><strong>根左右</strong></p><p>简单说就是：从根节点开始，<strong>先左边，后右边,从高到低</strong></p><p>比如说下面的次序是：ABDGHCEIF</p><p><img src="https://s2.ax1x.com/2019/10/15/KPQJrn.jpg" alt="KPQJrn.jpg"></p><p>代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*先序遍历: 根-左-右*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示结点数据</span>        <span class="token function">PreOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先遍历左子树</span>        <span class="token function">PreOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//再遍历右子树</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-中序遍历：左根右"><a href="#2-中序遍历：左根右" class="headerlink" title="2.中序遍历：左根右"></a>2.中序遍历：左根右</h3><p>简单说就是，从下面开始，<strong>左根右</strong></p><p><img src="https://s2.ax1x.com/2019/10/15/KPltQH.jpg" alt="KPltQH.jpg"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*中序遍历：左-根-右*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先遍历左子树</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示结点数据</span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//再遍历右子树</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-后序遍历：左右根"><a href="#3-后序遍历：左右根" class="headerlink" title="3.后序遍历：左右根"></a>3.后序遍历：左右根</h3><p>从下到上，左右根</p><p><img src="https://s2.ax1x.com/2019/10/15/KPlb6J.jpg" alt="KPlb6J.jpg"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*后序遍历：左-右-根*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先遍历左子树</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//再遍历右子树</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示结点数据</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-层序遍历"><a href="#4-层序遍历" class="headerlink" title="4.层序遍历"></a>4.层序遍历</h3><p>从根节点出发，依次访问左右孩子结点，再从左右孩子出发，依次它们的孩子结点，直到节点访问完毕</p><p>简而言之：从上到下，一层一层</p><p><img src="https://i.loli.net/2019/10/15/gKQ42qOy6WSrwt3.jpg" alt></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*层序遍历 思路：按从左至右的顺序来逐层访问每个节点，层序遍历的过程需要队列*/</span><span class="token keyword">void</span> <span class="token function">LevelOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiTree p <span class="token operator">=</span> T<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>BiTree<span class="token operator">></span> queue<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*队列*/</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/*根节点入队*/</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*队列不空循环 */</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*对头元素出队*/</span>        <span class="token comment" spellcheck="true">//printf("%c ",p->data); </span><span class="token comment" spellcheck="true">/*访问p指向的结点*/</span>        cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*退出队列*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*左子树不空，将左子树入队*/</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*右子树不空，将右子树入队*/</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-8-6-推导遍历结果"><a href="#6-8-6-推导遍历结果" class="headerlink" title="6.8.6 推导遍历结果"></a>6.8.6 推导遍历结果</h2><h3 id="1-已知前序遍历序列和中序遍历序列，可以唯一确定二叉树吗？"><a href="#1-已知前序遍历序列和中序遍历序列，可以唯一确定二叉树吗？" class="headerlink" title="1.已知前序遍历序列和中序遍历序列，可以唯一确定二叉树吗？"></a>1.已知前序遍历序列和中序遍历序列，可以唯一确定二叉树吗？</h3><p>前序的话，可以一眼看出根节点是第一个</p><h3 id="2-已知后序和中序，可以唯一确定二叉树吗"><a href="#2-已知后序和中序，可以唯一确定二叉树吗" class="headerlink" title="2.已知后序和中序，可以唯一确定二叉树吗?"></a>2.已知后序和中序，可以唯一确定二叉树吗?</h3><p>后序的话，可以一眼看出根节点是最后一个</p><h3 id="结论：中序是一定要有的，才能确定二叉树"><a href="#结论：中序是一定要有的，才能确定二叉树" class="headerlink" title="结论：中序是一定要有的，才能确定二叉树"></a>结论：中序是一定要有的，才能确定二叉树</h3><h2 id="本节重点："><a href="#本节重点：" class="headerlink" title="本节重点："></a>本节重点：</h2><h3 id="记住三字口诀"><a href="#记住三字口诀" class="headerlink" title="记住三字口诀"></a>记住三字口诀</h3><h3 id="根左右"><a href="#根左右" class="headerlink" title="根左右"></a>根左右</h3><h3 id="左根右"><a href="#左根右" class="headerlink" title="左根右"></a>左根右</h3><h3 id="左右根"><a href="#左右根" class="headerlink" title="左右根"></a>左右根</h3>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.7 二叉树的存储结构</title>
      <link href="/2019/10/23/6.7-er-cha-shu-de-cun-chu-jie-gou/"/>
      <url>/2019/10/23/6.7-er-cha-shu-de-cun-chu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="6-7-二叉树的存储结构"><a href="#6-7-二叉树的存储结构" class="headerlink" title="6.7 二叉树的存储结构"></a>6.7 二叉树的存储结构</h1><h2 id="1-顺序存储"><a href="#1-顺序存储" class="headerlink" title="1.顺序存储"></a>1.顺序存储</h2><p>一般只有用于完全二叉树（由于普通的二叉树，例如左斜树，造成存储空间的浪费）</p><h2 id="2-二叉链表"><a href="#2-二叉链表" class="headerlink" title="2.二叉链表"></a>2.二叉链表</h2><p>1个数据域，2个指针域，</p><p><img src="https://s2.ax1x.com/2019/10/15/KPiCQO.png" alt="KPiCQO.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.6 二叉树的性质</title>
      <link href="/2019/10/23/6.6-er-cha-shu-de-xing-zhi/"/>
      <url>/2019/10/23/6.6-er-cha-shu-de-xing-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-6-二叉树的性质"><a href="#6-6-二叉树的性质" class="headerlink" title="6.6 二叉树的性质"></a>6.6 二叉树的性质</h1><h2 id="1-一层最多结点数性质："><a href="#1-一层最多结点数性质：" class="headerlink" title="1.一层最多结点数性质："></a>1.一层最多结点数性质：</h2><p>最多2的（层数-1）次方个结点</p><h2 id="2-已知深度，求最大结点数的性质"><a href="#2-已知深度，求最大结点数的性质" class="headerlink" title="2.已知深度，求最大结点数的性质"></a>2.已知深度，求最大结点数的性质</h2><p><img src="https://s2.ax1x.com/2019/10/15/KP9OcF.png" alt="KP9OcF.png"></p><p>与上面不同，上面是次方里面-1，这里是次方外面-1</p><h2 id="3-终端结点数和度数为2的结点数的关系"><a href="#3-终端结点数和度数为2的结点数的关系" class="headerlink" title="3.终端结点数和度数为2的结点数的关系"></a>3.终端结点数和度数为2的结点数的关系</h2><p>叶子结点数=度数为2的结点数+1</p><h2 id="4-已知结点数，求深度"><a href="#4-已知结点数，求深度" class="headerlink" title="4.已知结点数，求深度"></a>4.已知结点数，求深度</h2><p><img src="https://s2.ax1x.com/2019/10/15/KPC4gO.png" alt="KPC4gO.png"></p><h2 id="5-根据结点总数和编号判断结点类型"><a href="#5-根据结点总数和编号判断结点类型" class="headerlink" title="5.根据结点总数和编号判断结点类型"></a>5.根据结点总数和编号判断结点类型</h2><p>如果对一棵有n个结点的完全二叉树的结点按层序编号，对任一结点 i 有</p><ul><li>若i=1,则i是根；如果i&gt;1,则双亲是结点i/2（向下取整）</li><li>如果2i&gt;n,则结点i是叶子结点；否则左孩子是2i</li><li>如果2i+1&gt;n,则无右孩子；否则右孩子是2i+1；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.5 二叉树的定义</title>
      <link href="/2019/10/23/6.5-er-cha-shu-de-ding-yi/"/>
      <url>/2019/10/23/6.5-er-cha-shu-de-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-5-二叉树的定义"><a href="#6-5-二叉树的定义" class="headerlink" title="6.5 二叉树的定义"></a>6.5 二叉树的定义</h1><blockquote><p>上一节6.4 我们已经探讨了一种树的表示方法，孩子兄弟表示法，其实这就和我们这节要探讨的二叉树很有相似性</p></blockquote><h2 id="总起：二叉树是什么？"><a href="#总起：二叉树是什么？" class="headerlink" title="总起：二叉树是什么？"></a>总起：二叉树是什么？</h2><p>二叉树其实就是每个结点最多只有2个分叉的树</p><p>百度上的概念是：</p><p><img src="https://i.loli.net/2019/10/15/jzasn8x1cVgw47b.jpg" alt></p><p>例如：</p><p><img src="https://i.loli.net/2019/10/15/wAaNCqcfJVSPItL.jpg" alt></p><h2 id="6-5-1-二叉树的特点"><a href="#6-5-1-二叉树的特点" class="headerlink" title="6.5.1 二叉树的特点"></a>6.5.1 二叉树的特点</h2><h3 id="1-二叉树的特点有什么呢？"><a href="#1-二叉树的特点有什么呢？" class="headerlink" title="1.二叉树的特点有什么呢？"></a>1.二叉树的特点有什么呢？</h3><ul><li>每个结点最多2个子树</li><li>左子树和右子树是<strong>有顺序的</strong></li><li>即使只有<strong>1个</strong>结点，也要<strong>区分是左子树还是右子树</strong></li></ul><h3 id="2-二叉树有几种形态呢"><a href="#2-二叉树有几种形态呢" class="headerlink" title="2.二叉树有几种形态呢"></a>2.二叉树有几种形态呢</h3><ul><li>空二叉树</li><li>只有根节点</li><li>只有左子树</li><li>只有右子树</li><li>既有左子树，又有右子树</li></ul><h3 id="3-如果是1棵树只有3个结点的话，有几种形态呢？"><a href="#3-如果是1棵树只有3个结点的话，有几种形态呢？" class="headerlink" title="3.如果是1棵树只有3个结点的话，有几种形态呢？"></a>3.如果是1棵树只有3个结点的话，有几种形态呢？</h3><p>5种</p><p><img src="https://s2.ax1x.com/2019/10/15/KCTZ0e.png" alt="KCTZ0e.png"></p><h2 id="6-5-2-特殊二叉树"><a href="#6-5-2-特殊二叉树" class="headerlink" title="6.5.2  特殊二叉树"></a>6.5.2  特殊二叉树</h2><h3 id="1-什么是斜树"><a href="#1-什么是斜树" class="headerlink" title="1.什么是斜树"></a>1.什么是斜树</h3><p><img src="https://s2.ax1x.com/2019/10/15/KCTonO.png" alt="KCTonO.png"></p><p>所有结点都只有左子树的二叉树叫左斜树</p><p>所有结点都只有右子树的二叉树叫右斜树</p><p>这两者统称为斜树。</p><p>线性表结构可以理解为是树的一种极其特殊的表现形式</p><h3 id="2-满二叉树"><a href="#2-满二叉树" class="headerlink" title="2.满二叉树"></a>2.满二叉树</h3><p>定义：一棵二叉树中，所有分支结点都存在左右子树，并且所有叶子都在同一层</p><p>类比完美的学生，什么都会</p><p><img src="https://s2.ax1x.com/2019/10/15/KC7ACn.png" alt="KC7ACn.png"></p><h3 id="3-完全二叉树"><a href="#3-完全二叉树" class="headerlink" title="3.完全二叉树"></a>3.完全二叉树</h3><p>定义：对一棵具有n个结点的二叉树按层序编号，如果编号i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中<strong>位置完全相同</strong>，则此二叉树为完全二叉树</p><p>类比：追求完美的勤奋的学生，就是他的轨迹都模仿着完美的学生，不能突破常规，要什么都学精了再前进</p><p><img src="https://s2.ax1x.com/2019/10/15/KC7tKK.png" alt="KC7tKK.png"></p><h4 id="非完全二叉树示例："><a href="#非完全二叉树示例：" class="headerlink" title="非完全二叉树示例："></a>非完全二叉树示例：</h4><p><img src="https://s2.ax1x.com/2019/10/15/KC7o2q.png" alt="KC7o2q.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.8 归并排序</title>
      <link href="/2019/10/22/9.8-gui-bing-pai-xu/"/>
      <url>/2019/10/22/9.8-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="9-8-归并排序"><a href="#9-8-归并排序" class="headerlink" title="9.8 归并排序"></a>9.8 归并排序</h1><blockquote><p>什么是归并排序呢？</p></blockquote><p><img src="https://i.loli.net/2019/10/22/GTd3q5UmOg6rBoS.jpg" alt></p><h2 id="9-8-1-归并排序算法"><a href="#9-8-1-归并排序算法" class="headerlink" title="9.8.1 归并排序算法"></a>9.8.1 归并排序算法</h2><h3 id="1-什么是归并排序（2路归并）？"><a href="#1-什么是归并排序（2路归并）？" class="headerlink" title="1.什么是归并排序（2路归并）？"></a>1.什么是归并排序（2路归并）？</h3><p>其实简单说就是，把一个数字序列，按数字一个一个分开来，然后相邻的数字两两归并，如上图</p><h3 id="2-归并排序代码是怎样的？"><a href="#2-归并排序代码是怎样的？" class="headerlink" title="2.归并排序代码是怎样的？"></a>2.归并排序代码是怎样的？</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L作归并排序 */</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">MSort</span><span class="token punctuation">(</span>L<span class="token operator">-></span>r<span class="token punctuation">,</span>L<span class="token operator">-></span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 将SR[s..t]归并排序为TR1[s..t] */</span><span class="token keyword">void</span> <span class="token function">MSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> SR<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> TR1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token keyword">int</span> TR2<span class="token punctuation">[</span>MAXSIZE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>t<span class="token punctuation">)</span>  TR1<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当细分为1个数字的时候，递归结束</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      m<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 将SR[s..t]平分为SR[s..m]和SR[m+1..t] */</span>      <span class="token function">MSort</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR2<span class="token punctuation">,</span>s<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归地将SR[s..m]归并为有序的TR2[s..m] */</span> <span class="token comment" spellcheck="true">//将前半部分归并</span>      <span class="token function">MSort</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR2<span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归地将SR[m+1..t]归并为有序TR2[m+1..t] */</span> <span class="token comment" spellcheck="true">//将后半部分归并</span>      <span class="token function">Merge</span><span class="token punctuation">(</span>TR2<span class="token punctuation">,</span>TR1<span class="token punctuation">,</span>s<span class="token punctuation">,</span>m<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 将TR2[s..m]和TR2[m+1..t]归并到TR1[s..t] */</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实思路就是，先把一串数字，分为单个数字，然后对相邻的单个数字进行递归排序</p><p>总的数字是：</p><p><img src="https://i.loli.net/2019/10/22/UWvQHiG8otAkujL.jpg" alt></p><p>现在我们来分析重点代码：</p><pre class=" language-c"><code class="language-c"> <span class="token function">MSort</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR2<span class="token punctuation">,</span>s<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//其实是将前半部分分开</span><span class="token comment" spellcheck="true">//每次递归返回后都会执行当前递归函数的Merge(TR2,TR1,s,m,t);，将TR2归并到TR1中。如图9-8-4的右图。最终使得当前序列有序。</span></code></pre><p><img src="https://i.loli.net/2019/10/22/c9jqwiXvhbLAx7P.jpg" alt></p><p>同理：</p><pre class=" language-c"><code class="language-c">  <span class="token function">MSort</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR2<span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 递归地将SR[m+1..t]归并为有序TR2[m+1..t] */</span> <span class="token comment" spellcheck="true">//将后半部分归并</span></code></pre><p><img src="https://i.loli.net/2019/10/22/zPkSiVbcUmN8v5t.jpg" alt></p><p>其实两部分结合，总体就是：</p><p><img src="https://i.loli.net/2019/10/22/wKd1bVck9NCYJF6.jpg" alt></p><h3 id="3-Merge函数的代码是怎样的？"><a href="#3-Merge函数的代码是怎样的？" class="headerlink" title="3.Merge函数的代码是怎样的？"></a>3.Merge函数的代码是怎样的？</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 将有序的SR[i..m]和SR[m+1..n]归并为有序的TR[i..n] */</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> SR<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> TR<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>l<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 将SR中记录由小到大归并入TR */</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>SR<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>SR<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>   TR<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>   TR<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果前半部分有剩余</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>m<span class="token operator">-</span>i<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>   TR<span class="token punctuation">[</span>k<span class="token operator">+</span>l<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>i<span class="token operator">+</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将剩余的SR[i..m]复制到TR */</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果后半部分有剩余</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>n<span class="token operator">-</span>j<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>   TR<span class="token punctuation">[</span>k<span class="token operator">+</span>l<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>j<span class="token operator">+</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将剩余的SR[j..n]复制到TR */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码不是很难：直接看图可以明白</p><p><img src="https://i.loli.net/2019/10/22/K2WvDbgVCQado4m.jpg" alt></p><p><img src="https://i.loli.net/2019/10/22/J7X964hPg1nDKur.jpg" alt></p><p><img src="https://i.loli.net/2019/10/22/XwObf2jZY97xJ3S.jpg" alt></p><p><img src="https://i.loli.net/2019/10/22/BLufKq3vN69igQ7.jpg" alt></p><h2 id="9-8-2-归并排序的复杂度是多少？"><a href="#9-8-2-归并排序的复杂度是多少？" class="headerlink" title="9.8.2 归并排序的复杂度是多少？"></a>9.8.2 归并排序的复杂度是多少？</h2><ul><li>时间复杂度是：O（nlogn）</li><li>空间复杂度是：O（n+logn）</li></ul><h2 id="9-8-3-非递归实现归并排序"><a href="#9-8-3-非递归实现归并排序" class="headerlink" title="9.8.3  非递归实现归并排序"></a>9.8.3  非递归实现归并排序</h2><h3 id="1-思想是什么？"><a href="#1-思想是什么？" class="headerlink" title="1.思想是什么？"></a>1.思想是什么？</h3><p>其实就是用迭代的方式，代替递归的方式，思想主要是，用迭代的方式找单个数字，而不是用递归分为单个数字再返回</p><h3 id="2-代码是怎样的？"><a href="#2-代码是怎样的？" class="headerlink" title="2.代码是怎样的？"></a>2.代码是怎样的？</h3><p>注意：这里的TR的临时空间，相当于中转站的作用，最后的排序的结构还是要放在原来的空间中</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L作归并非递归排序 */</span><span class="token keyword">void</span> <span class="token function">MergeSort2</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span><span class="token operator">*</span> TR<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 申请额外空间 */</span> <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">MergePass</span><span class="token punctuation">(</span>L<span class="token operator">-></span>r<span class="token punctuation">,</span>TR<span class="token punctuation">,</span>k<span class="token punctuation">,</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//先归并放到TR中</span>  k<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 子序列长度加倍 */</span>  <span class="token function">MergePass</span><span class="token punctuation">(</span>TR<span class="token punctuation">,</span>L<span class="token operator">-></span>r<span class="token punctuation">,</span>k<span class="token punctuation">,</span>L<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//再归并放回原来的空间</span>  k<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 子序列长度加倍 */</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MergePass的代码：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 将SR[]中相邻长度为s的子序列两两归并到TR[] */</span><span class="token keyword">void</span> <span class="token function">MergePass</span><span class="token punctuation">(</span><span class="token keyword">int</span> SR<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> TR<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token number">-2</span><span class="token operator">*</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token function">Merge</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span>s<span class="token number">-1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>s<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 两两归并 */</span>  i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>s<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">/* 归并最后两个序列 */</span>  <span class="token comment" spellcheck="true">//最后一步</span>  <span class="token function">Merge</span><span class="token punctuation">(</span>SR<span class="token punctuation">,</span>TR<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span>s<span class="token number">-1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将单个的数字归并进序列</span> <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">/* 若最后只剩下单个子序列 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span>i<span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>   TR<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> SR<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将单个的数字放在最后</span><span class="token punctuation">}</span></code></pre><p>一轮MergePass，这里的20是直接排在队尾的</p><p><img src="https://i.loli.net/2019/10/22/ZHJCEt9rpnl7iXY.jpg" alt></p><p><img src="https://i.loli.net/2019/10/22/RZQGTjJLnkhAVHt.jpg" alt></p><p>二轮MergePass，这里的20也是直接排在队尾的</p><p><img src="https://i.loli.net/2019/10/22/X4Dqeuih6ycnAN7.jpg" alt></p><p>三轮MergePass</p><p>这里的20是按顺序放入的</p><h3 id="3-相对递归的方式有什么优点呢？"><a href="#3-相对递归的方式有什么优点呢？" class="headerlink" title="3.相对递归的方式有什么优点呢？"></a>3.相对递归的方式有什么优点呢？</h3><ul><li>时间复杂度提升了</li><li>空间复杂度为O（n）,递归的空间复杂度是O（n+logn）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式简析</title>
      <link href="/2019/10/20/2019-10-20-dan-li-mo-shi-jian-xi/"/>
      <url>/2019/10/20/2019-10-20-dan-li-mo-shi-jian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式简析"><a href="#单例模式简析" class="headerlink" title="单例模式简析"></a>单例模式简析</h1><h2 id="1-什么是单例模式（Singleton-Pattern）"><a href="#1-什么是单例模式（Singleton-Pattern）" class="headerlink" title="1.什么是单例模式（Singleton Pattern）"></a>1.什么是单例模式（Singleton Pattern）</h2><p>单例，其实就是整个程序中只有1个实例</p><h2 id="2-有什么好处呢？"><a href="#2-有什么好处呢？" class="headerlink" title="2.有什么好处呢？"></a>2.有什么好处呢？</h2><p>优点：</p><ul><li>内存中只有1个实例，减少内存的开销</li><li>避免对资源的多重占用（比如说写文件操作）</li></ul><h2 id="3-有什么缺点呢？"><a href="#3-有什么缺点呢？" class="headerlink" title="3.有什么缺点呢？"></a>3.有什么缺点呢？</h2><ul><li>没有接口，不能继承</li><li>与单一职责原则冲突（一个类只应该关心内部逻辑，而不关心外面怎么来实例化）</li></ul><h2 id="4-适用场景"><a href="#4-适用场景" class="headerlink" title="4.适用场景"></a>4.适用场景</h2><p>下面举例子</p><ul><li>用于数据库连接池的设计，因为数据库连接池在打开或者关闭数据库连接的时候所引起的效率的损耗很大，用单例模式可以减少</li><li>线程池</li></ul><h2 id="5-单例模式的套路"><a href="#5-单例模式的套路" class="headerlink" title="5.单例模式的套路"></a>5.单例模式的套路</h2><ul><li>构造器私有</li><li>提供private的静态属性–&gt;存储对象的地址</li><li>提供公共的静态方法–&gt;获取属性</li></ul><h2 id="6-单例模式分为哪几类呢？"><a href="#6-单例模式分为哪几类呢？" class="headerlink" title="6.单例模式分为哪几类呢？"></a>6.单例模式分为哪几类呢？</h2><h3 id="1-懒汉式"><a href="#1-懒汉式" class="headerlink" title="1.懒汉式"></a>1.懒汉式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>线程不安全，延迟初始化，严格上不是单例模式</p><h3 id="2-饿汉式"><a href="#2-饿汉式" class="headerlink" title="2.饿汉式"></a>2.饿汉式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>线程安全，但是容易产生垃圾对象</p><h3 id="3-双重锁模式"><a href="#3-双重锁模式" class="headerlink" title="3.双重锁模式"></a>3.<strong>双重锁模式</strong></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//注意这里用volatile修饰，避免重排序</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>第一次是判断是为了避免不必要的同步，因为已经存在对象，第二次判断是为了进行同步，避免多线程问题</p><p>由于 singleton = new Singleton();  可能存在重排序的问题，什么是重排序，请往下看</p><h4 id="1-对象新建的过程是什么？"><a href="#1-对象新建的过程是什么？" class="headerlink" title="1.对象新建的过程是什么？"></a>1.对象新建的过程是什么？</h4><ol><li>开辟空间</li><li>初始化对象信息</li><li>返回对象的地址给引用</li></ol><h4 id="2-什么情况下会出现重排序呢？"><a href="#2-什么情况下会出现重排序呢？" class="headerlink" title="2.什么情况下会出现重排序呢？"></a>2.什么情况下会出现重排序呢？</h4><p>就是上述的第二步还没完成的时候，已经完成了第三步，这个时候就会获取到对象的空的引用</p><h3 id="4-静态内部类单例模式"><a href="#4-静态内部类单例模式" class="headerlink" title="4.静态内部类单例模式"></a>4.静态内部类单例模式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> </code></pre><p>这样既可以懒加载，因为只有一个线程可以获得对象的初始化锁，又适用于多线程，书写难度也不是很大，较为推荐</p>]]></content>
      
      
      <categories>
          
          <category> java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
            <tag> java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.4 树的存储结构</title>
      <link href="/2019/10/15/6.4-shu-de-cun-chu-jie-gou/"/>
      <url>/2019/10/15/6.4-shu-de-cun-chu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="6-4-树的存储结构"><a href="#6-4-树的存储结构" class="headerlink" title="6.4 树的存储结构"></a>6.4 树的存储结构</h1><h2 id="6-4-1-双亲表示法"><a href="#6-4-1-双亲表示法" class="headerlink" title="6.4.1 双亲表示法"></a>6.4.1 双亲表示法</h2><blockquote><p>因为树一定有且仅有一个双亲。所以采用这种方法</p></blockquote><h3 id="1-容易找到双亲的方法"><a href="#1-容易找到双亲的方法" class="headerlink" title="1.容易找到双亲的方法"></a>1.容易找到双亲的方法</h3><h4 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h4><p>假设以一组连续空间存储树的结点，同时在每个结点中，附设一个位置指示其双亲结点到链表中的位置。</p><p><img src="https://i.loli.net/2019/10/13/vaocCM9NxWSphZu.jpg" alt></p><p>data存储数据，parent是指针域，存储双亲在数组中的下标</p><p>结构定义代码如下图：</p><p><img src="https://i.loli.net/2019/10/13/oBpdTj9gFhmEk5H.jpg" alt></p><p><img src="https://i.loli.net/2019/10/13/lTepUDu8MJjr7XO.jpg" alt></p><h4 id="2-树结构转化为表结构例子："><a href="#2-树结构转化为表结构例子：" class="headerlink" title="2.树结构转化为表结构例子："></a>2.树结构转化为表结构例子：</h4><p><img src="https://i.loli.net/2019/10/13/E2rKz7ODHl1sStU.jpg" alt></p><h4 id="3-缺点是什么"><a href="#3-缺点是什么" class="headerlink" title="3.缺点是什么"></a>3.缺点是什么</h4><p>就是如果想知道孩子是谁的话，就要遍历整个结构了</p><h3 id="2-容易找到孩子的方法"><a href="#2-容易找到孩子的方法" class="headerlink" title="2.容易找到孩子的方法"></a>2.容易找到孩子的方法</h3><blockquote><p>思路是增加1个长子域</p></blockquote><p>我们增加一个结点最左边孩子的域，不妨叫它长子域，这样就可以很容易得到结点的孩子。如果没有孩子的结点，这个长子域就设置为-1，如表6-4-3所示。</p><p><img src="https://i.loli.net/2019/10/13/cQ5uYq2sBzmULkW.jpg" alt></p><p>缺点是什么？</p><p>缺点是兄弟之间的关系难以确定</p><h3 id="3-容易区别兄弟之间的关系的方法"><a href="#3-容易区别兄弟之间的关系的方法" class="headerlink" title="3.容易区别兄弟之间的关系的方法"></a>3.容易区别兄弟之间的关系的方法</h3><p>可以增加一个右兄弟域来体现兄弟关系，也就是说，每一个结点如果它存在右兄弟，则记录下右兄弟的下标。同样的，如果右兄弟不存在，则赋值为-1，如表6-4-4所示。</p><p><img src="https://i.loli.net/2019/10/13/qkBFrwnzp4PWOaA.jpg" alt></p><h3 id="4-要求同时关注双亲，孩子，兄弟怎么办？"><a href="#4-要求同时关注双亲，孩子，兄弟怎么办？" class="headerlink" title="4.要求同时关注双亲，孩子，兄弟怎么办？"></a>4.要求同时关注双亲，孩子，兄弟怎么办？</h3><p>还可以把次结构扩展为有双亲域、长子域、再有右兄弟域。</p><p><strong>存储结构的设计是一个非常灵活的过程。一个存储结构设计得是否合理，取决于基于该存储结构的运算是否适合，是否方便，时间复杂度好不好等</strong>。</p><h2 id="6-4-2-孩子表示法"><a href="#6-4-2-孩子表示法" class="headerlink" title="6.4.2 孩子表示法"></a>6.4.2 孩子表示法</h2><h3 id="1-当有多个孩子的时候怎么处理？"><a href="#1-当有多个孩子的时候怎么处理？" class="headerlink" title="1.当有多个孩子的时候怎么处理？"></a>1.当有多个孩子的时候怎么处理？</h3><p>考虑用多重链表，即<strong>每个结点有多个指针域</strong>，其中每个指针指向一棵子树的根结点，我们把这种方法叫做<strong>多重链表表示法</strong>。其实就是将他的孩子都用指针给指出来。</p><h3 id="2-方案1：以度数为指针域的个数（最大化处理）管够"><a href="#2-方案1：以度数为指针域的个数（最大化处理）管够" class="headerlink" title="2.方案1：以度数为指针域的个数（最大化处理）管够"></a>2.方案1：以度数为指针域的个数（最大化处理）管够</h3><p><img src="https://i.loli.net/2019/10/13/FNC9cw8eI4oHYbk.jpg" alt></p><p>缺点是：当度数相差很大的时候，浪费空间</p><h3 id="3-方案2：按需分配，省钱"><a href="#3-方案2：按需分配，省钱" class="headerlink" title="3.方案2：按需分配，省钱"></a>3.方案2：按需分配，省钱</h3><p>专门取一个位置来存储结点指针域的个数，如下图</p><p><img src="https://i.loli.net/2019/10/13/HJZ6vran4KcNido.jpg" alt></p><p>其中data为数据域，degree为度域，也就是存储该结点的孩子结点的个数，child1到childd为指针域，指向该结点的各个孩子的结点。</p><p><img src="https://i.loli.net/2019/10/13/OeYCjXUqdMIr7P9.jpg" alt></p><p>缺点：结构不统一，时间复杂度上升（相对方法1）</p><h3 id="4-孩子表示法"><a href="#4-孩子表示法" class="headerlink" title="4.孩子表示法"></a>4.孩子表示法</h3><blockquote><p>可以减少空指针的浪费和统一结构</p></blockquote><h4 id="1-孩子表示法是怎么样的？"><a href="#1-孩子表示法是怎么样的？" class="headerlink" title="1.孩子表示法是怎么样的？"></a>1.孩子表示法是怎么样的？</h4><p>其实是先将所有的结点都放在一个数组里面，然后再对每个结点的孩子建立一个单链表体现它们的关系</p><p>具体办法是：</p><p>把每个结点的<strong>孩子</strong>结点排列起来，以<strong>单链表</strong>作存储结构，则n个结点由n个孩子链表，如果是叶子结点则此单链表为空。然后<strong>n个头指针</strong>又<strong>组成</strong>一个<strong>线性表</strong>，采用顺序存储结构，存放进一个<strong>一维数组</strong>中，如图6-4-4所示。</p><p><img src="https://i.loli.net/2019/10/13/cOhVGSHYCIi4zmT.jpg" alt></p><p>为此设计两种结构：</p><h4 id="2-孩子结点"><a href="#2-孩子结点" class="headerlink" title="2.孩子结点"></a>2.孩子结点</h4><p>其中child是数据域，用来存储某个结点在表头数组中的下标。next是指针域，用来存储指向某结点的下一个孩子结点的指针。</p><p><img src="https://i.loli.net/2019/10/13/ZF5ASGX6jP2lerh.jpg" alt></p><h4 id="3-表头结点："><a href="#3-表头结点：" class="headerlink" title="3.表头结点："></a>3.表头结点：</h4><p>其中data是数据域，存储某结点的数据信息。firstchild是头指针域，存储该结点的孩子链表的头指针。</p><p><img src="https://i.loli.net/2019/10/13/T8X7Vq2mdLBStne.jpg" alt></p><h4 id="4-结构定义代码是怎样？"><a href="#4-结构定义代码是怎样？" class="headerlink" title="4.结构定义代码是怎样？"></a>4.结构定义代码是怎样？</h4><p><img src="https://i.loli.net/2019/10/13/n81AjeyPLSHFZOJ.jpg" alt></p><p><img src="https://i.loli.net/2019/10/13/fbzy321usTEFK7j.jpg" alt></p><p>表头和孩子的结构都类似，都是数据域加上指针域</p><h4 id="5-可不可以和找到双亲呢？"><a href="#5-可不可以和找到双亲呢？" class="headerlink" title="5.可不可以和找到双亲呢？"></a>5.可不可以和找到双亲呢？</h4><p>其实就是在表头加上个双亲就行了</p><p><img src="https://i.loli.net/2019/10/13/KVEZJQpIFwWYL26.jpg" alt></p><h2 id="6-4-3-孩子兄弟表示法"><a href="#6-4-3-孩子兄弟表示法" class="headerlink" title="6.4.3 孩子兄弟表示法"></a>6.4.3 孩子兄弟表示法</h2><h3 id="1-什么是孩子兄弟表示法"><a href="#1-什么是孩子兄弟表示法" class="headerlink" title="1.什么是孩子兄弟表示法"></a>1.什么是孩子兄弟表示法</h3><p>任意一棵树，它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的。因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟。其实就是长子唯一，右兄弟也唯一。</p><p><img src="https://s2.ax1x.com/2019/10/13/ux5zGD.png" alt="ux5zGD.png"></p><p><img src="https://s2.ax1x.com/2019/10/13/uxIkZt.png" alt="uxIkZt.png"></p><h3 id="2-好处是什么？"><a href="#2-好处是什么？" class="headerlink" title="2.好处是什么？"></a>2.好处是什么？</h3><p>把复杂的树变成了二叉树</p><p><img src="https://s2.ax1x.com/2019/10/13/uxImRg.png" alt="uxImRg.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.3 树的抽象数据类型</title>
      <link href="/2019/10/15/6.3-shu-de-chou-xiang-shu-ju-lei-xing/"/>
      <url>/2019/10/15/6.3-shu-de-chou-xiang-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="6-3-树的抽象数据类型"><a href="#6-3-树的抽象数据类型" class="headerlink" title="6.3 树的抽象数据类型"></a>6.3 树的抽象数据类型</h1><h2 id="如图所示"><a href="#如图所示" class="headerlink" title="如图所示"></a>如图所示</h2><p><img src="https://i.loli.net/2019/10/13/Sj47DBQyFYKublL.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.2 树的定义</title>
      <link href="/2019/10/15/6.2-shu-de-ding-yi/"/>
      <url>/2019/10/15/6.2-shu-de-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="6-2-树的定义"><a href="#6-2-树的定义" class="headerlink" title="6.2 树的定义"></a>6.2 树的定义</h1><blockquote><p>树，个人觉得是一种从生活中抽象而成的数据结构，类似于我们现实生活中的树</p></blockquote><h2 id="树是什么？"><a href="#树是什么？" class="headerlink" title="树是什么？"></a>树是什么？</h2><h3 id="树（非空树），需要满足下面2个条件："><a href="#树（非空树），需要满足下面2个条件：" class="headerlink" title="树（非空树），需要满足下面2个条件："></a>树（非空树），需要满足下面2个条件：</h3><ol><li><strong>有且只有</strong>1个特点的节点的根结点</li><li>当n&gt;1时，其余结点可以分为m个<strong>互不相交</strong>的有限集，其中每个有限集本身又是树，成为子树</li></ol><p><img src="https://i.loli.net/2019/10/13/bLxwVNpzCcDsZhm.jpg" alt></p><h3 id="不是树的例子："><a href="#不是树的例子：" class="headerlink" title="不是树的例子："></a>不是树的例子：</h3><p><img src="https://i.loli.net/2019/10/13/Ui6tbdrL5MFJNKV.jpg" alt></p><h2 id="6-2-1-结点分类"><a href="#6-2-1-结点分类" class="headerlink" title="6.2.1 结点分类"></a>6.2.1 结点分类</h2><h3 id="1-什么是度"><a href="#1-什么是度" class="headerlink" title="1.什么是度"></a>1.什么是度</h3><p>结点拥有的子树数称为结点的度，度为0的结点称为叶结点，度不为0的结点称为非终端结点或分支结点</p><p>如图：</p><p><img src="https://i.loli.net/2019/10/13/H8nXLTfZOsewCAm.jpg" alt></p><h3 id="2-树的度是什么？"><a href="#2-树的度是什么？" class="headerlink" title="2.树的度是什么？"></a>2.树的度是什么？</h3><p>树内各结点的度的最大值,上图的度是3</p><h2 id="6-2-2-结点间关系"><a href="#6-2-2-结点间关系" class="headerlink" title="6.2.2 结点间关系"></a>6.2.2 结点间关系</h2><h3 id="1-什么是孩子，什么是双亲"><a href="#1-什么是孩子，什么是双亲" class="headerlink" title="1.什么是孩子，什么是双亲"></a>1.什么是孩子，什么是双亲</h3><p>A结点的<strong>子树的根结点</strong>B，是A的<strong>孩子</strong>，相应，A结点是B的<strong>双亲</strong>（为什么是双亲呢？因为对于结点来说，他的上面指向他自己的只有1个，双亲只有1个）</p><p>如图：</p><p><img src="https://i.loli.net/2019/10/13/xdh5MknpAriHlCb.jpg" alt></p><h3 id="2-什么是兄弟？什么是祖先？"><a href="#2-什么是兄弟？什么是祖先？" class="headerlink" title="2.什么是兄弟？什么是祖先？"></a>2.什么是兄弟？什么是祖先？</h3><p><strong>同一个双亲的孩子之间互称兄弟</strong>，<strong>结点的祖先是从根到该结点所经分支上的所有结点</strong>，简而言之就是，从上面来的指向它的结点的就是祖先</p><h2 id="6-2-3-树的其他相关概念"><a href="#6-2-3-树的其他相关概念" class="headerlink" title="6.2.3 树的其他相关概念"></a>6.2.3 树的其他相关概念</h2><h3 id="1-什么是树的层次？"><a href="#1-什么是树的层次？" class="headerlink" title="1.什么是树的层次？"></a>1.什么是树的层次？</h3><p>其实就是从根开始定义起，根为第一层，根的孩子为第二层。</p><p>如图：</p><p><img src="https://i.loli.net/2019/10/13/anqojCTQ1If5dg6.jpg" alt></p><h3 id="2-什么是树的深度？"><a href="#2-什么是树的深度？" class="headerlink" title="2.什么是树的深度？"></a>2.什么是树的深度？</h3><p><strong>树中结点的最大层次</strong></p><h3 id="3-什么是堂兄弟？"><a href="#3-什么是堂兄弟？" class="headerlink" title="3.什么是堂兄弟？"></a>3.什么是堂兄弟？</h3><p>就是双亲同层的结点，显然图6-2-6中的D、E、F是堂兄弟，</p><h3 id="4-什么是有序树"><a href="#4-什么是有序树" class="headerlink" title="4.什么是有序树"></a>4.什么是有序树</h3><p>如果将树中结点的各子树看成<strong>从左到右是有次序</strong>的，不能互换的，则称该树为有序树，否则称为无序树。</p><h3 id="5-什么是森林？"><a href="#5-什么是森林？" class="headerlink" title="5.什么是森林？"></a>5.什么是森林？</h3><p>是m(m&gt;=0)棵<strong>互不相交</strong>的<strong>树的集合</strong></p><h3 id="6-线性表和树的结构有什么不同？"><a href="#6-线性表和树的结构有什么不同？" class="headerlink" title="6.线性表和树的结构有什么不同？"></a>6.线性表和树的结构有什么不同？</h3><p><img src="https://i.loli.net/2019/10/13/ZRiJVHukgAo7K9Y.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.3 栈的顺序存储结构及实现</title>
      <link href="/2019/10/14/4.3-zhan-de-shun-xu-cun-chu-jie-gou-ji-shi-xian/"/>
      <url>/2019/10/14/4.3-zhan-de-shun-xu-cun-chu-jie-gou-ji-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="4-3-栈的顺序存储结构及实现"><a href="#4-3-栈的顺序存储结构及实现" class="headerlink" title="4.3 栈的顺序存储结构及实现"></a>4.3 栈的顺序存储结构及实现</h1><h2 id="1-栈的结构定义"><a href="#1-栈的结构定义" class="headerlink" title="1.栈的结构定义"></a>1.栈的结构定义</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> SElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    SElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*用于栈顶指针*/</span><span class="token punctuation">}</span>SqStack<span class="token punctuation">;</span></code></pre><h2 id="2-进栈操作"><a href="#2-进栈操作" class="headerlink" title="2.进栈操作"></a>2.进栈操作</h2><pre class=" language-c"><code class="language-c">Status <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>S <span class="token punctuation">,</span>SElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top<span class="token operator">==</span>MAXSIZE<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//栈满</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    S<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈顶指针增加</span>    S<span class="token operator">-></span>data<span class="token punctuation">[</span>S<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将新插入元素赋值给栈顶空间</span>    <span class="token keyword">return</span> Ok<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-出栈操作"><a href="#3-出栈操作" class="headerlink" title="3.出栈操作"></a>3.出栈操作</h2><pre class=" language-c"><code class="language-c">Status <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>S<span class="token punctuation">,</span>SElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">return</span> error<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e<span class="token operator">=</span>S<span class="token operator">-></span>data<span class="token punctuation">[</span>S<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>     S<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈顶指针减1 </span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.12 散列表查找实现</title>
      <link href="/2019/10/13/8.12-san-lie-biao-cha-zhao-shi-xian/"/>
      <url>/2019/10/13/8.12-san-lie-biao-cha-zhao-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="8-12-散列表查找实现"><a href="#8-12-散列表查找实现" class="headerlink" title="8.12 散列表查找实现"></a>8.12 散列表查找实现</h1><h2 id="8-12-1-散列表查找算法实现"><a href="#8-12-1-散列表查找算法实现" class="headerlink" title="8.12.1 散列表查找算法实现"></a>8.12.1 散列表查找算法实现</h2><h3 id="1-定义结构"><a href="#1-定义结构" class="headerlink" title="1.定义结构"></a>1.定义结构</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span><span class="token macro property">#<span class="token directive keyword">define</span> ERROR 0</span><span class="token macro property">#<span class="token directive keyword">define</span> TRUE 1</span><span class="token macro property">#<span class="token directive keyword">define</span> FALSE 0</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100 </span><span class="token comment" spellcheck="true">/* 存储空间初始分配量 */</span><span class="token macro property">#<span class="token directive keyword">define</span> SUCCESS 1</span><span class="token macro property">#<span class="token directive keyword">define</span> UNSUCCESS 0</span><span class="token macro property">#<span class="token directive keyword">define</span> HASHSIZE 12 </span><span class="token comment" spellcheck="true">/* 定义散列表长为数组的长度 */</span><span class="token macro property">#<span class="token directive keyword">define</span> NULLKEY -32768 </span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Status是函数的类型,其值是函数结果状态代码，如OK等 */</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> <span class="token operator">*</span>elem<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 数据元素存储基址，动态分配数组 */</span>   <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  当前数据元素个数 */</span><span class="token punctuation">}</span>HashTable<span class="token punctuation">;</span></code></pre><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 初始化散列表 */</span>Status <span class="token function">InitHashTable</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>H<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    m<span class="token operator">=</span>HASHSIZE<span class="token punctuation">;</span>    H<span class="token operator">-></span>count<span class="token operator">=</span>m<span class="token punctuation">;</span>    H<span class="token operator">-></span>elem<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>m<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        H<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>NULLKEY<span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-散列函数"><a href="#3-散列函数" class="headerlink" title="3.散列函数"></a>3.散列函数</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 散列函数 */</span><span class="token keyword">int</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> key <span class="token operator">%</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 除留余数法 */</span><span class="token punctuation">}</span></code></pre><h3 id="4-插入关键字进散列表"><a href="#4-插入关键字进散列表" class="headerlink" title="4./* 插入关键字进散列表 */"></a>4./* 插入关键字进散列表 */</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 插入关键字进散列表 */</span><span class="token keyword">void</span> <span class="token function">InsertHash</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>H<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> addr <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 求散列地址 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>H<span class="token operator">-></span>elem<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">!=</span> NULLKEY<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 如果不为空，则冲突 */</span>    <span class="token punctuation">{</span>        addr <span class="token operator">=</span> <span class="token punctuation">(</span>addr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 开放定址法的线性探测 */</span>    <span class="token punctuation">}</span>    H<span class="token operator">-></span>elem<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 直到有空位后插入关键字 */</span><span class="token punctuation">}</span></code></pre><h3 id="5-散列表查找关键字"><a href="#5-散列表查找关键字" class="headerlink" title="5.散列表查找关键字"></a>5.散列表查找关键字</h3><pre class=" language-c"><code class="language-c">Status <span class="token function">SearchHash</span><span class="token punctuation">(</span>HashTable H<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 求散列地址 */</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token operator">*</span>addr<span class="token punctuation">]</span> <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当不是关键词,冲突了 </span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 开放定址法的线性探测 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>H<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token operator">*</span>addr<span class="token punctuation">]</span> <span class="token operator">==</span> NULLKEY <span class="token operator">||</span> <span class="token operator">*</span>addr <span class="token operator">==</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当散列查找的话，查找的是空的话，说明没有了，因为是空的都不存 </span><span class="token comment" spellcheck="true">/* 如果循环回到原点 */</span>            <span class="token keyword">return</span> UNSUCCESS<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 则说明关键字不存在 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>查找相对于插入，就多了个空和回头的判断</p><h2 id="8-12-2-散列表查找性能分析"><a href="#8-12-2-散列表查找性能分析" class="headerlink" title="8.12.2 散列表查找性能分析"></a>8.12.2 散列表查找性能分析</h2><h3 id="1-时间复杂度是多少"><a href="#1-时间复杂度是多少" class="headerlink" title="1.时间复杂度是多少"></a>1.时间复杂度是多少</h3><p>O（1）</p><h3 id="2-取决于什么因素？"><a href="#2-取决于什么因素？" class="headerlink" title="2.取决于什么因素？"></a>2.取决于什么因素？</h3><ul><li>是否均匀</li><li>处理冲突的方法</li><li>装填因子</li></ul><h3 id="3-什么是装填因子"><a href="#3-什么是装填因子" class="headerlink" title="3.什么是装填因子"></a>3.什么是装填因子</h3><p>就是用来衡量散列表的装满的程度的数字，记录个数/长度=装填因子</p><p>装填因子越大，表明产生冲突的可能性越大</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.11 处理冲突的方法</title>
      <link href="/2019/10/13/8.11-chu-li-chong-tu-de-fang-fa/"/>
      <url>/2019/10/13/8.11-chu-li-chong-tu-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="8-11-处理冲突的方法"><a href="#8-11-处理冲突的方法" class="headerlink" title="8.11 处理冲突的方法"></a>8.11 处理冲突的方法</h1><h2 id="8-11-1-开放定址法"><a href="#8-11-1-开放定址法" class="headerlink" title="8.11.1 开放定址法"></a>8.11.1 开放定址法</h2><h3 id="1-什么是开放定址法呢"><a href="#1-什么是开放定址法呢" class="headerlink" title="1.什么是开放定址法呢"></a>1.什么是开放定址法呢</h3><p>一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</p><h3 id="公式为：fi-key-f-key-di-MOD-m-di-1-2-3-……-m-1"><a href="#公式为：fi-key-f-key-di-MOD-m-di-1-2-3-……-m-1" class="headerlink" title="公式为：fi(key) = (f(key)+di) MOD m (di=1,2,3,……,m-1)"></a>公式为：fi(key) = (f(key)+di) MOD m (di=1,2,3,……,m-1)</h3><h3 id="2-什么是线性探测法"><a href="#2-什么是线性探测法" class="headerlink" title="2.什么是线性探测法"></a>2.什么是线性探测法</h3><p>其实就是按顺序找下去地定址</p><h3 id="3-什么是堆积"><a href="#3-什么是堆积" class="headerlink" title="3.什么是堆积"></a>3.什么是堆积</h3><p>其实就是冲突的连环出现，我原本a有冲突，a的冲突解决了，b又和a有冲突了，本来都不是同义词却需要争夺一个地址的叫做堆积</p><h3 id="4-什么是二次探测法"><a href="#4-什么是二次探测法" class="headerlink" title="4.什么是二次探测法"></a>4.什么是二次探测法</h3><p>其实就是增加了平方和正负运算，</p><p>fi(key) = (f(key)+di) MOD m (di = 1 2, -1 2, 2 2, -2 2,……, q 2, -q 2, q &lt;= m/2) 这里的是指平方</p><h3 id="5-什么是随机探测法"><a href="#5-什么是随机探测法" class="headerlink" title="5.什么是随机探测法"></a>5.什么是随机探测法</h3><p>对于位移量 di 采用随机函数计算得到，我们称之为随机探测法。</p><h3 id="6-什么是伪随机数"><a href="#6-什么是伪随机数" class="headerlink" title="6.什么是伪随机数"></a>6.什么是伪随机数</h3><p>其实就是由随机种子按照某种随机算法，生成的数，</p><p>随机种子是以随机数作为对象的以真随机数（种子）为初始条件的随机数。一般以系统时间作为随机种子</p><h2 id="8-11-2-再散列函数法"><a href="#8-11-2-再散列函数法" class="headerlink" title="8.11.2 再散列函数法"></a>8.11.2 再散列函数法</h2><p>其实就是随机调用不同的散列函数</p><h2 id="8-11-3-链地址法"><a href="#8-11-3-链地址法" class="headerlink" title="8.11.3 链地址法"></a>8.11.3 链地址法</h2><p>就是在冲突的地址里面，生成1个链表，类似于HashMap</p><h2 id="8-11-4-公共溢出区法"><a href="#8-11-4-公共溢出区法" class="headerlink" title="8.11.4 公共溢出区法"></a>8.11.4 公共溢出区法</h2><p>其实就是把所有冲突的关键词存到一个公共区，查找的时候，当在普通区查不到，就到公共溢出区查</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.10 散列函数的构造方法</title>
      <link href="/2019/10/13/8.10-san-lie-han-shu-de-gou-zao-fang-fa/"/>
      <url>/2019/10/13/8.10-san-lie-han-shu-de-gou-zao-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="8-10-散列函数的构造方法"><a href="#8-10-散列函数的构造方法" class="headerlink" title="8.10 散列函数的构造方法"></a>8.10 散列函数的构造方法</h1><blockquote><p>什么才是好的散列函数呢？</p><ul><li>计算简单</li><li>地址分布均匀</li></ul></blockquote><h2 id="8-10-1-直接定址法"><a href="#8-10-1-直接定址法" class="headerlink" title="8.10.1.直接定址法"></a>8.10.1.直接定址法</h2><p>就是通过关键字的某个线性函数值来作为散列地址</p><p>例如：</p><p>f(key)=a*key+b</p><h3 id="1-优点是："><a href="#1-优点是：" class="headerlink" title="1.优点是："></a>1.优点是：</h3><p>简单，均匀，不会产生冲突</p><h3 id="2-缺点是："><a href="#2-缺点是：" class="headerlink" title="2.缺点是："></a>2.缺点是：</h3><p>需要事先知道关键字分布情况，</p><h3 id="3-适合什么？"><a href="#3-适合什么？" class="headerlink" title="3.适合什么？"></a>3.适合什么？</h3><p>查找数据量少且连续的，知道分布</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="8-10-2-数字分析法"><a href="#8-10-2-数字分析法" class="headerlink" title="8.10.2 数字分析法"></a>8.10.2 数字分析法</h2><h3 id="1-什么是数字分析法呢"><a href="#1-什么是数字分析法呢" class="headerlink" title="1.什么是数字分析法呢"></a>1.什么是数字分析法呢</h3><p>其实就是找到数字分布的规律，然后抽取其中的不容易重复的一部分作为地址，例如手机号码的后4位</p><h3 id="2-适用什么？"><a href="#2-适用什么？" class="headerlink" title="2.适用什么？"></a>2.适用什么？</h3><p>位数大，知道分布</p><h2 id="8-10-3-平方取中法"><a href="#8-10-3-平方取中法" class="headerlink" title="8.10.3 平方取中法"></a>8.10.3 平方取中法</h2><h3 id="1-是什么意思呢"><a href="#1-是什么意思呢" class="headerlink" title="1.是什么意思呢"></a>1.是什么意思呢</h3><p>其实就是将数字平方后，取中间的3位数字，</p><h3 id="2-适用什么？-1"><a href="#2-适用什么？-1" class="headerlink" title="2.适用什么？"></a>2.适用什么？</h3><p>位数小，不知道分布</p><h2 id="8-10-4-折叠法"><a href="#8-10-4-折叠法" class="headerlink" title="8.10.4 折叠法"></a>8.10.4 折叠法</h2><h3 id="1-什么是折叠法"><a href="#1-什么是折叠法" class="headerlink" title="1.什么是折叠法"></a>1.什么是折叠法</h3><p>其实就是将关键字分割成位数相等的几部分，然后再叠加求和，取后3位为散列地址（散列表表长是3），有时候，可以一端向另一端折叠</p><p>例如：9876543210，变成：987+456+321=1566取后3位</p><h3 id="2-适用什么"><a href="#2-适用什么" class="headerlink" title="2.适用什么"></a>2.适用什么</h3><p>位数大，不知道分布</p><h2 id="8-10-5-除留余数法"><a href="#8-10-5-除留余数法" class="headerlink" title="8.10.5 除留余数法"></a>8.10.5 除留余数法</h2><h3 id="1-是什么？"><a href="#1-是什么？" class="headerlink" title="1.是什么？"></a>1.是什么？</h3><p>其实就是除某个数取余，通常取小于或者等于表长的最大质数</p><p>例如:某散列表的长度为100，散列函数H(k)=k%P,则P通常情况下最好选择哪个呢？</p><p>A、91 B、93 C、97 D、99</p><p>选97</p><h2 id="8-10-6-随机数法"><a href="#8-10-6-随机数法" class="headerlink" title="8.10.6 随机数法"></a>8.10.6 随机数法</h2><h3 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h3><p>其实就是取随机数</p><p>random(key)</p><h3 id="2-适用范围"><a href="#2-适用范围" class="headerlink" title="2.适用范围"></a>2.适用范围</h3><p>其实就是关键字的长度不等的时候</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>怎么选择呢</p><p>其实考虑因素有几个</p><ul><li>计算地址的时间</li><li>关键字的长度</li><li>散列表的大小</li><li>分布情况</li><li>查找的概率</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.9 散列表查找（哈希表）概述</title>
      <link href="/2019/10/13/8.9-san-lie-biao-cha-zhao-ha-xi-biao-gai-shu/"/>
      <url>/2019/10/13/8.9-san-lie-biao-cha-zhao-ha-xi-biao-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="8-9-散列表查找（哈希表）概述"><a href="#8-9-散列表查找（哈希表）概述" class="headerlink" title="8.9 散列表查找（哈希表）概述"></a>8.9 散列表查找（哈希表）概述</h1><h2 id="8-9-1-散列查找定义"><a href="#8-9-1-散列查找定义" class="headerlink" title="8.9.1 散列查找定义"></a>8.9.1 散列查找定义</h2><h3 id="1-什么是散列技术"><a href="#1-什么是散列技术" class="headerlink" title="1.什么是散列技术"></a>1.什么是散列技术</h3><p>散列技术其实是存储位置和关键字的对应关系，一个关键字对应1个存储位置</p><h3 id="2-什么是哈希表"><a href="#2-什么是哈希表" class="headerlink" title="2.什么是哈希表"></a>2.什么是哈希表</h3><p>采用散列技术将记录存储在一块连续的内存空间里面，这个连续的内存空间就是哈希表</p><h2 id="8-9-2-散列表查找步骤"><a href="#8-9-2-散列表查找步骤" class="headerlink" title="8.9.2 散列表查找步骤"></a>8.9.2 散列表查找步骤</h2><ul><li>存储的时候，首先用散列技术计算出地址，然后在计算出来的地址里面存数据</li><li>查找的时候，首先用散列技术计算关键字的地址，然后在地址里面取数据</li></ul><h3 id="2-适用范围是什么"><a href="#2-适用范围是什么" class="headerlink" title="2.适用范围是什么"></a>2.适用范围是什么</h3><p>不适合范围查找，例如18-35岁，最大岁</p><p>不适合一个关键词对应很多一样类别的查找，例如：男生，女生</p><h3 id="3-什么是冲突"><a href="#3-什么是冲突" class="headerlink" title="3.什么是冲突"></a>3.什么是冲突</h3><p>其实就是不同的关键字，但是他们的地址相同，就是冲突</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.12 循环队列</title>
      <link href="/2019/10/13/4.12-xun-huan-dui-lie/"/>
      <url>/2019/10/13/4.12-xun-huan-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="4-12-循环队列"><a href="#4-12-循环队列" class="headerlink" title="4.12 循环队列"></a>4.12 循环队列</h1><h2 id="1-队列顺序存储的不足"><a href="#1-队列顺序存储的不足" class="headerlink" title="1.队列顺序存储的不足"></a>1.队列顺序存储的不足</h2><p>如果队头有个人走了的话，就需要所有元素向前移动，这样效率太低了</p><p>但是如果，队头有人走了的话，就把下一个人当作队头的话，原来的队头的位置又会空着，这样也不好</p><h2 id="2-什么是假溢出"><a href="#2-什么是假溢出" class="headerlink" title="2.什么是假溢出"></a>2.什么是假溢出</h2><p>其实就是队头没坐满，但是队尾已经没有位置了</p><h2 id="3-循环队列的定义是什么"><a href="#3-循环队列的定义是什么" class="headerlink" title="3.循环队列的定义是什么"></a>3.循环队列的定义是什么</h2><p>头尾相接的队列</p><h2 id="4-什么时候队列满了呢"><a href="#4-什么时候队列满了呢" class="headerlink" title="4.什么时候队列满了呢"></a>4.什么时候队列满了呢</h2><ol><li>设置一个标志flag,当front==rear，且flag=0时，队列为空，当front==rear,且flag=1的时候为满</li><li>不允许全满的情况出现，当队列满的时候，存在一个空闲单元</li><li>(rear+1)%QueneSize==front;这样的话，就可以综合rear&gt;front的情况了</li></ol><h2 id="5-计算队列的长度的方法"><a href="#5-计算队列的长度的方法" class="headerlink" title="5.计算队列的长度的方法"></a>5.计算队列的长度的方法</h2><p>(rear-front+QueueSize)%QueueSIze </p><h2 id="6-入队的代码是怎样的"><a href="#6-入队的代码是怎样的" class="headerlink" title="6.入队的代码是怎样的"></a>6.入队的代码是怎样的</h2><pre class=" language-c"><code class="language-c">Status <span class="token function">EnQuene</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span>Q，QElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token operator">==</span>Q<span class="token operator">-></span>front<span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列满了</span>    Q<span class="token operator">-></span>data<span class="token punctuation">[</span>Q<span class="token operator">-></span>rear<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将元素e赋值给队尾</span>    Q<span class="token operator">-></span>rear<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将指针后移一位</span>    <span class="token keyword">return</span> Ok<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="7-出队的代码是怎样的"><a href="#7-出队的代码是怎样的" class="headerlink" title="7.出队的代码是怎样的"></a>7.出队的代码是怎样的</h2><pre class=" language-c"><code class="language-c">Status <span class="token function">EnQuene</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span>Q，QElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token operator">==</span>Q<span class="token operator">-></span>front<span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列满了</span>  <span class="token operator">*</span>e<span class="token operator">=</span>Q<span class="token operator">-></span>data<span class="token punctuation">[</span>Q<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将队头元素赋值给e</span>    Q<span class="token operator">-></span>front<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将front指针向后移动1位，如果到最后则到最前面</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.7 栈的作用</title>
      <link href="/2019/10/13/4.7-zhan-de-zuo-yong/"/>
      <url>/2019/10/13/4.7-zhan-de-zuo-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="4-7-栈的作用"><a href="#4-7-栈的作用" class="headerlink" title="4.7 栈的作用"></a>4.7 栈的作用</h1><h2 id="为什么要用栈呢？"><a href="#为什么要用栈呢？" class="headerlink" title="为什么要用栈呢？"></a>为什么要用栈呢？</h2><p>其实栈，简化了程序设计的问题，划分的了不同关注层次，使思考范围聚集于问题核心</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.8 栈的应用</title>
      <link href="/2019/10/13/4.8-zhan-de-ying-yong/"/>
      <url>/2019/10/13/4.8-zhan-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="4-8-栈的应用"><a href="#4-8-栈的应用" class="headerlink" title="4.8 栈的应用"></a>4.8 栈的应用</h1><blockquote><p>栈的应用有哪些呢？1.是递归 2.是后缀表示法</p></blockquote><h2 id="1-为什么栈和递归有关系呢？"><a href="#1-为什么栈和递归有关系呢？" class="headerlink" title="1.为什么栈和递归有关系呢？"></a>1.为什么栈和递归有关系呢？</h2><p>其实递归是存储某些数据，后面又以存储的逆序恢复这些数据，显然符合栈的数据结构</p><h2 id="2-后缀表示法定义"><a href="#2-后缀表示法定义" class="headerlink" title="2.后缀表示法定义"></a>2.后缀表示法定义</h2><h3 id="1-什么是后缀表示法"><a href="#1-什么是后缀表示法" class="headerlink" title="1.什么是后缀表示法"></a>1.什么是后缀表示法</h3><p>其实就是不要括号的表示法，逆波兰法，</p><h3 id="2-后缀表达式的计算是怎样的呢"><a href="#2-后缀表达式的计算是怎样的呢" class="headerlink" title="2.后缀表达式的计算是怎样的呢"></a>2.后缀表达式的计算是怎样的呢</h3><p>从左到右遍历，遇到数字就出栈，遇到符合，就将栈顶两个数字出栈进行运算，运算结果进栈</p><h3 id="3-中缀表达式怎么转后缀表达式呢"><a href="#3-中缀表达式怎么转后缀表达式呢" class="headerlink" title="3.中缀表达式怎么转后缀表达式呢"></a>3.中缀表达式怎么转后缀表达式呢</h3><p>如果是数字，直接出栈，如果是符号的话，和栈顶符号进行比较，如果优先级大于栈顶符号的话，就入栈，如果优先级小于栈顶符号或者是右括号的话，就依次出栈（右括号的话，出栈到左括号）</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.6 栈的链式存储结构及实现</title>
      <link href="/2019/10/13/4.6-zhan-de-lian-shi-cun-chu-jie-gou-ji-shi-xian/"/>
      <url>/2019/10/13/4.6-zhan-de-lian-shi-cun-chu-jie-gou-ji-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="4-6-栈的链式存储结构及实现"><a href="#4-6-栈的链式存储结构及实现" class="headerlink" title="4.6 栈的链式存储结构及实现"></a>4.6 栈的链式存储结构及实现</h1><h2 id="1-什么是链栈呢"><a href="#1-什么是链栈呢" class="headerlink" title="1.什么是链栈呢"></a>1.什么是链栈呢</h2><p>其实很像链表，不过那个栈顶指针和头指针基本一样，所以对于链栈来说，不需要头指针，但是他其实方式是和链表的头插法是一样的，就是先来的在链表尾部，最后来的在链表头</p><h2 id="2-链栈的结构代码是怎样？"><a href="#2-链栈的结构代码是怎样？" class="headerlink" title="2.链栈的结构代码是怎样？"></a>2.链栈的结构代码是怎样？</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> StackNode<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这个是链表</span>    SElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> StackNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>StackNode<span class="token punctuation">,</span><span class="token operator">*</span>LinkStackPtr<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> LinkStack<span class="token punctuation">{</span>    LinkStackPtr top<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈顶指针</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span>LinkStack<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.5 两栈共享空间</title>
      <link href="/2019/10/13/4.5-liang-zhan-gong-xiang-kong-jian/"/>
      <url>/2019/10/13/4.5-liang-zhan-gong-xiang-kong-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="4-5-两栈共享空间"><a href="#4-5-两栈共享空间" class="headerlink" title="4.5 两栈共享空间"></a>4.5 两栈共享空间</h1><h2 id="1-栈的缺点"><a href="#1-栈的缺点" class="headerlink" title="1.栈的缺点"></a>1.栈的缺点</h2><p>就是必须事先确定存储空间的大小，</p><h2 id="2-解决上面的缺点怎么办？"><a href="#2-解决上面的缺点怎么办？" class="headerlink" title="2.解决上面的缺点怎么办？"></a>2.解决上面的缺点怎么办？</h2><p>用两栈共享空间来解决，就是用1个数组来存储两个栈，要求是2个栈的类型相同</p><p>一个栈底是数组的开端，另一个栈的栈底是数组的结尾，</p><h2 id="3-什么时候会满呢"><a href="#3-什么时候会满呢" class="headerlink" title="3.什么时候会满呢"></a>3.什么时候会满呢</h2><p>就是两个栈顶见面的时候，就是S-&gt;top+1==S-&gt;top2</p><h2 id="4-两栈共享空间的结构是什么呢？"><a href="#4-两栈共享空间的结构是什么呢？" class="headerlink" title="4.两栈共享空间的结构是什么呢？"></a>4.两栈共享空间的结构是什么呢？</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>Max<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈顶1</span>    <span class="token keyword">int</span> top2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栈顶2 </span><span class="token punctuation">}</span></code></pre><p>插入方法</p><pre class=" language-c"><code class="language-c">Status <span class="token function">Push</span><span class="token punctuation">(</span>SqDoubleStack <span class="token operator">*</span>S<span class="token punctuation">,</span>SElemType e<span class="token punctuation">,</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top1<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>S<span class="token operator">-></span>top2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//栈满</span><span class="token keyword">if</span><span class="token punctuation">(</span>stackNumber<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//栈1中有元素进栈</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top1<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//空栈，溢出</span>    <span class="token punctuation">}</span>    S<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token operator">++</span>S<span class="token operator">-></span>top1<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//栈2中有元素进栈</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>top2<span class="token operator">==</span>MAX<span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空栈</span>       S<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token operator">--</span>S<span class="token operator">-></span>top2<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><p>出栈是</p><p>*e=S-&gt;data[S-&gt;top2++];</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.2 栈的定义</title>
      <link href="/2019/10/13/4.2-zhan-de-ding-yi/"/>
      <url>/2019/10/13/4.2-zhan-de-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="4-2-栈的定义"><a href="#4-2-栈的定义" class="headerlink" title="4.2 栈的定义"></a>4.2 栈的定义</h1><h2 id="1-什么是栈呢"><a href="#1-什么是栈呢" class="headerlink" title="1.什么是栈呢"></a>1.什么是栈呢</h2><p>栈是限定只能在表尾进行操作的线性表</p><p>后进先出</p><h2 id="2-出栈的顺序只有1种吗？"><a href="#2-出栈的顺序只有1种吗？" class="headerlink" title="2.出栈的顺序只有1种吗？"></a>2.出栈的顺序只有1种吗？</h2><p>不是，有很多</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章 栈和队列 目录</title>
      <link href="/2019/10/13/di-4-zhang-zhan-he-dui-lie/"/>
      <url>/2019/10/13/di-4-zhang-zhan-he-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="第4章-栈和队列"><a href="#第4章-栈和队列" class="headerlink" title="第4章 栈和队列"></a>第4章 栈和队列</h1><h2 id="1-栈的定义"><a href="#1-栈的定义" class="headerlink" title="1.栈的定义"></a>1.栈的定义</h2><h2 id="2-抽象数据类型"><a href="#2-抽象数据类型" class="headerlink" title="2.抽象数据类型"></a>2.抽象数据类型</h2><h2 id="3-顺序存储结构及其实现"><a href="#3-顺序存储结构及其实现" class="headerlink" title="3.顺序存储结构及其实现"></a>3.顺序存储结构及其实现</h2><h2 id="4-两栈共享空间"><a href="#4-两栈共享空间" class="headerlink" title="4.两栈共享空间"></a>4.两栈共享空间</h2><h2 id="5-栈的链式存储结构及实现"><a href="#5-栈的链式存储结构及实现" class="headerlink" title="5.栈的链式存储结构及实现"></a>5.栈的链式存储结构及实现</h2><h2 id="6-栈的作用"><a href="#6-栈的作用" class="headerlink" title="6.栈的作用"></a>6.栈的作用</h2><h2 id="7-递归"><a href="#7-递归" class="headerlink" title="7.递归"></a>7.递归</h2><h2 id="8-四则运算表达式求值"><a href="#8-四则运算表达式求值" class="headerlink" title="8.四则运算表达式求值"></a>8.四则运算表达式求值</h2><h2 id="9-队列定义"><a href="#9-队列定义" class="headerlink" title="9.队列定义"></a>9.队列定义</h2><h2 id="10-队列抽象数据类型"><a href="#10-队列抽象数据类型" class="headerlink" title="10.队列抽象数据类型"></a>10.队列抽象数据类型</h2><h2 id="11-循环队列"><a href="#11-循环队列" class="headerlink" title="11.循环队列"></a>11.循环队列</h2><h2 id="12-链式存储结构及其实现"><a href="#12-链式存储结构及其实现" class="headerlink" title="12.链式存储结构及其实现"></a>12.链式存储结构及其实现</h2>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 第4章 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.7 KMP模式匹配算法</title>
      <link href="/2019/10/13/5.7-kmp-mo-shi-pi-pei-suan-fa/"/>
      <url>/2019/10/13/5.7-kmp-mo-shi-pi-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="5-7-KMP模式匹配算法"><a href="#5-7-KMP模式匹配算法" class="headerlink" title="5.7 KMP模式匹配算法"></a>5.7 KMP模式匹配算法</h1><blockquote><p>什么是KMP模式匹配算法?</p><p>其实就是1个模式匹配算法，<strong>大大避免重复遍历</strong>，简称<strong>KMP算法</strong></p></blockquote><h2 id="5-7-1-算法原理"><a href="#5-7-1-算法原理" class="headerlink" title="5.7.1 算法原理"></a>5.7.1 算法原理</h2><p>1.我们先假设一种情况，这种情况是子串<strong>没有重复</strong>的，主串<strong>S=”abcdefgab”</strong>，我们要匹配的<strong>T=”abcdex”</strong>，那么如果用前面的朴素算法的话，如图所示</p><p><img src="https://i.loli.net/2019/10/13/O85ylgkjHvbaCRV.jpg" alt></p><p>可仔细观察发现，子串T来说，”abcdex”首字母”a”与后面的串”bcdex”中任意一个字符都不相等，就是子串T没有重复的，</p><p>那么对于图5-7-1的(1)来说，前五位字符分别相等，意味着子串T的首字符”a”不可能与S串的第2位到第5位的字符相等。在图5-7-1中，(2)(3)(4)(5)的判断都是多余。我们直接跳到6这一步</p><p>2.我们再假设第2种情况，这种情况是子串<strong>有重复</strong>的，<strong>S=”abcabcabc”</strong>，<strong>T=”abcabx”</strong>,如图</p><p><img src="https://i.loli.net/2019/10/13/LDkKFNjgnmT6Gox.jpg" alt></p><p>由上面的经验，我们发现2，3步（<strong>重复出现之前</strong>的步骤）都是多余的，又因为第四位的”a”和第五位的”b”已经与主串S中的相应位置比较过了，是相等的，因此可以断定，T的首字符”a”、第二位的字符”b”与S的第四位字符和第五位字符也不需要比较了，肯定也是相等的，所以(4)(5)这两个比较得出字符相等的步骤也可以省略。</p><p>简化后的图：</p><p><img src="https://i.loli.net/2019/10/13/xeMEwg8vkf5GOVb.jpg" alt></p><p>3.你明白什么是<strong>避免不必要的回溯</strong>了吗？</p><p>上面的例子很好说明了<strong>避免不必要的回溯</strong>，但是我们思考下，主串的i（当前位置下标）会不会回头走的呢？</p><p>很显然，不会，在第一个例子中，i一开始是1，一轮循环后，就到了6，类似于：“好马不吃回头草”</p><p>子串的位标j会吃回头草吗？</p><p><strong>通过观察也可发现，我们屡屡提到了T串的首字符与自身后面字符的比较，T串如果自身重复，发现如果有相等字符，j值的变化就会不相同</strong>，也就是说，这个<strong>j值的变化</strong>与主串其实没什么关系，关键就<strong>取决于T串的结构中是否有重复</strong>（<strong>相似度</strong>）的问题。</p><p>我们把T串各个位置的j值的变化，定义为一个数组next，那么next的长度就是T串的长度（因为next是T串各个元素位置的变化）,<strong>next的意思就是T串，j位置每次回溯的位置</strong>（<strong>回头吃草的位置</strong>），这里我们暂时不深究next数组中每个元素的值，我们可以定义一个函数：</p><h2 id="5-7-2-next数组推导"><a href="#5-7-2-next数组推导" class="headerlink" title="5.7.2 next数组推导"></a>5.7.2 next数组推导</h2><h3 id="先看例子："><a href="#先看例子：" class="headerlink" title="先看例子："></a>先看例子：</h3><h4 id="1-T-”abcdex”"><a href="#1-T-”abcdex”" class="headerlink" title="1.T=”abcdex”"></a>1.T=”abcdex”</h4><p>注意：我们观察的时候，看到j位置前面的字符就行了，比如说j=2，是看j=2之前的字符”a“</p><p><img src="https://i.loli.net/2019/10/13/pUoN2gY5zWO8chl.jpg" alt></p><ul><li>1)当j=1时，next[1]=0;</li><li>2)当j=2时，j由1到j-1（<strong>j的前一个字符</strong>）就只有字符”a”，属于其他情况next[2]=1;</li><li>3)当j=3时，j由1到j-1串是”ab”，显然”a”与”b”<strong>不相等</strong>，属其他情况，next[3]=<strong>1;</strong></li><li>4)以后同理，所以最终此T串的next[j]为011111。</li></ul><h3 id="2-T-”abcabx”"><a href="#2-T-”abcabx”" class="headerlink" title="2.T=”abcabx”"></a>2.T=”abcabx”</h3><p>注意：当我们看重复的时候，是看<strong>顺序重复</strong>，不是回文重复，例如：”abcab”（顺序重复）,这样重复的元素个数是2，”abcba”（回文重复）这样重复的元素只有:”a”</p><p>当<strong>出现重复</strong>的时候，<strong>next[j]的值是重复的元素个数+1</strong></p><p><img src="https://i.loli.net/2019/10/13/yWwtDC4xiLPAufM.jpg" alt></p><ul><li>1)当j=1时，next[1]=0;</li><li>2)当j=2时，同上例说明，next[2]=1;</li><li>3)当j=3时，同上，next[3]=1;</li><li>4)当j=4时，同上，next[4]=1;</li><li>5)当j=5时，此时j由1到j-1的串是”abca”，前缀字符”a”与后缀字符”a”相等，因此可推算出k值为2，因此next[5]=2;</li><li>6)当j=6时，j由1到j-1的串是”abcab”，由于前缀字符”ab”与后缀”ab”相等，所以next[6]=3。</li></ul><h3 id="3-T-”ababaaaba”"><a href="#3-T-”ababaaaba”" class="headerlink" title="3.T=”ababaaaba”"></a>3.T=”ababaaaba”</h3><p>注意：重复要看在末尾位置的重复，中间位置没有接到末尾的重复不算，比如说，T=”ababaaaba”中，如果看，第1到第3位置的aba和第3到第5位置的aba重复，这样就是错的，因为第3到第5位置的aba不在末尾</p><p><img src="https://i.loli.net/2019/10/13/ZNVKAWQzh7S3cPO.jpg" alt></p><ul><li>1)当j=1时，next[1]=0;</li><li>2)当j=2时，同上next[2]=1;</li><li>3)当j=3时，同上next[3]=1;</li><li>4)当j=4时，j由1到j-1的串是”aba”，前缀字符”a”与后缀字符”a”相等，next[4]=2;</li><li>5)当j=5时，j由1到j-1的串是”abab”，由于前缀字符”ab”与后缀”ab”相等，所以next[5]=3;</li><li>6)当j=6时，j由1到j-1的串的”ababa”，由于前缀字符”aba”与后缀”aba”相等，所以next[6]=4;</li><li>7)当j=7时，j由1到j-1的串是”ababaa”，由于前缀字符”ab”与后缀”aa”并不相等，只有”a”相等，所以next[7]=2;</li><li>8)当j=8时，j由1到j-1的串是”ababaaa”，只有”a”相等，所以next[8]=2;</li><li>9)当j=9时，j由1到j-1的串是”ababaaab”，由于前缀字符”ab”与后缀”ab”相等，所以next[9]=3</li></ul><h3 id="4-T-”aaaaaaaab”"><a href="#4-T-”aaaaaaaab”" class="headerlink" title="4.T=”aaaaaaaab”"></a>4.T=”aaaaaaaab”</h3><p>注意：比如看,aaaa的时候，重复的元素个数是多少呢？</p><p>有的人说是4，你看它全是重复的，这样其实是不对的</p><p>正确答案是3，有规定，<strong>重复元素不能是整个字符串的元素</strong>，所以这里只是3(“aaa”)</p><p><img src="https://i.loli.net/2019/10/13/d4yZwgDnW6vqKPe.jpg" alt></p><ul><li>1)当j=1时，next[1]=0;</li><li>2)当j=2时，同上next[2]=1;</li><li>3)当j=3时，j由1到j-1的串是”aa”，前缀字符”a”与后缀字符”a”相等，next[3]=2;</li><li>4)当j=4时，j由1到j-1的串是”aaa”，由于前缀字符”aa”与后缀”aa”相等，所以next[4]=3;</li><li>5)……</li><li>6)当j=9时，j由1到j-1的串是”aaaaaaaa”，由于前缀字符”aaaaaaa”与后缀”aaaaaaa”相等，所以next[9]=8。</li></ul><h2 id="5-7-3-算法实现"><a href="#5-7-3-算法实现" class="headerlink" title="5.7.3 算法实现"></a>5.7.3 算法实现</h2><blockquote><p>看了这么多，其实这个算法最核心的部分就是next数组了，也就是每次j要回溯的位置（回头吃草的位置）</p></blockquote><h3 id="1-得到next数组的代码"><a href="#1-得到next数组的代码" class="headerlink" title="1.得到next数组的代码"></a>1.得到next数组的代码</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 通过计算返回子串T的next数组。 */</span><span class="token keyword">void</span> <span class="token function">get_next</span><span class="token punctuation">(</span>String T<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>      i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 此处T[0]表示串T的长度 */</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* T[i]表示后缀的单个字符，T[j]表示前缀的单个字符 */</span>        <span class="token punctuation">{</span>              <span class="token operator">++</span>i<span class="token punctuation">;</span>              <span class="token operator">++</span>j<span class="token punctuation">;</span>              next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span>             j<span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 若字符不相同，则j值回溯 */</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主代码：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 返回子串T在主串S中第pos个字符之后的位置。若不存在，则函数返回值为0。 */</span><span class="token comment" spellcheck="true">/*  T非空，1≤pos≤StrLength(S)。 */</span><span class="token keyword">int</span> <span class="token function">Index_KMP</span><span class="token punctuation">(</span>String S<span class="token punctuation">,</span> String T<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* i用于主串S中当前位置下标值，若pos不为1，则从pos位置开始匹配 */</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* j用于子串T中当前位置下标值 */</span>    <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 定义一next数组 */</span>    <span class="token function">get_next</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 对串T作分析，得到next数组 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 若i小于S的长度并且j小于T的长度时，循环继续 */</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* 两字母相等则继续，与朴素算法增加了j=0判断 */</span>          <span class="token punctuation">{</span>             <span class="token operator">++</span>i<span class="token punctuation">;</span>             <span class="token operator">++</span>j<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span>             <span class="token comment" spellcheck="true">/* 指针后退重新开始匹配 */</span>               j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* j退回合适的位置，i值不变 */</span>        <span class="token comment" spellcheck="true">/**前面的朴素的是：        i=i-j+2; //返回i下一个位置        j=1; //j回到头               **/</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> i<span class="token operator">-</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实相对于朴素算法来说，就是增加了得到next数组，和在两字母相等的时候的判断增加j==0的条件，和回头的时候，只是变化j为next[j]，而i不变</p><h2 id="5-7-4-KMP算法改进"><a href="#5-7-4-KMP算法改进" class="headerlink" title="5.7.4 KMP算法改进"></a>5.7.4 KMP算法改进</h2><h3 id="1-KMP算法还存在什么缺陷呢？"><a href="#1-KMP算法还存在什么缺陷呢？" class="headerlink" title="1.KMP算法还存在什么缺陷呢？"></a>1.KMP算法还存在什么缺陷呢？</h3><p>主要是当字符串出现重复的字符的时候，会出现重复回溯的情况</p><p>例子：</p><p>如果我们的主串S=”aaaabcde”，子串T=”aaaax”，其next数组值分别为012345，</p><p><img src="https://i.loli.net/2019/10/13/dTDk63mKNGz1wUf.jpg" alt></p><p>在开始时，当 i=5、j=5时，我们发现”b”与”a”不相等，如图5-7-6的①，因此j=next[5]=4，如图中的②，此时”b”与第4位置的”a”依然不等，j=next[4}=3。如图中的③，接着依次是④⑤，直到j=next[i]=0时，根据算法，此时i++、j++，得到i=6、j=l如图中的⑥。</p><p>我们发现，当中的②③④⑤步骤，其实是多余的判断</p><p><strong>怎么解决呢？</strong></p><p>由于T串的第二、三、四、五位置的字符<strong>都与首位的 “a” 相等</strong>，那么可以用首位 next[l]的值去<strong>取代与它相等的字符</strong>后续next[j]的值，这是个很好的办法。因此我们对求next函数进行了改良，改良后的叫nextval。</p><p>这就是nextval的由来了</p><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="5-7-5-nextval数组值推导"><a href="#5-7-5-nextval数组值推导" class="headerlink" title="5.7.5 nextval数组值推导"></a>5.7.5 nextval数组值推导</h2><blockquote><p>举例子来说明比较简单</p></blockquote><h3 id="1-T-”ababaaaba”"><a href="#1-T-”ababaaaba”" class="headerlink" title="1. T=”ababaaaba”"></a>1. T=”ababaaaba”</h3><p><img src="https://s2.ax1x.com/2019/10/13/uv6ddH.png" alt="uv6ddH.png"></p><ul><li>1)当j=1时。nextval[1]=0;</li><li>2)当j=2时，因第二位字符”b”的next值是1，而第一位就是”a”，他们不相等，所以nextval[2]=next[2]=1，维持原值。</li><li>3)当j=3时，因为第三位字符”a”的next值为1，所以与第一位的”a”比较得知它们相等，所以nextval[3]=nextval[1]=0；如图5-7-7所示。</li></ul><p><a href="https://imgchr.com/i/uvclnS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/13/uvclnS.png" alt="uvclnS.png"></a></p><ul><li><p>4)当j=4时，第四位的字符”b”，next值为2，所以与第二位的”b”相比较得到结果是相等，因此nextval[4]=nextval[2]=1；如图5-7-8所示。</p></li><li><p>5)当j=5时，next值为3，第五个字符”a”与第三个字符”a”相等，因此nextval[5]=nextval[3]=0;</p></li><li><p>6)当j=6时，next值为4，第六个字符”a”与第四个字符”b”不相等，因此nextval[6]=4;</p></li><li><p>7)当j=7时，next值为2，第七个字符”a”与第二个字符”b”不相等，因此nextval[7]=2;</p></li><li><p>8)当j=8时，next值为2，第八个字符”b”与第二个字符”b”相等，因此nextval[8]=nextval[2]=1;</p></li><li><p>9)当j=9时，next值为3，第九个字符”a”与第三个字符”a”相等，因此nextval[9]=nextval[3]=1。</p></li></ul><h3 id="2-T-”aaaaaaaab”（如表5-7-6）"><a href="#2-T-”aaaaaaaab”（如表5-7-6）" class="headerlink" title="2.T=”aaaaaaaab”（如表5-7-6）"></a>2.T=”aaaaaaaab”（如表5-7-6）</h3><p><img src="https://s2.ax1x.com/2019/10/13/uvg4x0.png" alt="uvg4x0.png"></p><ul><li>1)当j=1时，nextval[1]=0;</li><li>2)当j=2时，next值为1，第二个字符与第一个字符相等，所以nextval[2]=nextval[1]=0;</li><li>3)同样的道理，其后都为0….;</li><li>4)当j=9时，next值为8，第九个字符”b”与第八个字符”a”不相等，所以nextval[9]=8。</li></ul><h3 id="3-总结改进的kmp算法："><a href="#3-总结改进的kmp算法：" class="headerlink" title="3.总结改进的kmp算法："></a>3.总结改进的kmp算法：</h3><p>其实思路：</p><p>就是比较j位置的字符和next[j]位置的字符是否相等，如果相等的话，就nextval [ j ] = nextval [ next [ j ] ];他们的nextval值也相等</p><h3 id="4-nextval-算法揭秘"><a href="#4-nextval-算法揭秘" class="headerlink" title="4.nextval 算法揭秘"></a>4.nextval 算法揭秘</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 求模式串T的next函数修正值并存入数组nextval */</span><span class="token keyword">void</span> <span class="token function">get_nextval</span><span class="token punctuation">(</span>String T<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>      i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      nextval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 此处T[0]表示串T的长度 */</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* T[i]表示后缀的单个字符，T[j]表示前缀的单个字符 */</span>        <span class="token punctuation">{</span>              <span class="token operator">++</span>i<span class="token punctuation">;</span>              <span class="token operator">++</span>j<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">/* 若当前字符与前缀字符不同*/</span>                nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 则当前的j为nextval在i位置的值*/</span>               <span class="token keyword">else</span>                 nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 如果与前缀字符相同，则将前缀字符的 */</span>                                            <span class="token comment" spellcheck="true">/* nextval值赋值给nextval在i位置的值 */</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span>             j<span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 若字符不相同，则j值回溯 */</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用的时候，只需要将”get_next(T,next)”;改为”get_nextval(T,next);”即可</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.6 朴素的模式匹配算法</title>
      <link href="/2019/10/13/5.6-po-su-de-mo-shi-pi-pei-suan-fa/"/>
      <url>/2019/10/13/5.6-po-su-de-mo-shi-pi-pei-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="5-6-朴素的模式匹配算法"><a href="#5-6-朴素的模式匹配算法" class="headerlink" title="5.6 朴素的模式匹配算法"></a>5.6 朴素的模式匹配算法</h1><blockquote><p>这个算法有什么用呢？</p><p>比如你想查找字符串的位置，就需要用到这个算法</p></blockquote><h2 id="1-什么是朴素的模式匹配算法"><a href="#1-什么是朴素的模式匹配算法" class="headerlink" title="1.什么是朴素的模式匹配算法"></a>1.什么是朴素的模式匹配算法</h2><p>简单来说<strong>就是对主串的每一个字符作为子串开头，与要匹配的字符串进行匹配。对主串做大循环，每个字符开头做T的长度的小循环，直到匹配成功或全部遍历完成为止</strong>。</p><p>还是用图来说明比较简单：</p><p>现在，从下面的主串S=”goodgoogle”中，找到T=”google”这个子串的位置。我们通常需要下面的步骤：</p><p>注意，其中竖直连线表示相等，闪电状弯折连线表示不等</p><ol><li><p>主串S第一位开始，S与T前三个字母都匹配成功，但S第四个字母是d而T的是g。第一位匹配失败。</p><p><img src="https://i.loli.net/2019/10/13/3KMzpI6ctjwXESo.jpg" alt></p></li><li><p>主串S第二位开始，主串S首字母是o，要匹配的T首字母是g，匹配失败</p><p><img src="https://i.loli.net/2019/10/13/GrlwjKY8SkNMFTi.jpg" alt></p></li><li><p>主串S第三位开始，主串S首字母是o，要匹配的T首字母是g，匹配失败，</p><p><img src="https://i.loli.net/2019/10/13/28VIfAWbUvjnHXz.jpg" alt></p></li><li><p>主串S第四位开始，主串S首字母是d，要匹配的T首字母是g，匹配失败</p><p><img src="https://i.loli.net/2019/10/13/FrLMTcJnPZap2j7.jpg" alt></p></li><li><p>主串S第五位开始，S与T，6个字母全匹配，匹配成功</p><p><img src="https://i.loli.net/2019/10/13/1kKD5MP6BAeGTub.jpg" alt></p></li></ol><h2 id="2-算法是怎么写的？"><a href="#2-算法是怎么写的？" class="headerlink" title="2.算法是怎么写的？"></a>2.算法是怎么写的？</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 返回子串T在主串S中第pos个字符之后的起始位置。若不存在,则函数返回值为0。 */</span><span class="token comment" spellcheck="true">/* 其中,T非空,1≤pos≤StrLength(S)。 */</span><span class="token keyword">int</span> <span class="token function">Index</span><span class="token punctuation">(</span>String S<span class="token punctuation">,</span> String T<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* i用于主串S中当前位置下标值，若pos不为1，则从pos位置开始匹配 */</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* j用于子串T中当前位置下标值 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 若i小于S的长度并且j小于T的长度时，循环继续 */</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* 两字母相等则继续 */</span>          <span class="token punctuation">{</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>             <span class="token operator">++</span>j<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span>                 <span class="token comment" spellcheck="true">/* 指针后退重新开始匹配 */</span>          <span class="token punctuation">{</span>               i <span class="token operator">=</span> i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* i退回到上次匹配首位的下一位 */</span>             j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/* j退回到子串T的首位 */</span>          <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//通过主串的位置-子串的长度，得到子串在主串中的起始位置</span>        <span class="token keyword">return</span> i<span class="token operator">-</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-有什么缺点呢？"><a href="#3-有什么缺点呢？" class="headerlink" title="3.有什么缺点呢？"></a>3.有什么缺点呢？</h2><p>就是每次不成功的匹配都发生在子串的最后一个字符的话，这样就会造成很大的性能浪费</p><p>主串S=“00000000000000000001”，子串是“0001”</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.5 串的存储结构</title>
      <link href="/2019/10/13/5.5-chuan-de-cun-chu-jie-gou/"/>
      <url>/2019/10/13/5.5-chuan-de-cun-chu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="5-5-串的存储结构"><a href="#5-5-串的存储结构" class="headerlink" title="5.5 串的存储结构"></a>5.5 串的存储结构</h1><h2 id="5-5-1-顺序存储"><a href="#5-5-1-顺序存储" class="headerlink" title="5.5.1 顺序存储"></a>5.5.1 顺序存储</h2><h3 id="1-串的顺序存储与普通的顺序存储（数组）有什么区别？"><a href="#1-串的顺序存储与普通的顺序存储（数组）有什么区别？" class="headerlink" title="1.串的顺序存储与普通的顺序存储（数组）有什么区别？"></a>1.串的顺序存储与普通的顺序存储（数组）有什么区别？</h3><p>由于串需要一些特殊的操作：比如说replace，有可能新的长度超过了原来的长度，所以他的存储空间可以由程序执行过程中动态分配而得到，不是一直固定的。</p><h2 id="5-5-2-串的链式存储"><a href="#5-5-2-串的链式存储" class="headerlink" title="5.5.2 串的链式存储"></a>5.5.2 串的链式存储</h2><h3 id="1-串的链式存储与链表有什么不同？"><a href="#1-串的链式存储与链表有什么不同？" class="headerlink" title="1.串的链式存储与链表有什么不同？"></a>1.串的链式存储与链表有什么不同？</h3><p>串的链式存储，一个结点可以存放1个字符，或者多个字符，如果最后一个结点没有放满的话，就用＃或者其他非串值字符补全，</p><h3 id="2-为啥这样呢？"><a href="#2-为啥这样呢？" class="headerlink" title="2.为啥这样呢？"></a>2.为啥这样呢？</h3><p>节省空间</p><h3 id="3-怎么决定一个结点放多少个字符呢？"><a href="#3-怎么决定一个结点放多少个字符呢？" class="headerlink" title="3.怎么决定一个结点放多少个字符呢？"></a>3.怎么决定一个结点放多少个字符呢？</h3><p>根据实际情况决定</p><h3 id="4-它和顺序存储哪个比较优秀呢？"><a href="#4-它和顺序存储哪个比较优秀呢？" class="headerlink" title="4.它和顺序存储哪个比较优秀呢？"></a>4.它和顺序存储哪个比较优秀呢？</h3><p>链式存储的优点：连接串和串的操作方便</p><p>缺点：灵活性不及顺序存储，性能不及顺序存储</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.10 队列的定义</title>
      <link href="/2019/10/13/4.10-dui-lie-de-ding-yi/"/>
      <url>/2019/10/13/4.10-dui-lie-de-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="4-10-队列的定义"><a href="#4-10-队列的定义" class="headerlink" title="4.10 队列的定义"></a>4.10 队列的定义</h1><h2 id="1-什么是队列呢"><a href="#1-什么是队列呢" class="headerlink" title="1.什么是队列呢"></a>1.什么是队列呢</h2><p>队列是只允许在一端进行插入的操作，在另一端删除的线性表</p><h2 id="2-什么是队头，什么是队尾呢"><a href="#2-什么是队头，什么是队尾呢" class="headerlink" title="2.什么是队头，什么是队尾呢"></a>2.什么是队头，什么是队尾呢</h2><p>队尾就是允许插入的一端，队头就是允许删除的一端，类似于排队，排队要从后面排起来</p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.3 串的比较</title>
      <link href="/2019/10/13/5.3-chuan-de-bi-jiao/"/>
      <url>/2019/10/13/5.3-chuan-de-bi-jiao/</url>
      
        <content type="html"><![CDATA[<h1 id="5-3-串的比较"><a href="#5-3-串的比较" class="headerlink" title="5.3 串的比较"></a>5.3 串的比较</h1><h2 id="1-怎么进行串的比较呢？"><a href="#1-怎么进行串的比较呢？" class="headerlink" title="1.怎么进行串的比较呢？"></a>1.怎么进行串的比较呢？</h2><p>举例子：</p><ol><li><p>“hap”&lt;”hapa”，因为“”hapa”前面3个字母已经包含了”hap”,可以简单理解为：儿子的年龄肯定没有父亲的大</p></li><li><p>”hpaaa“&lt;”hpb”,因为前2个字母均相同，但是”hpb“第3个字母是b,”hpaaa“第3个字母是a，b&gt;a，所以”hpb”&gt;”hpaaa”，</p><p>可以简单理解为：不是父子关系的，看父亲（前面的字母），拼爹，只要你父亲厉害，无论你后面有多大努力（多长），都是白费（比不过）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.3 冒泡排序</title>
      <link href="/2019/10/11/9.3-mou-pao-pai-xu/"/>
      <url>/2019/10/11/9.3-mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="9-3-冒泡排序"><a href="#9-3-冒泡排序" class="headerlink" title="9.3 冒泡排序"></a>9.3 冒泡排序</h1><h2 id="9-3-1-什么是冒泡排序，最简单的冒泡排序"><a href="#9-3-1-什么是冒泡排序，最简单的冒泡排序" class="headerlink" title="9.3.1.什么是冒泡排序，最简单的冒泡排序"></a>9.3.1.什么是冒泡排序，最简单的冒泡排序</h2><p>其实就是两两比较相邻记录的关键字，如果反序就交换，直到没有反序</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L作交换排序（冒泡排序初级版） */</span><span class="token keyword">void</span> <span class="token function">BubbleSort0</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token function">swap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 交换L->r[i]与L->r[j]的值 */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个算法其实不是真正的冒泡，他是让每个关键字都和后面的每个比较，而且它只对排序的关键字有效，对未排序的没有帮助</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="9-3-2-冒泡排序算法"><a href="#9-3-2-冒泡排序算法" class="headerlink" title="9.3.2 冒泡排序算法"></a>9.3.2 冒泡排序算法</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L作冒泡排序 */</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 注意j是从后往前循环 */</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 若前者大于后者（注意这里与上一算法的差异）*/</span>            <span class="token punctuation">{</span>                 <span class="token function">swap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 交换L->r[j]与L->r[j+1]的值 */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它对排序的关键字有效，对未排序的也有帮助</p><h2 id="9-3-3-冒泡排序优化"><a href="#9-3-3-冒泡排序优化" class="headerlink" title="9.3.3 冒泡排序优化"></a>9.3.3 冒泡排序优化</h2><p>如果是已经有序了的话，就不用进行后面的循环继续，增加1个flag就行</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 对顺序表L作改进冒泡算法 */</span><span class="token keyword">void</span> <span class="token function">BubbleSort2</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    Status flag<span class="token operator">=</span>TRUE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* flag用来作为标记 */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token operator">-></span>length <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 若flag为true说明有过数据交换，否则停止循环 */</span>    <span class="token punctuation">{</span>        flag<span class="token operator">=</span>FALSE<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 初始为False */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>L<span class="token operator">-></span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token function">swap</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 交换L->r[j]与L->r[j+1]的值 */</span>                 flag<span class="token operator">=</span>TRUE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 如果有数据交换，则flag为true */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="9-3-4-冒泡排序复杂度是多少"><a href="#9-3-4-冒泡排序复杂度是多少" class="headerlink" title="9.3.4 冒泡排序复杂度是多少"></a>9.3.4 冒泡排序复杂度是多少</h2><p>其实就是O(n2)</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.2 排序的基本概念和分类</title>
      <link href="/2019/10/11/9.2-pai-xu-de-ji-ben-gai-nian-he-fen-lei/"/>
      <url>/2019/10/11/9.2-pai-xu-de-ji-ben-gai-nian-he-fen-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="9-2-排序的基本概念和分类"><a href="#9-2-排序的基本概念和分类" class="headerlink" title="9.2 排序的基本概念和分类"></a>9.2 排序的基本概念和分类</h1><h2 id="9-2-1-排序的稳定性怎么区分"><a href="#9-2-1-排序的稳定性怎么区分" class="headerlink" title="9.2.1 排序的稳定性怎么区分"></a>9.2.1 排序的稳定性怎么区分</h2><p>同分的时候，前后不变是稳定的，反之是不稳定的</p><h2 id="9-2-2-内排序和外排序"><a href="#9-2-2-内排序和外排序" class="headerlink" title="9.2.2 内排序和外排序"></a>9.2.2 内排序和外排序</h2><p>什么是内排序呢</p><p>其实就是所有记录都是放在内存中</p><p>什么是外排序呢</p><p>其实就是不能同时放在内存中，必须在内外存中多次交换数据</p>]]></content>
      
      
      <categories>
          
          <category> 大话数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话数据结构 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
